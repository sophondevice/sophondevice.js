import { Vector3, Vector4, Matrix4x4 } from './vector';
import { ClipState } from './clip_test';
import { Plane } from './plane';
import { Frustum } from './frustum';
export declare class AABB {
    constructor();
    constructor(box: AABB);
    constructor(minPoint: Vector3, maxPoint: Vector3);
    get minPoint(): Vector3;
    set minPoint(p: Vector3);
    get maxPoint(): Vector3;
    set maxPoint(p: Vector3);
    get extents(): Vector3;
    get center(): Vector3;
    get size(): Vector3;
    get diagonalLength(): number;
    computePoints(): Vector3[];
    inplaceTransform(matrix: Matrix4x4): AABB;
    beginExtend(): void;
    extend(v: Vector3 | Vector4): void;
    extend3(x: number, y: number, z: number): void;
    union(other: AABB): this;
    isValid(): boolean;
    equalsTo(other: AABB, epsl?: number): boolean;
    intersectedWithBox(other: AABB): boolean;
    containsPoint(pt: Vector3): boolean;
    containsBox(other: AABB): boolean;
    getClipStateMask(viewProjMatrix: Matrix4x4, mask: number): ClipState;
    getClipState(viewProjMatrix: Matrix4x4): ClipState;
    behindPlane(p: Plane): boolean;
    getClipStateWithFrustum(frustum: Frustum): ClipState;
    getClipStateWithFrustumMask(frustum: Frustum, mask: number): ClipState;
    static transform(bbox: AABB, matrix: Matrix4x4, result?: AABB): AABB;
}
