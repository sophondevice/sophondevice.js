{"version":3,"file":"base_types.js","sources":["../../../../libs/device/src/device/base_types.ts"],"sourcesContent":["/**\r\n * Basic types\r\n */\r\n\r\nimport { TypedArray } from '../misc';\r\n\r\nexport type WebGLContext = WebGLRenderingContext | WebGL2RenderingContext;\r\n\r\nexport enum TextureTarget {\r\n  Unknown = 0,\r\n  Texture2D = 1,\r\n  Texture3D = 2,\r\n  TextureCubemap = 3,\r\n  Texture2DArray = 4,\r\n}\r\n\r\nexport enum TextureOption {\r\n  GENERATE_MIPMAP = 1 << 0,\r\n  RENDERABLE = 1 << 1,\r\n  MAGFILTER_LINEAR = 1 << 2,\r\n  MINFILTER_LINEAR = 1 << 3,\r\n  MIPFILTER_LINEAR = 1 << 4,\r\n  REPEATABLE_U = 1 << 3,\r\n  REPEATABLE_V = 1 << 4,\r\n}\r\n\r\nexport enum CompareFunc {\r\n  Unknown = 0,\r\n  Always = 1,\r\n  LessEqual = 2,\r\n  GreaterEqual = 3,\r\n  Less = 4,\r\n  Greater = 5,\r\n  Equal = 6,\r\n  NotEqual = 7,\r\n  Never = 8\r\n}\r\n\r\nexport enum CompareMode {\r\n  None = 0,\r\n  RefToTexture = 1\r\n}\r\n\r\nexport enum TextureWrapping {\r\n  Unknown = 0,\r\n  Repeat,\r\n  MirroredRepeat,\r\n  ClampToEdge,\r\n}\r\n\r\nexport enum TextureFilter {\r\n  Unknown = 0,\r\n  None,\r\n  Nearest,\r\n  Linear,\r\n}\r\n\r\nconst RED_SHIFT = 0;\r\nconst GREEN_SHIFT = 1;\r\nconst BLUE_SHIFT = 2;\r\nconst ALPHA_SHIFT = 3;\r\nconst DEPTH_SHIFT = 4;\r\nconst STENCIL_SHIFT = 5;\r\nconst FLOAT_SHIFT = 6;\r\nconst INTEGER_SHIFT = 7;\r\nconst SIGNED_SHIFT = 8;\r\nconst SRGB_SHIFT = 9;\r\nconst BGR_SHIFT = 10;\r\nconst BLOCK_SIZE_SHIFT = 11;\r\nconst BLOCK_SIZE_MASK = 0x1f << BLOCK_SIZE_SHIFT;\r\nconst BLOCK_WIDTH_SHIFT = 16;\r\nconst BLOCK_WIDTH_MASK = 0xf << BLOCK_WIDTH_SHIFT;\r\nconst BLOCK_HEIGHT_SHIFT = 20;\r\nconst BLOCK_HEIGHT_MASK = 0xf << BLOCK_HEIGHT_SHIFT;\r\nconst COMPRESSED_FORMAT_SHIFT = 24;\r\nconst COMPRESSED_FORMAT_MASK = 0x1f << COMPRESSED_FORMAT_SHIFT;\r\n\r\nconst COMPRESSION_FORMAT_BC1 = 1 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC2 = 2 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC3 = 3 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC4 = 4 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC5 = 5 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC6 = 6 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_BC7 = 7 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ETC2_RGB8 = 8 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ETC2_RGB8_A1 = 9 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ETC2_RGBA8 = 10 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_4x4 = 11 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_5x4 = 12 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_5x5 = 13 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_6x5 = 14 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_6x6 = 15 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_8x5 = 16 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_8x6 = 17 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_8x8 = 18 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_10x5 = 19 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_10x6 = 20 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_10x8 = 21 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_10x10 = 22 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_12x10 = 23 << COMPRESSED_FORMAT_SHIFT;\r\nconst COMPRESSION_FORMAT_ASTC_12x12 = 24 << COMPRESSED_FORMAT_SHIFT;\r\n\r\n\r\nconst COMPRESSION_FORMAT_BITMASK = 0x1f << COMPRESSED_FORMAT_SHIFT;\r\nconst RED_BITMASK = 1 << RED_SHIFT;\r\nconst GREEN_BITMASK = 1 << GREEN_SHIFT;\r\nconst BLUE_BITMASK = 1 << BLUE_SHIFT;\r\nconst ALPHA_BITMASK = 1 << ALPHA_SHIFT;\r\nconst DEPTH_BITMASK = 1 << DEPTH_SHIFT;\r\nconst STENCIL_BITMASK = 1 << STENCIL_SHIFT;\r\nconst FLOAT_BITMASK = 1 << FLOAT_SHIFT;\r\nconst INTEGER_BITMASK = 1 << INTEGER_SHIFT;\r\nconst SIGNED_BITMASK = 1 << SIGNED_SHIFT;\r\nconst SRGB_BITMASK = 1 << SRGB_SHIFT;\r\nconst BGR_BITMASK = 1 << BGR_SHIFT;\r\n\r\nexport function makeTextureFormat(compression: number, r: boolean, g: boolean, b: boolean, a: boolean, depth: boolean, stencil: boolean, float: boolean, integer: boolean, signed: boolean, srgb: boolean, bgr: boolean, blockWidth: number, blockHeight: number, blockSize: number): TextureFormat {\r\n  const compressionBits = compression << COMPRESSED_FORMAT_SHIFT;\r\n  const colorBits = (r ? RED_BITMASK : 0) | (g ? GREEN_BITMASK : 0) | (b ? BLUE_BITMASK : 0) | (a ? ALPHA_BITMASK : 0);\r\n  const depthStencilBits = (depth ? DEPTH_BITMASK : 0) | (stencil ? STENCIL_BITMASK : 0);\r\n  const floatBits = float ? FLOAT_BITMASK : 0;\r\n  const integerBits = integer ? INTEGER_BITMASK : 0;\r\n  const signedBits = signed ? SIGNED_BITMASK : 0;\r\n  const srgbBits = srgb ? SRGB_BITMASK : 0;\r\n  const bgrBits = bgr ? BGR_BITMASK : 0;\r\n  const blockBits = (blockWidth << BLOCK_WIDTH_SHIFT) | (blockHeight << BLOCK_HEIGHT_SHIFT) | (blockSize << BLOCK_SIZE_SHIFT);\r\n  return compressionBits | colorBits | depthStencilBits | floatBits | integerBits | signedBits | srgbBits | bgrBits | blockBits;\r\n}\r\n\r\nexport enum TextureFormat {\r\n  Unknown = 0,\r\n  R8UNORM = makeTextureFormat(0, true, false, false, false, false, false, false, false, false, false, false, 1, 1, 1),\r\n  R8SNORM = makeTextureFormat(0, true, false, false, false, false, false, false, false, true, false, false, 1, 1, 1),\r\n  R16F = makeTextureFormat(0, true, false, false, false, false, false, true, false, true, false, false, 1, 1, 2),\r\n  R32F = makeTextureFormat(0, true, false, false, false, false, false, true, false, true, false, false, 1, 1, 4),\r\n  R8UI = makeTextureFormat(0, true, false, false, false, false, false, false, true, false, false, false, 1, 1, 1),\r\n  R8I = makeTextureFormat(0, true, false, false, false, false, false, false, true, true, false, false, 1, 1, 1),\r\n  R16UI = makeTextureFormat(0, true, false, false, false, false, false, false, true, false, false, false, 1, 1, 2),\r\n  R16I = makeTextureFormat(0, true, false, false, false, false, false, false, true, true, false, false, 1, 1, 2),\r\n  R32UI = makeTextureFormat(0, true, false, false, false, false, false, false, true, false, false, false, 1, 1, 4),\r\n  R32I = makeTextureFormat(0, true, false, false, false, false, false, false, true, true, false, false, 1, 1, 4),\r\n  RG8UNORM = makeTextureFormat(0, true, true, false, false, false, false, false, false, false, false, false, 1, 1, 2),\r\n  RG8SNORM = makeTextureFormat(0, true, true, false, false, false, false, false, false, true, false, false, 1, 1, 2),\r\n  RG16F = makeTextureFormat(0, true, true, false, false, false, false, true, false, true, false, false, 1, 1, 4),\r\n  RG32F = makeTextureFormat(0, true, true, false, false, false, false, true, false, true, false, false, 1, 1, 8),\r\n  RG8UI = makeTextureFormat(0, true, true, false, false, false, false, false, true, false, false, false, 1, 1, 2),\r\n  RG8I = makeTextureFormat(0, true, true, false, false, false, false, false, true, true, false, false, 1, 1, 2),\r\n  RG16UI = makeTextureFormat(0, true, true, false, false, false, false, false, true, false, false, false, 1, 1, 4),\r\n  RG16I = makeTextureFormat(0, true, true, false, false, false, false, false, true, true, false, false, 1, 1, 4),\r\n  RG32UI = makeTextureFormat(0, true, true, false, false, false, false, false, true, false, false, false, 1, 1, 8),\r\n  RG32I = makeTextureFormat(0, true, true, false, false, false, false, false, true, true, false, false, 1, 1, 8),\r\n  RGBA8UNORM = makeTextureFormat(0, true, true, true, true, false, false, false, false, false, false, false, 1, 1, 4),\r\n  RGBA8UNORM_SRGB = makeTextureFormat(0, true, true, true, true, false, false, false, false, false, true, false, 1, 1, 4),\r\n  RGBA8SNORM = makeTextureFormat(0, true, true, true, true, false, false, false, false, true, false, false, 1, 1, 4),\r\n  BGRA8UNORM = makeTextureFormat(0, true, true, true, true, false, false, false, false, false, false, true, 1, 1, 4),\r\n  BGRA8UNORM_SRGB = makeTextureFormat(0, true, true, true, true, false, false, false, false, false, true, true, 1, 1, 4),\r\n  RGBA16F = makeTextureFormat(0, true, true, true, true, false, false, true, false, true, false, false, 1, 1, 8),\r\n  RGBA32F = makeTextureFormat(0, true, true, true, true, false, false, true, false, true, false, false, 1, 1, 16),\r\n  RGBA8UI = makeTextureFormat(0, true, true, true, true, false, false, false, true, false, false, false, 1, 1, 4),\r\n  RGBA8I = makeTextureFormat(0, true, true, true, true, false, false, false, true, true, false, false, 1, 1, 4),\r\n  RGBA16UI = makeTextureFormat(0, true, true, true, true, false, false, false, true, false, false, false, 1, 1, 8),\r\n  RGBA16I = makeTextureFormat(0, true, true, true, true, false, false, false, true, true, false, false, 1, 1, 8),\r\n  RGBA32UI = makeTextureFormat(0, true, true, true, true, false, false, false, true, false, false, false, 1, 1, 16),\r\n  RGBA32I = makeTextureFormat(0, true, true, true, true, false, false, false, true, true, false, false, 1, 1, 16),\r\n  D16 = makeTextureFormat(0, false, false, false, false, true, false, false, false, false, false, false, 1, 1, 2),\r\n  D24 = makeTextureFormat(0, false, false, false, false, true, false, false, false, false, false, false, 0, 0, 0),\r\n  D32F = makeTextureFormat(0, false, false, false, false, true, false, true, false, true, false, false, 1, 1, 4),\r\n  D24S8 = makeTextureFormat(0, false, false, false, false, true, true, false, false, false, false, false, 1, 1, 4),\r\n  D32FS8 = makeTextureFormat(0, false, false, false, false, true, true, true, false, true, false, false, 1, 1, 5),\r\n  // compressed texture formats\r\n  DXT1 = makeTextureFormat(COMPRESSION_FORMAT_BC1, true, true, true, true, false, false, false, false, false, false, false, 4, 4, 8),\r\n  DXT1_SRGB = makeTextureFormat(COMPRESSION_FORMAT_BC1, true, true, true, true, false, false, false, false, false, true, false, 4, 4, 8),\r\n  DXT3 = makeTextureFormat(COMPRESSION_FORMAT_BC2, true, true, true, true, false, false, false, false, false, false, false, 4, 4, 16),\r\n  DXT3_SRGB = makeTextureFormat(COMPRESSION_FORMAT_BC2, true, true, true, true, false, false, false, false, false, true, false, 4, 4, 16),\r\n  DXT5 = makeTextureFormat(COMPRESSION_FORMAT_BC3, true, true, true, true, false, false, false, false, false, false, false, 4, 4, 16),\r\n  DXT5_SRGB = makeTextureFormat(COMPRESSION_FORMAT_BC3, true, true, true, true, false, false, false, false, false, true, false, 4, 4, 16),\r\n}\r\n\r\nexport function linearTextureFormatToSRGB(format: TextureFormat): TextureFormat {\r\n  switch (format) {\r\n    case TextureFormat.RGBA8UNORM: return TextureFormat.RGBA8UNORM_SRGB;\r\n    case TextureFormat.BGRA8UNORM: return TextureFormat.BGRA8UNORM_SRGB;\r\n    case TextureFormat.DXT1: return TextureFormat.DXT1_SRGB;\r\n    case TextureFormat.DXT3: return TextureFormat.DXT3_SRGB;\r\n    case TextureFormat.DXT5: return TextureFormat.DXT5_SRGB;\r\n    default: return format;\r\n  }\r\n}\r\nexport function hasAlphaChannel(format: TextureFormat): boolean {\r\n  return !!(format & ALPHA_BITMASK);\r\n}\r\nexport function hasRedChannel(format: TextureFormat): boolean {\r\n  return !!(format & RED_BITMASK);\r\n}\r\nexport function hasGreenChannel(format: TextureFormat): boolean {\r\n  return !!(format & GREEN_BITMASK);\r\n}\r\nexport function hasBlueChannel(format: TextureFormat): boolean {\r\n  return !!(format & BLUE_BITMASK);\r\n}\r\nexport function hasDepthChannel(format: TextureFormat): boolean {\r\n  return !!(format & DEPTH_BITMASK);\r\n}\r\nexport function hasStencilChannel(format: TextureFormat): boolean {\r\n  return !!(format & STENCIL_BITMASK);\r\n}\r\nexport function isFloatTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & FLOAT_BITMASK);\r\n}\r\nexport function isIntegerTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & INTEGER_BITMASK);\r\n}\r\nexport function isSignedTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & SIGNED_BITMASK);\r\n}\r\nexport function isCompressedTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & COMPRESSION_FORMAT_BITMASK);\r\n}\r\nexport function isDepthTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & DEPTH_BITMASK);\r\n}\r\nexport function isSRGBTextureFormat(format: TextureFormat): boolean {\r\n  return !!(format & SRGB_BITMASK);\r\n}\r\nexport function getTextureFormatBlockSize(format: TextureFormat): number {\r\n  return (format & BLOCK_SIZE_MASK) >> BLOCK_SIZE_SHIFT;\r\n}\r\nexport function getTextureFormatBlockWidth(format: TextureFormat): number {\r\n  return (format & BLOCK_WIDTH_MASK) >> BLOCK_WIDTH_SHIFT;\r\n}\r\nexport function getTextureFormatBlockHeight(format: TextureFormat): number {\r\n  return (format & BLOCK_HEIGHT_MASK) >> BLOCK_HEIGHT_SHIFT;\r\n}\r\nexport function getCompressedTextureFormat(format: TextureFormat): number {\r\n  return (format & COMPRESSED_FORMAT_MASK) >> COMPRESSED_FORMAT_SHIFT;\r\n}\r\n\r\nfunction normalizeColorComponent(val: number, maxval: number) {\r\n  return Math.min(maxval, Math.max(Math.floor(val * maxval), 0));\r\n}\r\n\r\nfunction normalizeColorComponentSigned(val: number, maxval: number) {\r\n  return normalizeColorComponent(val * 0.5 + 0.5, maxval) - (maxval + 1) / 2;\r\n}\r\n\r\nconst _floatView = new Float32Array(1);\r\nconst _int32View = new Int32Array(_floatView.buffer);\r\nexport function floatToHalf(val: number): number {\r\n  _floatView[0] = val;\r\n  const x = _int32View[0];\r\n  let bits = (x >> 16) & 0x8000;\r\n  let m = (x >> 12) & 0x07ff;\r\n  const e = (x >> 23) & 0xff;\r\n  if (e < 103) {\r\n    return bits;\r\n  }\r\n  if (e > 142) {\r\n    bits |= 0x7c00;\r\n    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;\r\n    return bits;\r\n  }\r\n  if (e < 113) {\r\n    m |= 0x0800;\r\n    bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n    return bits;\r\n  }\r\n  bits |= ((e - 112) << 10) | (m >> 1);\r\n  bits += m & 1;\r\n  return bits;\r\n}\r\n\r\nexport function halfToFloat(val: number): number {\r\n  const s = (val & 0x8000) >> 15;\r\n  const e = (val & 0x7c00) >> 10;\r\n  const f = val & 0x03ff;\r\n  if (e === 0) {\r\n    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\r\n  } else if (e === 0x1f) {\r\n    return f ? NaN : (s ? -1 : 1) * Infinity;\r\n  }\r\n  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));\r\n}\r\n\r\nfunction encode565(r: number, g: number, b: number): number {\r\n  r = normalizeColorComponent(r, 255) >> 3;\r\n  g = normalizeColorComponent(g, 255) >> 2;\r\n  b = normalizeColorComponent(b, 255) >> 3;\r\n  return (b & 0x1f) | ((g & 0x3f) << 5) | ((r & 0x1f) << 11);\r\n}\r\n\r\nfunction encode4444(r: number, g: number, b: number, a: number) {\r\n  r = normalizeColorComponent(r, 255) >> 4;\r\n  g = normalizeColorComponent(g, 255) >> 4;\r\n  b = normalizeColorComponent(b, 255) >> 4;\r\n  a = normalizeColorComponent(a, 255) >> 4;\r\n  return (a & 0x0f) | ((b & 0x0f) << 4) | ((g & 0x0f) << 8) | ((r & 0x0f) << 12);\r\n}\r\n\r\nfunction encode5551(r: number, g: number, b: number, a: number) {\r\n  r = normalizeColorComponent(r, 255) >> 3;\r\n  g = normalizeColorComponent(g, 255) >> 3;\r\n  b = normalizeColorComponent(b, 255) >> 3;\r\n  return ((b & 0x1f) << 1) | ((g & 0x1f) << 6) | ((r & 0x1f) << 11) | (a >= 0.5 ? 1 : 0);\r\n}\r\n\r\nexport function encodePixel(\r\n  format: TextureFormat,\r\n  r: number,\r\n  g: number,\r\n  b: number,\r\n  a: number,\r\n): TypedArray {\r\n  switch (format) {\r\n    case TextureFormat.R8UNORM:\r\n      return new Uint8Array([normalizeColorComponent(r, 255)]);\r\n    case TextureFormat.R8SNORM:\r\n      return new Int8Array([normalizeColorComponentSigned(r, 255)]);\r\n    case TextureFormat.R16F:\r\n      return new Uint16Array([floatToHalf(r)]);\r\n    case TextureFormat.R32F:\r\n      return new Float32Array([r]);\r\n    case TextureFormat.R8UI:\r\n      return new Uint8Array([r | 0]);\r\n    case TextureFormat.R8I:\r\n      return new Int8Array([r | 0]);\r\n    case TextureFormat.R16UI:\r\n      return new Uint16Array([r | 0]);\r\n    case TextureFormat.R16I:\r\n      return new Int16Array([r | 0]);\r\n    case TextureFormat.R32UI:\r\n      return new Uint32Array([r | 0]);\r\n    case TextureFormat.R32I:\r\n      return new Int32Array([r | 0]);\r\n    case TextureFormat.RG8UNORM:\r\n      return new Uint8Array([normalizeColorComponent(r, 255), normalizeColorComponent(g, 255)]);\r\n    case TextureFormat.RG8SNORM:\r\n      return new Int8Array([normalizeColorComponentSigned(r, 255), normalizeColorComponentSigned(g, 255)]);\r\n    case TextureFormat.RG16F:\r\n      return new Uint16Array([floatToHalf(r), floatToHalf(g)]);\r\n    case TextureFormat.RG32F:\r\n      return new Float32Array([r, g]);\r\n    case TextureFormat.RG8UI:\r\n      return new Uint8Array([r | 0, g | 0]);\r\n    case TextureFormat.RG8I:\r\n      return new Int8Array([r | 0, g | 0]);\r\n    case TextureFormat.RG16UI:\r\n      return new Uint16Array([r | 0, g | 0]);\r\n    case TextureFormat.RG16I:\r\n      return new Int16Array([r | 0, g | 0]);\r\n    case TextureFormat.RG32UI:\r\n      return new Uint32Array([r | 0, g | 0]);\r\n    case TextureFormat.RG32I:\r\n      return new Int32Array([r | 0, g | 0]);\r\n    case TextureFormat.RGBA8UNORM:\r\n    case TextureFormat.RGBA8UNORM_SRGB:\r\n      return new Uint8Array([\r\n        normalizeColorComponent(r, 255),\r\n        normalizeColorComponent(g, 255),\r\n        normalizeColorComponent(b, 255),\r\n        normalizeColorComponent(a, 255),\r\n      ]);\r\n    case TextureFormat.BGRA8UNORM:\r\n    case TextureFormat.BGRA8UNORM_SRGB:\r\n      return new Uint8Array([\r\n        normalizeColorComponent(b, 255),\r\n        normalizeColorComponent(g, 255),\r\n        normalizeColorComponent(r, 255),\r\n        normalizeColorComponent(a, 255),\r\n      ]);\r\n    case TextureFormat.RGBA8SNORM:\r\n      return new Int8Array([\r\n        normalizeColorComponentSigned(r, 255),\r\n        normalizeColorComponentSigned(g, 255),\r\n        normalizeColorComponentSigned(b, 255),\r\n        normalizeColorComponentSigned(a, 255),\r\n      ]);\r\n    case TextureFormat.RGBA16F:\r\n      return new Uint16Array([floatToHalf(r), floatToHalf(g), floatToHalf(b), floatToHalf(a)]);\r\n    case TextureFormat.RGBA32F:\r\n      return new Float32Array([r, g, b, a]);\r\n    case TextureFormat.RGBA8UI:\r\n      return new Uint8Array([r | 0, g | 0, b | 0, a | 0]);\r\n    case TextureFormat.RGBA8I:\r\n      return new Int8Array([r | 0, g | 0, b | 0, a | 0]);\r\n    case TextureFormat.RGBA16UI:\r\n      return new Uint16Array([r | 0, g | 0, b | 0, a | 0]);\r\n    case TextureFormat.RGBA16I:\r\n      return new Int16Array([r | 0, g | 0, b | 0, a | 0]);\r\n    case TextureFormat.RGBA32UI:\r\n      return new Uint32Array([r | 0, g | 0, b | 0, a | 0]);\r\n    case TextureFormat.RGBA32I:\r\n      return new Int32Array([r | 0, g | 0, b | 0, a | 0]);\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport function encodePixelToArray(\r\n  format: TextureFormat,\r\n  r: number,\r\n  g: number,\r\n  b: number,\r\n  a: number,\r\n  arr: Array<number>,\r\n): void {\r\n  switch (format) {\r\n    case TextureFormat.R8UNORM:\r\n      arr.push(normalizeColorComponent(r, 255));\r\n      break;\r\n    case TextureFormat.R8SNORM:\r\n      arr.push(normalizeColorComponentSigned(r, 255));\r\n      break;\r\n    case TextureFormat.R16F:\r\n      arr.push(floatToHalf(r));\r\n      break;\r\n    case TextureFormat.R32F:\r\n      arr.push(r);\r\n      break;\r\n    case TextureFormat.R8UI:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.R8I:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.R16UI:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.R16I:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.R32UI:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.R32I:\r\n      arr.push(r | 0);\r\n      break;\r\n    case TextureFormat.RG8UNORM:\r\n      arr.push(normalizeColorComponent(r, 255), normalizeColorComponent(g, 255));\r\n      break;\r\n    case TextureFormat.RG8SNORM:\r\n      arr.push(normalizeColorComponentSigned(r, 255), normalizeColorComponentSigned(g, 255));\r\n      break;\r\n    case TextureFormat.RG16F:\r\n      arr.push(floatToHalf(r), floatToHalf(g));\r\n      break;\r\n    case TextureFormat.RG32F:\r\n      arr.push(r, g);\r\n      break;\r\n    case TextureFormat.RG8UI:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RG8I:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RG16UI:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RG16I:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RG32UI:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RG32I:\r\n      arr.push(r | 0, g | 0);\r\n      break;\r\n    case TextureFormat.RGBA8UNORM:\r\n    case TextureFormat.RGBA8UNORM_SRGB:\r\n      arr.push(\r\n        normalizeColorComponent(r, 255),\r\n        normalizeColorComponent(g, 255),\r\n        normalizeColorComponent(b, 255),\r\n        normalizeColorComponent(a, 255),\r\n      );\r\n      break;\r\n    case TextureFormat.BGRA8UNORM:\r\n    case TextureFormat.BGRA8UNORM_SRGB:\r\n      arr.push(\r\n        normalizeColorComponent(b, 255),\r\n        normalizeColorComponent(g, 255),\r\n        normalizeColorComponent(r, 255),\r\n        normalizeColorComponent(a, 255),\r\n      );\r\n      break;\r\n    case TextureFormat.RGBA8SNORM:\r\n      arr.push(\r\n        normalizeColorComponentSigned(r, 255),\r\n        normalizeColorComponentSigned(g, 255),\r\n        normalizeColorComponentSigned(b, 255),\r\n        normalizeColorComponentSigned(a, 255),\r\n      );\r\n      break;\r\n    case TextureFormat.RGBA16F:\r\n      arr.push(floatToHalf(r), floatToHalf(g), floatToHalf(b), floatToHalf(a));\r\n      break;\r\n    case TextureFormat.RGBA32F:\r\n      arr.push(r, g, b, a);\r\n      break;\r\n    case TextureFormat.RGBA8UI:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n    case TextureFormat.RGBA8I:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n    case TextureFormat.RGBA16UI:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n    case TextureFormat.RGBA16I:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n    case TextureFormat.RGBA32UI:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n    case TextureFormat.RGBA32I:\r\n      arr.push(r | 0, g | 0, b | 0, a | 0);\r\n      break;\r\n  }\r\n}\r\n\r\nexport enum PrimitiveType {\r\n  Unknown = -1,\r\n  TriangleList = 0,\r\n  TriangleStrip = 1,\r\n  TriangleFan = 2,\r\n  LineList = 3,\r\n  LineStrip = 4,\r\n  PointList = 5,\r\n}\r\n\r\nexport enum ShaderType {\r\n  Vertex = 1 << 0,\r\n  Fragment = 1 << 1,\r\n  Compute = 1 << 2,\r\n}\r\n\r\n"],"names":[],"mappings":"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"}