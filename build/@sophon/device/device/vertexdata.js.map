{"version":3,"file":"vertexdata.js","sources":["../../../../libs/device/src/device/vertexdata.ts"],"sourcesContent":["import { GPUResourceUsageFlags, StructuredBuffer, IndexBuffer, VertexStepMode, MAX_VERTEX_ATTRIBUTES, getVertexAttribByName, VertexSemantic } from './gpuobject';\nimport { PBArrayTypeInfo } from './builder/types';\n\nexport class VertexData {\n  /** @internal */\n  private _vertexBuffers: {\n    buffer: StructuredBuffer;\n    offset: number;\n    stepMode: VertexStepMode;\n  }[];\n  /** @internal */\n  private _indexBuffer: IndexBuffer;\n  /** @internal */\n  private _drawOffset: number;\n  /** @internal */\n  private _tag: number;\n  constructor() {\n    this._vertexBuffers = [];\n    this._tag = 0;\n    for (let i = 0; i < MAX_VERTEX_ATTRIBUTES; i++) {\n      this._vertexBuffers.push(null);\n    }\n    this._indexBuffer = null;\n    this._drawOffset = 0;\n  }\n  clone(): VertexData {\n    const newVertexData = new VertexData();\n    newVertexData._vertexBuffers = this._vertexBuffers.slice();\n    newVertexData._indexBuffer = this._indexBuffer;\n    newVertexData._drawOffset = this._drawOffset;\n    return newVertexData;\n  }\n  updateTag() {\n    this._tag++;\n  }\n  getTag(): number {\n    return this._tag;\n  }\n  get vertexBuffers() {\n    return this._vertexBuffers;\n  }\n  get indexBuffer() {\n    return this._indexBuffer;\n  }\n  getDrawOffset(): number {\n    return this._drawOffset;\n  }\n  setDrawOffset(offset: number) {\n    if (offset !== this._drawOffset) {\n      this._drawOffset = offset;\n      this.updateTag();\n    }\n  }\n  getVertexBuffer(semantic: VertexSemantic): StructuredBuffer {\n    return this._vertexBuffers[getVertexAttribByName(semantic)]?.buffer || null;\n  }\n  getIndexBuffer(): IndexBuffer {\n    return this._indexBuffer || null;\n  }\n  setVertexBuffer(buffer: StructuredBuffer, stepMode?: VertexStepMode): StructuredBuffer {\n    if (!buffer || !(buffer.usage & GPUResourceUsageFlags.BF_VERTEX)) {\n      throw new Error('setVertexBuffer() failed: buffer is null or buffer has not Vertex usage flag');\n    }\n    stepMode = stepMode || 'vertex';\n    const vertexType = (buffer.structure.structMembers[0].type as PBArrayTypeInfo).elementType;\n    if (vertexType.isStructType()) {\n      let offset = 0;\n      for (const attrib of vertexType.structMembers) {\n        const loc = getVertexAttribByName(attrib.name as VertexSemantic);\n        this.internalSetVertexBuffer(loc, buffer, offset, stepMode);\n        offset += attrib.size;\n      }\n    } else {\n      const loc = getVertexAttribByName(buffer.structure.structMembers[0].name as VertexSemantic);\n      this.internalSetVertexBuffer(loc, buffer, 0, stepMode);\n    }\n    return buffer;\n  }\n  removeVertexBuffer(buffer: StructuredBuffer): boolean {\n    let removed = false;\n    for (let loc = 0; loc < this._vertexBuffers.length; loc++) {\n      const info = this._vertexBuffers[loc];\n      const remove = info?.buffer === buffer;\n      if (remove) {\n        this._vertexBuffers[loc] = null;\n        removed = true;\n      }\n    }\n    if (removed) {\n      this.updateTag();\n    }\n    return removed;\n  }\n  setIndexBuffer(buffer: IndexBuffer): IndexBuffer {\n    if (buffer !== this._indexBuffer) {\n      this._indexBuffer = buffer || null;\n      this.updateTag();\n    }\n    return buffer;\n  }\n  /** @internal */\n  private internalSetVertexBuffer(loc: number, buffer: StructuredBuffer, offset?: number, stepMode?: VertexStepMode): StructuredBuffer {\n    if (loc < 0 || loc >= MAX_VERTEX_ATTRIBUTES) {\n      throw new Error(`setVertexBuffer() failed: location out of bounds: ${loc}`);\n    }\n    this.updateTag();\n    offset = Number(offset) || 0;\n    stepMode = stepMode || 'vertex';\n    const old = this._vertexBuffers[loc];\n    if (!old\n      || old.buffer !== buffer\n      || old.offset !== offset\n      || old.stepMode !== stepMode) {\n      this._vertexBuffers[loc] = {\n        buffer: buffer,\n        offset: offset,\n        stepMode: stepMode,\n      };\n      return buffer;\n    }\n    return null;\n  }\n}\n"],"names":[],"mappings":"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"}