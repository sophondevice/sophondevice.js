{"version":3,"file":"geometry.js","sources":["../../../../libs/device/src/device/geometry.ts"],"sourcesContent":["import { PrimitiveType } from './base_types';\r\nimport { GPUResourceUsageFlags, VertexInputLayout, StructuredBuffer, IndexBuffer, VertexStepMode, VertexSemantic, getVertexAttribByName } from './gpuobject';\r\nimport { VertexData } from './vertexdata';\r\nimport type { PBStructTypeInfo } from './builder';\r\nimport type { Device } from './device';\r\nimport type { TypedArray } from '../misc';\r\n\r\nexport class Geometry {\r\n  /** @internal */\r\n  protected _device: Device;\r\n  /** @internal */\r\n  protected _vao: VertexInputLayout;\r\n  /** @internal */\r\n  protected _vertexData: VertexData;\r\n  /** @internal */\r\n  protected _primitiveType: PrimitiveType;\r\n  /** @internal */\r\n  protected _indexStart: number;\r\n  /** @internal */\r\n  protected _indexCount: number;\r\n  /** @internal */\r\n  protected _vaoDirty: boolean;\r\n\r\n  constructor(device: Device) {\r\n    this._device = device;\r\n    this._vao = null;\r\n    this._vertexData = new VertexData();\r\n    this._primitiveType = PrimitiveType.TriangleList;\r\n    this._indexStart = 0;\r\n    this._indexCount = 0;\r\n    this._vaoDirty = false;\r\n  }\r\n  get primitiveType() {\r\n    return this._primitiveType;\r\n  }\r\n  set primitiveType(type) {\r\n    this._primitiveType = type;\r\n  }\r\n  get indexStart() {\r\n    return this._indexStart;\r\n  }\r\n  set indexStart(val) {\r\n    this._indexStart = val;\r\n  }\r\n  get indexCount() {\r\n    return this._indexCount;\r\n  }\r\n  set indexCount(val) {\r\n    this._indexCount = val;\r\n  }\r\n  get drawOffset() {\r\n    return this._vertexData.getDrawOffset();\r\n  }\r\n  removeVertexBuffer(buffer: StructuredBuffer): void {\r\n    this._vaoDirty = this._vertexData.removeVertexBuffer(buffer);\r\n  }\r\n  getVertexBuffer(semantic: VertexSemantic): StructuredBuffer {\r\n    return this._vertexData.getVertexBuffer(semantic);\r\n  }\r\n  createAndSetVertexBuffer(\r\n    structureType: PBStructTypeInfo,\r\n    data: TypedArray,\r\n    stepMode?: VertexStepMode\r\n  ): StructuredBuffer {\r\n    const buffer = this._device.createStructuredBuffer(structureType, {\r\n      usage: 'vertex',\r\n      managed: true\r\n    }, data);\r\n    const ret = this._vertexData.setVertexBuffer(buffer, stepMode);\r\n    this._vaoDirty = !!ret;\r\n    return ret;\r\n  }\r\n  setVertexBuffer(\r\n    buffer: StructuredBuffer,\r\n    stepMode?: VertexStepMode\r\n  ) {\r\n    const ret = this._vertexData.setVertexBuffer(buffer, stepMode);\r\n    this._vaoDirty = !!ret;\r\n    return ret;\r\n  }\r\n  createAndSetIndexBuffer(data: Uint16Array | Uint32Array, dynamic?: boolean): IndexBuffer {\r\n    const buffer = this._device.createIndexBuffer(data, {\r\n      dynamic: !!dynamic,\r\n      managed: !dynamic\r\n    });\r\n    this._vertexData.setIndexBuffer(buffer);\r\n    this._vaoDirty = true;\r\n    return buffer;\r\n  }\r\n  setIndexBuffer(data: IndexBuffer): void {\r\n    if (this._vertexData.indexBuffer !== data) {\r\n      this._vertexData.setIndexBuffer(data);\r\n      this._vaoDirty = true;\r\n    }\r\n  }\r\n  getIndexBuffer(): IndexBuffer {\r\n    return this._vertexData.indexBuffer;\r\n  }\r\n  draw() {\r\n    if (this._vaoDirty) {\r\n      this._vao?.dispose();\r\n      this._vao = this._device.createVAO(this._vertexData);\r\n      this._vaoDirty = false;\r\n    }\r\n    this._vao?.draw(this._primitiveType, this._indexStart, this._indexCount);\r\n  }\r\n  drawInstanced(numInstances: number) {\r\n    if (this._vaoDirty) {\r\n      this._vao?.dispose();\r\n      this._vao = this._device.createVAO(this._vertexData);\r\n      this._vaoDirty = false;\r\n    }\r\n    this._vao?.drawInstanced(this._primitiveType, this._indexStart, this._indexCount, numInstances);\r\n  }\r\n  dispose() {\r\n    if (this._vao) {\r\n      this._vao.dispose();\r\n      this._vao = null;\r\n    }\r\n    this._vertexData = null;\r\n    this._indexCount = 0;\r\n    this._indexStart = 0;\r\n    this._primitiveType = PrimitiveType.Unknown;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;MAOa,QAAQ,CAAA;AAET,IAAA,OAAO,CAAS;AAEhB,IAAA,IAAI,CAAoB;AAExB,IAAA,WAAW,CAAa;AAExB,IAAA,cAAc,CAAgB;AAE9B,IAAA,WAAW,CAAS;AAEpB,IAAA,WAAW,CAAS;AAEpB,IAAA,SAAS,CAAU;AAE7B,IAAA,WAAA,CAAY,MAAc,EAAA;AACxB,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,EAAE,CAAC;AACpC,QAAA,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,YAAY,CAAC;AACjD,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,QAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;AACD,IAAA,IAAI,aAAa,GAAA;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;IACD,IAAI,aAAa,CAAC,IAAI,EAAA;AACpB,QAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;KAC5B;AACD,IAAA,IAAI,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IACD,IAAI,UAAU,CAAC,GAAG,EAAA;AAChB,QAAA,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;KACxB;AACD,IAAA,IAAI,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;IACD,IAAI,UAAU,CAAC,GAAG,EAAA;AAChB,QAAA,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;KACxB;AACD,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;KACzC;AACD,IAAA,kBAAkB,CAAC,MAAwB,EAAA;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;KAC9D;AACD,IAAA,eAAe,CAAC,QAAwB,EAAA;QACtC,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;KACnD;AACD,IAAA,wBAAwB,CACtB,aAA+B,EAC/B,IAAgB,EAChB,QAAyB,EAAA;QAEzB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,aAAa,EAAE;AAChE,YAAA,KAAK,EAAE,QAAQ;AACf,YAAA,OAAO,EAAE,IAAI;SACd,EAAE,IAAI,CAAC,CAAC;AACT,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;AACvB,QAAA,OAAO,GAAG,CAAC;KACZ;IACD,eAAe,CACb,MAAwB,EACxB,QAAyB,EAAA;AAEzB,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;AACvB,QAAA,OAAO,GAAG,CAAC;KACZ;IACD,uBAAuB,CAAC,IAA+B,EAAE,OAAiB,EAAA;QACxE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE;YAClD,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,OAAO,EAAE,CAAC,OAAO;AAClB,SAAA,CAAC,CAAC;AACH,QAAA,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AACxC,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,QAAA,OAAO,MAAM,CAAC;KACf;AACD,IAAA,cAAc,CAAC,IAAiB,EAAA;AAC9B,QAAA,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,KAAK,IAAI,EAAE;AACzC,YAAA,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACtC,YAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACvB,SAAA;KACF;IACD,cAAc,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;KACrC;IACD,IAAI,GAAA;QACF,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,YAAA,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;AACrB,YAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACrD,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACxB,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1E;AACD,IAAA,aAAa,CAAC,YAAoB,EAAA;QAChC,IAAI,IAAI,CAAC,SAAS,EAAE;AAClB,YAAA,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;AACrB,YAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACrD,YAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACxB,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;KACjG;IACD,OAAO,GAAA;QACL,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;AACpB,YAAA,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAClB,SAAA;AACD,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,QAAA,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AACrB,QAAA,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC,OAAO,CAAC;KAC7C;AACF;;;;"}