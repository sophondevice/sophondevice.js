{"version":3,"file":"bindgroup_webgl.js","sources":["../../../../../libs/device/src/device/webgl/bindgroup_webgl.ts"],"sourcesContent":["import { WebGLBaseTexture } from './basetexture_webgl';\nimport { WebGLGPUProgram } from './gpuprogram_webgl';\nimport { GPUResourceUsageFlags, StructuredValue } from '../gpuobject';\nimport { WebGLStructuredBuffer } from './structuredbuffer_webgl';\nimport { WebGLTextureSampler } from './sampler_webgl';\nimport { WebGLGPUObject } from './gpuobject_webgl';\nimport type { TypedArray } from '../../misc';\nimport type { PBStructTypeInfo } from '../builder';\nimport type { WebGLDevice } from './device_webgl';\nimport type { BindGroupLayout, BaseTexture, StructuredBuffer, TextureSampler, BindGroup, BindGroupLayoutEntry } from '../gpuobject';\n\nexport class WebGLBindGroup extends WebGLGPUObject<unknown> implements BindGroup {\n  private _layout: BindGroupLayout;\n  private _resources: { [name: string]: WebGLStructuredBuffer | [WebGLBaseTexture, WebGLTextureSampler] };\n  constructor(device: WebGLDevice, layout: BindGroupLayout) {\n    super(device);\n    this._device = device;\n    this._layout = layout;\n    this._resources = {};\n    this._object = {};\n  }\n  getLayout(): BindGroupLayout {\n    return this._layout;\n  }\n  getBuffer(name: string): StructuredBuffer {\n    return this._getBuffer(name, true);\n  }\n  setBuffer(name: string, buffer: StructuredBuffer) {\n    for (const entry of this._layout.entries) {\n      if (entry.name === name) {\n        if (!entry.buffer) {\n          console.log(`setBuffer() failed: resource '${name}' is not buffer`);\n        } else {\n          if (buffer && !(buffer.usage & GPUResourceUsageFlags.BF_UNIFORM)) {\n            console.log(`setBuffer() failed: buffer resource '${name}' must be type '${entry.buffer.type}'`);\n          } else if (buffer !== this._resources[entry.name]) {\n            this._resources[entry.name] = buffer as WebGLStructuredBuffer;\n          }\n        }\n        return;\n      }\n    }\n    console.log(`setBuffer() failed: no buffer resource named '${name}'`);\n  }\n  setRawData(name: string, byteOffset: number, data: TypedArray, srcPos?: number, srcLength?: number) {\n    const mappedName = this._layout.nameMap?.[name];\n    if (mappedName) {\n      this.setRawData(mappedName, byteOffset, data, srcPos, srcLength);\n    } else {\n      const buffer = this._getBuffer(name, false);\n      if (buffer) {\n        buffer.bufferSubData(byteOffset, data, srcPos, srcLength);\n      } else {\n        console.log(`set(): no uniform buffer named '${name}'`);\n      }\n    }\n  }\n  setValue(name: string, value: StructuredValue) {\n    const mappedName = this._layout.nameMap?.[name];\n    if (mappedName) {\n      this.setValue(mappedName, { [name]: value });\n    } else {\n      const buffer = this._getBuffer(name, false);\n      if (buffer) {\n        if ((value as any)?.BYTES_PER_ELEMENT) {\n          buffer.bufferSubData(0, value as TypedArray);\n        } else {\n          for (const k in value as any) {\n            buffer.set(k, value[k]);\n          }\n        }\n      } else {\n        console.log(`set(): no uniform buffer named '${name}'`);\n      }\n    }\n  }\n  setTextureView(name: string, value: BaseTexture, level: number, face: number) {\n    throw new Error('setTextureView() not supported for webgl device');\n  }\n  getTexture(name: string): BaseTexture {\n    const entry = this._findTextureLayout(name);\n    if (entry) {\n      return this._resources[name]?.[0] as BaseTexture || null;\n    } else {\n      throw new Error(`getTexture() failed:${name} is not a texture`);\n    }\n  }\n  setTexture(name: string, texture: BaseTexture, sampler?: TextureSampler) {\n    const entry = this._findTextureLayout(name);\n    if (entry) {\n      this._resources[name] = [\n        texture as unknown as WebGLBaseTexture,\n        (sampler || texture.getDefaultSampler(!!entry.texture?.autoBindSamplerComparison)) as WebGLTextureSampler];\n    } else {\n      console.log(`setTexture() failed: no texture uniform named '${name}'`)\n    }\n  }\n  setSampler(name: string, value: TextureSampler) {\n    // no sampler uniform support for webgl\n  }\n  apply(program: WebGLGPUProgram, offsets?: Iterable<number>) {\n    const webgl2 = this._device.isWebGL2;\n    let dynamicOffsetIndex = 0;\n    for (let i = 0; i < this._layout.entries.length; i++) {\n      const entry = this._layout.entries[i];\n      const res = this._resources[entry.name];\n      if (res instanceof WebGLStructuredBuffer) {\n        if (webgl2) {\n          if (entry.buffer.hasDynamicOffset) {\n            const offset = offsets?.[dynamicOffsetIndex] || 0;\n            dynamicOffsetIndex++;\n            program.setBlock(res.structure.structName, res, offset);\n          } else {\n            program.setBlock(res.structure.structName, res, 0);\n          }\n        } else {\n          program.setUniform(entry.name, res.getUniformData().uniforms);\n        }\n      } else if (res) {\n        if (res[0].isTextureVideo()) {\n          res[0].updateVideoFrame();\n        }\n        res[0].sampler = res[1];\n        program.setUniform(entry.name, res);\n      }\n    }\n  }\n  destroy(): void {\n    this._resources = {};\n    this._object = null;\n  }\n  async restore(): Promise<void> {\n    this._object = {};\n  }\n  isBindGroup(): this is BindGroup {\n    return true;\n  }\n  private _getBuffer(name: string, nocreate = false) {\n    for (const entry of this._layout.entries) {\n      if (entry.buffer && entry.name === name) {\n        let buffer = this._resources[entry.name] as WebGLStructuredBuffer;\n        if (!buffer && !nocreate) {\n          buffer = this._device.createStructuredBuffer(entry.type as PBStructTypeInfo, { usage: 'uniform' }) as WebGLStructuredBuffer;\n          this._resources[entry.name] = buffer;\n        }\n        return buffer;\n      }\n    }\n    return null;\n  }\n  private _findTextureLayout(name: string): BindGroupLayoutEntry {\n    for (const entry of this._layout.entries) {\n      if ((entry.texture || entry.storageTexture || entry.externalTexture) && entry.name === name) {\n        return entry;\n      }\n    }\n    return null;\n  }\n}\n"],"names":[],"mappings":"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"}