import { WebGLGPUObject } from './gpuobject_webgl';
import { TextureCaps } from '../device';
import { TextureTarget, TextureFormat } from '../base_types';
import { BaseTexture } from '../gpuobject';
import type { TextureSampler } from '../gpuobject';
import type { WebGLTextureSampler } from './sampler_webgl';
import type { WebGLDevice } from './device_webgl';
export declare abstract class WebGLBaseTexture extends WebGLGPUObject<WebGLTexture> {
    protected _target: TextureTarget;
    protected _memCost: number;
    protected _flags: number;
    protected _width: number;
    protected _height: number;
    protected _depth: number;
    protected _format: TextureFormat;
    protected _mipLevelCount: number;
    protected _sampler: WebGLTextureSampler;
    constructor(device: WebGLDevice, target?: TextureTarget);
    get target(): TextureTarget;
    get linearColorSpace(): boolean;
    get width(): number;
    get height(): number;
    get depth(): number;
    get format(): TextureFormat;
    get mipLevelCount(): number;
    get sampler(): TextureSampler;
    set sampler(s: TextureSampler);
    isFilterable(): boolean;
    destroy(): void;
    restore(): Promise<void>;
    isTexture(): this is BaseTexture;
    getTextureCaps(): TextureCaps;
    isFloatFormat(): boolean;
    isIntegerFormat(): boolean;
    isSignedFormat(): boolean;
    isCompressedFormat(): boolean;
    isDepth(): boolean;
    getDefaultSampler(shadow: boolean): TextureSampler;
    abstract generateMipmaps(): void;
    abstract init(): void;
}
