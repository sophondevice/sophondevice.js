{"version":3,"file":"texturecube_webgl.js","sources":["../../../../../libs/device/src/device/webgl/texturecube_webgl.ts"],"sourcesContent":["import { CubeFace } from '@sophon/base';\nimport { TextureFormat, TextureTarget, linearTextureFormatToSRGB } from '../base_types';\nimport { WebGLBaseTexture } from './basetexture_webgl';\nimport { textureTargetMap, cubeMapFaceMap } from './constants_webgl';\nimport { GPUResourceUsageFlags, TextureMipmapData, TextureCube, TextureImageElement, GPUDataBuffer } from '../gpuobject';\nimport type { WebGLDevice } from './device_webgl';\nimport type { WebGLTextureCap } from './capabilities_webgl';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGLTextureCube extends WebGLBaseTexture implements TextureCube<WebGLTexture> {\n  constructor(device: WebGLDevice) {\n    super(device, TextureTarget.TextureCubemap);\n  }\n  init(): void {\n    this.loadEmpty(this._format, this._width, this._mipLevelCount);\n  }\n  update(\n    data: TypedArray,\n    xOffset: number,\n    yOffset: number,\n    width: number,\n    height: number,\n    face: CubeFace,\n  ): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    const params = (this.getTextureCaps() as WebGLTextureCap).getTextureFormatInfo(this._format);\n    this._device.context.bindTexture(textureTargetMap[this._target], this._object);\n    this._device.context.pixelStorei(this._device.context.UNPACK_ALIGNMENT, 1);\n    this._device.context.texSubImage2D(\n      cubeMapFaceMap[face],\n      0,\n      xOffset,\n      yOffset,\n      width,\n      height,\n      params.glFormat,\n      params.glType[0],\n      data,\n    );\n    if (this._mipLevelCount > 1) {\n      this.generateMipmaps();\n    }\n  }\n  updateFromElement(data: TextureImageElement, xOffset: number, yOffset: number, face: number, x: number, y: number, width: number, height: number): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    const params = (this.getTextureCaps() as WebGLTextureCap).getTextureFormatInfo(this._format);\n    this._device.context.bindTexture(textureTargetMap[this._target], this._object);\n    this._device.context.pixelStorei(this._device.context.UNPACK_ALIGNMENT, 1);\n    if (x === 0 && y === 0 && width === data.width && height === data.height) {\n      this._device.context.texSubImage2D(cubeMapFaceMap[face], 0, xOffset, yOffset, params.glFormat, params.glType[0], data);\n    } else {\n      const cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      const ctx = cvs.getContext('2d');\n      ctx.drawImage(data, x, y, width, height, 0, 0, width, height);\n      this._device.context.texSubImage2D(textureTargetMap[this._target], 0, xOffset, yOffset, params.glFormat, params.glType[0], cvs);\n      cvs.width = 0;\n      cvs.height = 0;\n    }\n    if (this._mipLevelCount > 1) {\n      this.generateMipmaps();\n    }\n  }\n  createEmpty(format: TextureFormat, size: number, creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n      console.error(new Error('webgl device does not support storage texture'));\n    } else {\n      format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? format : linearTextureFormatToSRGB(format);\n      this.loadEmpty(format, size, 0);\n    }\n  }\n  readPixels(face: number, x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\n    return new Promise<void>(resolve => {\n      const fb = this._device.createFrameBuffer({\n        colorAttachments: [{ texture: this, face }]\n      });\n      const savedViewport = this._device.getViewport() as [number, number, number, number];\n      const savedScissor = this._device.getScissor() as [number, number, number, number];\n      const savedFB = this._device.getFramebuffer();\n      this._device.setFramebuffer(fb);\n      this._device.readPixels(x, y, w, h, buffer).then(() => {\n        fb.dispose();\n        resolve();\n      });\n      this._device.setFramebuffer(savedFB);\n      this._device.setViewport(...savedViewport);\n      this._device.setScissor(...savedScissor);\n    });\n  }\n  readPixelsToBuffer(face: number, x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void {\n    const fb = this._device.createFrameBuffer({\n      colorAttachments: [{ texture: this, face: face }]\n    });\n    const savedViewport = this._device.getViewport() as [number, number, number, number];\n    const savedScissor = this._device.getScissor() as [number, number, number, number];\n    const savedFB = this._device.getFramebuffer();\n    this._device.setFramebuffer(fb);\n    this._device.readPixelsToBuffer(x, y, w, h, buffer);\n    this._device.setFramebuffer(savedFB);\n    this._device.setViewport(...savedViewport);\n    this._device.setScissor(...savedScissor);\n    fb.dispose();\n  }\n  /** @internal */\n  loadFaceImages(images: HTMLImageElement[], creationFlags?: number): void {\n    if (images.length !== 6) {\n      console.error(new Error('cube map must be loaded from 6 image elements'));\n    } else if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n      console.error(new Error('webgl device does not support storage texture'));\n    } else {\n      const format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n      this.loadImages(images, format);\n    }\n  }\n  isTextureCube(): this is TextureCube {\n    return true;\n  }\n  generateMipmaps() {\n    if (this._object && this._mipLevelCount > 1) {\n      const target = textureTargetMap[this._target];\n      this._device.context.bindTexture(target, this._object);\n      this._device.context.generateMipmap(target);\n    }\n  }\n  createWithMipmapData(data: TextureMipmapData, creationFlags?: number): void {\n    if (!data.isCubemap) {\n      console.error('loading cubmap with mipmap data failed: data is not cubemap');\n    } else {\n      this._flags = Number(creationFlags) || 0;\n      if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n        console.error('webgl device does not support storage texture');\n      } else {\n        this.loadLevels(data);\n      }\n    }\n  }\n  /** @internal */\n  private loadEmpty(format: TextureFormat, size: number, mipLevelCount: number): void {\n    this.allocInternal(format, size, size, 1, mipLevelCount);\n    if (this._mipLevelCount > 1 && !this._device.isContextLost()) {\n      this.generateMipmaps();\n    }\n  }\n  private loadImages(images: HTMLImageElement[], format: TextureFormat): void {\n    const width = images[0].width;\n    const height = images[0].height;\n    if (images.length !== 6) {\n      console.error(new Error('cubemap face list must have 6 images'));\n      return;\n    }\n    for (let i = 1; i < 6; i++) {\n      if (images[i].width !== width || images[i].height !== height) {\n        console.error(new Error('cubemap face images must have identical sizes'));\n        return;\n      }\n    }\n    if (width === 0 || height === 0) {\n      return;\n    }\n    this.allocInternal(format, width, height, 1, 0);\n    if (!this._device.isContextLost()) {\n      (this.device as WebGLDevice).clearErrors();\n      this._device.context.bindTexture(textureTargetMap[this._target], this._object);\n      const params = (this.getTextureCaps() as WebGLTextureCap).getTextureFormatInfo(this._format);\n      for (let face = 0; face < 6; face++) {\n        this._device.context.texSubImage2D(\n          cubeMapFaceMap[face],\n          0,\n          0,\n          0,\n          params.glFormat,\n          params.glType[0],\n          images[face]\n        );\n        const err = (this.device as WebGLDevice).getError();\n        if (err) {\n          console.error(err);\n          return;\n        }\n      }\n      if (this._mipLevelCount > 1) {\n        this.generateMipmaps();\n      }\n    }\n  }\n  private loadLevels(levels: TextureMipmapData): void {\n    const sRGB = !(this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE);\n    const format = sRGB ? linearTextureFormatToSRGB(levels.format) : levels.format;\n    const width = levels.width;\n    const height = levels.height;\n    const mipLevelCount = levels.mipLevels;\n    if (levels.isCompressed) {\n      if (sRGB ? !this._device.getTextureCaps().supportS3TCSRGB : !this._device.getTextureCaps().supportS3TC) {\n        console.warn('No s3tc compression format support');\n        return;\n      }\n    }\n    this.allocInternal(format, width, height, 1, mipLevelCount);\n    if (!this._device.isContextLost()) {\n      const params = (this.getTextureCaps() as WebGLTextureCap).getTextureFormatInfo(this._format);\n      this._device.context.bindTexture(textureTargetMap[this._target], this._object);\n      (this.device as WebGLDevice).clearErrors();\n      for (let face = 0; face < 6; face++) {\n        const faceTarget = cubeMapFaceMap[face];\n        if (this._mipLevelCount > 1 && levels.mipDatas[face].length !== this._mipLevelCount) {\n          console.log(`invalid texture data`);\n          return;\n        }\n        for (let i = 0; i < this._mipLevelCount; i++) {\n          if (levels.isCompressed) {\n            this._device.context.compressedTexSubImage2D(\n              faceTarget,\n              i,\n              0,\n              0,\n              levels.mipDatas[face][i].width,\n              levels.mipDatas[face][i].height,\n              params.glInternalFormat,\n              levels.mipDatas[face][i].data,\n            );\n          } else {\n            this._device.context.texSubImage2D(\n              faceTarget,\n              i,\n              0,\n              0,\n              levels.mipDatas[face][i].width,\n              levels.mipDatas[face][i].height,\n              params.glFormat,\n              params.glType[0],\n              levels.mipDatas[face][i].data,\n            );\n          }\n          const err = (this.device as WebGLDevice).getError();\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}