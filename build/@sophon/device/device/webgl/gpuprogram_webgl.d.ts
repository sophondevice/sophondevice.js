import { WebGLGPUObject } from './gpuobject_webgl';
import { ShaderType } from '../base_types';
import { GPUProgram, BindGroupLayout, BindPointInfo } from '../gpuobject';
import type { WebGLBaseTexture } from './basetexture_webgl';
import type { WebGLGPUBuffer } from './buffer_webgl';
import type { WebGLDevice } from './device_webgl';
import type { WebGLStructuredBuffer } from './structuredbuffer_webgl';
export interface IAttributeSetter {
    (value: WebGLGPUBuffer | number | Iterable<number>, offset?: number, stride?: number): void;
    location: number;
}
export type IUniformValue = number | Iterable<number> | [WebGLBaseTexture, WebGLSampler];
export interface IUniformSetter {
    (value: IUniformValue): unknown;
}
export declare class WebGLGPUProgram extends WebGLGPUObject<WebGLProgram> implements GPUProgram<WebGLProgram> {
    private _vs;
    private _fs;
    private _unitCounter;
    private _uniformSetters;
    private _uniformInfo;
    private _blockInfo;
    private _bindGroupLayouts;
    private _vertexAttributes;
    private _error;
    private _vertexShader;
    private _fragmentShader;
    constructor(device: WebGLDevice, vertexShader: string, fragmentShader: string, bindGroupLayouts: BindGroupLayout[], vertexAttributes: number[]);
    get type(): 'render' | 'compute';
    getCompileError(): string;
    getShaderSource(shaderType: ShaderType): string;
    getBindingInfo(name: string): BindPointInfo;
    get bindGroupLayouts(): BindGroupLayout[];
    get vertexAttributes(): number[];
    setUniform(name: string, value: IUniformValue | Record<string, IUniformValue> | IUniformValue[]): void;
    setBlock(name: string, value: WebGLStructuredBuffer, offset: number): void;
    destroy(): void;
    restore(): Promise<void>;
    isProgram(): boolean;
    use(): boolean;
    private _setUniformStruct;
    private _setUniformArray;
    private load;
    private checkLoad;
    private createUniformSetter;
    private createUniformSetters;
    private getUniformSetterf;
    private getUniformSetterfv;
    private getUniformSetter2fv;
    private getUniformSetter3fv;
    private getUniformSetter4fv;
    private getUniformSetteri;
    private getUniformSetteriv;
    private getUniformSetter2iv;
    private getUniformSetter3iv;
    private getUniformSetter4iv;
    private getUniformSetterui;
    private getUniformSetteruiv;
    private getUniformSetter2uiv;
    private getUniformSetter3uiv;
    private getUniformSetter4uiv;
    private getUniformSetterMatrix2;
    private getUniformSetterMatrix23;
    private getUniformSetterMatrix24;
    private getUniformSetterMatrix32;
    private getUniformSetterMatrix3;
    private getUniformSetterMatrix34;
    private getUniformSetterMatrix42;
    private getUniformSetterMatrix43;
    private getUniformSetterMatrix4;
    private getSamplerSetter;
    private getSamplerArraySetter;
    private getTypedArrayInfo;
}
