import { CubeFace } from '@sophon/base';
import { WebGLGPUObject } from './gpuobject_webgl';
import { BaseTexture, FrameBuffer, IFrameBufferOptions } from '../gpuobject';
import type { WebGLDevice } from './device_webgl';
export declare class WebGLFrameBuffer extends WebGLGPUObject<WebGLFramebuffer> implements FrameBuffer<WebGLFramebuffer> {
    private _options;
    private _viewport;
    private _scissor;
    private _needBindBuffers;
    private _status;
    private _width;
    private _height;
    private _isMRT;
    private _drawBuffers;
    constructor(device: WebGLDevice, opt?: IFrameBufferOptions);
    getViewport(): number[];
    setViewport(vp: number[]): void;
    getScissorRect(): number[];
    setScissorRect(scissor: [number, number, number, number]): void;
    isMRT(): boolean;
    getWidth(): number;
    getHeight(): number;
    restore(): Promise<void>;
    destroy(): void;
    setCubeTextureFace(index: number, face: CubeFace): void;
    setTextureLevel(index: number, level: number): void;
    setTextureLayer(index: number, layer: number): void;
    setDepthTextureLayer(layer: number): void;
    getDepthAttachment(): BaseTexture;
    getColorAttachments(): BaseTexture[];
    bind(): boolean;
    unbind(): void;
    private _load;
    private _bindAttachment;
    private _bindBuffers;
    private _init;
    isFramebuffer(): boolean;
    getSampleCount(): number;
}
