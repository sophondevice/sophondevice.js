{"version":3,"file":"vertexinputlayout_webgl.js","sources":["../../../../../libs/device/src/device/webgl/vertexinputlayout_webgl.ts"],"sourcesContent":["import { PrimitiveType } from '../base_types';\nimport { WebGLGPUObject } from './gpuobject_webgl';\nimport { WebGLEnum } from './webgl_enum';\nimport { VertexInputLayout, StructuredBuffer, IndexBuffer, getVertexBufferAttribType, getVertexBufferStride, VertexSemantic } from '../gpuobject';\nimport { VertexData } from '../vertexdata';\nimport { typeMap } from './constants_webgl';\nimport type { WebGLDevice } from './device_webgl';\n\nexport class WebGLVertexInputLayout\n  extends WebGLGPUObject<WebGLVertexArrayObject | WebGLVertexArrayObjectOES>\n  implements VertexInputLayout<WebGLVertexArrayObject | WebGLVertexArrayObjectOES>\n{\n  private _vertexData: VertexData;\n  constructor(device: WebGLDevice, vertexData: VertexData) {\n    super(device);\n    this._vertexData = vertexData.clone();\n    this.load();\n  }\n  destroy() {\n    if (this._object && this._device.vaoExt) {\n      this._device.vaoExt.deleteVertexArray(this._object);\n    }\n    this._object = null;\n  }\n  async restore() {\n    if (!this._device.isContextLost()) {\n      this.load();\n    }\n  }\n  get vertexBuffers() {\n    return this._vertexData.vertexBuffers;\n  }\n  get indexBuffer() {\n    return this._vertexData.indexBuffer;\n  }\n  getDrawOffset(): number {\n    return this._vertexData.getDrawOffset();\n  }\n  getVertexBuffer(semantic: VertexSemantic): StructuredBuffer {\n    return this._vertexData.getVertexBuffer(semantic);\n  }\n  getIndexBuffer(): IndexBuffer {\n    return this._vertexData.getIndexBuffer();\n  }\n  bind() {\n    if (this._object && this._device.vaoExt) {\n      this._device.vaoExt.bindVertexArray(this._object);\n    } else {\n      this.bindBuffers();\n    }\n  }\n  draw(primitiveType: PrimitiveType, first: number, count: number): void {\n    this._device.setVertexData(this);\n    this._device.draw(primitiveType, first, count);\n  }\n  drawInstanced(\n    primitiveType: PrimitiveType,\n    first: number,\n    count: number,\n    numInstances: number,\n  ): void {\n    this._device.setVertexData(this);\n    this._device.drawInstanced(primitiveType, first, count, numInstances);\n  }\n  isVAO(): boolean {\n    return true;\n  }\n  private load(): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (this._device.vaoExt) {\n      if (!this._object) {\n        this._object = this._device.vaoExt.createVertexArray();\n        this._device.vaoExt.bindVertexArray(this._object);\n        this.bindBuffers();\n        this._device.vaoExt.bindVertexArray(null);\n      }\n    } else {\n      this._object = {};\n    }\n  }\n  private bindBuffers() {\n    const vertexBuffers = this._vertexData.vertexBuffers;\n    const drawOffset = this._vertexData.getDrawOffset();\n    const gl = this._device.context;\n    for (let loc = 0; loc < vertexBuffers.length; loc++) {\n      const bufferInfo = vertexBuffers[loc];\n      const buffer = bufferInfo?.buffer;\n      if (buffer) {\n        if (buffer.disposed) {\n          buffer.reload();\n        }\n        gl.bindBuffer(WebGLEnum.ARRAY_BUFFER, buffer.object);\n        gl.enableVertexAttribArray(loc);\n        const vertexType = getVertexBufferAttribType(bufferInfo.buffer.structure, loc);\n        const stride = getVertexBufferStride(bufferInfo.buffer.structure);\n        if (bufferInfo.stepMode === 'instance' && this._device.instancedArraysExt) {\n          gl.vertexAttribPointer(\n            loc,\n            vertexType.cols,\n            typeMap[vertexType.scalarType],\n            false,\n            stride,\n            bufferInfo.offset,\n          );\n          this._device.instancedArraysExt.vertexAttribDivisor(loc, 1);\n        } else {\n          gl.vertexAttribPointer(\n            loc,\n            vertexType.cols,\n            typeMap[vertexType.scalarType],\n            false,\n            stride,\n            drawOffset * stride + bufferInfo.offset,\n          );\n        }\n      } else {\n        gl.disableVertexAttribArray(loc);\n      }\n    }\n    if (this._vertexData.indexBuffer?.disposed) {\n      this._vertexData.indexBuffer.reload();\n    }\n    gl.bindBuffer(\n      WebGLEnum.ELEMENT_ARRAY_BUFFER,\n      this._vertexData.indexBuffer ? this._vertexData.indexBuffer.object : null,\n    );\n  }\n}\n"],"names":[],"mappings":"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"}