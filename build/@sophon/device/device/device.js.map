{"version":3,"file":"device.js","sources":["../../../../libs/device/src/device/device.ts"],"sourcesContent":["import { REventTarget, REvent, Vector4 } from '@sophon/base';\r\nimport { PrimitiveType, TextureFormat } from './base_types';\r\nimport { CPUTimer, ITimer } from './timer';\r\nimport { AssetManager } from '../scene/asset/assetmanager';\r\nimport type { TypedArray } from '../misc';\r\nimport type { RenderStateSet } from './render_states';\r\nimport type { VertexData } from './vertexdata';\r\nimport {\r\n  IFrameBufferOptions,\r\n  SamplerOptions,\r\n  TextureSampler,\r\n  Texture2D,\r\n  Texture3D,\r\n  TextureCube,\r\n  VertexInputLayout,\r\n  GPUDataBuffer,\r\n  FrameBuffer,\r\n  BaseTexture,\r\n  GPUProgram,\r\n  GPUObject,\r\n  StructuredBuffer,\r\n  BindGroupLayout,\r\n  BindGroup,\r\n  IndexBuffer,\r\n  TextureVideo,\r\n  TextureMipmapData,\r\n  TextureImageElement,\r\n  Texture2DArray,\r\n  TextureCreationOptions,\r\n  BufferCreationOptions,\r\n  GPUResourceUsageFlags,\r\n  BufferUsage\r\n} from './gpuobject';\r\nimport { PBStructTypeInfo, ProgramBuilder } from './builder';\r\n\r\ninterface GPUObjectList {\r\n  textures: BaseTexture[];\r\n  samplers: TextureSampler[];\r\n  buffers: GPUDataBuffer[];\r\n  programs: GPUProgram[];\r\n  framebuffers: FrameBuffer[];\r\n  vertexArrayObjects: VertexInputLayout[];\r\n  bindGroups: BindGroup[];\r\n}\r\n\r\nexport interface EngineCaps {\r\n  maxVertexAttributes: number;\r\n  maxBindGroups: number;\r\n  maxTexCoordIndex: number;\r\n}\r\n\r\nexport interface FramebufferCaps {\r\n  maxDrawBuffers: number;\r\n  supportDrawBuffers: boolean;\r\n  supportRenderMipmap: boolean;\r\n}\r\n\r\nexport interface MiscCaps {\r\n  supportBlendMinMax: boolean;\r\n  support32BitIndex: boolean;\r\n  supportLoseContext: boolean;\r\n  supportDebugRendererInfo: boolean;\r\n  supportSharedUniforms: boolean;\r\n}\r\n\r\nexport interface ShaderCaps {\r\n  supportFragmentDepth: boolean;\r\n  supportStandardDerivatives: boolean;\r\n  supportShaderTextureLod: boolean;\r\n  supportHighPrecisionFloat: boolean;\r\n  supportHighPrecisionInt: boolean;\r\n  maxUniformBufferSize: number;\r\n  uniformBufferOffsetAlignment: number;\r\n}\r\n\r\nexport interface ITextureFormatInfo {\r\n  filterable: boolean;\r\n  renderable: boolean;\r\n  compressed: boolean;\r\n}\r\n\r\nexport interface TextureCaps {\r\n  maxTextureSize: number;\r\n  maxCubeTextureSize: number;\r\n  npo2Mipmapping: boolean;\r\n  npo2Repeating: boolean;\r\n  supportS3TC: boolean;\r\n  supportS3TCSRGB: boolean;\r\n  supportDepthTexture: boolean;\r\n  support3DTexture: boolean;\r\n  supportSRGBTexture: boolean;\r\n  supportFloatTexture: boolean;\r\n  supportLinearFloatTexture: boolean;\r\n  supportHalfFloatTexture: boolean;\r\n  supportLinearHalfFloatTexture: boolean;\r\n  supportAnisotropicFiltering: boolean;\r\n  supportFloatColorBuffer: boolean;\r\n  supportHalfFloatColorBuffer: boolean;\r\n  supportFloatBlending: boolean;\r\n  getTextureFormatInfo(format: TextureFormat): ITextureFormatInfo;\r\n}\r\n\r\nexport type DeviceTypeWebGL = 'webgl' | 'webgl2';\r\nexport type DeviceTypeWebGPU = 'webgpu';\r\nexport type DeviceType = DeviceTypeWebGL | DeviceTypeWebGPU;\r\nexport const DEVICE_TYPE_WEBGL = 'webgl';\r\nexport const DEVICE_TYPE_WEBGL2 = 'webgl2';\r\nexport const DEVICE_TYPE_WEBGPU = 'webgpu';\r\n\r\nexport interface RenderProgramConstructParams {\r\n  vs: string;\r\n  fs: string;\r\n  bindGroupLayouts: BindGroupLayout[],\r\n  vertexAttributes: number[],\r\n}\r\n\r\nexport interface ComputeProgramConstructParams {\r\n  source: string;\r\n  bindGroupLayouts: BindGroupLayout[],\r\n}\r\n\r\nexport interface GPUProgramConstructParams {\r\n  type: 'render' | 'compute';\r\n  label?: string;\r\n  params: RenderProgramConstructParams | ComputeProgramConstructParams;\r\n}\r\n\r\nexport class DeviceResizeEvent extends REvent {\r\n  static readonly NAME = 'resize';\r\n  width: number;\r\n  height: number;\r\n  constructor(width: number, height: number) {\r\n    super(DeviceResizeEvent.NAME, false, false);\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n\r\nexport class DeviceFrameBegin extends REvent {\r\n  static readonly NAME = 'framebegin';\r\n  device: Device;\r\n  constructor(device: Device) {\r\n    super(DeviceFrameBegin.NAME, false, false);\r\n    this.device = device;\r\n  }\r\n}\r\n\r\nexport class DeviceFrameEnd extends REvent {\r\n  static readonly NAME = 'frameend';\r\n  device: Device;\r\n  constructor(device: Device) {\r\n    super(DeviceFrameEnd.NAME, false, false);\r\n    this.device = device;\r\n  }\r\n}\r\n\r\nexport interface FrameInfo {\r\n  frameCounter: number;\r\n  frameTimestamp: number;\r\n  elapsedTimeCPU: number;\r\n  elapsedTimeGPU: number;\r\n  elapsedFrame: number;\r\n  elapsedOverall: number;\r\n  FPS: number;\r\n  drawCalls: number;\r\n  computeCalls: number;\r\n  nextFrameCall: (() => void)[];\r\n}\r\n\r\nexport class DeviceGPUObjectAddedEvent extends REvent {\r\n  static readonly NAME = 'gpuobject_added';\r\n  object: GPUObject;\r\n  constructor(obj: GPUObject) {\r\n    super(DeviceGPUObjectAddedEvent.NAME, false, false);\r\n    this.object = obj;\r\n  }\r\n}\r\n\r\nexport class DeviceGPUObjectRemovedEvent extends REvent {\r\n  static readonly NAME = 'gpuobject_removed';\r\n  object: GPUObject;\r\n  constructor(obj: GPUObject) {\r\n    super(DeviceGPUObjectRemovedEvent.NAME, false, false);\r\n    this.object = obj;\r\n  }\r\n}\r\n\r\nexport class DeviceGPUObjectRenameEvent extends REvent {\r\n  static readonly NAME = 'gpuobject_rename';\r\n  object: GPUObject;\r\n  lastName: string;\r\n  constructor(obj: GPUObject, lastName: string) {\r\n    super(DeviceGPUObjectRenameEvent.NAME, false, false);\r\n    this.object = obj;\r\n    this.lastName = lastName;\r\n  }\r\n}\r\n\r\nexport class DeviceLostEvent extends REvent {\r\n  static readonly NAME = 'device_lost';\r\n  constructor() {\r\n    super(DeviceLostEvent.NAME, false, false);\r\n  }\r\n}\r\n\r\nexport class DeviceRestoreEvent extends REvent {\r\n  static readonly NAME = 'device_restored';\r\n  constructor() {\r\n    super(DeviceRestoreEvent.NAME, false, false);\r\n  }\r\n}\r\n\r\nexport interface DeviceOptions {\r\n  msaa?: boolean;\r\n  dpr?: number;\r\n}\r\n\r\nexport abstract class Device extends REventTarget {\r\n  /** @internal */\r\n  protected _gpuObjectList: GPUObjectList;\r\n  protected _gpuMemCost: number;\r\n  protected _disposeObjectList: GPUObject[];\r\n  protected _beginFrameTime: number;\r\n  protected _endFrameTime: number;\r\n  protected _frameInfo: FrameInfo;\r\n  protected _cpuTimer: CPUTimer;\r\n  protected _gpuTimer: ITimer;\r\n  protected _runningLoop: number;\r\n  protected _frameBeginEvent: DeviceFrameBegin;\r\n  protected _frameEndEvent: DeviceFrameEnd;\r\n  protected _fpsCounter: { time: number, frame: number };\r\n  protected _runLoopFunc: (device: Device) => void;\r\n  constructor() {\r\n    super();\r\n    this._gpuObjectList = {\r\n      textures: [],\r\n      samplers: [],\r\n      buffers: [],\r\n      programs: [],\r\n      framebuffers: [],\r\n      vertexArrayObjects: [],\r\n      bindGroups: []\r\n    };\r\n    this._gpuMemCost = 0;\r\n    this._disposeObjectList = [];\r\n    this._beginFrameTime = 0;\r\n    this._endFrameTime = 0;\r\n    this._runLoopFunc = null;\r\n    this._frameInfo = {\r\n      frameCounter: 0,\r\n      frameTimestamp: 0,\r\n      elapsedTimeCPU: 0,\r\n      elapsedTimeGPU: 0,\r\n      elapsedFrame: 0,\r\n      elapsedOverall: 0,\r\n      FPS: 0,\r\n      drawCalls: 0,\r\n      computeCalls: 0,\r\n      nextFrameCall: []\r\n    };\r\n    this._cpuTimer = new CPUTimer();\r\n    this._gpuTimer = null;\r\n    this._runningLoop = null;\r\n    this._fpsCounter = { time: 0, frame: 0 };\r\n    this._frameBeginEvent = new DeviceFrameBegin(this);\r\n    this._frameEndEvent = new DeviceFrameEnd(this);\r\n  }\r\n  abstract getDeviceType(): DeviceType;\r\n  abstract getCanvas(): HTMLCanvasElement;\r\n  abstract isContextLost(): boolean;\r\n  abstract getScale(): number;\r\n  abstract getDrawingBufferWidth(): number;\r\n  abstract getDrawingBufferHeight(): number;\r\n  abstract getBackBufferWidth(): number;\r\n  abstract getBackBufferHeight(): number;\r\n  abstract getTextureCaps(): TextureCaps;\r\n  abstract getFramebufferCaps(): FramebufferCaps;\r\n  abstract getMiscCaps(): MiscCaps;\r\n  abstract getShaderCaps(): ShaderCaps;\r\n  abstract initContext(): Promise<void>;\r\n  abstract clearFrameBuffer(clearColor: Vector4, clearDepth: number, clearStencil: number);\r\n  abstract createGPUTimer(): ITimer;\r\n  abstract createRenderStateSet(): RenderStateSet;\r\n  abstract createSampler(options: SamplerOptions): TextureSampler;\r\n  abstract createTexture2D(format: TextureFormat, width: number, height: number, options?: TextureCreationOptions): Texture2D;\r\n  abstract createTexture2DFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): Texture2D;\r\n  abstract createTexture2DFromImage(element: TextureImageElement, options?: TextureCreationOptions): Texture2D;\r\n  abstract createTexture2DArray(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture2DArray;\r\n  abstract createTexture3D(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture3D;\r\n  abstract createCubeTexture(format: TextureFormat, size: number, options?: TextureCreationOptions): TextureCube;\r\n  abstract createCubeTextureFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): TextureCube;\r\n  abstract createTextureVideo(el: HTMLVideoElement): TextureVideo;\r\n  abstract reverseVertexWindingOrder(reverse: boolean): void;\r\n  abstract isWindingOrderReversed(): boolean;\r\n  abstract setRenderStatesOverridden(renderStates: RenderStateSet);\r\n  // program\r\n  abstract createGPUProgram(params: GPUProgramConstructParams): GPUProgram;\r\n  abstract createBindGroup(layout: BindGroupLayout): BindGroup;\r\n  abstract createBuffer(sizeInBytes: number, options: BufferCreationOptions): GPUDataBuffer;\r\n  abstract createIndexBuffer(data: Uint16Array | Uint32Array, options?: BufferCreationOptions): IndexBuffer;\r\n  abstract createStructuredBuffer(structureType: PBStructTypeInfo, options: BufferCreationOptions, data?: TypedArray): StructuredBuffer;\r\n  abstract createVAO(vertexData: VertexData): VertexInputLayout;\r\n  abstract createFrameBuffer(options?: IFrameBufferOptions): FrameBuffer;\r\n  // render related\r\n  abstract setViewport(vp?: number[]): number[];\r\n  abstract setViewport(x: number, y: number, w: number, h: number): void;\r\n  abstract getViewport(): number[];\r\n  abstract setScissor(scissor?: number[]): number[];\r\n  abstract setScissor(x: number, y: number, w: number, h: number): void;\r\n  abstract getScissor(): number[]\r\n  abstract setProgram(program: GPUProgram): void;\r\n  abstract getProgram(): GPUProgram;\r\n  abstract setVertexData(vertexData: VertexInputLayout): void;\r\n  abstract getVertexData(): VertexInputLayout;\r\n  abstract setRenderStates(renderStates: RenderStateSet): void;\r\n  abstract getRenderStates(): RenderStateSet;\r\n  abstract setFramebuffer(rt: FrameBuffer): void;\r\n  abstract getFramebuffer(): FrameBuffer;\r\n  abstract setBindGroup(index: number, bindGroup: BindGroup, dynamicOffsets?: Iterable<number>);\r\n  abstract flush(): void;\r\n  // misc\r\n  abstract readPixels(x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void>;\r\n  abstract readPixelsToBuffer(x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void;\r\n  abstract looseContext(): void;\r\n  abstract restoreContext(): void;\r\n  // draw\r\n  protected abstract _draw(primitiveType: PrimitiveType, first: number, count: number): void;\r\n  protected abstract _drawInstanced(primitiveType: PrimitiveType, first: number, count: number, numInstances: number): void;\r\n  protected abstract _compute(workgroupCountX, workgroupCountY, workgroupCountZ): void;\r\n\r\n  get videoMemoryUsage(): number {\r\n    return this._gpuMemCost;\r\n  }\r\n  get frameInfo(): FrameInfo {\r\n    return this._frameInfo;\r\n  }\r\n  get isRendering(): boolean {\r\n    return this._runningLoop !== null;\r\n  }\r\n  getEngineCaps(): EngineCaps {\r\n    return {\r\n      maxBindGroups: 4,\r\n      maxTexCoordIndex: 8,\r\n      maxVertexAttributes: 16\r\n    };\r\n  }\r\n  disposeObject(obj: GPUObject, remove = true) {\r\n    if (obj) {\r\n      if (remove) {\r\n        this.removeGPUObject(obj);\r\n      }\r\n      if (!obj.disposed) {\r\n        if (this.isContextLost()) {\r\n          obj.destroy();\r\n        } else {\r\n          this._disposeObjectList.push(obj);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  async restoreObject(obj: GPUObject) {\r\n    if (obj && obj.disposed && !this.isContextLost()) {\r\n      await obj.restore();\r\n      if (obj.restoreHandler) {\r\n        await obj.restoreHandler(obj);\r\n      }\r\n    }\r\n  }\r\n  enableGPUTimeRecording(enable: boolean) {\r\n    if (enable && !this._gpuTimer) {\r\n      this._gpuTimer = this.createGPUTimer();\r\n    } else if (!enable) {\r\n      this._gpuTimer?.end();\r\n      this._gpuTimer = null;\r\n    }\r\n  }\r\n  beginFrame(): boolean {\r\n    for (const obj of this._disposeObjectList) {\r\n      obj.destroy();\r\n    }\r\n    this._disposeObjectList = [];\r\n    this._beginFrameTime = this._cpuTimer.now();\r\n    this.updateFrameInfo();\r\n    this._frameBeginEvent.reset();\r\n    this.dispatchEvent(this._frameBeginEvent);\r\n    return this.onBeginFrame();\r\n  }\r\n  endFrame(): void {\r\n    this._endFrameTime = this._cpuTimer.now();\r\n    this._frameEndEvent.reset();\r\n    this.dispatchEvent(this._frameEndEvent);\r\n    this.onEndFrame();\r\n  }\r\n  draw(primitiveType: PrimitiveType, first: number, count: number): void {\r\n    this._frameInfo.drawCalls++;\r\n    this._draw(primitiveType, first, count);\r\n  }\r\n  drawInstanced(primitiveType: PrimitiveType, first: number, count: number, numInstances: number): void {\r\n    this._frameInfo.drawCalls++;\r\n    this._drawInstanced(primitiveType, first, count, numInstances);\r\n  }\r\n  compute(workgroupCountX, workgroupCountY, workgroupCountZ): void {\r\n    this._frameInfo.computeCalls++;\r\n    this._compute(workgroupCountX, workgroupCountY, workgroupCountZ);\r\n  }\r\n  runNextFrame(f: () => void) {\r\n    if (f) {\r\n      this._frameInfo.nextFrameCall.push(f);\r\n    }\r\n  }\r\n  cancelNextFrameCall(f: () => void) {\r\n    const index = this._frameInfo.nextFrameCall.indexOf(f);\r\n    if (index >= 0) {\r\n      this._frameInfo.nextFrameCall.splice(index, 1);\r\n    }\r\n  }\r\n  exitLoop() {\r\n    if (this._runningLoop) {\r\n      cancelAnimationFrame(this._runningLoop);\r\n      this._runningLoop = null;\r\n    }\r\n  }\r\n  runLoop(func: (device: Device) => void) {\r\n    if (this._runningLoop !== null) {\r\n      console.error('Device.runLoop() can not be nested');\r\n      return;\r\n    }\r\n    if (!func) {\r\n      console.error('Device.runLoop() argment error');\r\n      return;\r\n    }\r\n    const that = this;\r\n    that._runLoopFunc = func;\r\n    (function entry() {\r\n      that._runningLoop = requestAnimationFrame(entry);\r\n      if (that.beginFrame()) {\r\n        that._runLoopFunc(that);\r\n        that.endFrame();\r\n      }\r\n    }());\r\n  }\r\n  getGPUObjects(): GPUObjectList {\r\n    return this._gpuObjectList;\r\n  }\r\n  getGPUObjectById(uid: number): GPUObject {\r\n    for (const list of [\r\n      this._gpuObjectList.textures,\r\n      this._gpuObjectList.samplers,\r\n      this._gpuObjectList.buffers,\r\n      this._gpuObjectList.framebuffers,\r\n      this._gpuObjectList.programs,\r\n      this._gpuObjectList.vertexArrayObjects\r\n    ]) {\r\n      for (const obj of list) {\r\n        if (obj.uid === uid) {\r\n          return obj;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  screenToDevice(val: number): number {\r\n    return this.getFramebuffer() ? val : Math.round(val * this.getScale());\r\n  }\r\n  deviceToScreen(val: number): number {\r\n    return this.getFramebuffer() ? val : Math.round(val / this.getScale());\r\n  }\r\n  createAssetManager(): AssetManager {\r\n    return new AssetManager(this);\r\n  }\r\n  createProgramBuilder(): ProgramBuilder {\r\n    return new ProgramBuilder(this);\r\n  }\r\n  /** @internal */\r\n  addGPUObject(obj: GPUObject) {\r\n    const list = this.getGPUObjectList(obj);\r\n    if (list && list.indexOf(obj) < 0) {\r\n      list.push(obj);\r\n      this.dispatchEvent(new DeviceGPUObjectAddedEvent(obj));\r\n    }\r\n  }\r\n  /** @internal */\r\n  removeGPUObject(obj: GPUObject) {\r\n    const list = this.getGPUObjectList(obj);\r\n    if (list) {\r\n      const index = list.indexOf(obj);\r\n      if (index >= 0) {\r\n        list.splice(index, 1);\r\n        this.dispatchEvent(new DeviceGPUObjectRemovedEvent(obj));\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  updateVideoMemoryCost(delta: number) {\r\n    this._gpuMemCost += delta;\r\n  }\r\n  /** @internal */\r\n  protected abstract onBeginFrame(): boolean;\r\n  /** @internal */\r\n  protected abstract onEndFrame(): void;\r\n  /** @internal */\r\n  private updateFrameInfo() {\r\n    this._frameInfo.frameCounter++;\r\n    this._frameInfo.drawCalls = 0;\r\n    this._frameInfo.computeCalls = 0;\r\n    const now = this._beginFrameTime;\r\n    if (this._frameInfo.frameTimestamp === 0) {\r\n      this._frameInfo.frameTimestamp = now;\r\n      this._frameInfo.elapsedTimeCPU = 0;\r\n      this._frameInfo.elapsedTimeGPU = 0;\r\n      this._frameInfo.elapsedFrame = 0;\r\n      this._frameInfo.elapsedOverall = 0;\r\n      this._frameInfo.FPS = 0;\r\n      this._fpsCounter.time = now;\r\n      this._fpsCounter.frame = this._frameInfo.frameCounter;\r\n      if (this._gpuTimer) {\r\n        this._gpuTimer.begin();\r\n      }\r\n    } else {\r\n      this._frameInfo.elapsedFrame = now - this._frameInfo.frameTimestamp;\r\n      this._frameInfo.elapsedOverall += this._frameInfo.elapsedFrame;\r\n      if (this._endFrameTime !== 0) {\r\n        this._frameInfo.elapsedTimeGPU = now - this._endFrameTime;\r\n        this._frameInfo.elapsedTimeCPU = this._endFrameTime - this._frameInfo.frameTimestamp;\r\n      }\r\n      this._frameInfo.frameTimestamp = now;\r\n      if (now >= this._fpsCounter.time + 1000) {\r\n        this._frameInfo.FPS = (this._frameInfo.frameCounter - this._fpsCounter.frame) * 1000 / (now - this._fpsCounter.time);\r\n        this._fpsCounter.time = now;\r\n        this._fpsCounter.frame = this._frameInfo.frameCounter;\r\n      }\r\n    }\r\n    for (const f of this._frameInfo.nextFrameCall) {\r\n      f();\r\n    }\r\n    this._frameInfo.nextFrameCall.length = 0;\r\n  }\r\n  /** @internal */\r\n  private getGPUObjectList(obj: GPUObject): GPUObject[] {\r\n    let list: GPUObject[] = null;\r\n    if (obj.isTexture()) {\r\n      list = this._gpuObjectList.textures;\r\n    } else if (obj.isSampler()) {\r\n      list = this._gpuObjectList.samplers;\r\n    } else if (obj.isBuffer()) {\r\n      list = this._gpuObjectList.buffers;\r\n    } else if (obj.isFramebuffer()) {\r\n      list = this._gpuObjectList.framebuffers;\r\n    } else if (obj.isProgram()) {\r\n      list = this._gpuObjectList.programs;\r\n    } else if (obj.isVAO()) {\r\n      list = this._gpuObjectList.vertexArrayObjects;\r\n    } else if (obj.isBindGroup()) {\r\n      list = this._gpuObjectList.bindGroups;\r\n    }\r\n    return list;\r\n  }\r\n  /** @internal */\r\n  protected invalidateAll() {\r\n    for (const list of [\r\n      this._gpuObjectList.buffers,\r\n      this._gpuObjectList.textures,\r\n      this._gpuObjectList.samplers,\r\n      this._gpuObjectList.programs,\r\n      this._gpuObjectList.framebuffers,\r\n      this._gpuObjectList.vertexArrayObjects,\r\n      this._gpuObjectList.bindGroups\r\n    ]) {\r\n      for (const obj of list) {\r\n        this.disposeObject(obj, false);\r\n      }\r\n    }\r\n    if (this.isContextLost()) {\r\n      for (const obj of this._disposeObjectList) {\r\n        obj.destroy();\r\n      }\r\n      this._disposeObjectList = [];\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected async reloadAll() {\r\n    const promises: Promise<void>[] = [];\r\n    for (const list of [\r\n      this._gpuObjectList.buffers,\r\n      this._gpuObjectList.textures,\r\n      this._gpuObjectList.samplers,\r\n      this._gpuObjectList.programs,\r\n      this._gpuObjectList.framebuffers,\r\n      this._gpuObjectList.vertexArrayObjects,\r\n      this._gpuObjectList.bindGroups\r\n    ]) {\r\n      // obj.reload() may change the list, so make a copy first\r\n      for (const obj of list.slice()) {\r\n        promises.push(obj.reload());\r\n      }\r\n    }\r\n    return Promise.all(promises);\r\n  }\r\n  /** @internal */\r\n  protected parseTextureOptions(options?: TextureCreationOptions): number {\r\n    const colorSpace = options?.colorSpace ?? 'srgb';\r\n    console.assert(colorSpace === 'srgb' || colorSpace === 'linear', `invalid texture color space: ${colorSpace}`);\r\n    const colorSpaceFlag = colorSpace === 'srgb' ? 0 : GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE;\r\n    const noMipmapFlag = !!options?.noMipmap ? GPUResourceUsageFlags.TF_NO_MIPMAP : 0;\r\n    const writableFlag = !!options?.writable ? GPUResourceUsageFlags.TF_WRITABLE : 0;\r\n    const dynamicFlag = !!options?.dynamic ? GPUResourceUsageFlags.DYNAMIC : 0;\r\n    const managedFlag = !!options?.managed ? GPUResourceUsageFlags.MANAGED : 0;\r\n    return colorSpaceFlag|noMipmapFlag|writableFlag|dynamicFlag|managedFlag;\r\n  }\r\n  /** @internal */\r\n  protected parseBufferOptions(options: BufferCreationOptions, defaultUsage?: BufferUsage): number {\r\n    const usage = options?.usage || defaultUsage;\r\n    let usageFlag: number;\r\n    switch(usage) {\r\n      case 'uniform':\r\n        usageFlag = GPUResourceUsageFlags.BF_UNIFORM;\r\n        break;\r\n      case 'vertex':\r\n        usageFlag = GPUResourceUsageFlags.BF_VERTEX;\r\n        break;\r\n      case 'index': \r\n        usageFlag = GPUResourceUsageFlags.BF_INDEX; \r\n        break;\r\n      case 'read':\r\n        usageFlag = GPUResourceUsageFlags.BF_READ;\r\n        break;\r\n      case 'write':\r\n        usageFlag = GPUResourceUsageFlags.BF_WRITE;\r\n        break;\r\n      default:\r\n        usageFlag = 0;\r\n        break;\r\n    }\r\n    const storageFlag = !!options?.storage ? GPUResourceUsageFlags.BF_STORAGE : 0;\r\n    const dynamicFlag = !!options?.dynamic ? GPUResourceUsageFlags.DYNAMIC : 0;\r\n    const managedFlag = !!options?.managed ? GPUResourceUsageFlags.MANAGED : 0;\r\n    return usageFlag|storageFlag|dynamicFlag|managedFlag;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}