/// <reference types="dist" />
import { WebGPUObject } from './gpuobject_webgpu';
import { TextureCaps } from '../device';
import { TextureTarget, TextureFormat } from '../base_types';
import { BaseTexture, TextureSampler, GPUDataBuffer } from '../gpuobject';
import { UploadRingBuffer, UploadTexture, UploadImage } from './uploadringbuffer';
import type { WebGPUDevice } from './device';
export declare abstract class WebGPUBaseTexture<T extends GPUTexture | GPUExternalTexture = GPUTexture> extends WebGPUObject<T> {
    protected _target: TextureTarget;
    protected _hash: string;
    protected _memCost: number;
    protected _views: GPUTextureView[][][];
    protected _defaultView: GPUTextureView;
    protected _mipmapDirty: boolean;
    protected _flags: number;
    protected _width: number;
    protected _height: number;
    protected _depth: number;
    protected _format: TextureFormat;
    protected _renderable: boolean;
    protected _fb: boolean;
    protected _gpuFormat: GPUTextureFormat;
    protected _mipLevelCount: number;
    protected _ringBuffer: UploadRingBuffer;
    protected _pendingUploads: (UploadTexture | UploadImage)[];
    constructor(device: WebGPUDevice, target?: TextureTarget);
    get hash(): number;
    get target(): TextureTarget;
    get linearColorSpace(): boolean;
    get width(): number;
    get height(): number;
    get depth(): number;
    get format(): TextureFormat;
    get mipLevelCount(): number;
    get gpuFormat(): GPUTextureFormat;
    abstract init(): void;
    isTexture(): this is BaseTexture;
    isFilterable(): boolean;
    isMipmapDirty(): boolean;
    setMipmapDirty(b: boolean): void;
    destroy(): void;
    restore(): Promise<void>;
    getTextureCaps(): TextureCaps;
    isFloatFormat(): boolean;
    isIntegerFormat(): boolean;
    isSignedFormat(): boolean;
    isCompressedFormat(): boolean;
    isDepth(): boolean;
    isRenderable(): boolean;
    getView(level?: number, face?: number, mipCount?: number): GPUTextureView;
    getDefaultView(): GPUTextureView;
    copyPixelDataToBuffer(x: number, y: number, w: number, h: number, layer: number, level: number, buffer: GPUDataBuffer): void;
    generateMipmaps(): void;
    beginSyncChanges(encoder: GPUCommandEncoder): void;
    endSyncChanges(): void;
    getDefaultSampler(shadow: boolean): TextureSampler;
    abstract createView(level?: number, face?: number, mipCount?: number): GPUTextureView;
}
