{"version":3,"file":"texturecube_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/texturecube_webgpu.ts"],"sourcesContent":["import { CubeFace } from '@sophon/base';\nimport { TextureFormat, TextureTarget, linearTextureFormatToSRGB, getTextureFormatBlockWidth, getTextureFormatBlockHeight, getTextureFormatBlockSize } from '../base_types';\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\nimport { GPUResourceUsageFlags, TextureMipmapData, TextureCube, TextureImageElement, GPUDataBuffer } from '../gpuobject';\nimport type { WebGPUDevice } from './device';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGPUTextureCube extends WebGPUBaseTexture implements TextureCube<GPUTexture> {\n  constructor(device: WebGPUDevice) {\n    super(device, TextureTarget.TextureCubemap);\n  }\n  init(): void {\n    this.loadEmpty(this._format, this._width, this._mipLevelCount);\n  }\n  update(\n    data: TypedArray,\n    xOffset: number,\n    yOffset: number,\n    width: number,\n    height: number,\n    face: CubeFace,\n  ): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    this.uploadRaw(data, width, height, 1, xOffset, yOffset, face, 0);\n    if (this._mipLevelCount > 1) {\n      this.generateMipmaps();\n    }\n  }\n  updateFromElement(data: TextureImageElement, xOffset: number, yOffset: number, face: number, x: number, y: number, width: number, height: number): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    if (data instanceof HTMLCanvasElement && x === 0 && y === 0) {\n      this.uploadImageData(data, width, height, xOffset, yOffset, 0, face || 0);\n    } else {\n      const cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      const ctx = cvs.getContext('2d');\n      ctx.drawImage(data, x, y, width, height, 0, 0, width, height);\n      this.uploadImageData(cvs, width, height, xOffset, yOffset, 0, face || 0);\n      cvs.width = 0;\n      cvs.height = 0;\n    }\n  }\n  createEmpty(format: TextureFormat, size: number, creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n      console.error(new Error('storage texture can not be cube texture'));\n    } else {\n      format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? format : linearTextureFormatToSRGB(format);\n      this.loadEmpty(format, size, 0);\n    }\n  }\n  /** @internal */\n  loadFaceImages(images: HTMLImageElement[], creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n      console.error(new Error('storage texture can not be cube texture'));\n    } else {\n      const format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n      this.loadImages(images, format);\n    }\n  }\n  isTextureCube(): this is TextureCube {\n    return true;\n  }\n  createView(level?: number, face?: number, mipCount?: number): GPUTextureView {\n    return this._object ? this._device.gpuCreateTextureView(this._object, {\n      format: this._gpuFormat,\n      dimension: '2d',\n      baseMipLevel: level ?? 0,\n      mipLevelCount: mipCount || this._mipLevelCount - (level ?? 0),\n      baseArrayLayer: face ?? 0,\n      arrayLayerCount: 1,\n      aspect: 'all',\n    }) : null;\n  }\n  async readPixels(face: number, x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\n    const blockWidth = getTextureFormatBlockWidth(this.format);\n    const blockHeight = getTextureFormatBlockHeight(this.format);\n    const blockSize = getTextureFormatBlockSize(this.format);\n    const blocksPerRow = this.width / blockWidth;\n    const blocksPerCol = this.height / blockHeight;\n    const imageSize = blocksPerRow * blocksPerCol * blockSize;\n    if (buffer.byteLength < imageSize) {\n      throw new Error(`Texture2D.readPixels() failed: destination buffer size is ${buffer.byteLength}, should be at least ${imageSize}`);\n    }\n    const tmpBuffer = this._device.createBuffer(imageSize, { usage: 'read' });\n    await this.copyPixelDataToBuffer(x, y, w, h, face, 0, tmpBuffer);\n    await tmpBuffer.getBufferSubData(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength), 0, imageSize);\n    tmpBuffer.dispose();\n  }\n  readPixelsToBuffer(face: number, x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void {\n    this.copyPixelDataToBuffer(x, y, w, h, face, 0, buffer);\n  }\n  createWithMipmapData(data: TextureMipmapData, creationFlags?: number): void {\n    if (!data.isCubemap) {\n      console.error('loading cubmap with mipmap data failed: data is not cubemap');\n    } else {\n      this._flags = Number(creationFlags) || 0;\n      if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n        console.error('webgl device does not support storage texture');\n      } else {\n        this.loadLevels(data);\n      }\n    }\n  }\n  /** @internal */\n  private loadEmpty(format: TextureFormat, size: number, mipLevelCount: number): void {\n    this.allocInternal(format, size, size, 1, mipLevelCount);\n    if (this._mipLevelCount > 1 && !this._device.isContextLost()) {\n      this.generateMipmaps();\n    }\n  }\n  /** @internal */\n  private loadImages(images: HTMLImageElement[], format: TextureFormat): void {\n    const width = images[0].width;\n    const height = images[0].height;\n    if (images.length !== 6) {\n      console.error(new Error('cubemap face list must have 6 images'));\n      return;\n    }\n    for (let i = 1; i < 6; i++) {\n      if (images[i].width !== width || images[i].height !== height) {\n        console.error(new Error('cubemap face images must have identical sizes'));\n        return;\n      }\n    }\n    if (width === 0 || height === 0) {\n      return;\n    }\n    this.allocInternal(format, width, height, 1, 0);\n    if (!this._device.isContextLost()) {\n      const w = this._width;\n      const h = this._height;\n      for (let face = 0; face < 6; face++) {\n        createImageBitmap(images[face], {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        }).then((bmData) => {\n          this.uploadImageData(bmData, w, h, 0, 0, 0, 0);\n        });\n      }\n      if (this._mipLevelCount > 1) {\n        this.generateMipmaps();\n      }\n    }\n  }\n  /** @internal */\n  private loadLevels(levels: TextureMipmapData): void {\n    const sRGB = !(this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE);\n    const format = sRGB ? linearTextureFormatToSRGB(levels.format) : levels.format;\n    const width = levels.width;\n    const height = levels.height;\n    const mipLevelCount = levels.mipLevels;\n    if (levels.isCompressed) {\n      if (sRGB ? !this._device.getTextureCaps().supportS3TCSRGB : !this._device.getTextureCaps().supportS3TC) {\n        console.warn('No s3tc compression format support');\n        return;\n      }\n    }\n    this.allocInternal(format, width, height, 1, mipLevelCount);\n    if (!this._device.isContextLost()) {\n      for (let face = 0; face < 6; face++) {\n        for (let i = 0; i < levels.mipDatas[face].length; i++) {\n          this.uploadRaw(levels.mipDatas[face][i].data, levels.mipDatas[face][i].width, levels.mipDatas[face][i].height, 1, 0, 0, face, i);\n        }\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}