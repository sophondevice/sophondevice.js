{"version":3,"file":"pipeline_cache.js","sources":["../../../../../libs/device/src/device/webgpu/pipeline_cache.ts"],"sourcesContent":["import { compareFuncMap, stencilOpMap, primitiveTypeMap, faceModeMap, blendEquationMap, blendFuncMap } from './constants_webgpu';\r\nimport { PrimitiveType, CompareFunc } from '../base_types';\r\nimport { StencilOp, BlendEquation, BlendFunc } from '../render_states';\r\nimport * as rs from './renderstates_webgpu';\r\nimport { typeU16 } from '../builder';\r\nimport type { WebGPUVertexInputLayout } from './vertexinputlayout_webgpu';\r\nimport type { WebGPUProgram } from './gpuprogram_webgpu';\r\nimport type { WebGPUDevice } from './device';\r\nimport type { WebGPURenderStateSet } from './renderstates_webgpu';\r\nimport type { BindGroupLayout } from '../gpuobject';\r\n\r\nconst stencilFormats = ['stencil8', 'depth24plus-stencil8', 'depth24unorm-stencil8', 'depth32float-stencil8'];\r\nconst depthFormats = ['depth16unorm', 'depth24plus', 'depth24plus-stencil8', 'depth32float', 'depth24unorm-stencil8', 'depth32float-stencil8'];\r\nexport type FrameBufferInfo = { colorFormats: GPUTextureFormat[], depthFormat: GPUTextureFormat, sampleCount: number, hash: string };\r\nexport class PipelineCache {\r\n  private _device: WebGPUDevice;\r\n  private _renderPipelines: { [hash: string]: GPURenderPipeline };\r\n  private _computePipelines: { [hash: string]: GPUComputePipeline };\r\n  constructor(device: WebGPUDevice) {\r\n    this._device = device;\r\n    this._renderPipelines = {};\r\n    this._computePipelines = {};\r\n  }\r\n  wipeCache() {\r\n    this._renderPipelines = {};\r\n    this._computePipelines = {};\r\n  }\r\n  fetchComputePipeline(program: WebGPUProgram): GPUComputePipeline {\r\n    const hash = this.getComputePipelineHash(program);\r\n    let pipeline = this._computePipelines[hash];\r\n    if (pipeline === undefined) {\r\n      const shaderModule = program.getShaderModule();\r\n      const desc: GPUComputePipelineDescriptor = {\r\n        layout: shaderModule.pipelineLayout,\r\n        compute: {\r\n          module: shaderModule.csModule,\r\n          entryPoint: 'main',\r\n        },\r\n      };\r\n      pipeline = this._device.gpuCreateComputePipeline(desc);\r\n      this._computePipelines[hash] = pipeline;\r\n    }\r\n    return pipeline;\r\n  }\r\n  fetchRenderPipeline(program: WebGPUProgram, vertexData: WebGPUVertexInputLayout, stateSet: WebGPURenderStateSet, primitiveType: PrimitiveType, frameBufferInfo: FrameBufferInfo): GPURenderPipeline {\r\n    if (!frameBufferInfo.hash) {\r\n      return null;\r\n    }\r\n    if (!program.vertexAttributes) {\r\n      // no vertex data needed for this pipeline\r\n      vertexData = null;\r\n    }\r\n    const hash = this.getRenderPipelineHash(frameBufferInfo.hash, program, vertexData, stateSet, primitiveType);\r\n    let pipeline = this._renderPipelines[hash];\r\n    if (pipeline === undefined) {\r\n      const bufferLayouts = vertexData ? this._device.fetchVertexLayout(vertexData.getLayouts(program.vertexAttributes).layoutHash) : null;\r\n      const shaderModule = program.getShaderModule();\r\n      const vertex: GPUVertexState = {\r\n        module: shaderModule.vsModule,\r\n        entryPoint: 'main'\r\n      };\r\n      if (bufferLayouts) {\r\n        vertex.buffers = bufferLayouts;\r\n      }\r\n      const primitiveState = this.createPrimitiveState(vertexData, stateSet, primitiveType);\r\n      const depthStencilState = this.createDepthStencilState(frameBufferInfo.depthFormat, stateSet);\r\n      const colorTargetStates = frameBufferInfo.colorFormats.map(val => this.createColorTargetState(stateSet, val));\r\n      const desc: GPURenderPipelineDescriptor = {\r\n        label: hash,\r\n        layout: shaderModule.pipelineLayout,\r\n        vertex,\r\n        primitive: primitiveState,\r\n        depthStencil: depthStencilState,\r\n        multisample: {\r\n          count: frameBufferInfo.sampleCount,\r\n        },\r\n        fragment: {\r\n          module: shaderModule.fsModule,\r\n          entryPoint: 'main',\r\n          targets: colorTargetStates\r\n        }\r\n      };\r\n      pipeline = this._device.gpuCreateRenderPipeline(desc);\r\n      this._renderPipelines[hash] = pipeline;\r\n    }\r\n    return pipeline;\r\n  }\r\n  private createPrimitiveState(vertexData: WebGPUVertexInputLayout, stateSet: WebGPURenderStateSet, primitiveType: PrimitiveType): GPUPrimitiveState {\r\n    const topology = primitiveTypeMap[primitiveType];\r\n    if (!topology) {\r\n      throw new Error(`createPrimitiveState() failed: invalid primitive type: ${primitiveType}`);\r\n    }\r\n    const stateOverridden = this._device.getRenderStatesOverridden();\r\n    const rasterizerState = stateOverridden?.rasterizerState || stateSet?.rasterizerState || rs.WebGPURasterizerState.defaultState as rs.WebGPURasterizerState;\r\n    const cullMode = faceModeMap[rasterizerState.cullMode];\r\n    if (!cullMode) {\r\n      throw new Error(`createPrimitiveState() failed: invalid cull mode: ${rasterizerState.cullMode}`);\r\n    }\r\n    const frontFace = this._device.isWindingOrderReversed() ? 'cw' : 'ccw';\r\n    const state: GPUPrimitiveState = {\r\n      topology,\r\n      frontFace,\r\n      cullMode\r\n    };\r\n    if (topology === 'triangle-strip' || topology === 'line-strip') {\r\n      state.stripIndexFormat = vertexData?.getIndexBuffer()?.indexType === typeU16 ? 'uint16' : 'uint32';\r\n    }\r\n    return state;\r\n  }\r\n  private createDepthStencilState(depthFormat: GPUTextureFormat, stateSet: WebGPURenderStateSet): GPUDepthStencilState {\r\n    if (!depthFormat) {\r\n      return undefined;\r\n    }\r\n    const stateOverridden = this._device.getRenderStatesOverridden();\r\n    const depthState = stateOverridden?.depthState || stateSet?.depthState || rs.WebGPUDepthState.defaultState as rs.WebGPUDepthState;\r\n    const stencilState = stateOverridden?.stencilState || stateSet?.stencilState || rs.WebGPUStencilState.defaultState as rs.WebGPUStencilState;\r\n    const hasStencil = stencilFormats.indexOf(depthFormat) >= 0;\r\n    const hasDepth = depthFormats.indexOf(depthFormat) >= 0;\r\n    const depthWriteEnabled = hasDepth ? depthState.writeEnabled : false;\r\n    const depthCompare: GPUCompareFunction = (hasDepth && depthState.testEnabled) ? compareFuncMap[depthState.compareFunc] : 'always';\r\n    const state: GPUDepthStencilState = {\r\n      format: depthFormat,\r\n      depthWriteEnabled,\r\n      depthCompare,\r\n    };\r\n    if (hasStencil) {\r\n      const stencilFront = stencilState.enabled ? this.createStencilFaceState(stencilState.func, stencilState.failOp, stencilState.zFailOp, stencilState.passOp) : undefined;\r\n      const stencilBack = stencilState.enabled ? this.createStencilFaceState(stencilState.funcBack, stencilState.failOpBack, stencilState.zFailOpBack, stencilState.passOpBack) : undefined;\r\n      const stencilReadMask = stencilState.enabled ? stencilState.valueMask : undefined;\r\n      const stencilWriteMask = stencilState.enabled ? stencilState.writeMask : undefined;\r\n      state.stencilFront = stencilFront;\r\n      state.stencilBack = stencilBack;\r\n      state.stencilReadMask = stencilReadMask;\r\n      state.stencilWriteMask = stencilWriteMask;\r\n    }\r\n    return state;\r\n  }\r\n  private createStencilFaceState(func: CompareFunc, failOp: StencilOp, zFailOp: StencilOp, passOp: StencilOp): GPUStencilFaceState {\r\n    return {\r\n      compare: compareFuncMap[func],\r\n      failOp: stencilOpMap[failOp],\r\n      depthFailOp: stencilOpMap[zFailOp],\r\n      passOp: stencilOpMap[passOp],\r\n    };\r\n  }\r\n  private createColorTargetState(stateSet: WebGPURenderStateSet, format: GPUTextureFormat) {\r\n    const stateOverridden = this._device.getRenderStatesOverridden();\r\n    const blendingState = stateOverridden?.blendingState || stateSet?.blendingState || rs.WebGPUBlendingState.defaultState as rs.WebGPUBlendingState;\r\n    const colorState = stateOverridden?.colorState || stateSet?.colorState || rs.WebGPUColorState.defaultState as rs.WebGPUColorState;\r\n    const r = colorState.redMask ? GPUColorWrite.RED : 0;\r\n    const g = colorState.greenMask ? GPUColorWrite.GREEN : 0;\r\n    const b = colorState.blueMask ? GPUColorWrite.BLUE : 0;\r\n    const a = colorState.alphaMask ? GPUColorWrite.ALPHA : 0;\r\n    const state: GPUColorTargetState = {\r\n      format: format,\r\n      writeMask: r | g | b | a\r\n    };\r\n    if (blendingState.enabled) {\r\n      state.blend = this.createBlendState(blendingState);\r\n    }\r\n    return state;\r\n  }\r\n  private createBlendState(blendingState: rs.WebGPUBlendingState): GPUBlendState {\r\n    return {\r\n      color: this.createBlendComponent(blendingState.rgbEquation, blendingState.srcBlendRGB, blendingState.dstBlendRGB),\r\n      alpha: this.createBlendComponent(blendingState.alphaEquation, blendingState.srcBlendAlpha, blendingState.dstBlendAlpha)\r\n    }\r\n  }\r\n  private createBlendComponent(op: BlendEquation, srcFunc: BlendFunc, dstFunc: BlendFunc): GPUBlendComponent {\r\n    const operation = blendEquationMap[op];\r\n    if (!operation) {\r\n      throw new Error(`createBlendComponent() failed: invalid blend op: ${op}`);\r\n    }\r\n    const srcFactor = blendFuncMap[srcFunc];\r\n    if (!srcFactor) {\r\n      throw new Error(`createBlendComponent() failed: invalid source blend func ${srcFunc}`);\r\n    }\r\n    const dstFactor = blendFuncMap[dstFunc];\r\n    if (!dstFactor) {\r\n      throw new Error(`createBlendComponent() failed: invalid dest blend func ${dstFunc}`);\r\n    }\r\n    return {\r\n      operation,\r\n      srcFactor,\r\n      dstFactor\r\n    };\r\n  }\r\n  private getRenderPipelineHash(fbHash: string, program: WebGPUProgram, vertexData: WebGPUVertexInputLayout, stateSet: WebGPURenderStateSet, primitiveType: PrimitiveType): string {\r\n    const programHash = program.hash;\r\n    const vertexHash = vertexData?.getLayouts(program.vertexAttributes).layoutHash || '';\r\n    const stateHash = stateSet?.hash || '';\r\n    const stateOverriddenHash = this._device.getRenderStatesOverridden()?.hash || '';\r\n    return `${programHash}:${vertexHash}:${fbHash}:${primitiveType}:${stateHash}:${stateOverriddenHash}:${Number(this._device.isWindingOrderReversed())}`;\r\n  }\r\n  private getComputePipelineHash(program: WebGPUProgram): string {\r\n    return program.hash;\r\n  }\r\n}\r\n"],"names":["rs.WebGPURasterizerState","rs.WebGPUDepthState","rs.WebGPUStencilState","rs.WebGPUBlendingState","rs.WebGPUColorState"],"mappings":"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"}