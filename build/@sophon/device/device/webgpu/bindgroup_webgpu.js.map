{"version":3,"file":"bindgroup_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/bindgroup_webgpu.ts"],"sourcesContent":["import { WebGPUStructuredBuffer } from './structuredbuffer_webgpu';\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\nimport { WebGPUTextureVideo } from './texturevideo_webgpu';\nimport { WebGPUTextureSampler } from './sampler_webgpu';\nimport { BufferCreationOptions, GPUResourceUsageFlags, StructuredValue, TextureVideo } from '../gpuobject';\nimport { WebGPUObject } from './gpuobject_webgpu';\nimport type { PBStructTypeInfo } from '../builder';\nimport type { WebGPUDevice } from './device';\nimport type { BindGroupLayout, BaseTexture, TextureSampler, BindGroup, BindGroupLayoutEntry, StructuredBuffer } from '../gpuobject';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGPUBindGroup extends WebGPUObject<unknown> implements BindGroup {\n  private _layout: BindGroupLayout;\n  private _bindGroup: GPUBindGroup;\n  private _buffers: WebGPUStructuredBuffer[];\n  private _textures: WebGPUBaseTexture[];\n  private _videoTextures: WebGPUTextureVideo[];\n  private _resources: { [name: string]: WebGPUStructuredBuffer | WebGPUTextureVideo | [WebGPUBaseTexture, GPUTextureView] | GPUSampler };\n  constructor(device: WebGPUDevice, layout: BindGroupLayout) {\n    super(device);\n    this._device = device;\n    this._layout = layout;\n    this._bindGroup = null;\n    this._resources = {};\n    this._buffers = [];\n    this._textures = [];\n    this._videoTextures = null;\n  }\n  get bindGroup() {\n    if (!this._bindGroup) {\n      this._bindGroup = this._create();\n    }\n    return this._bindGroup;\n  }\n  get bufferList(): WebGPUStructuredBuffer[] {\n    return this._buffers;\n  }\n  get textureList(): WebGPUBaseTexture[] {\n    return this._textures;\n  }\n  getLayout(): BindGroupLayout {\n    return this._layout;\n  }\n  getBuffer(name: string): StructuredBuffer {\n    return this._getBuffer(name, GPUResourceUsageFlags.BF_UNIFORM | GPUResourceUsageFlags.BF_STORAGE, true);\n  }\n  setBuffer(name: string, buffer: StructuredBuffer) {\n    for (const entry of this._layout.entries) {\n      if (entry.name === name) {\n        if (!entry.buffer) {\n          console.log(`setBuffer() failed: resource '${name}' is not buffer`);\n        } else {\n          const bufferUsage = entry.buffer.type === 'uniform' ? GPUResourceUsageFlags.BF_UNIFORM : GPUResourceUsageFlags.BF_STORAGE;\n          if (buffer && !(buffer.usage & bufferUsage)) {\n            console.log(`setBuffer() failed: buffer resource '${name}' must be type '${entry.buffer.type}'`);\n          } else if (buffer !== this._resources[entry.name]) {\n            this._resources[entry.name] = buffer as WebGPUStructuredBuffer;\n            this._bindGroup = null;\n          }\n        }\n        return;\n      }\n    }\n    console.log(`setBuffer() failed: no buffer resource named '${name}'`);\n  }\n  setValue(name: string, value: StructuredValue) {\n    const mappedName = this._layout.nameMap?.[name];\n    if (mappedName) {\n      this.setValue(mappedName, { [name]: value });\n    } else {\n      const buffer = this._getBuffer(name, GPUResourceUsageFlags.BF_UNIFORM | GPUResourceUsageFlags.BF_STORAGE, false);\n      if (buffer) {\n        if ((value as any)?.BYTES_PER_ELEMENT) {\n          buffer.bufferSubData(0, value as TypedArray);\n        } else {\n          for (const k in value as any) {\n            buffer.set(k, value[k]);\n          }\n        }\n      } else {\n        console.log(`setValue() failed: no uniform buffer named '${name}'`);\n      }\n    }\n  }\n  setRawData(name: string, byteOffset: number, data: TypedArray, srcPos?: number, srcLength?: number) {\n    const mappedName = this._layout.nameMap?.[name];\n    if (mappedName) {\n      this.setRawData(mappedName, byteOffset, data, srcPos, srcLength);\n    } else {\n      const buffer = this._getBuffer(name, GPUResourceUsageFlags.BF_UNIFORM | GPUResourceUsageFlags.BF_STORAGE, false);\n      if (buffer) {\n        buffer.bufferSubData(byteOffset, data, srcPos, srcLength);\n      } else {\n        console.log(`set(): no uniform buffer named '${name}'`);\n      }\n    }\n  }\n  getTexture(name: string): BaseTexture {\n    const entry = this._findTextureLayout(name);\n    if (entry) {\n      const t = this._resources[name] as [WebGPUBaseTexture, GPUTextureView];\n      return t ? t[0] : null;\n    } else {\n      throw new Error(`getTexture() failed:${name} is not a texture`);\n    }\n  }\n  setTextureView(name: string, value: BaseTexture, level?: number, face?: number, mipCount?: number) {\n    if (!value) {\n      throw new Error(`WebGPUBindGroup.setTextureView() failed: invalid texture uniform value: ${value}`);\n    } else {\n      const entry = this._findTextureLayout(name);\n      if (entry.externalTexture) {\n        throw new Error(`WebGPUBindGroup.setTextureView() failed: video texture does not have view`);\n      } else if (value.isTextureVideo()) {\n        throw new Error(`WebGPUBindGroup.setTextureView() failed: invalid texture type`);\n      }\n      if (entry) {\n        const t = this._resources[name] as [WebGPUBaseTexture, GPUTextureView];\n        const view = (value as WebGPUBaseTexture).getView(level, face, mipCount);\n        if (!t || t[0] !== value || t[1] !== view) {\n          this._resources[name] = [value as WebGPUBaseTexture, view];\n          if (entry.texture?.autoBindSampler) {\n            const sampler = this._findSamplerLayout(entry.texture.autoBindSampler);\n            if (!sampler || !sampler.sampler) {\n              throw new Error(`WebGPUBindGroup.setTextureView() failed: sampler entry not found: ${entry.texture.autoBindSampler}`);\n            }\n            this._resources[entry.texture.autoBindSampler] = (value.getDefaultSampler(false) as WebGPUTextureSampler).object;\n          }\n          if (entry.texture?.autoBindSamplerComparison) {\n            const sampler = this._findSamplerLayout(entry.texture.autoBindSamplerComparison);\n            if (!sampler || !sampler.sampler) {\n              throw new Error(`WebGPUBindGroup.setTextureView() failed: sampler entry not found: ${entry.texture.autoBindSamplerComparison}`);\n            }\n            this._resources[entry.texture.autoBindSamplerComparison] = (value.getDefaultSampler(true) as WebGPUTextureSampler).object;\n          }\n          this._bindGroup = null;\n        }\n      } else {\n        throw new Error(`WebGPUBindGroup.setView() failed: no texture uniform named '${name}'`)\n      }\n    }\n  }\n  setTexture(name: string, value: BaseTexture | TextureVideo, sampler?: TextureSampler) {\n    if (!value) {\n      throw new Error(`WebGPUBindGroup.setTexture() failed: invalid texture uniform value: ${value}`);\n    } else {\n      const entry = this._findTextureLayout(name);\n      if (entry) {\n        const t = this._resources[name];\n        if (entry.externalTexture) {\n          if (!value.isTextureVideo()) {\n            throw new Error(`WebGPUBindGroup.setTexture() failed: invalid texture type of resource '${name}'`);\n          }\n          if (!t || t !== value) {\n            this._resources[name] = value as WebGPUTextureVideo;\n            this._bindGroup = null;\n            this._videoTextures = [];\n            for (const entry of this._layout.entries) {\n              if (entry.externalTexture) {\n                const tex = this._resources[entry.name]?.[0];\n                if (tex && this._videoTextures.indexOf(tex) < 0) {\n                  this._videoTextures.push(tex);\n                }\n              }\n            }\n          }\n        } else {\n          if (value.isTextureVideo()) {\n            throw new Error(`WebGPUBindGroup.setTexture() failed: invalid texture type of resource '${name}'`);\n          }\n          const view = (value as WebGPUBaseTexture).getDefaultView();\n          if (!entry.externalTexture && !view) {\n            throw new Error('WebGPUBindGroup.setTexture() failed: create texture view failed');\n          }\n          if (!t || t[0] !== value) {\n            this._resources[name] = [value as WebGPUBaseTexture, view];\n            this._bindGroup = null;\n          }\n          const autoBindSampler = entry.texture?.autoBindSampler || entry.externalTexture?.autoBindSampler;\n          if (autoBindSampler) {\n            const samplerEntry = this._findSamplerLayout(autoBindSampler);\n            if (!samplerEntry || !samplerEntry.sampler) {\n              throw new Error(`WebGPUBindGroup.setTexture() failed: sampler entry not found: ${autoBindSampler}`);\n            }\n            const s = ((!sampler || sampler.compare) ? value.getDefaultSampler(false) : sampler) as WebGPUTextureSampler;\n            if (s.object !== this._resources[autoBindSampler]) {\n              this._resources[autoBindSampler] = s.object;\n              this._bindGroup = null;\n            }\n          }\n          const autoBindSamplerComparison = entry.texture?.autoBindSamplerComparison;\n          if (autoBindSamplerComparison) {\n            const samplerEntry = this._findSamplerLayout(autoBindSamplerComparison);\n            if (!samplerEntry || !samplerEntry.sampler) {\n              throw new Error(`WebGPUBindGroup.setTexture() failed: sampler entry not found: ${autoBindSamplerComparison}`);\n            }\n            const s = ((!sampler || !sampler.compare) ? value.getDefaultSampler(true) : sampler) as WebGPUTextureSampler;\n            if (s.object !== this._resources[autoBindSamplerComparison]) {\n              this._resources[autoBindSamplerComparison] = s.object;\n              this._bindGroup = null;\n            }\n          }\n        }\n      } else {\n        throw new Error(`WebGPUBindGroup.setTexture() failed: no texture uniform named '${name}'`)\n      }\n    }\n  }\n  setSampler(name: string, value: TextureSampler) {\n    const sampler = (value as WebGPUTextureSampler)?.object;\n    if (!sampler) {\n      console.log(`WebGPUBindGroup.setSampler() failed: invalid sampler uniform value: ${value}`);\n    } else if (this._resources[name] !== sampler) {\n      if (!this._findSamplerLayout(name)) {\n        console.log(`WebGPUBindGroup.setSampler() failed: no sampler uniform named '${name}'`)\n      } else {\n        this._resources[name] = sampler;\n        this._bindGroup = null;\n      }\n    }\n  }\n  getResource(name: string): StructuredBuffer | WebGPUTextureVideo | [WebGPUBaseTexture, GPUTextureView] | GPUSampler {\n    return this._resources[name] || null;\n  }\n  destroy() {\n    this._bindGroup = null;\n    this._resources = {};\n    this._buffers = [];\n    this._textures = [];\n    this._videoTextures = null;\n    this._object = null;\n  }\n  async restore() {\n    this._bindGroup = null;\n    this._object = {};\n  }\n  isBindGroup(): this is BindGroup {\n    return true;\n  }\n  /** @internal */\n  updateVideoTextures() {\n    this._videoTextures?.forEach(t => {\n      if (t.updateVideoFrame()) {\n        this._bindGroup = null;\n      }\n    });\n  }\n  /** @internal */\n  private _findTextureLayout(name: string): BindGroupLayoutEntry {\n    for (const entry of this._layout.entries) {\n      if ((entry.texture || entry.storageTexture || entry.externalTexture) && entry.name === name) {\n        return entry;\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  private _findSamplerLayout(name: string): BindGroupLayoutEntry {\n    for (const entry of this._layout.entries) {\n      if (entry.sampler && entry.name === name) {\n        return entry;\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  private _getBuffer(name: string, usage: number, nocreate = false) {\n    for (const entry of this._layout.entries) {\n      if (entry.buffer && entry.name === name) {\n        const bufferUsage = entry.buffer.type === 'uniform' ? GPUResourceUsageFlags.BF_UNIFORM : GPUResourceUsageFlags.BF_STORAGE;\n        if (!(usage & bufferUsage)) {\n          return null;\n        }\n        let buffer = this._resources[entry.name] as WebGPUStructuredBuffer;\n        if (!buffer && !nocreate) {\n          const options: BufferCreationOptions = {\n            usage: bufferUsage === GPUResourceUsageFlags.BF_UNIFORM ? 'uniform' : null,\n            storage: bufferUsage === GPUResourceUsageFlags.BF_STORAGE,\n            dynamic: true\n          };\n          buffer = this._device.createStructuredBuffer(entry.type as PBStructTypeInfo, options) as WebGPUStructuredBuffer;\n          this._resources[entry.name] = buffer;\n        }\n        return buffer;\n      }\n    }\n    return null;\n  }\n  /** @internal */\n  private _create(): GPUBindGroup {\n    let bindGroup = null;\n    this._textures = [];\n    this._buffers = [];\n    const entries = [] as GPUBindGroupEntry[];\n    let resourceOk = true;\n    for (const entry of this._layout.entries) {\n      const ge = { binding: entry.binding } as GPUBindGroupEntry;\n      if (entry.buffer) {\n        const buffer = this._getBuffer(entry.name, entry.buffer.type === 'uniform' ? GPUResourceUsageFlags.BF_UNIFORM : GPUResourceUsageFlags.BF_STORAGE, true);\n        if (!buffer) {\n          throw new Error('create uniform buffer failed');\n        }\n        if (this._buffers.indexOf(buffer) < 0) {\n          this._buffers.push(buffer);\n        }\n        ge.resource = {\n          buffer: buffer.object,\n          offset: 0,\n          size: buffer.byteLength\n        };\n        resourceOk = resourceOk && !!buffer.object;\n      } else if (entry.texture || entry.storageTexture) {\n        const t = this._resources[entry.name] as [WebGPUBaseTexture, GPUTextureView];\n        if (this._textures.indexOf(t[0]) < 0) {\n          this._textures.push(t[0]);\n        }\n        ge.resource = t[1];\n        resourceOk = resourceOk && !!t[1];\n      } else if (entry.externalTexture) {\n        const t = this._resources[entry.name] as WebGPUTextureVideo;\n        ge.resource = t.object;\n        resourceOk = resourceOk && !!t.object;\n      } else if (entry.sampler) {\n        const sampler = this._resources[entry.name] as GPUSampler;\n        ge.resource = sampler;\n        resourceOk = resourceOk && !!sampler;\n      }\n      entries.push(ge);\n    }\n    if (!resourceOk) {\n      return null;\n    }\n    const layout = this._device.fetchBindGroupLayout(this._layout);\n    const descriptor: GPUBindGroupDescriptor = {\n      layout,\n      entries\n    };\n    if (layout.label) {\n      descriptor.label = `${layout.label}.bindgroup`;\n    }\n    bindGroup = this._device.gpuCreateBindGroup(descriptor);\n    if (!bindGroup) {\n      console.log('Create bindgroup failed');\n    }\n    return bindGroup;\n  }\n}\n"],"names":[],"mappings":"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"}