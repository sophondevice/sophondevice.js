{"version":3,"file":"structuredbuffer_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/structuredbuffer_webgpu.ts"],"sourcesContent":["import { WebGPUBuffer } from \"./buffer_webgpu\";\r\nimport { StructuredBufferData } from \"../uniformdata\";\r\nimport { GPUResourceUsageFlags, StructuredBuffer, StructuredValue } from \"../gpuobject\";\r\nimport * as typeinfo from '../builder/types';\r\nimport type { WebGPUDevice } from './device';\r\nimport type { TypedArray } from \"../../misc\";\r\n\r\nconst vertexFormatTable: { [id: string]: GPUVertexFormat } = {\r\n  [typeinfo.typeU8Vec2_Norm.typeId]: 'unorm8x2',\r\n  [typeinfo.typeU8Vec4_Norm.typeId]: 'unorm8x4',\r\n  [typeinfo.typeI8Vec2_Norm.typeId]: 'snorm8x2',\r\n  [typeinfo.typeI8Vec4_Norm.typeId]: 'snorm8x4',\r\n  [typeinfo.typeU16Vec2.typeId]: 'uint16x2',\r\n  [typeinfo.typeU16Vec4.typeId]: 'uint16x4',\r\n  [typeinfo.typeI16Vec2.typeId]: 'sint16x2',\r\n  [typeinfo.typeI16Vec4.typeId]: 'sint16x4',\r\n  [typeinfo.typeU16Vec2_Norm.typeId]: 'unorm16x2',\r\n  [typeinfo.typeU16Vec4_Norm.typeId]: 'unorm16x4',\r\n  [typeinfo.typeI16Vec2_Norm.typeId]: 'snorm16x2',\r\n  [typeinfo.typeI16Vec4_Norm.typeId]: 'snorm16x4',\r\n  [typeinfo.typeF16Vec2.typeId]: 'float16x2',\r\n  [typeinfo.typeF16Vec4.typeId]: 'float16x4',\r\n  [typeinfo.typeF32.typeId]: 'float32',\r\n  [typeinfo.typeF32Vec2.typeId]: 'float32x2',\r\n  [typeinfo.typeF32Vec3.typeId]: 'float32x3',\r\n  [typeinfo.typeF32Vec4.typeId]: 'float32x4',\r\n  [typeinfo.typeU32.typeId]: 'uint32',\r\n  [typeinfo.typeU32Vec2.typeId]: 'uint32x2',\r\n  [typeinfo.typeU32Vec3.typeId]: 'uint32x3',\r\n  [typeinfo.typeU32Vec4.typeId]: 'uint32x4',\r\n  [typeinfo.typeI32.typeId]: 'sint32',\r\n  [typeinfo.typeI32Vec2.typeId]: 'sint32x2',\r\n  [typeinfo.typeI32Vec3.typeId]: 'sint32x3',\r\n  [typeinfo.typeI32Vec4.typeId]: 'sint32x4',\r\n}\r\n\r\nexport class WebGPUStructuredBuffer extends WebGPUBuffer implements StructuredBuffer {\r\n  private _structure: typeinfo.PBStructTypeInfo;\r\n  private _data: StructuredBufferData;\r\n  constructor(device: WebGPUDevice, structure: typeinfo.PBStructTypeInfo, usage: number, source?: TypedArray) {\r\n    if (!(structure?.isStructType())) {\r\n      throw new Error('invalid structure type');\r\n    }\r\n    if (usage & GPUResourceUsageFlags.BF_INDEX) {\r\n      throw new Error('structured buffer must not have Index usage flag');\r\n    }\r\n    if ((usage & GPUResourceUsageFlags.BF_READ) || (usage & GPUResourceUsageFlags.BF_WRITE)) {\r\n      throw new Error('structured buffer must not have Read or Write usage flags');\r\n    }\r\n    if (usage & GPUResourceUsageFlags.BF_VERTEX) {\r\n      if (structure.structMembers.length !== 1 || !structure.structMembers[0].type.isArrayType()) {\r\n        throw new Error('structured buffer for vertex usage must have only one array member');\r\n      }\r\n    }\r\n    if ((usage & GPUResourceUsageFlags.BF_UNIFORM) || (usage & GPUResourceUsageFlags.BF_STORAGE)) {\r\n      usage |= GPUResourceUsageFlags.DYNAMIC;\r\n    }\r\n    const layout = structure.toBufferLayout(0, structure.layout);\r\n    if (source && layout.byteSize !== source.byteLength) {\r\n      throw new Error(`create structured buffer failed: invalid source size: ${source.byteLength}, should be ${layout.byteSize}`);\r\n    }\r\n    super(device, usage, source || layout.byteSize);\r\n    this._data = new StructuredBufferData(layout, this);\r\n    this._structure = structure;\r\n  }\r\n  set(name: string, value: StructuredValue) {\r\n    this._data.set(name, value);\r\n  }\r\n  get structure(): typeinfo.PBStructTypeInfo {\r\n    return this._structure;\r\n  }\r\n  set structure(st: typeinfo.PBStructTypeInfo) {\r\n    if (st?.typeId !== this._structure.typeId) {\r\n      const layout = st.toBufferLayout(0, st.layout);\r\n      if (layout.byteSize > this.byteLength) {\r\n        throw new Error(`set structure type failed: new structure type is too large: ${layout.byteSize}`);\r\n      }\r\n      this._data = new StructuredBufferData(layout, this);\r\n      this._structure = st;\r\n    }\r\n  }\r\n  static getGPUVertexFormat(type: typeinfo.PBTypeInfo): GPUVertexFormat {\r\n    return vertexFormatTable[type.typeId];\r\n  }\r\n}\r\n"],"names":["typeinfo.typeU8Vec2_Norm","typeinfo.typeU8Vec4_Norm","typeinfo.typeI8Vec2_Norm","typeinfo.typeI8Vec4_Norm","typeinfo.typeU16Vec2","typeinfo.typeU16Vec4","typeinfo.typeI16Vec2","typeinfo.typeI16Vec4","typeinfo.typeU16Vec2_Norm","typeinfo.typeU16Vec4_Norm","typeinfo.typeI16Vec2_Norm","typeinfo.typeI16Vec4_Norm","typeinfo.typeF16Vec2","typeinfo.typeF16Vec4","typeinfo.typeF32","typeinfo.typeF32Vec2","typeinfo.typeF32Vec3","typeinfo.typeF32Vec4","typeinfo.typeU32","typeinfo.typeU32Vec2","typeinfo.typeU32Vec3","typeinfo.typeU32Vec4","typeinfo.typeI32","typeinfo.typeI32Vec2","typeinfo.typeI32Vec3","typeinfo.typeI32Vec4"],"mappings":"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"}