{"version":3,"file":"texture2d_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/texture2d_webgpu.ts"],"sourcesContent":["import { TextureTarget, TextureFormat, linearTextureFormatToSRGB, getTextureFormatBlockWidth, getTextureFormatBlockHeight, getTextureFormatBlockSize } from '../base_types';\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\nimport { GPUResourceUsageFlags, TextureImageElement, TextureMipmapData, Texture2D, GPUDataBuffer } from '../gpuobject';\nimport type { WebGPUDevice } from './device';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGPUTexture2D extends WebGPUBaseTexture implements Texture2D<GPUTexture> {\n  constructor(device: WebGPUDevice) {\n    super(device, TextureTarget.Texture2D);\n  }\n  isTexture2D(): this is Texture2D {\n    return true;\n  }\n  init(): void {\n    this.loadEmpty(this._format, this._width, this._height, this._mipLevelCount);\n  }\n  update(\n    data: TypedArray,\n    xOffset: number,\n    yOffset: number,\n    width: number,\n    height: number,\n  ): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    this.uploadRaw(data, width, height, 1, xOffset, yOffset, 0, 0);\n    if (this._mipLevelCount > 1) {\n      this.generateMipmaps();\n    }\n  }\n  updateFromElement(\n    data: TextureImageElement,\n    xOffset: number,\n    yOffset: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  ): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, 1, this._mipLevelCount);\n    }\n    if (data instanceof HTMLCanvasElement && x === 0 && y === 0) {\n      this.uploadImageData(data, width, height, xOffset, yOffset, 0, 0);\n    } else {\n      const cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      const ctx = cvs.getContext('2d');\n      ctx.drawImage(data, x, y, width, height, 0, 0, width, height);\n      this.uploadImageData(cvs, width, height, xOffset, yOffset, 0, 0);\n      cvs.width = 0;\n      cvs.height = 0;\n    }\n  }\n  async readPixels(x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\n    const blockWidth = getTextureFormatBlockWidth(this.format);\n    const blockHeight = getTextureFormatBlockHeight(this.format);\n    const blockSize = getTextureFormatBlockSize(this.format);\n    const blocksPerRow = this.width / blockWidth;\n    const blocksPerCol = this.height / blockHeight;\n    const imageSize = blocksPerRow * blocksPerCol * blockSize;\n    if (buffer.byteLength < imageSize) {\n      throw new Error(`Texture2D.readPixels() failed: destination buffer size is ${buffer.byteLength}, should be at least ${imageSize}`);\n    }\n    const tmpBuffer = this._device.createBuffer(imageSize, { usage: 'read' });\n    await this.copyPixelDataToBuffer(x, y, w, h, 0, 0, tmpBuffer);\n    await tmpBuffer.getBufferSubData(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength), 0, imageSize);\n    tmpBuffer.dispose();\n  }\n  readPixelsToBuffer(x: number, y: number, w: number, h: number, buffer: GPUDataBuffer) {\n    this.copyPixelDataToBuffer(x, y, w, h, 0, 0, buffer);\n  }\n  loadFromElement(element: TextureImageElement, creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    const format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n    this.loadImage(element, format);\n  }\n  createEmpty(format: TextureFormat, width: number, height: number, creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? format : linearTextureFormatToSRGB(format);\n    this.loadEmpty(format, width, height, 0);\n  }\n  createView(level?: number, face?: number, mipCount?: number): GPUTextureView {\n    return this._object ? this._device.gpuCreateTextureView(this._object, {\n      dimension: '2d',\n      baseMipLevel: level ?? 0,\n      mipLevelCount: mipCount || this._mipLevelCount - (level ?? 0),\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    }) : null;\n  }\n  createWithMipmapData(data: TextureMipmapData, creationFlags?: number): void {\n    if (data.isCubemap || data.isVolume) {\n      console.error('loading 2d texture with mipmap data failed: data is not 2d texture');\n    } else {\n      this._flags = Number(creationFlags) || 0;\n      if (this._flags & GPUResourceUsageFlags.TF_WRITABLE) {\n        console.error(new Error('webgl device does not support storage texture'));\n      } else {\n        this.loadLevels(data);\n      }\n    }\n  }\n  /** @internal */\n  private guessTextureFormat(url: string, mimeType?: string) {\n    if (mimeType === 'image/jpeg' || mimeType === 'image/png') {\n      return this.linearColorSpace ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n    }\n    const dataURIRegex = /^data:(.*?)(;base64)?,(.*)$/;\n    const matchResult = url.match(dataURIRegex);\n    if (matchResult) {\n      const type = matchResult[1];\n      if (type.indexOf('image/jpeg') >= 0 || type.indexOf('image/png') >= 0) {\n        return this.linearColorSpace ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n      }\n    } else {\n      const pindex = url.indexOf('?');\n      if (pindex >= 0) {\n        url = url.substring(0, pindex);\n      }\n      const eindex = url.lastIndexOf('.');\n      if (eindex >= 0) {\n        const ext = url.substring(eindex + 1).toLowerCase();\n        if (ext === 'jpg' || ext === 'jpeg' || ext === 'png') {\n          return this.linearColorSpace ? TextureFormat.RGBA8UNORM : TextureFormat.RGBA8UNORM_SRGB;\n        }\n      }\n    }\n    return TextureFormat.Unknown;\n  }\n  /** @internal */\n  private loadEmpty(format: TextureFormat, width: number, height: number, numMipLevels: number): void {\n    this.allocInternal(format, width, height, 1, numMipLevels);\n    if (this._mipLevelCount > 1 && !this._device.isContextLost()) {\n      this.generateMipmaps();\n    }\n  }\n  /** @internal */\n  private loadLevels(levels: TextureMipmapData): void {\n    const sRGB = !(this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE);\n    let format = sRGB ? linearTextureFormatToSRGB(levels.format) : levels.format;\n    let swizzle = false;\n    if (format === TextureFormat.BGRA8UNORM) {\n      format = TextureFormat.RGBA8UNORM;\n      swizzle = true;\n    } else if (this._format === TextureFormat.BGRA8UNORM_SRGB) {\n      format = TextureFormat.RGBA8UNORM_SRGB;\n      swizzle = true;\n    }\n    const width = levels.width;\n    const height = levels.height;\n    const mipLevelCount = levels.mipLevels;\n    if (levels.isCompressed) {\n      if (sRGB ? !this._device.getTextureCaps().supportS3TCSRGB : !this._device.getTextureCaps().supportS3TC) {\n        console.error('No s3tc compression format support');\n        return;\n      }\n    }\n    this.allocInternal(format, width, height, 1, mipLevelCount);\n    if (!this._device.isContextLost()) {\n      for (let i = 0; i < levels.mipDatas[0].length; i++) {\n        if (swizzle) {\n          // convert bgra to rgba\n          for (let j = 0; j < levels.mipDatas[0][i].width * levels.mipDatas[0][i].height; j++) {\n            const t = levels.mipDatas[0][i].data[j * 4];\n            levels.mipDatas[0][i].data[j * 4] = levels.mipDatas[0][i].data[j * 4 + 2];\n            levels.mipDatas[0][i].data[j * 4 + 2] = t;\n          }\n        }\n        this.uploadRaw(levels.mipDatas[0][i].data, levels.mipDatas[0][i].width, levels.mipDatas[0][i].height, 1, 0, 0, 0, i);\n      }\n    }\n  }\n  /** @internal */\n  private loadImage(element: TextureImageElement, format: TextureFormat): void {\n    this.allocInternal(format, Number(element.width), Number(element.height), 1, 0);\n    if (!this._device.isContextLost()) {\n      this.uploadImageData(element, this._width, this._height, 0, 0, 0, 0);\n      if (this._mipLevelCount > 1) {\n        this.generateMipmaps();\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAMM,MAAO,eAAgB,SAAQ,iBAAiB,CAAA;AACpD,IAAA,WAAA,CAAY,MAAoB,EAAA;AAC9B,QAAA,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;KACxC;IACD,WAAW,GAAA;AACT,QAAA,OAAO,IAAI,CAAC;KACb;IACD,IAAI,GAAA;AACF,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;KAC9E;IACD,MAAM,CACJ,IAAgB,EAChB,OAAe,EACf,OAAe,EACf,KAAa,EACb,MAAc,EAAA;AAEd,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAChC,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AACrF,SAAA;AACD,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/D,QAAA,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;AACxB,SAAA;KACF;AACD,IAAA,iBAAiB,CACf,IAAyB,EACzB,OAAe,EACf,OAAe,EACf,CAAS,EACT,CAAS,EACT,KAAa,EACb,MAAc,EAAA;AAEd,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAChC,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AACrF,SAAA;QACD,IAAI,IAAI,YAAY,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC3D,YAAA,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnE,SAAA;AAAM,aAAA;YACL,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC7C,YAAA,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AAClB,YAAA,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC9D,YAAA,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACjE,YAAA,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;AACd,YAAA,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,SAAA;KACF;IACD,MAAM,UAAU,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,MAAkB,EAAA;QAC7E,MAAM,UAAU,GAAG,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,SAAS,GAAG,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzD,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;AAC7C,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;AAC/C,QAAA,MAAM,SAAS,GAAG,YAAY,GAAG,YAAY,GAAG,SAAS,CAAC;AAC1D,QAAA,IAAI,MAAM,CAAC,UAAU,GAAG,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,CAA6D,0DAAA,EAAA,MAAM,CAAC,UAAU,CAAwB,qBAAA,EAAA,SAAS,CAAE,CAAA,CAAC,CAAC;AACpI,SAAA;AACD,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;AAC1E,QAAA,MAAM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAC9D,MAAM,SAAS,CAAC,gBAAgB,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACpH,SAAS,CAAC,OAAO,EAAE,CAAC;KACrB;IACD,kBAAkB,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,MAAqB,EAAA;AAClF,QAAA,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;KACtD;IACD,eAAe,CAAC,OAA4B,EAAE,aAAsB,EAAA;QAClE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,qBAAqB,IAAI,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC;AACtI,QAAA,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KACjC;AACD,IAAA,WAAW,CAAC,MAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,aAAsB,EAAA;QACtF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,qBAAqB,IAAI,MAAM,GAAG,yBAAyB,CAAC,MAAM,CAAC,CAAC;QAClH,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;KAC1C;AACD,IAAA,UAAU,CAAC,KAAc,EAAE,IAAa,EAAE,QAAiB,EAAA;AACzD,QAAA,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE;AACpE,YAAA,SAAS,EAAE,IAAI;YACf,YAAY,EAAE,KAAK,IAAI,CAAC;YACxB,aAAa,EAAE,QAAQ,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,CAAC,CAAC;AAC7D,YAAA,cAAc,EAAE,CAAC;AACjB,YAAA,eAAe,EAAE,CAAC;AACnB,SAAA,CAAC,GAAG,IAAI,CAAC;KACX;IACD,oBAAoB,CAAC,IAAuB,EAAE,aAAsB,EAAA;AAClE,QAAA,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;AACnC,YAAA,OAAO,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;AACrF,SAAA;AAAM,aAAA;YACL,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACzC,YAAA,IAAI,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,WAAW,EAAE;gBACnD,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC,CAAC;AAC3E,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACvB,aAAA;AACF,SAAA;KACF;IAEO,kBAAkB,CAAC,GAAW,EAAE,QAAiB,EAAA;AACvD,QAAA,IAAI,QAAQ,KAAK,YAAY,IAAI,QAAQ,KAAK,WAAW,EAAE;AACzD,YAAA,OAAO,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC;AACzF,SAAA;QACD,MAAM,YAAY,GAAG,6BAA6B,CAAC;QACnD,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AAC5C,QAAA,IAAI,WAAW,EAAE;AACf,YAAA,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5B,YAAA,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AACrE,gBAAA,OAAO,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC;AACzF,aAAA;AACF,SAAA;AAAM,aAAA;YACL,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,MAAM,IAAI,CAAC,EAAE;gBACf,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAChC,aAAA;YACD,MAAM,MAAM,GAAG,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,MAAM,IAAI,CAAC,EAAE;AACf,gBAAA,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBACpD,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,KAAK,EAAE;AACpD,oBAAA,OAAO,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC;AACzF,iBAAA;AACF,aAAA;AACF,SAAA;QACD,OAAO,aAAa,CAAC,OAAO,CAAC;KAC9B;AAEO,IAAA,SAAS,CAAC,MAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,YAAoB,EAAA;AAC1F,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AAC3D,QAAA,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAC5D,IAAI,CAAC,eAAe,EAAE,CAAC;AACxB,SAAA;KACF;AAEO,IAAA,UAAU,CAAC,MAAyB,EAAA;AAC1C,QAAA,MAAM,IAAI,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;AAC1E,QAAA,IAAI,MAAM,GAAG,IAAI,GAAG,yBAAyB,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7E,IAAI,OAAO,GAAG,KAAK,CAAC;AACpB,QAAA,IAAI,MAAM,KAAK,aAAa,CAAC,UAAU,EAAE;AACvC,YAAA,MAAM,GAAG,aAAa,CAAC,UAAU,CAAC;YAClC,OAAO,GAAG,IAAI,CAAC;AAChB,SAAA;AAAM,aAAA,IAAI,IAAI,CAAC,OAAO,KAAK,aAAa,CAAC,eAAe,EAAE;AACzD,YAAA,MAAM,GAAG,aAAa,CAAC,eAAe,CAAC;YACvC,OAAO,GAAG,IAAI,CAAC;AAChB,SAAA;AACD,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC3B,QAAA,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC7B,QAAA,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC;QACvC,IAAI,MAAM,CAAC,YAAY,EAAE;YACvB,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE;AACtG,gBAAA,OAAO,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;gBACpD,OAAO;AACR,aAAA;AACF,SAAA;AACD,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;AAC5D,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;AACjC,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,gBAAA,IAAI,OAAO,EAAE;AAEX,oBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnF,wBAAA,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5C,wBAAA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1E,wBAAA,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3C,qBAAA;AACF,iBAAA;gBACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACtH,aAAA;AACF,SAAA;KACF;IAEO,SAAS,CAAC,OAA4B,EAAE,MAAqB,EAAA;QACnE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAChF,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YACjC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrE,YAAA,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;gBAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;AACxB,aAAA;AACF,SAAA;KACF;AACF;;;;"}