{"version":3,"file":"buffer_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/buffer_webgpu.ts"],"sourcesContent":["import { WebGPUObject } from './gpuobject_webgpu';\r\nimport { UploadRingBuffer, UploadBuffer } from './uploadringbuffer';\r\nimport { GPUResourceUsageFlags, GPUDataBuffer } from '../gpuobject';\r\nimport type { WebGPUDevice } from './device';\r\nimport type { TypedArray, TypedArrayConstructor } from '../../misc';\r\n\r\nexport class WebGPUBuffer extends WebGPUObject<GPUBuffer> implements GPUDataBuffer<GPUBuffer> {\r\n  private _size: number;\r\n  private _usage: number;\r\n  private _gpuUsage: number;\r\n  private _memCost: number;\r\n  private _ringBuffer: UploadRingBuffer;\r\n  protected _pendingUploads: UploadBuffer[];\r\n  constructor(device: WebGPUDevice, usage: number, data: TypedArray | number) {\r\n    super(device);\r\n    this._object = null;\r\n    this._memCost = 0;\r\n    this._usage = usage;\r\n    this._gpuUsage = 0;\r\n    this._size = typeof data === 'number' ? data : data.byteLength;\r\n    if (this._size <= 0) {\r\n      throw new Error('can not create buffer with zero size');\r\n    }\r\n    this._ringBuffer = new UploadRingBuffer(device, (this._size + 15) & ~15);\r\n    this._pendingUploads = [];\r\n    this.load(typeof data === 'number' ? null : data);\r\n  }\r\n  get hash(): number {\r\n    return this._object ? this._device.gpuGetObjectHash(this._object) : 0;\r\n  }\r\n  get byteLength() {\r\n    return this._size;\r\n  }\r\n  get usage(): number {\r\n    return this._usage;\r\n  }\r\n  get gpuUsage(): number {\r\n    return this._gpuUsage;\r\n  }\r\n  getPendingUploads(): UploadBuffer[] {\r\n    return this._pendingUploads;\r\n  }\r\n  clearPendingUploads() {\r\n    if (this._pendingUploads.length > 0) {\r\n      this._pendingUploads = [];\r\n      this.beginSyncChanges(null);\r\n      this.endSyncChanges();\r\n    }\r\n  }\r\n  bufferSubData(dstByteOffset: number, data: TypedArray, srcOffset?: number, srcLength?: number): void {\r\n    srcOffset = Number(srcOffset) || 0;\r\n    dstByteOffset = Number(dstByteOffset) || 0;\r\n    srcLength = Number(srcLength) || data.length - srcOffset;\r\n    if (srcOffset + srcLength > data.length) {\r\n      throw new Error('bufferSubData() failed: source buffer is too small');\r\n    }\r\n    if (dstByteOffset + srcLength * data.BYTES_PER_ELEMENT > this.byteLength) {\r\n      throw new Error('bufferSubData() failed: dest buffer is too small');\r\n    }\r\n    let uploadSize = srcLength * data.BYTES_PER_ELEMENT;\r\n    const uploadOffset = data.byteOffset + srcOffset * data.BYTES_PER_ELEMENT;\r\n    const writeOffset = dstByteOffset;\r\n    const writeSize = uploadSize;\r\n    if (this._pendingUploads.length === 0) {\r\n      this.pushUpload(this._pendingUploads, data.buffer, uploadOffset, dstByteOffset, uploadSize);\r\n    } else {\r\n      let newPendings: UploadBuffer[] = [];\r\n      let added = false;\r\n      for (let i = 0; i < this._pendingUploads.length; i++) {\r\n        const upload = this._pendingUploads[i];\r\n        if (upload.uploadOffset + upload.uploadSize < dstByteOffset) {\r\n          // current upload in front of new upload\r\n          newPendings.push(upload);\r\n        } else if (upload.uploadOffset > dstByteOffset + uploadSize) {\r\n          // current upload behind of new upload\r\n          if (!added) {\r\n            added = true;\r\n            this.pushUpload(newPendings, null, 0, dstByteOffset, uploadSize);\r\n          }\r\n          newPendings.push(upload);\r\n        } else {\r\n          const start = Math.min(dstByteOffset, upload.uploadOffset);\r\n          const end = Math.max(dstByteOffset + uploadSize, upload.uploadOffset + upload.uploadSize);\r\n          if (end - start < uploadSize + upload.uploadSize && this._device.currentPass?.isBufferUploading(this)) {\r\n            // data overlaps and previous data is in use, refresh data by restarting current render pass or compute pass\r\n            this._device.currentPass.end();\r\n            // now, the pending uploads should be cleared\r\n            newPendings = [];\r\n            break;\r\n          }\r\n          dstByteOffset = start;\r\n          uploadSize = end - start;\r\n        }\r\n      }\r\n      if (!added) {\r\n        this.pushUpload(newPendings, null, 0, dstByteOffset, uploadSize);\r\n      }\r\n      this._pendingUploads = newPendings;\r\n      new Uint8Array(this._pendingUploads[0].mappedBuffer.mappedRange, writeOffset, writeSize).set(new Uint8Array(data.buffer, uploadOffset, writeSize));\r\n    }\r\n  }\r\n  async getBufferSubData(dstBuffer?: Uint8Array, offsetInBytes?: number, sizeInBytes?: number): Promise<Uint8Array> {\r\n    if (!(this._usage & GPUResourceUsageFlags.BF_READ)) {\r\n      throw new Error('getBufferSubData() failed: buffer does not have BF_READ flag set');\r\n    }\r\n    offsetInBytes = Number(offsetInBytes) || 0;\r\n    sizeInBytes = Number(sizeInBytes) || this.byteLength - offsetInBytes;\r\n    if (offsetInBytes < 0 || offsetInBytes + sizeInBytes > this.byteLength) {\r\n      throw new Error('data query range out of bounds');\r\n    }\r\n    if (dstBuffer && dstBuffer.byteLength < sizeInBytes) {\r\n      throw new Error('no enough space for querying buffer data');\r\n    }\r\n    dstBuffer = dstBuffer || new Uint8Array(sizeInBytes);\r\n    await this._object.mapAsync(GPUMapMode.READ);\r\n    const range = this._object.getMappedRange();\r\n    dstBuffer.set(new Uint8Array(range, offsetInBytes, sizeInBytes));\r\n    this._object.unmap();\r\n    return dstBuffer;\r\n  }\r\n  async restore() {\r\n    if (!this._device.isContextLost()) {\r\n      this.load();\r\n    }\r\n  }\r\n  destroy() {\r\n    if (this._object) {\r\n      this._object.destroy();\r\n      this._object = null;\r\n      this._gpuUsage = 0;\r\n      this._memCost = 0;\r\n    }\r\n  }\r\n  isBuffer(): boolean {\r\n    return true;\r\n  }\r\n  beginSyncChanges(encoder: GPUCommandEncoder) {\r\n    if (this._pendingUploads.length > 0) {\r\n      const cmdEncoder = encoder || this._device.device.createCommandEncoder();\r\n      for (const upload of this._pendingUploads) {\r\n        cmdEncoder.copyBufferToBuffer(upload.mappedBuffer.buffer, upload.mappedBuffer.offset, this._object, upload.uploadOffset, upload.uploadSize);\r\n      }\r\n      if (!encoder) {\r\n        this._device.device.queue.submit([cmdEncoder.finish()]);\r\n      }\r\n      this._pendingUploads.length = 0;\r\n      this._ringBuffer.beginUploads();\r\n    }\r\n  }\r\n  endSyncChanges() {\r\n    if (this._usage & GPUResourceUsageFlags.DYNAMIC) {\r\n      this._ringBuffer.endUploads();\r\n    } else {\r\n      this._ringBuffer.purge();\r\n    }\r\n  }\r\n  private load(data?: TypedArray): void {\r\n    if (this._device.isContextLost()) {\r\n      return;\r\n    }\r\n    this._memCost = 0;\r\n    if (!this._device.isContextLost()) {\r\n      if (!this._object) {\r\n        this._gpuUsage = 0;\r\n        let label = '';\r\n        if (this._usage & GPUResourceUsageFlags.BF_VERTEX) {\r\n          this._gpuUsage |= GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST;\r\n          label += '[vertex]';\r\n        }\r\n        if (this._usage & GPUResourceUsageFlags.BF_INDEX) {\r\n          this._gpuUsage |= GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST;\r\n          label += '[index]';\r\n        }\r\n        if (this._usage & GPUResourceUsageFlags.BF_UNIFORM) {\r\n          this._gpuUsage |= GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\r\n          label += '[uniform]';\r\n        }\r\n        if (this._usage & GPUResourceUsageFlags.BF_STORAGE) {\r\n          this._gpuUsage |= GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;\r\n          label += '[storage]';\r\n        }\r\n        if (this._usage & GPUResourceUsageFlags.BF_READ) {\r\n          this._gpuUsage |= GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\r\n          label += '[mapRead]';\r\n        }\r\n        if (this._usage & GPUResourceUsageFlags.BF_WRITE) {\r\n          this._gpuUsage |= GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE;\r\n          label += '[mapWrite]';\r\n        }\r\n        if (data) {\r\n          this._object = this._device.gpuCreateBuffer({\r\n            label: label,\r\n            size: (data.byteLength + 15) & ~15,\r\n            usage: this._gpuUsage,\r\n            mappedAtCreation: true,\r\n          });\r\n          const range = this._object.getMappedRange();\r\n          new (data.constructor as TypedArrayConstructor)(range).set(data);\r\n          this._object.unmap();\r\n        } else {\r\n          this._object = this._device.gpuCreateBuffer({\r\n            label: label,\r\n            size: (this.byteLength + 15) & ~15,\r\n            usage: this._gpuUsage,\r\n          });\r\n        }\r\n        const memCost = this.byteLength;\r\n        this._device.updateVideoMemoryCost(memCost - this._memCost);\r\n        this._memCost = memCost;\r\n      }\r\n    }\r\n  }\r\n  private pushUpload(pending: UploadBuffer[], data: ArrayBuffer, srcByteOffset: number, dstByteOffset: number, byteSize: number) {\r\n    const bufferMapped = this._ringBuffer.fetchBufferMapped(byteSize, true);\r\n    if (data) {\r\n      new Uint8Array(bufferMapped.mappedRange, dstByteOffset, byteSize).set(new Uint8Array(data, srcByteOffset, byteSize));\r\n    }\r\n    pending.push({\r\n      mappedBuffer: {\r\n        buffer: bufferMapped.buffer,\r\n        size: bufferMapped.size,\r\n        offset: dstByteOffset,\r\n        used: bufferMapped.used,\r\n        mappedRange: bufferMapped.mappedRange,\r\n      },\r\n      uploadSize: byteSize,\r\n      uploadOffset: dstByteOffset,\r\n      uploadBuffer: this._object,\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}