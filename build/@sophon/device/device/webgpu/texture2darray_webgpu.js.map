{"version":3,"file":"texture2darray_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/texture2darray_webgpu.ts"],"sourcesContent":["import { TextureTarget, TextureFormat, getTextureFormatBlockWidth, getTextureFormatBlockHeight, getTextureFormatBlockSize, linearTextureFormatToSRGB } from '../base_types';\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\nimport { GPUResourceUsageFlags, TextureImageElement, Texture2DArray, GPUDataBuffer } from '../gpuobject';\nimport type { WebGPUDevice } from './device';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGPUTexture2DArray extends WebGPUBaseTexture implements Texture2DArray<GPUTexture> {\n  constructor(device: WebGPUDevice) {\n    super(device, TextureTarget.Texture2DArray);\n  }\n  isTexture2DArray(): this is Texture2DArray {\n    return true;\n  }\n  init(): void {\n    this.loadEmpty(this._format, this._width, this._height, this._depth, this._mipLevelCount);\n  }\n  update(data: TypedArray, xOffset: number, yOffset: number, zOffset: number, width: number, height: number, depth: number): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, this._depth, this._mipLevelCount);\n    }\n    this.uploadRaw(data, width, height, depth, xOffset, yOffset, zOffset, 0);\n    if (this._mipLevelCount > 1) {\n      this.generateMipmaps();\n    }\n  }\n  updateFromElement(\n    data: TextureImageElement,\n    xOffset: number,\n    yOffset: number,\n    layerIndex: number,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  ): void {\n    if (this._device.isContextLost()) {\n      return;\n    }\n    if (!this._object) {\n      this.allocInternal(this._format, this._width, this._height, this._depth, this._mipLevelCount);\n    }\n    if (data instanceof HTMLCanvasElement && x === 0 && y === 0) {\n      this.uploadImageData(data, width, height, xOffset, yOffset, 0, layerIndex);\n    } else {\n      const cvs = document.createElement('canvas');\n      cvs.width = width;\n      cvs.height = height;\n      const ctx = cvs.getContext('2d');\n      ctx.drawImage(data, x, y, width, height, 0, 0, width, height);\n      this.uploadImageData(cvs, width, height, xOffset, yOffset, 0, layerIndex);\n      cvs.width = 0;\n      cvs.height = 0;\n    }\n  }\n  createEmpty(format: TextureFormat, width: number, height: number, depth: number, creationFlags?: number): void {\n    this._flags = Number(creationFlags) || 0;\n    format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? format : linearTextureFormatToSRGB(format);\n    this.loadEmpty(format, width, height, depth, 0);\n  }\n  createView(level?: number, face?: number, mipCount?: number): GPUTextureView {\n    return this._object ? this._device.gpuCreateTextureView(this._object, {\n      dimension: '2d',\n      baseMipLevel: level ?? 0,\n      mipLevelCount: mipCount || this._mipLevelCount - (level ?? 0),\n      baseArrayLayer: face ?? 0,\n      arrayLayerCount: 1,\n    }) : null;\n  }\n  async readPixels(layer: number, x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\n    const blockWidth = getTextureFormatBlockWidth(this.format);\n    const blockHeight = getTextureFormatBlockHeight(this.format);\n    const blockSize = getTextureFormatBlockSize(this.format);\n    const blocksPerRow = this.width / blockWidth;\n    const blocksPerCol = this.height / blockHeight;\n    const imageSize = blocksPerRow * blocksPerCol * blockSize;\n    if (buffer.byteLength < imageSize) {\n      throw new Error(`Texture2D.readPixels() failed: destination buffer size is ${buffer.byteLength}, should be at least ${imageSize}`);\n    }\n    const tmpBuffer = this._device.createBuffer(imageSize, { usage: 'read' });\n    await this.copyPixelDataToBuffer(x, y, w, h, layer, 0, tmpBuffer);\n    await tmpBuffer.getBufferSubData(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength), 0, imageSize);\n    tmpBuffer.dispose();\n  }\n  readPixelsToBuffer(layer: number, x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void {\n    this.copyPixelDataToBuffer(x, y, w, h, layer, 0, buffer);\n  }\n  private loadEmpty(format: TextureFormat, width: number, height: number, depth: number, numMipLevels: number): void {\n    this.allocInternal(format, width, height, depth, numMipLevels);\n    if (this._mipLevelCount > 1 && !this._device.isContextLost()) {\n      this.generateMipmaps();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAMM,MAAO,oBAAqB,SAAQ,iBAAiB,CAAA;AACzD,IAAA,WAAA,CAAY,MAAoB,EAAA;AAC9B,QAAA,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,cAAc,CAAC,CAAC;KAC7C;IACD,gBAAgB,GAAA;AACd,QAAA,OAAO,IAAI,CAAC;KACb;IACD,IAAI,GAAA;QACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;KAC3F;AACD,IAAA,MAAM,CAAC,IAAgB,EAAE,OAAe,EAAE,OAAe,EAAE,OAAe,EAAE,KAAa,EAAE,MAAc,EAAE,KAAa,EAAA;AACtH,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAChC,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AAC/F,SAAA;AACD,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AACzE,QAAA,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;AACxB,SAAA;KACF;AACD,IAAA,iBAAiB,CACf,IAAyB,EACzB,OAAe,EACf,OAAe,EACf,UAAkB,EAClB,CAAS,EACT,CAAS,EACT,KAAa,EACb,MAAc,EAAA;AAEd,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAChC,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AAC/F,SAAA;QACD,IAAI,IAAI,YAAY,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC3D,YAAA,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC5E,SAAA;AAAM,aAAA;YACL,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC7C,YAAA,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AAClB,YAAA,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;YACpB,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC9D,YAAA,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC1E,YAAA,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;AACd,YAAA,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,SAAA;KACF;IACD,WAAW,CAAC,MAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,KAAa,EAAE,aAAsB,EAAA;QACrG,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,qBAAqB,IAAI,MAAM,GAAG,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAClH,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;KACjD;AACD,IAAA,UAAU,CAAC,KAAc,EAAE,IAAa,EAAE,QAAiB,EAAA;AACzD,QAAA,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE;AACpE,YAAA,SAAS,EAAE,IAAI;YACf,YAAY,EAAE,KAAK,IAAI,CAAC;YACxB,aAAa,EAAE,QAAQ,IAAI,IAAI,CAAC,cAAc,IAAI,KAAK,IAAI,CAAC,CAAC;YAC7D,cAAc,EAAE,IAAI,IAAI,CAAC;AACzB,YAAA,eAAe,EAAE,CAAC;AACnB,SAAA,CAAC,GAAG,IAAI,CAAC;KACX;AACD,IAAA,MAAM,UAAU,CAAC,KAAa,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,MAAkB,EAAA;QAC5F,MAAM,UAAU,GAAG,0BAA0B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,SAAS,GAAG,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzD,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;AAC7C,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;AAC/C,QAAA,MAAM,SAAS,GAAG,YAAY,GAAG,YAAY,GAAG,SAAS,CAAC;AAC1D,QAAA,IAAI,MAAM,CAAC,UAAU,GAAG,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,CAA6D,0DAAA,EAAA,MAAM,CAAC,UAAU,CAAwB,qBAAA,EAAA,SAAS,CAAE,CAAA,CAAC,CAAC;AACpI,SAAA;AACD,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;AAC1E,QAAA,MAAM,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAClE,MAAM,SAAS,CAAC,gBAAgB,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QACpH,SAAS,CAAC,OAAO,EAAE,CAAC;KACrB;IACD,kBAAkB,CAAC,KAAa,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS,EAAE,MAAqB,EAAA;AACjG,QAAA,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;KAC1D;IACO,SAAS,CAAC,MAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,KAAa,EAAE,YAAoB,EAAA;AACzG,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;AAC/D,QAAA,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE;YAC5D,IAAI,CAAC,eAAe,EAAE,CAAC;AACxB,SAAA;KACF;AACF;;;;"}