/// <reference types="dist" />
import { Vector4 } from '@sophon/base';
import { TextureFormat } from '../base_types';
import { IFrameBufferOptions, SamplerOptions, TextureSampler, Texture2D, Texture3D, Texture2DArray, TextureCube, TextureVideo, VertexInputLayout, GPUDataBuffer, FrameBuffer, GPUProgram, BindGroupLayout, BindGroup, IndexBuffer, StructuredBuffer, TextureMipmapData, TextureImageElement, TextureCreationOptions, BufferCreationOptions } from '../gpuobject';
import { GPUProgramConstructParams, Device, DeviceType, TextureCaps, MiscCaps, FramebufferCaps, ShaderCaps, DeviceOptions } from '../device';
import { RenderStateSet } from '../render_states';
import { PipelineCache } from './pipeline_cache';
import type { VertexData } from '../vertexdata';
import type { PBStructTypeInfo } from '../builder';
import type { WebGPURenderPass } from './renderpass_webgpu';
import type { WebGPUComputePass } from './computepass_webgpu';
import type { ITimer } from '../timer';
import type { TypedArray } from '../../misc';
export declare class WebGPUDevice extends Device {
    private _context;
    private _canvas;
    private _dpr;
    private _device;
    private _adapter;
    private _textureCaps;
    private _framebufferCaps;
    private _miscCaps;
    private _shaderCaps;
    private _reverseWindingOrder;
    private _canRender;
    private _backBufferFormat;
    private _depthFormat;
    private _defaultMSAAColorTexture;
    private _defaultMSAAColorTextureView;
    private _defaultDepthTexture;
    private _defaultDepthTextureView;
    private _pipelineCache;
    private _bindGroupCache;
    private _vertexLayoutCache;
    private _samplerCache;
    private _renderStatesOverridden;
    private _currentProgram;
    private _currentVertexData;
    private _currentStateSet;
    private _currentBindGroups;
    private _currentBindGroupOffsets;
    private _commandQueue;
    private _gpuObjectHashCounter;
    private _gpuObjectHasher;
    private _defaultRenderPassDesc;
    private _sampleCount;
    constructor(cvs: HTMLCanvasElement, options?: DeviceOptions);
    get context(): GPUCanvasContext;
    get device(): GPUDevice;
    get adapter(): GPUAdapter;
    get drawingBufferWidth(): number;
    get drawingBufferHeight(): number;
    get clientWidth(): number;
    get clientHeight(): number;
    get pipelineCache(): PipelineCache;
    get backbufferFormat(): GPUTextureFormat;
    get backbufferDepthFormat(): GPUTextureFormat;
    get defaultDepthTexture(): GPUTexture;
    get defaultDepthTextureView(): GPUTextureView;
    get defaultMSAAColorTextureView(): GPUTextureView;
    get defaultRenderPassDesc(): GPURenderPassDescriptor;
    get sampleCount(): number;
    get currentPass(): WebGPURenderPass | WebGPUComputePass;
    getCanvas(): HTMLCanvasElement;
    getScale(): number;
    isContextLost(): boolean;
    getDeviceType(): DeviceType;
    getTextureCaps(): TextureCaps;
    getFramebufferCaps(): FramebufferCaps;
    getMiscCaps(): MiscCaps;
    getShaderCaps(): ShaderCaps;
    getDrawingBufferWidth(): number;
    getDrawingBufferHeight(): number;
    getBackBufferWidth(): number;
    getBackBufferHeight(): number;
    initContext(): Promise<void>;
    clearFrameBuffer(clearColor: Vector4, clearDepth: number, clearStencil: number): void;
    createGPUTimer(): ITimer;
    createRenderStateSet(): RenderStateSet;
    createSampler(options: SamplerOptions): TextureSampler;
    createTexture2D(format: TextureFormat, width: number, height: number, options?: TextureCreationOptions): Texture2D;
    createTexture2DFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): Texture2D;
    createTexture2DFromImage(element: TextureImageElement, options?: TextureCreationOptions): Texture2D;
    createTexture2DArray(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture2DArray;
    createTexture3D(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture3D;
    createCubeTexture(format: TextureFormat, size: number, options?: TextureCreationOptions): TextureCube;
    createCubeTextureFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): TextureCube;
    createTextureVideo(el: HTMLVideoElement): TextureVideo;
    createGPUProgram(params: GPUProgramConstructParams): GPUProgram;
    createBindGroup(layout: BindGroupLayout): BindGroup;
    createBuffer(sizeInBytes: number, options: BufferCreationOptions): GPUDataBuffer;
    createIndexBuffer(data: Uint16Array | Uint32Array, options?: BufferCreationOptions): IndexBuffer<unknown>;
    createStructuredBuffer(structureType: PBStructTypeInfo, options: BufferCreationOptions, data?: TypedArray): StructuredBuffer;
    createVAO(data: VertexData): VertexInputLayout;
    createFrameBuffer(options?: IFrameBufferOptions): FrameBuffer;
    setBindGroup(index: number, bindGroup: BindGroup, dynamicOffsets?: Iterable<number>): void;
    setViewport(vp?: number[]): any;
    setViewport(x: number, y: number, w: number, h: number): any;
    getViewport(): number[];
    setScissor(scissor?: number[]): any;
    setScissor(x: number, y: number, w: number, h: number): void;
    getScissor(): number[];
    setProgram(program: GPUProgram): void;
    getProgram(): GPUProgram;
    setVertexData(vertexData: VertexInputLayout): void;
    getVertexData(): VertexInputLayout;
    setRenderStates(stateSet: RenderStateSet): void;
    getRenderStates(): RenderStateSet;
    setFramebuffer(rt: FrameBuffer): void;
    getFramebuffer(): FrameBuffer;
    reverseVertexWindingOrder(reverse: boolean): void;
    isWindingOrderReversed(): boolean;
    setRenderStatesOverridden(renderStates: RenderStateSet): void;
    flush(): void;
    readPixels(x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void>;
    readPixelsToBuffer(x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void;
    looseContext(): void;
    restoreContext(): void;
    private configure;
    private createDefaultRenderAttachments;
    private tryCompile;
}
