{"version":3,"file":"computepass_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/computepass_webgpu.ts"],"sourcesContent":["import { WebGPUProgram } from \"./gpuprogram_webgpu\";\r\nimport { WebGPUBindGroup } from \"./bindgroup_webgpu\";\r\nimport { WebGPUMipmapGenerator } from \"./utils_webgpu\";\r\nimport type { WebGPUBaseTexture } from \"./basetexture_webgpu\";\r\nimport type { WebGPUBuffer } from \"./buffer_webgpu\";\r\nimport type { WebGPUDevice } from \"./device\";\r\nimport type { WebGPUFrameBuffer } from \"./framebuffer_webgpu\";\r\nimport type { UploadBuffer, UploadImage, UploadTexture } from \"./uploadringbuffer\";\r\n\r\nconst VALIDATION_NEED_NEW_PASS = 1 << 0;\r\nconst VALIDATION_NEED_GENERATE_MIPMAP = 1 << 1;\r\nconst VALIDATION_FAILED = 1 << 2;\r\n\r\nexport class WebGPUComputePass {\r\n  private _device: WebGPUDevice;\r\n  private _bufferUploads: Set<WebGPUBuffer>;\r\n  private _textureUploads: Set<WebGPUBaseTexture>;\r\n  private _uploadCommandEncoder: GPUCommandEncoder;\r\n  private _computeCommandEncoder: GPUCommandEncoder;\r\n  private _computePassEncoder: GPUComputePassEncoder;\r\n  constructor(device: WebGPUDevice, frameBuffer?: WebGPUFrameBuffer) {\r\n    this._device = device;\r\n    this._bufferUploads = new Set();\r\n    this._textureUploads = new Set();\r\n    this._uploadCommandEncoder = this._device.device.createCommandEncoder();\r\n    this._computeCommandEncoder = this._device.device.createCommandEncoder();\r\n    this._computePassEncoder = null;\r\n  }\r\n  get active(): boolean {\r\n    return !!this._computePassEncoder;\r\n  }\r\n  isBufferUploading(buffer: WebGPUBuffer): boolean {\r\n    return !!this._bufferUploads.has(buffer);\r\n  }\r\n  isTextureUploading(tex: WebGPUBaseTexture): boolean {\r\n    return !!this._textureUploads.has(tex);\r\n  }\r\n  compute(program: WebGPUProgram, bindGroups: WebGPUBindGroup[], bindGroupOffsets: Iterable<number>[], workgroupCountX: number, workgroupCountY: number, workgroupCountZ: number): void {\r\n    const validation = this.validateCompute(bindGroups);\r\n    if ((validation & VALIDATION_NEED_NEW_PASS) || (validation & VALIDATION_NEED_GENERATE_MIPMAP)) {\r\n      if (this._computePassEncoder) {\r\n        this.end();\r\n      }\r\n    }\r\n    if (validation & VALIDATION_NEED_GENERATE_MIPMAP) {\r\n      WebGPUMipmapGenerator.generateMipmapsForBindGroups(this._device, bindGroups);\r\n    }\r\n    if (!(validation & VALIDATION_FAILED)) {\r\n      if (!this._computePassEncoder) {\r\n        this.begin();\r\n      }\r\n      this.setBindGroupsForCompute(this._computePassEncoder, program, bindGroups, bindGroupOffsets);\r\n      const pipeline = this._device.pipelineCache.fetchComputePipeline(program);\r\n      if (pipeline) {\r\n        this._computePassEncoder.setPipeline(pipeline);\r\n        this._computePassEncoder.dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ);\r\n      }\r\n    }\r\n  }\r\n  private setBindGroupsForCompute(computePassEncoder: GPUComputePassEncoder, program: WebGPUProgram, bindGroups: WebGPUBindGroup[], bindGroupOffsets: Iterable<number>[]): boolean {\r\n    if (bindGroups) {\r\n      for (let i = 0; i < bindGroups.length; i++) {\r\n        if (bindGroups[i]) {\r\n          const bindGroup = bindGroups[i].bindGroup;\r\n          if (!bindGroup) {\r\n            return false;\r\n          }\r\n          computePassEncoder.setBindGroup(i, bindGroup, bindGroupOffsets?.[i] || undefined);\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  begin(): void {\r\n    if (this.active) {\r\n      console.error('WebGPUComputePass.begin() failed: WebGPUComputePass.begin() has already been called');\r\n      return;\r\n    }\r\n    this._uploadCommandEncoder = this._device.device.createCommandEncoder();\r\n    this._computeCommandEncoder = this._device.device.createCommandEncoder();\r\n    this._computePassEncoder = this._computeCommandEncoder.beginComputePass();\r\n  }\r\n  end() {\r\n    if (this.active) {\r\n      this._computePassEncoder.end();\r\n      this._computePassEncoder = null;\r\n      this._bufferUploads.forEach(buffer => buffer.beginSyncChanges(this._uploadCommandEncoder));\r\n      this._textureUploads.forEach(tex => tex.beginSyncChanges(this._uploadCommandEncoder));\r\n      this._device.device.queue.submit([this._uploadCommandEncoder.finish(), this._computeCommandEncoder.finish()]);\r\n      this._bufferUploads.forEach(buffer => buffer.endSyncChanges());\r\n      this._textureUploads.forEach(tex => tex.endSyncChanges());\r\n      this._bufferUploads.clear();\r\n      this._textureUploads.clear();\r\n      this._uploadCommandEncoder = null;\r\n      this._computeCommandEncoder = null;\r\n    }\r\n  }\r\n  private validateCompute(bindGroups: WebGPUBindGroup[]): number {\r\n    let validation = 0;\r\n    if (bindGroups) {\r\n      for (const bindGroup of bindGroups) {\r\n        if (bindGroup) {\r\n          if (bindGroup.bindGroup) {\r\n            for (const ubo of bindGroup.bufferList) {\r\n              if (ubo.disposed) {\r\n                validation |= VALIDATION_FAILED;\r\n              }\r\n              if (ubo.getPendingUploads().length > 0) {\r\n                this._bufferUploads.add(ubo);\r\n              }\r\n            }\r\n            for (const tex of bindGroup.textureList) {\r\n              if (tex.disposed) {\r\n                validation |= VALIDATION_FAILED;\r\n              }\r\n              if (tex.isMipmapDirty()) {\r\n                validation |= VALIDATION_NEED_GENERATE_MIPMAP;\r\n              }\r\n              if (tex.getPendingUploads().length > 0) {\r\n                this._textureUploads.add(tex);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return validation;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}