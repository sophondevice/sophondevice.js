{"version":3,"file":"texture3d_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/texture3d_webgpu.ts"],"sourcesContent":["import { TextureTarget, TextureFormat, getTextureFormatBlockWidth, getTextureFormatBlockHeight, getTextureFormatBlockSize, linearTextureFormatToSRGB } from '../base_types';\r\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\r\nimport { GPUResourceUsageFlags, TextureImageElement, Texture3D, GPUDataBuffer } from '../gpuobject';\r\nimport type { WebGPUDevice } from './device';\r\nimport type { TypedArray } from '../../misc';\r\n\r\nexport class WebGPUTexture3D extends WebGPUBaseTexture implements Texture3D<GPUTexture> {\r\n  constructor(device: WebGPUDevice) {\r\n    super(device, TextureTarget.Texture2D);\r\n  }\r\n  isTexture3D(): this is Texture3D {\r\n    return true;\r\n  }\r\n  init(): void {\r\n    this.loadEmpty(this._format, this._width, this._height, this._depth, this._mipLevelCount);\r\n  }\r\n  update(\r\n    data: TypedArray,\r\n    xOffset: number,\r\n    yOffset: number,\r\n    zOffset: number,\r\n    width: number,\r\n    height: number,\r\n    depth: number\r\n  ): void {\r\n    if (this._device.isContextLost()) {\r\n      return;\r\n    }\r\n    if (!this._object) {\r\n      this.allocInternal(this._format, this._width, this._height, this._depth, this._mipLevelCount);\r\n    }\r\n    this.uploadRaw(data, width, height, depth, xOffset, yOffset, zOffset, 0);\r\n  }\r\n  updateFromElement(\r\n    data: TextureImageElement,\r\n    xOffset: number,\r\n    yOffset: number,\r\n    zOffset: number,\r\n    width: number,\r\n    height: number,\r\n  ): void {\r\n    if (this._device.isContextLost()) {\r\n      return;\r\n    }\r\n    if (!this._object) {\r\n      this.allocInternal(this._format, this._width, this._height, this._depth, this._mipLevelCount);\r\n    }\r\n    const cvs = document.createElement('canvas');\r\n    cvs.width = width;\r\n    cvs.height = height;\r\n    const ctx = cvs.getContext('2d');\r\n    ctx.drawImage(data, 0, 0, width, height, 0, 0, width, height);\r\n    this.uploadImageData(cvs, width, height, xOffset, yOffset, 0, zOffset);\r\n  }\r\n  createEmpty(format: TextureFormat, width: number, height: number, depth: number, creationFlags?: number): void {\r\n    this._flags = Number(creationFlags) || 0;\r\n    format = (this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE) ? format : linearTextureFormatToSRGB(format);\r\n    this.loadEmpty(format, width, height, depth, 0);\r\n  }\r\n  createView(level?: number, face?: number, mipCount?: number): GPUTextureView {\r\n    return this._object ? this._device.gpuCreateTextureView(this._object, {\r\n      dimension: '2d',\r\n      baseMipLevel: 0,\r\n      mipLevelCount: 1,\r\n      baseArrayLayer: face,\r\n      arrayLayerCount: 1,\r\n    }) : null;\r\n  }\r\n  async readPixels(layer: number, x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\r\n    const blockWidth = getTextureFormatBlockWidth(this.format);\r\n    const blockHeight = getTextureFormatBlockHeight(this.format);\r\n    const blockSize = getTextureFormatBlockSize(this.format);\r\n    const blocksPerRow = this.width / blockWidth;\r\n    const blocksPerCol = this.height / blockHeight;\r\n    const imageSize = blocksPerRow * blocksPerCol * blockSize;\r\n    if (buffer.byteLength < imageSize) {\r\n      throw new Error(`Texture2D.readPixels() failed: destination buffer size is ${buffer.byteLength}, should be at least ${imageSize}`);\r\n    }\r\n    const tmpBuffer = this._device.createBuffer(imageSize, { usage: 'read' });\r\n    await this.copyPixelDataToBuffer(x, y, w, h, layer, 0, tmpBuffer);\r\n    await tmpBuffer.getBufferSubData(new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength), 0, imageSize);\r\n    tmpBuffer.dispose();\r\n  }\r\n  readPixelsToBuffer(layer: number, x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void {\r\n    this.copyPixelDataToBuffer(x, y, w, h, layer, 0, buffer);\r\n  }\r\n  private loadEmpty(format: TextureFormat, width: number, height: number, depth: number, numMipLevels: number): void {\r\n    this.allocInternal(format, width, height, depth, numMipLevels);\r\n    if (this._mipLevelCount > 1 && !this._device.isContextLost()) {\r\n      this.generateMipmaps();\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}