import { CompareFunc } from '../base_types';
import { ColorState, BlendEquation, BlendFunc, BlendingState, FaceMode, RasterizerState, DepthState, StencilOp, StencilState, RenderStateSet } from '../render_states';
import type { WebGPUDevice } from './device';
export declare abstract class WebGPURenderState {
    protected static _defaultState: WebGPURenderState;
    protected _hash: string;
    static get defaultState(): WebGPURenderState;
    constructor();
    get hash(): string;
    invalidateHash(): void;
    protected _getHash(ctor: any): string;
    protected abstract computeHash(): string;
}
export declare class WebGPUColorState extends WebGPURenderState implements ColorState {
    protected static _defaultState: WebGPURenderState;
    private _redMask;
    private _greenMask;
    private _blueMask;
    private _alphaMask;
    constructor();
    get redMask(): boolean;
    set redMask(val: boolean);
    get greenMask(): boolean;
    set greenMask(val: boolean);
    get blueMask(): boolean;
    set blueMask(val: boolean);
    get alphaMask(): boolean;
    set alphaMask(val: boolean);
    setColorMask(r: boolean, g: boolean, b: boolean, a: boolean): this;
    protected computeHash(): string;
}
export declare class WebGPUBlendingState extends WebGPURenderState implements BlendingState {
    protected static _defaultState: WebGPURenderState;
    private _enabled;
    private _srcBlendRGB;
    private _dstBlendRGB;
    private _srcBlendAlpha;
    private _dstBlendAlpha;
    private _rgbEquation;
    private _alphaEquation;
    constructor();
    get enabled(): boolean;
    set enabled(val: boolean);
    get srcBlendRGB(): BlendFunc;
    set srcBlendRGB(val: BlendFunc);
    get srcBlendAlpha(): BlendFunc;
    set srcBlendAlpha(val: BlendFunc);
    get dstBlendRGB(): BlendFunc;
    set dstBlendRGB(val: BlendFunc);
    get dstBlendAlpha(): BlendFunc;
    set dstBlendAlpha(val: BlendFunc);
    get rgbEquation(): BlendEquation;
    set rgbEquation(val: BlendEquation);
    get alphaEquation(): BlendEquation;
    set alphaEquation(val: BlendEquation);
    enable(b: boolean): this;
    setBlendFunc(src: BlendFunc, dest: BlendFunc): this;
    setBlendFuncRGB(src: BlendFunc, dest: BlendFunc): this;
    setBlendFuncAlpha(src: BlendFunc, dest: BlendFunc): this;
    setBlendEquation(rgb: BlendEquation, alpha: BlendEquation): this;
    protected computeHash(): string;
}
export declare class WebGPURasterizerState extends WebGPURenderState implements RasterizerState {
    protected static _defaultState: WebGPURenderState;
    private _cullMode;
    constructor();
    get cullMode(): FaceMode;
    set cullMode(val: FaceMode);
    setCullMode(mode: FaceMode): this;
    protected computeHash(): string;
}
export declare class WebGPUDepthState extends WebGPURenderState implements DepthState {
    protected static _defaultState: WebGPURenderState;
    private _testEnabled;
    private _writeEnabled;
    private _compareFunc;
    constructor();
    get testEnabled(): boolean;
    set testEnabled(val: boolean);
    get writeEnabled(): boolean;
    set writeEnabled(val: boolean);
    get compareFunc(): CompareFunc;
    set compareFunc(val: CompareFunc);
    enableTest(b: boolean): this;
    enableWrite(b: boolean): this;
    setCompareFunc(func: CompareFunc): this;
    protected computeHash(): string;
}
export declare class WebGPUStencilState extends WebGPURenderState implements StencilState {
    protected static _defaultState: WebGPURenderState;
    private _enabled;
    private _enableTwoSided;
    private _writeMask;
    private _writeMaskBack;
    private _failOp;
    private _failOpBack;
    private _zFailOp;
    private _zFailOpBack;
    private _passOp;
    private _passOpBack;
    private _func;
    private _funcBack;
    private _ref;
    private _valueMask;
    private _valueMaskBack;
    constructor();
    get enabled(): boolean;
    set enabled(val: boolean);
    get enableTwoSided(): boolean;
    set enableTwoSided(val: boolean);
    get writeMask(): number;
    set writeMask(val: number);
    get writeMaskBack(): number;
    set writeMaskBack(val: number);
    get failOp(): StencilOp;
    set failOp(val: StencilOp);
    get failOpBack(): StencilOp;
    set failOpBack(val: StencilOp);
    get zFailOp(): StencilOp;
    set zFailOp(val: StencilOp);
    get zFailOpBack(): StencilOp;
    set zFailOpBack(val: StencilOp);
    get passOp(): StencilOp;
    set passOp(val: StencilOp);
    get passOpBack(): StencilOp;
    set passOpBack(val: StencilOp);
    get func(): CompareFunc;
    set func(val: CompareFunc);
    get funcBack(): CompareFunc;
    set funcBack(val: CompareFunc);
    get ref(): number;
    set ref(val: number);
    get valueMask(): number;
    set valueMask(val: number);
    get valueMaskBack(): number;
    set valueMaskBack(val: number);
    enable(b: boolean): this;
    enableStencilTwoside(b: boolean): this;
    setFrontWriteMask(mask: number): this;
    setBackWriteMask(mask: number): this;
    setFrontOp(fail: StencilOp, zfail: StencilOp, pass: StencilOp): this;
    setBackOp(fail: StencilOp, zfail: StencilOp, pass: StencilOp): this;
    setFrontCompareFunc(func: CompareFunc): this;
    setBackCompareFunc(func: CompareFunc): this;
    setReference(ref: number): this;
    setFrontValueMask(mask: number): this;
    setBackValueMask(mask: number): this;
    protected computeHash(): string;
    private sideHash;
}
export declare class WebGPURenderStateSet implements RenderStateSet {
    private _device;
    private _colorState?;
    private _blendingState?;
    private _rasterizerState?;
    private _depthState?;
    private _stencilState?;
    constructor(device: WebGPUDevice);
    get hash(): string;
    get colorState(): WebGPUColorState;
    get blendingState(): WebGPUBlendingState;
    get rasterizerState(): WebGPURasterizerState;
    get depthState(): WebGPUDepthState;
    get stencilState(): WebGPUStencilState;
    useColorState(): ColorState;
    defaultColorState(): void;
    useBlendingState(): BlendingState;
    defaultBlendingState(): void;
    useRasterizerState(): RasterizerState;
    defaultRasterizerState(): void;
    useDepthState(): DepthState;
    defaultDepthState(): void;
    useStencilState(): StencilState;
    defaultStencilState(): void;
    apply(overridden: RenderStateSet, force?: boolean): void;
}
