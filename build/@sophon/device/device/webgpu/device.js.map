{"version":3,"file":"device.js","sources":["../../../../../libs/device/src/device/webgpu/device.ts"],"sourcesContent":["import { Vector4 } from '@sophon/base';\nimport { getTextureFormatBlockSize, PrimitiveType, TextureFormat } from '../base_types';\nimport {\n  IFrameBufferOptions,\n  SamplerOptions,\n  TextureSampler,\n  Texture2D,\n  Texture3D,\n  Texture2DArray,\n  TextureCube,\n  TextureVideo,\n  VertexInputLayout,\n  GPUDataBuffer,\n  FrameBuffer,\n  GPUProgram,\n  BindGroupLayout,\n  BindGroup,\n  IndexBuffer,\n  StructuredBuffer,\n  TextureMipmapData,\n  TextureImageElement,\n  TextureCreationOptions,\n  BufferCreationOptions\n} from '../gpuobject';\nimport { GPUProgramConstructParams, Device, DeviceType, TextureCaps, MiscCaps, FramebufferCaps, ShaderCaps, DeviceOptions } from '../device';\nimport { RenderStateSet } from '../render_states';\nimport { WebGPUTextureSampler } from './sampler_webgpu';\nimport { WebGPUProgram } from './gpuprogram_webgpu';\nimport { WebGPUBindGroup } from './bindgroup_webgpu';\nimport { WebGPUTexture2D } from './texture2d_webgpu';\nimport { WebGPUTexture2DArray } from './texture2darray_webgpu';\nimport { WebGPUTexture3D } from './texture3d_webgpu';\nimport { WebGPUTextureCube } from './texturecube_webgpu';\nimport { WebGPUTextureVideo } from './texturevideo_webgpu';\nimport { WebGPUTextureCap, WebGPUFramebufferCap, WebGPUMiscCap, WebGPUShaderCap } from './capabilities_webgpu';\nimport { WebGPUVertexInputLayout } from './vertexinputlayout_webgpu';\nimport { PipelineCache } from './pipeline_cache';\nimport { WebGPURenderStateSet } from './renderstates_webgpu';\nimport { WebGPUBuffer } from './buffer_webgpu';\nimport { WebGPUFrameBuffer } from './framebuffer_webgpu';\nimport { WebGPUIndexBuffer } from './indexbuffer_webgpu';\nimport { BindGroupCache } from './bindgroup_cache';\nimport { VertexLayoutCache } from './vertexinputlayout_cache';\nimport { SamplerCache } from './sampler_cache';\nimport { CommandQueueImmediate } from './commandqueue';\nimport { WebGPUStructuredBuffer } from './structuredbuffer_webgpu';\nimport { textureFormatInvMap } from './constants_webgpu';\nimport { WebGPUBaseTexture } from './basetexture_webgpu';\nimport type { VertexData } from '../vertexdata';\nimport type { PBStructTypeInfo } from '../builder';\nimport type { WebGPURenderPass } from './renderpass_webgpu';\nimport type { WebGPUComputePass } from './computepass_webgpu';\nimport type { ITimer } from '../timer';\nimport type { TypedArray } from '../../misc';\n\nexport class WebGPUDevice extends Device {\n  private _context: GPUCanvasContext;\n  private _canvas: HTMLCanvasElement;\n  private _dpr: number;\n  private _device: GPUDevice;\n  private _adapter: GPUAdapter;\n  private _textureCaps: WebGPUTextureCap;\n  private _framebufferCaps: WebGPUFramebufferCap;\n  private _miscCaps: WebGPUMiscCap;\n  private _shaderCaps: WebGPUShaderCap;\n  private _reverseWindingOrder: boolean;\n  private _canRender: boolean;\n  private _backBufferFormat: GPUTextureFormat;\n  private _depthFormat: GPUTextureFormat;\n  private _defaultMSAAColorTexture: GPUTexture;\n  private _defaultMSAAColorTextureView: GPUTextureView;\n  private _defaultDepthTexture: GPUTexture;\n  private _defaultDepthTextureView: GPUTextureView;\n  private _pipelineCache: PipelineCache;\n  private _bindGroupCache: BindGroupCache;\n  private _vertexLayoutCache: VertexLayoutCache;\n  private _samplerCache: SamplerCache;\n  private _renderStatesOverridden: WebGPURenderStateSet;\n  private _currentProgram: WebGPUProgram;\n  private _currentVertexData: WebGPUVertexInputLayout;\n  private _currentStateSet: WebGPURenderStateSet;\n  private _currentBindGroups: WebGPUBindGroup[];\n  private _currentBindGroupOffsets: Iterable<number>[];\n  private _commandQueue: CommandQueueImmediate;\n  private _gpuObjectHashCounter: number;\n  private _gpuObjectHasher: WeakMap<GPUObjectBase, number>;\n  private _defaultRenderPassDesc: GPURenderPassDescriptor;\n  private _sampleCount: number;\n  constructor(cvs: HTMLCanvasElement, options?: DeviceOptions) {\n    super();\n    this._canvas = cvs;\n    this._dpr = Math.ceil(options?.dpr ?? window.devicePixelRatio);\n    this._device = null;\n    this._adapter = null;\n    this._context = null;\n    this._reverseWindingOrder = false;\n    this._defaultMSAAColorTexture = null;\n    this._defaultMSAAColorTextureView = null;\n    this._defaultDepthTexture = null;\n    this._defaultDepthTextureView = null;\n    this._pipelineCache = null;\n    this._bindGroupCache = null;\n    this._vertexLayoutCache = null;\n    this._currentProgram = null;\n    this._currentVertexData = null;\n    this._currentStateSet = null;\n    this._currentBindGroups = [];\n    this._currentBindGroupOffsets = [];\n    this._defaultRenderPassDesc = null;\n    this._sampleCount = options?.msaa ? 4 : 1;\n\n    this._textureCaps = null;\n    this._framebufferCaps = null;\n    this._miscCaps = null;\n    this._shaderCaps = null;\n\n    this._gpuObjectHasher = new WeakMap();\n    this._gpuObjectHashCounter = 1;\n    this._samplerCache = new SamplerCache(this);\n    this._renderStatesOverridden = null;\n  }\n  get context() {\n    return this._context;\n  }\n  get device(): GPUDevice {\n    return this._device;\n  }\n  get adapter(): GPUAdapter {\n    return this._adapter;\n  }\n  get drawingBufferWidth() {\n    return this.getDrawingBufferWidth();\n  }\n  get drawingBufferHeight() {\n    return this.getDrawingBufferHeight();\n  }\n  get clientWidth() {\n    return this._canvas.clientWidth;\n  }\n  get clientHeight() {\n    return this._canvas.clientHeight;\n  }\n  get pipelineCache(): PipelineCache {\n    return this._pipelineCache;\n  }\n  get backbufferFormat(): GPUTextureFormat {\n    return this._backBufferFormat;\n  }\n  get backbufferDepthFormat(): GPUTextureFormat {\n    return this._depthFormat;\n  }\n  get defaultDepthTexture(): GPUTexture {\n    return this._defaultDepthTexture;\n  }\n  get defaultDepthTextureView(): GPUTextureView {\n    return this._defaultDepthTextureView;\n  }\n  get defaultMSAAColorTextureView(): GPUTextureView {\n    return this._defaultMSAAColorTextureView;\n  }\n  get defaultRenderPassDesc(): GPURenderPassDescriptor {\n    return this._defaultRenderPassDesc;\n  }\n  get sampleCount(): number {\n    return this._sampleCount;\n  }\n  get currentPass(): WebGPURenderPass | WebGPUComputePass {\n    return this._commandQueue.currentPass;\n  }\n  getCanvas(): HTMLCanvasElement {\n    return this._canvas;\n  }\n  getScale(): number {\n    return this._dpr;\n  }\n  isContextLost(): boolean {\n    return false;\n  }\n  getDeviceType(): DeviceType {\n    return 'webgpu';\n  }\n  getTextureCaps(): TextureCaps {\n    return this._textureCaps;\n  }\n  getFramebufferCaps(): FramebufferCaps {\n    return this._framebufferCaps;\n  }\n  getMiscCaps(): MiscCaps {\n    return this._miscCaps;\n  }\n  getShaderCaps(): ShaderCaps {\n    return this._shaderCaps;\n  }\n  getDrawingBufferWidth(): number {\n    return this.getFramebuffer()?.getWidth() || this._canvas.width;\n  }\n  getDrawingBufferHeight(): number {\n    return this.getFramebuffer()?.getHeight() || this._canvas.height;\n  }\n  getBackBufferWidth(): number {\n    return this._canvas.width;\n  }\n  getBackBufferHeight(): number {\n    return this._canvas.height;\n  }\n  async initContext() {\n    if (!navigator.gpu) {\n      throw new Error('No browser support for WebGPU');\n    }\n    this._adapter = await navigator.gpu.requestAdapter();\n    if (!this._adapter) {\n      throw new Error('WebGPU: requestAdapter() failed');\n    }\n    if (this._adapter.isFallbackAdapter) {\n      console.warn('using a fallback adapter');\n    }\n    const featureNames = [\n      'depth-clip-control',\n      'depth24unorm-stencil8',\n      'depth32float-stencil8',\n      'texture-compression-bc',\n      'texture-compression-etc2',\n      'texture-compression-astc',\n      'timestamp-query',\n      'indirect-first-instance',\n      'shader-f16'\n    ].filter(val => this._adapter.features.has(val)) as GPUFeatureName[];\n    this._device = await this._adapter.requestDevice({\n      requiredFeatures: featureNames\n    });\n    if (!this._device) {\n      throw new Error('WebGPU: requestDevice() failed');\n    }\n    console.log('WebGPU device features:');\n    for (const feature of this._device.features) {\n      console.log(` - ${feature}`);\n    }\n    this._context = this._canvas.getContext('webgpu') as unknown as GPUCanvasContext || null;\n    if (!this._context) {\n      this._canRender = false;\n      throw new Error('WebGPU: getContext() failed');\n    }\n    this._canvas.width = this._canvas.clientWidth;\n    this._canvas.height = this._canvas.clientHeight;\n    this.configure();\n    this._textureCaps = new WebGPUTextureCap(this);\n    this._framebufferCaps = new WebGPUFramebufferCap(this);\n    this._miscCaps = new WebGPUMiscCap(this);\n    this._shaderCaps = new WebGPUShaderCap(this);\n\n    this._pipelineCache = new PipelineCache(this);\n    this._bindGroupCache = new BindGroupCache(this);\n    this._vertexLayoutCache = new VertexLayoutCache();\n    this._commandQueue = new CommandQueueImmediate(this);\n    this._canRender = true;\n\n    this.addDefaultEventListener('resize', evt => {\n      const width = Math.max(1, Math.round(this._canvas.clientWidth * this._dpr));\n      const height = Math.max(1, Math.round(this._canvas.clientHeight * this._dpr));\n      if (width !== this._canvas.width || height !== this._canvas.height) {\n        this._canvas.width = width;\n        this._canvas.height = height;\n        this.createDefaultRenderAttachments();\n      }\n    });\n  }\n  clearFrameBuffer(clearColor: Vector4, clearDepth: number, clearStencil: number) {\n    this._commandQueue.clear(clearColor, clearDepth, clearStencil);\n  }\n  // factory\n  createGPUTimer(): ITimer {\n    // throw new Error('not implemented');\n    return null;\n  }\n  createRenderStateSet(): RenderStateSet {\n    return new WebGPURenderStateSet(this);\n  }\n  createSampler(options: SamplerOptions): TextureSampler {\n    return this.fetchSampler(options);\n  }\n  createTexture2D(format: TextureFormat, width: number, height: number, options?: TextureCreationOptions): Texture2D {\n    const tex = options?.texture as WebGPUTexture2D ?? new WebGPUTexture2D(this);\n    if (!tex.isTexture2D()) {\n      console.error('createTexture2D() failed: options.texture must be 2d texture');\n      return null;\n    }\n    tex.createEmpty(format, width, height, this.parseTextureOptions(options));\n    return tex;\n  }\n  createTexture2DFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): Texture2D {\n    const tex = options?.texture as WebGPUTexture2D ?? new WebGPUTexture2D(this);\n    if (!tex.isTexture2D()) {\n      console.error('createTexture2DFromMipmapData() failed: options.texture must be 2d texture');\n      return null;\n    }\n    tex.createWithMipmapData(data, this.parseTextureOptions(options));\n    return tex;\n  }\n  createTexture2DFromImage(element: TextureImageElement, options?: TextureCreationOptions): Texture2D {\n    const tex = options?.texture as WebGPUTexture2D ?? new WebGPUTexture2D(this);\n    if (!tex.isTexture2D()) {\n      console.error('createTexture2DFromImage() failed: options.texture must be 2d texture');\n      return null;\n    }\n    tex.loadFromElement(element, this.parseTextureOptions(options));\n    return tex;\n  }\n  createTexture2DArray(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture2DArray {\n    const tex = options?.texture as WebGPUTexture2DArray ?? new WebGPUTexture2DArray(this);\n    if (!tex.isTexture2DArray()) {\n      console.error('createTexture2DArray() failed: options.texture must be 2d array texture');\n      return null;\n    }\n    tex.createEmpty(format, width, height, depth, this.parseTextureOptions(options));\n    return tex;\n  }\n  createTexture3D(format: TextureFormat, width: number, height: number, depth: number, options?: TextureCreationOptions): Texture3D {\n    const tex = options?.texture as WebGPUTexture3D ?? new WebGPUTexture3D(this);\n    if (!tex.isTexture3D()) {\n      console.error('createTexture3D() failed: options.texture must be 3d texture');\n      return null;\n    }\n    tex.createEmpty(format, width, height, depth, this.parseTextureOptions(options));\n    return tex;\n  }\n  createCubeTexture(format: TextureFormat, size: number, options?: TextureCreationOptions): TextureCube {\n    const tex = options?.texture as WebGPUTextureCube ?? new WebGPUTextureCube(this);\n    if (!tex.isTextureCube()) {\n      console.error('createCubeTexture() failed: options.texture must be cube texture');\n      return null;\n    }\n    tex.createEmpty(format, size, this.parseTextureOptions(options));\n    return tex;\n  }\n  createCubeTextureFromMipmapData(data: TextureMipmapData, options?: TextureCreationOptions): TextureCube {\n    const tex = options?.texture as WebGPUTextureCube ?? new WebGPUTextureCube(this);\n    if (!tex.isTextureCube()) {\n      console.error('createCubeTextureFromMipmapData() failed: options.texture must be cube texture');\n      return null;\n    }\n    tex.createWithMipmapData(data, this.parseTextureOptions(options));\n    return tex;\n  }\n  createTextureVideo(el: HTMLVideoElement): TextureVideo {\n    return new WebGPUTextureVideo(this, el);\n  }\n  createGPUProgram(params: GPUProgramConstructParams): GPUProgram {\n    return new WebGPUProgram(this, params);\n  }\n  createBindGroup(layout: BindGroupLayout): BindGroup {\n    return new WebGPUBindGroup(this, layout);\n  }\n  createBuffer(\n    sizeInBytes: number,\n    options: BufferCreationOptions,\n  ): GPUDataBuffer {\n    return new WebGPUBuffer(this, this.parseBufferOptions(options), sizeInBytes);\n  }\n  createIndexBuffer(data: Uint16Array | Uint32Array, options?: BufferCreationOptions): IndexBuffer<unknown> {\n    return new WebGPUIndexBuffer(this, data, this.parseBufferOptions(options, 'index'));\n  }\n  createStructuredBuffer(structureType: PBStructTypeInfo, options: BufferCreationOptions, data?: TypedArray): StructuredBuffer {\n    return new WebGPUStructuredBuffer(this, structureType, this.parseBufferOptions(options), data);\n  }\n  createVAO(data: VertexData): VertexInputLayout {\n    return new WebGPUVertexInputLayout(this, data);\n  }\n  createFrameBuffer(options?: IFrameBufferOptions): FrameBuffer {\n    return new WebGPUFrameBuffer(this, options);\n  }\n  setBindGroup(index: number, bindGroup: BindGroup, dynamicOffsets?: Iterable<number>) {\n    this._currentBindGroups[index] = bindGroup as WebGPUBindGroup;\n    this._currentBindGroupOffsets[index] = dynamicOffsets || null;\n  }\n  // render related\n  setViewport(vp?: number[]);\n  setViewport(x: number, y: number, w: number, h: number);\n  setViewport(x?: number[] | number, y?: number, w?: number, h?: number) {\n    if (x === null || x === undefined) {\n      this._commandQueue.setViewport();\n    } else if (Array.isArray(x)) {\n      this._commandQueue.setViewport(x[0], x[1], x[2], x[3]);\n    } else {\n      this._commandQueue.setViewport(x, y, w, h);\n    }\n  }\n  getViewport(): number[] {\n    return this._commandQueue.getViewport();\n  }\n  setScissor(scissor?: number[]);\n  setScissor(x: number, y: number, w: number, h: number): void;\n  setScissor(x?: number[] | number, y?: number, w?: number, h?: number) {\n    if (x === null || x === undefined) {\n      this._commandQueue.setScissor();\n    } else if (Array.isArray(x)) {\n      this._commandQueue.setScissor(x[0], x[1], x[2], x[3]);\n    } else {\n      this._commandQueue.setScissor(x, y, w, h);\n    }\n  }\n  getScissor(): number[] {\n    return this._commandQueue.getScissor();\n  }\n  setProgram(program: GPUProgram) {\n    this._currentProgram = program as WebGPUProgram;\n  }\n  getProgram(): GPUProgram {\n    return this._currentProgram;\n  }\n  setVertexData(vertexData: VertexInputLayout) {\n    this._currentVertexData = vertexData as WebGPUVertexInputLayout;\n  }\n  getVertexData(): VertexInputLayout {\n    return this._currentVertexData;\n  }\n  setRenderStates(stateSet: RenderStateSet) {\n    this._currentStateSet = stateSet as WebGPURenderStateSet;\n  }\n  getRenderStates(): RenderStateSet {\n    return this._currentStateSet;\n  }\n  setFramebuffer(rt: FrameBuffer): void {\n    this._commandQueue.setFramebuffer(rt as WebGPUFrameBuffer);\n  }\n  getFramebuffer(): FrameBuffer {\n    return this._commandQueue.getFramebuffer();\n  }\n  reverseVertexWindingOrder(reverse: boolean): void {\n    this._reverseWindingOrder = !!reverse;\n  }\n  isWindingOrderReversed(): boolean {\n    return this._reverseWindingOrder;\n  }\n  setRenderStatesOverridden(renderStates: RenderStateSet) {\n    this._renderStatesOverridden = renderStates as WebGPURenderStateSet;\n  }\n  /** @internal */\n  isBufferUploading(buffer: WebGPUBuffer): boolean {\n    return this._commandQueue.isBufferUploading(buffer);\n  }\n  /** @internal */\n  isTextureUploading(tex: WebGPUBaseTexture): boolean {\n    return this._commandQueue.isTextureUploading(tex);\n  }\n  /** @internal */\n  getRenderStatesOverridden() {\n    return this._renderStatesOverridden;\n  }\n  /** @internal */\n  getFramebufferInfo(): { colorFormats: GPUTextureFormat[], depthFormat: GPUTextureFormat, sampleCount: number, hash: string } {\n    return this._commandQueue.getFramebufferInfo();\n  }\n  /** @internal */\n  gpuGetObjectHash(obj: GPUObjectBase): number {\n    return this._gpuObjectHasher.get(obj);\n  }\n  /** @internal */\n  gpuCreateTexture(desc: GPUTextureDescriptor): GPUTexture {\n    const tex = this._device.createTexture(desc);\n    if (tex) {\n      this._gpuObjectHasher.set(tex, ++this._gpuObjectHashCounter);\n    }\n    return tex;\n  }\n  /** @internal */\n  gpuImportExternalTexture(el: HTMLVideoElement): GPUExternalTexture {\n    const tex = this._device.importExternalTexture({ source: el });\n    if (tex) {\n      this._gpuObjectHasher.set(tex, ++this._gpuObjectHashCounter);\n    }\n    return tex;\n  }\n  /** @internal */\n  gpuCreateSampler(desc: GPUSamplerDescriptor): GPUSampler {\n    const sampler = this._device.createSampler(desc);\n    if (sampler) {\n      this._gpuObjectHasher.set(sampler, ++this._gpuObjectHashCounter);\n    }\n    return sampler;\n  }\n  /** @internal */\n  gpuCreateBindGroup(desc: GPUBindGroupDescriptor): GPUBindGroup {\n    const bindGroup = this._device.createBindGroup(desc);\n    if (bindGroup) {\n      this._gpuObjectHasher.set(bindGroup, ++this._gpuObjectHashCounter);\n    }\n    return bindGroup;\n  }\n  /** @internal */\n  gpuCreateBuffer(desc: GPUBufferDescriptor): GPUBuffer {\n    const buffer = this._device.createBuffer(desc);\n    if (buffer) {\n      this._gpuObjectHasher.set(buffer, ++this._gpuObjectHashCounter);\n    }\n    return buffer;\n  }\n  /** @internal */\n  gpuCreateTextureView(texture: GPUTexture, desc?: GPUTextureViewDescriptor): GPUTextureView {\n    const view = texture?.createView(desc);\n    if (view) {\n      this._gpuObjectHasher.set(view, ++this._gpuObjectHashCounter);\n    }\n    return view;\n  }\n  /** @internal */\n  gpuCreateRenderPipeline(desc: GPURenderPipelineDescriptor): GPURenderPipeline {\n    const pipeline = this._device.createRenderPipeline(desc);\n    if (pipeline) {\n      this._gpuObjectHasher.set(pipeline, ++this._gpuObjectHashCounter);\n    }\n    return pipeline;\n  }\n  /** @internal */\n  gpuCreateComputePipeline(desc: GPUComputePipelineDescriptor): GPUComputePipeline {\n    const pipeline = this._device.createComputePipeline(desc);\n    if (pipeline) {\n      this._gpuObjectHasher.set(pipeline, ++this._gpuObjectHashCounter);\n    }\n    return pipeline;\n  }\n  /** @internal */\n  fetchVertexLayout(hash: string): GPUVertexBufferLayout[] {\n    return this._vertexLayoutCache.fetchVertexLayout(hash);\n  }\n  /** @internal */\n  fetchSampler(options: SamplerOptions): WebGPUTextureSampler {\n    return this._samplerCache.fetchSampler(options);\n  }\n  /** @internal */\n  fetchBindGroupLayout(desc: BindGroupLayout): GPUBindGroupLayout {\n    return this._bindGroupCache.fetchBindGroupLayout(desc);\n  }\n  flush(): void {\n    this._commandQueue.flush();\n  }\n  async readPixels(x: number, y: number, w: number, h: number, buffer: TypedArray): Promise<void> {\n    const fb = this.getFramebuffer();\n    const colorAttachment = fb ? fb.getColorAttachments()[0]?.object as GPUTexture : this.context.getCurrentTexture();\n    const texFormat = fb ? fb.getColorAttachments()[0]?.format : textureFormatInvMap[this._backBufferFormat];\n    if (colorAttachment && texFormat) {\n      const pixelSize = getTextureFormatBlockSize(texFormat);\n      const bufferSize = w * h * pixelSize;\n      const stagingBuffer = this.createBuffer(bufferSize, {\n        usage: 'read'\n      });\n      this.readPixelsToBuffer(x, y, w, h, stagingBuffer);\n      const data = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n      await stagingBuffer.getBufferSubData(data);\n      stagingBuffer.dispose();\n    } else {\n      console.error('readPixels() failed: no color attachment0 or unrecoganized color attachment format');\n    }\n  }\n  readPixelsToBuffer(x: number, y: number, w: number, h: number, buffer: GPUDataBuffer): void {\n    const fb = this.getFramebuffer();\n    const colorAttachment = fb ? fb.getColorAttachments()[0]?.object as GPUTexture : this.context.getCurrentTexture();\n    const texFormat = fb ? fb.getColorAttachments()[0]?.format : textureFormatInvMap[this._backBufferFormat];\n    const texWidth = fb ? fb.getColorAttachments()[0]?.width : this.getDrawingBufferWidth();\n    const texHeight = fb ? fb.getColorAttachments()[0]?.height : this.getDrawingBufferHeight();\n    if (colorAttachment && texFormat) {\n      this.flush();\n      WebGPUBaseTexture.copyTexturePixelsToBuffer(this._device, colorAttachment, texWidth, texHeight, texFormat, x, y, w, h, 0, 0, buffer);\n    } else {\n      console.error('readPixelsToBuffer() failed: no color attachment0 or unrecoganized color attachment format');\n    }\n  }\n  looseContext(): void {\n    // not implemented\n  }\n  restoreContext(): void {\n    // not implemented\n  }\n  /** @internal */\n  protected onBeginFrame(): boolean {\n    if (this._canRender) {\n      this._commandQueue.beginFrame();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /** @internal */\n  protected onEndFrame(): void {\n    this._commandQueue.endFrame();\n  }\n  /** @internal */\n  protected _draw(primitiveType: PrimitiveType, first: number, count: number): void {\n    this._commandQueue.draw(this._currentProgram, this._currentVertexData, this._currentStateSet, this._currentBindGroups, this._currentBindGroupOffsets, primitiveType, first, count, 1);\n  }\n  /** @internal */\n  protected _drawInstanced(primitiveType: PrimitiveType, first: number, count: number, numInstances: number): void {\n    this._commandQueue.draw(this._currentProgram, this._currentVertexData, this._currentStateSet, this._currentBindGroups, this._currentBindGroupOffsets, primitiveType, first, count, numInstances);\n  }\n  /** @internal */\n  protected _compute(workgroupCountX, workgroupCountY, workgroupCountZ): void {\n    this._commandQueue.compute(this._currentProgram, this._currentBindGroups, this._currentBindGroupOffsets, workgroupCountX, workgroupCountY, workgroupCountZ);\n  }\n  private configure() {\n    this._backBufferFormat = (navigator.gpu as any).getPreferredCanvasFormat ? (navigator.gpu as any).getPreferredCanvasFormat() : this._context.getPreferredFormat(this._adapter);\n    this._depthFormat = 'depth24plus-stencil8';\n    this._context.configure({\n      device: this._device,\n      format: this._backBufferFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      alphaMode: 'opaque',\n      colorSpace: 'srgb',\n    });\n    this.createDefaultRenderAttachments();\n  }\n  private createDefaultRenderAttachments() {\n    const width = Math.max(1, this._canvas.width);\n    const height = Math.max(1, this._canvas.height);\n    this._defaultMSAAColorTexture?.destroy();\n    this._defaultMSAAColorTexture = null;\n    this._defaultMSAAColorTextureView = null;\n    this._defaultDepthTexture?.destroy();\n    this._defaultDepthTexture = null;\n    this._defaultDepthTextureView = null;\n    if (this._sampleCount > 1) {\n      this._defaultMSAAColorTexture = this.gpuCreateTexture({\n        size: {\n          width,\n          height,\n          depthOrArrayLayers: 1,\n        },\n        format: this._backBufferFormat,\n        dimension: '2d',\n        mipLevelCount: 1,\n        sampleCount: this._sampleCount,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT\n      });\n      this._defaultMSAAColorTextureView = this._defaultMSAAColorTexture.createView();\n    }\n    this._defaultDepthTexture = this.gpuCreateTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: this._depthFormat,\n      dimension: '2d',\n      mipLevelCount: 1,\n      sampleCount: this._sampleCount,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    this._defaultDepthTextureView = this._defaultDepthTexture.createView();\n    this._defaultRenderPassDesc = {\n      label: `mainRenderPass:${this._sampleCount}`,\n      colorAttachments: [{\n        view: this._sampleCount > 1 ? this._defaultMSAAColorTextureView : null,\n        resolveTarget: undefined,\n        loadOp: 'clear',\n        clearValue: [0, 0, 0, 0],\n        storeOp: 'store',\n      }],\n      depthStencilAttachment: {\n        view: this._defaultDepthTextureView,\n        depthLoadOp: 'clear',\n        depthClearValue: 1,\n        depthStoreOp: 'store',\n        stencilLoadOp: 'clear',\n        stencilClearValue: 0,\n        stencilStoreOp: 'store',\n      }\n    }\n  }\n  private async tryCompile(code: string) {\n    const sm = this._device.createShaderModule({\n      code\n    });\n    if (sm && sm.compilationInfo) {\n      const compilationInfo = await sm.compilationInfo();\n      let err = false;\n      if (compilationInfo?.messages?.length > 0) {\n        let msg = '';\n        for (const message of compilationInfo.messages) {\n          if (message.type === 'error') {\n            err = true;\n          }\n          msg += `${message.type}: ${message.message} (${message.lineNum}/${message.linePos})\\n`;\n        }\n        if (msg) {\n          console.log(msg);\n        }\n      }\n      return !err;\n    } else {\n      return true;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}