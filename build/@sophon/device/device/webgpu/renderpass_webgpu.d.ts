import { Vector4 } from "@sophon/base";
import { PrimitiveType } from "../base_types";
import { WebGPUProgram } from "./gpuprogram_webgpu";
import { WebGPURenderStateSet } from "./renderstates_webgpu";
import { WebGPUBindGroup } from "./bindgroup_webgpu";
import type { WebGPUBaseTexture } from "./basetexture_webgpu";
import type { WebGPUBuffer } from "./buffer_webgpu";
import type { WebGPUDevice } from "./device";
import type { WebGPUFrameBuffer } from "./framebuffer_webgpu";
import type { WebGPUVertexInputLayout } from "./vertexinputlayout_webgpu";
import type { FrameBufferInfo } from "./pipeline_cache";
export declare class WebGPURenderPass {
    private _device;
    private _frameBuffer;
    private _bufferUploads;
    private _textureUploads;
    private _uploadCommandEncoder;
    private _renderCommandEncoder;
    private _renderPassEncoder;
    private _fbBindFlag;
    private _currentViewport;
    private _currentScissor;
    private _frameBufferInfo;
    constructor(device: WebGPUDevice);
    get active(): boolean;
    isBufferUploading(buffer: WebGPUBuffer): boolean;
    isTextureUploading(tex: WebGPUBaseTexture): boolean;
    setFramebuffer(fb: WebGPUFrameBuffer): void;
    getFramebuffer(): WebGPUFrameBuffer;
    setViewport(): any;
    setViewport(x: number, y: number, w: number, h: number): void;
    getViewport(): number[];
    setScissor(): any;
    setScissor(x: number, y: number, w: number, h: number): void;
    getScissor(): number[];
    draw(program: WebGPUProgram, vertexData: WebGPUVertexInputLayout, stateSet: WebGPURenderStateSet, bindGroups: WebGPUBindGroup[], bindGroupOffsets: Iterable<number>[], primitiveType: PrimitiveType, first: number, count: number, numInstances: number): void;
    clear(color: Vector4, depth: number, stencil: number): void;
    getDevice(): WebGPUDevice;
    getFrameBufferInfo(): FrameBufferInfo;
    begin(color?: Vector4, depth?: number, stencil?: number): void;
    end(): void;
    private drawInternal;
    private validateDraw;
    private setBindGroupsForRender;
    private flush;
}
