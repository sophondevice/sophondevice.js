{"version":3,"file":"bindgroup_cache.js","sources":["../../../../../libs/device/src/device/webgpu/bindgroup_cache.ts"],"sourcesContent":["import {ShaderType} from '../base_types';\nimport {textureFormatMap} from './constants_webgpu';\nimport type {WebGPUDevice} from './device';\nimport type {BindGroupLayout} from '../gpuobject';\n\nexport class BindGroupCache {\n  private _device: WebGPUDevice;\n  private _bindGroupLayoutCache: {[hash: string]: GPUBindGroupLayout};\n  constructor(device: WebGPUDevice) {\n    this._device = device;\n    this._bindGroupLayoutCache = {};\n  }\n  fetchBindGroupLayout(desc: BindGroupLayout): GPUBindGroupLayout {\n    const hash = desc ? this.getLayoutHash(desc) : '';\n    let bgl = this._bindGroupLayoutCache[hash];\n    if (!bgl) {\n      bgl = this.createBindGroupLayout(desc);\n      if (bgl) {\n        this._bindGroupLayoutCache[hash] = bgl;\n      } else {\n        throw new Error(`fetchBindGroupLayout() failed: hash: ${hash}`);\n      }\n    }\n    return bgl;\n  }\n  private getLayoutHash(desc: BindGroupLayout): string {\n    let hash = '';\n    for (const entry of desc.entries) {\n      let s = `${entry.binding}:${entry.visibility}:`;\n      if (entry.buffer) {\n        s += `b:${entry.buffer.type}:${entry.buffer.hasDynamicOffset}:${entry.buffer.minBindingSize}`;\n      } else if (entry.sampler) {\n        s += `s${entry.sampler.type}:`\n      } else if (entry.texture) {\n        s += `t${entry.texture.sampleType}-${entry.texture.viewDimension}-${Number(!!entry.texture.multisampled)}:`;\n      } else if (entry.storageTexture) {\n        s += `k${entry.storageTexture.access}-${entry.storageTexture.format}-${entry.storageTexture.viewDimension}:`;\n      } else if (entry.externalTexture) {\n        s += `v:`;\n      }\n      hash = `${hash} ${s}`;\n    }\n    return hash;\n  }\n  private createBindGroupLayout(desc: BindGroupLayout): GPUBindGroupLayout {\n    const layoutDescriptor: GPUBindGroupLayoutDescriptor = {\n      entries: desc?.entries.map(entry => {\n        const binding = entry.binding;\n        const visibility = ((entry.visibility & ShaderType.Vertex) ? GPUShaderStage.VERTEX : 0)\n          | ((entry.visibility & ShaderType.Fragment) ? GPUShaderStage.FRAGMENT : 0)\n          | ((entry.visibility & ShaderType.Compute) ? GPUShaderStage.COMPUTE : 0);\n        const buffer: GPUBufferBindingLayout = entry.buffer ? {\n          type: entry.buffer.type,\n          hasDynamicOffset: entry.buffer.hasDynamicOffset,\n          minBindingSize: Number(entry.buffer.minBindingSize)||0,\n        } : undefined;\n        const sampler: GPUSamplerBindingLayout = entry.sampler ? {\n          type: entry.sampler.type\n        } : undefined;\n        const texture: GPUTextureBindingLayout = entry.texture ? {\n          sampleType: entry.texture.sampleType,\n          viewDimension: entry.texture.viewDimension,\n        } : undefined;\n        const storageTexture: GPUStorageTextureBindingLayout = entry.storageTexture ? {\n          access: 'write-only',\n          viewDimension: '2d',\n          format: textureFormatMap[entry.storageTexture.format],\n        } : undefined;\n        const externalTexture: GPUExternalTextureBindingLayout = entry.externalTexture ? {} : undefined;\n        const t: GPUBindGroupLayoutEntry = {\n          binding,\n          visibility,\n        };\n        if (buffer) {\n          t.buffer = buffer;\n        } else if (sampler) {\n          t.sampler = sampler;\n        } else if (texture) {\n          t.texture = texture;\n        } else if (storageTexture) {\n          t.storageTexture = storageTexture;\n        } else if (externalTexture) {\n          t.externalTexture = externalTexture;\n        }\n        return t;\n      }) || [],\n    };\n    if (desc?.label) {\n      layoutDescriptor.label = desc.label;\n    }\n    return this._device.device.createBindGroupLayout(layoutDescriptor);\n  }\n}\n"],"names":[],"mappings":";;;;MAKa,cAAc,CAAA;AACjB,IAAA,OAAO,CAAe;AACtB,IAAA,qBAAqB,CAAuC;AACpE,IAAA,WAAA,CAAY,MAAoB,EAAA;AAC9B,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACtB,QAAA,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;KACjC;AACD,IAAA,oBAAoB,CAAC,IAAqB,EAAA;AACxC,QAAA,MAAM,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAClD,IAAI,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,EAAE;AACR,YAAA,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACvC,YAAA,IAAI,GAAG,EAAE;AACP,gBAAA,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;AACxC,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,IAAI,KAAK,CAAC,wCAAwC,IAAI,CAAA,CAAE,CAAC,CAAC;AACjE,aAAA;AACF,SAAA;AACD,QAAA,OAAO,GAAG,CAAC;KACZ;AACO,IAAA,aAAa,CAAC,IAAqB,EAAA;QACzC,IAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAA,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,GAAG,CAAA,EAAG,KAAK,CAAC,OAAO,CAAA,CAAA,EAAI,KAAK,CAAC,UAAU,CAAA,CAAA,CAAG,CAAC;YAChD,IAAI,KAAK,CAAC,MAAM,EAAE;gBAChB,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,gBAAgB,IAAI,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;AAC/F,aAAA;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE;gBACxB,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,GAAG,CAAA;AAC/B,aAAA;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE;gBACxB,CAAC,IAAI,CAAI,CAAA,EAAA,KAAK,CAAC,OAAO,CAAC,UAAU,CAAA,CAAA,EAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAI,CAAA,EAAA,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA,CAAA,CAAG,CAAC;AAC7G,aAAA;iBAAM,IAAI,KAAK,CAAC,cAAc,EAAE;gBAC/B,CAAC,IAAI,IAAI,KAAK,CAAC,cAAc,CAAC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,aAAa,GAAG,CAAC;AAC9G,aAAA;iBAAM,IAAI,KAAK,CAAC,eAAe,EAAE;gBAChC,CAAC,IAAI,IAAI,CAAC;AACX,aAAA;AACD,YAAA,IAAI,GAAG,CAAG,EAAA,IAAI,CAAI,CAAA,EAAA,CAAC,EAAE,CAAC;AACvB,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACb;AACO,IAAA,qBAAqB,CAAC,IAAqB,EAAA;AACjD,QAAA,MAAM,gBAAgB,GAAiC;YACrD,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,IAAG;AACjC,gBAAA,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;gBAC9B,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC;AAClF,uBAAC,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC;uBACvE,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC,OAAO,IAAI,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AAC3E,gBAAA,MAAM,MAAM,GAA2B,KAAK,CAAC,MAAM,GAAG;AACpD,oBAAA,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;AACvB,oBAAA,gBAAgB,EAAE,KAAK,CAAC,MAAM,CAAC,gBAAgB;oBAC/C,cAAc,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,IAAE,CAAC;iBACvD,GAAG,SAAS,CAAC;AACd,gBAAA,MAAM,OAAO,GAA4B,KAAK,CAAC,OAAO,GAAG;AACvD,oBAAA,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI;iBACzB,GAAG,SAAS,CAAC;AACd,gBAAA,MAAM,OAAO,GAA4B,KAAK,CAAC,OAAO,GAAG;AACvD,oBAAA,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,UAAU;AACpC,oBAAA,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,aAAa;iBAC3C,GAAG,SAAS,CAAC;AACd,gBAAA,MAAM,cAAc,GAAmC,KAAK,CAAC,cAAc,GAAG;AAC5E,oBAAA,MAAM,EAAE,YAAY;AACpB,oBAAA,aAAa,EAAE,IAAI;oBACnB,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC;iBACtD,GAAG,SAAS,CAAC;AACd,gBAAA,MAAM,eAAe,GAAoC,KAAK,CAAC,eAAe,GAAG,EAAE,GAAG,SAAS,CAAC;AAChG,gBAAA,MAAM,CAAC,GAA4B;oBACjC,OAAO;oBACP,UAAU;iBACX,CAAC;AACF,gBAAA,IAAI,MAAM,EAAE;AACV,oBAAA,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;AACnB,iBAAA;AAAM,qBAAA,IAAI,OAAO,EAAE;AAClB,oBAAA,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;AACrB,iBAAA;AAAM,qBAAA,IAAI,OAAO,EAAE;AAClB,oBAAA,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;AACrB,iBAAA;AAAM,qBAAA,IAAI,cAAc,EAAE;AACzB,oBAAA,CAAC,CAAC,cAAc,GAAG,cAAc,CAAC;AACnC,iBAAA;AAAM,qBAAA,IAAI,eAAe,EAAE;AAC1B,oBAAA,CAAC,CAAC,eAAe,GAAG,eAAe,CAAC;AACrC,iBAAA;AACD,gBAAA,OAAO,CAAC,CAAC;aACV,CAAC,IAAI,EAAE;SACT,CAAC;QACF,IAAI,IAAI,EAAE,KAAK,EAAE;AACf,YAAA,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACrC,SAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;KACpE;AACF;;;;"}