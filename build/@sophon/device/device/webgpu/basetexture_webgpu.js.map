{"version":3,"file":"basetexture_webgpu.js","sources":["../../../../../libs/device/src/device/webgpu/basetexture_webgpu.ts"],"sourcesContent":["import { WebGPUObject } from './gpuobject_webgpu';\r\nimport { TextureCaps } from '../device';\r\nimport { TextureTarget, TextureFilter, TextureWrapping, TextureFormat, isCompressedTextureFormat, isDepthTextureFormat, isFloatTextureFormat, isIntegerTextureFormat, isSignedTextureFormat, CompareFunc, getTextureFormatBlockWidth, getTextureFormatBlockHeight, getTextureFormatBlockSize } from '../base_types';\r\nimport { GPUResourceUsageFlags, SamplerOptions, BaseTexture, TextureSampler, GPUDataBuffer } from '../gpuobject';\r\nimport { UploadRingBuffer, UploadTexture, UploadImage } from './uploadringbuffer';\r\nimport { textureFormatMap } from './constants_webgpu';\r\nimport type { WebGPUDevice } from './device';\r\nimport type { WebGPUBuffer } from './buffer_webgpu';\r\nimport type { WebGPUTextureCap, ITextureFormatInfoWebGPU } from './capabilities_webgpu';\r\nimport type { TypedArray } from '../../misc';\r\n\r\nexport abstract class WebGPUBaseTexture<T extends GPUTexture|GPUExternalTexture = GPUTexture> extends WebGPUObject<T> {\r\n  protected _target: TextureTarget;\r\n  protected _hash: string;\r\n  protected _memCost: number;\r\n  protected _views: GPUTextureView[][][];\r\n  protected _defaultView: GPUTextureView;\r\n  protected _mipmapDirty: boolean;\r\n  protected _flags: number;\r\n  protected _width: number;\r\n  protected _height: number;\r\n  protected _depth: number;\r\n  protected _format: TextureFormat;\r\n  protected _renderable: boolean;\r\n  protected _fb: boolean;\r\n  protected _gpuFormat: GPUTextureFormat;\r\n  protected _mipLevelCount: number;\r\n  protected _ringBuffer: UploadRingBuffer;\r\n  protected _pendingUploads: (UploadTexture | UploadImage)[];\r\n  constructor(device: WebGPUDevice, target?: TextureTarget) {\r\n    super(device);\r\n    this._target = target || TextureTarget.Texture2D;\r\n    this._flags = 0;\r\n    this._width = 0;\r\n    this._height = 0;\r\n    this._depth = 0;\r\n    this._renderable = false;\r\n    this._fb = false;\r\n    this._format = TextureFormat.Unknown;\r\n    this._gpuFormat = null;\r\n    this._mipLevelCount = 0;\r\n    this._memCost = 0;\r\n    this._mipmapDirty = false;\r\n    this._views = [];\r\n    this._defaultView = null;\r\n    this._ringBuffer = new UploadRingBuffer(device);\r\n    this._pendingUploads = [];\r\n  }\r\n  get hash(): number {\r\n    return this._object ? this._device.gpuGetObjectHash(this._object) : 0;\r\n  }\r\n  get target(): TextureTarget {\r\n    return this._target;\r\n  }\r\n  get linearColorSpace(): boolean {\r\n    return !!(this._flags & GPUResourceUsageFlags.TF_LINEAR_COLOR_SPACE);\r\n  }\r\n  get width(): number {\r\n    return this._width;\r\n  }\r\n  get height(): number {\r\n    return this._height;\r\n  }\r\n  get depth(): number {\r\n    return this._depth;\r\n  }\r\n  get format(): TextureFormat {\r\n    return this._format;\r\n  }\r\n  get mipLevelCount(): number {\r\n    return this._mipLevelCount;\r\n  }\r\n  get gpuFormat(): GPUTextureFormat {\r\n    return this._gpuFormat;\r\n  }\r\n  abstract init(): void;\r\n  isTexture(): this is BaseTexture {\r\n    return true;\r\n  }\r\n  isFilterable(): boolean {\r\n    if (!this.getTextureCaps().getTextureFormatInfo(this._format)?.filterable) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  getPendingUploads(): (UploadTexture | UploadImage)[] {\r\n    return this._pendingUploads;\r\n  }\r\n  /** @internal */\r\n  clearPendingUploads() {\r\n    if (this._pendingUploads.length > 0) {\r\n      this._pendingUploads = [];\r\n      this.beginSyncChanges(null);\r\n      this.endSyncChanges();\r\n    }\r\n  }\r\n  isMipmapDirty(): boolean {\r\n    return this._mipmapDirty;\r\n  }\r\n  setMipmapDirty(b: boolean) {\r\n    this._mipmapDirty = b;\r\n  }\r\n  destroy(): void {\r\n    if (this._object) {\r\n      if (!this.isTextureVideo()) {\r\n        (this._object as GPUTexture).destroy();\r\n      }\r\n      this._object = null;\r\n      this._device.updateVideoMemoryCost(-this._memCost);\r\n      this._memCost = 0;\r\n    }\r\n  }\r\n  async restore() {\r\n    if (!this._object && !this._device.isContextLost()) {\r\n      this.init();\r\n    }\r\n  }\r\n  getTextureCaps(): TextureCaps {\r\n    return this._device.getTextureCaps();\r\n  }\r\n  isFloatFormat(): boolean {\r\n    return isFloatTextureFormat(this._format);\r\n  }\r\n  isIntegerFormat(): boolean {\r\n    return isIntegerTextureFormat(this._format);\r\n  }\r\n  isSignedFormat(): boolean {\r\n    return isSignedTextureFormat(this._format);\r\n  }\r\n  isCompressedFormat(): boolean {\r\n    return isCompressedTextureFormat(this._format);\r\n  }\r\n  isDepth(): boolean {\r\n    return isDepthTextureFormat(this._format);\r\n  }\r\n  isRenderable(): boolean {\r\n    return this._renderable;\r\n  }\r\n  getView(level?: number, face?: number, mipCount?: number): GPUTextureView {\r\n    level = Number(level) || 0;\r\n    face = Number(face) || 0;\r\n    mipCount = Number(mipCount) || 0;\r\n    if (!this._views[face]) {\r\n      this._views[face] = [];\r\n    }\r\n    if (!this._views[face][level]) {\r\n      this._views[face][level] = [];\r\n    }\r\n    if (!this._views[face][level][mipCount]) {\r\n      this._views[face][level][mipCount] = this.createView(level, face, mipCount);\r\n    }\r\n    return this._views[face][level][mipCount];\r\n  }\r\n  getDefaultView(): GPUTextureView {\r\n    if (!this._defaultView && this._object && !this.isTextureVideo()) {\r\n      this._defaultView = this._device.gpuCreateTextureView(this._object as GPUTexture, {\r\n        dimension: this.isTextureCube() ? 'cube' : this.isTexture3D() ? '3d' : this.isTexture2DArray() ? '2d-array' : '2d',\r\n        arrayLayerCount: this.isTextureCube() ? 6 : this.isTexture2DArray() ? this._depth : 1,\r\n        aspect: isDepthTextureFormat(this.format) ? 'depth-only' : 'all',\r\n      });\r\n    }\r\n    return this._defaultView;\r\n  }\r\n  copyPixelDataToBuffer(x: number, y: number, w: number, h: number, layer: number, level: number, buffer: GPUDataBuffer): void {\r\n    if (this.isTextureVideo()) {\r\n      throw new Error('copyPixelDataToBuffer() failed: can not copy pixel data of video texture');\r\n    }\r\n    WebGPUBaseTexture.copyTexturePixelsToBuffer(this._device.device, this.object as GPUTexture, this.width, this.height, this.format, x, y, w, h, layer, level, buffer);\r\n  }\r\n  generateMipmaps() {\r\n    this._mipmapDirty = true;\r\n  }\r\n  beginSyncChanges(encoder: GPUCommandEncoder) {\r\n    if (!this.isTextureVideo() && this._pendingUploads.length > 0 && this._object) {\r\n      const cmdEncoder = encoder || this._device.device.createCommandEncoder();\r\n      for (const u of this._pendingUploads) {\r\n        if ((u as UploadTexture).mappedBuffer) {\r\n          const upload = u as UploadTexture;\r\n          cmdEncoder.copyBufferToTexture({\r\n            buffer: upload.mappedBuffer.buffer,\r\n            offset: upload.mappedBuffer.offset,\r\n            bytesPerRow: upload.bufferStride,\r\n            rowsPerImage: upload.uploadHeight,\r\n          }, {\r\n            texture: this._object as GPUTexture,\r\n            origin: {\r\n              x: upload.uploadOffsetX,\r\n              y: upload.uploadOffsetY,\r\n              z: upload.uploadOffsetZ,\r\n            },\r\n            mipLevel: upload.mipLevel,\r\n          }, {\r\n            width: upload.uploadWidth,\r\n            height: upload.uploadHeight,\r\n            depthOrArrayLayers: upload.uploadDepth\r\n          });\r\n        } else if ((u as UploadImage).image) {\r\n          const upload = u as UploadImage;\r\n          // FIXME: copy image cannot be queued into the command buffer\r\n          const copyView: GPUImageCopyTextureTagged = {\r\n            texture: this._object as GPUTexture,\r\n            origin: {\r\n              x: upload.offsetX,\r\n              y: upload.offsetY,\r\n              z: upload.offsetZ\r\n            },\r\n            mipLevel: upload.mipLevel\r\n          };\r\n          this._device.device.queue.copyExternalImageToTexture({ source: upload.image }, copyView, {\r\n            width: upload.width,\r\n            height: upload.height,\r\n            depthOrArrayLayers: upload.depth\r\n          });\r\n        }\r\n      }\r\n      this._pendingUploads.length = 0;\r\n      if (!encoder) {\r\n        this._device.device.queue.submit([cmdEncoder.finish()]);\r\n      }\r\n      this._ringBuffer.beginUploads();\r\n    }\r\n  }\r\n  endSyncChanges() {\r\n    if (this._flags & GPUResourceUsageFlags.DYNAMIC) {\r\n      this._ringBuffer.endUploads();\r\n    } else {\r\n      this._ringBuffer.purge();\r\n    }\r\n  }\r\n  getDefaultSampler(shadow: boolean): TextureSampler {\r\n    const params = (this.getTextureCaps() as WebGPUTextureCap).getTextureFormatInfo(this._format);\r\n    return this._device.createSampler(this._getSamplerOptions(params, shadow));\r\n  }\r\n  abstract createView(level?: number, face?: number, mipCount?: number): GPUTextureView;\r\n  /** @internal */\r\n  protected _calcMipLevelCount(format: TextureFormat, width: number, height: number, depth: number): number {\r\n    if (isDepthTextureFormat(format) || this.isTexture3D() || this.isTextureVideo()) {\r\n      return 1;\r\n    }\r\n    if (this._flags & GPUResourceUsageFlags.TF_NO_MIPMAP) {\r\n      return 1;\r\n    }\r\n    const params = (this.getTextureCaps() as WebGPUTextureCap).getTextureFormatInfo(format);\r\n    if (!params || !params.renderable) {\r\n      return 1;\r\n    }\r\n    return Math.floor(Math.log2(Math.max(width, height))) + 1;\r\n  }\r\n  /** @internal */\r\n  protected allocInternal(format: TextureFormat, width: number, height: number, depth: number, numMipLevels: number) {\r\n    if (this.isTextureVideo()) {\r\n      return;\r\n    }\r\n    if (numMipLevels === 0) {\r\n      numMipLevels = this._calcMipLevelCount(format, width, height, depth);\r\n    } else if (numMipLevels !== 1) {\r\n      const autoMipLevelCount = this._calcMipLevelCount(format, width, height, depth);\r\n      if (!Number.isInteger(numMipLevels) || numMipLevels < 0 || numMipLevels > autoMipLevelCount) {\r\n        numMipLevels = autoMipLevelCount;\r\n      }\r\n    }\r\n    if (this._object && (this._format !== format || this._width !== width || this._height !== height || this._depth !== depth, this._mipLevelCount !== numMipLevels)) {\r\n      const obj = this._object;\r\n      this._device.runNextFrame(() => {\r\n        (obj as GPUTexture).destroy();\r\n      });\r\n      this._object = null;\r\n    }\r\n    if (!this._object) {\r\n      this._format = format;\r\n      this._width = width;\r\n      this._height = height;\r\n      this._depth = depth;\r\n      this._mipLevelCount = numMipLevels;\r\n      if (!this._device.isContextLost()) {\r\n        this._gpuFormat = textureFormatMap[this._format];\r\n        const params = (this.getTextureCaps() as WebGPUTextureCap).getTextureFormatInfo(this._format);\r\n        this._renderable = params.renderable && !(this._flags & GPUResourceUsageFlags.TF_WRITABLE);\r\n        this._object = this._device.gpuCreateTexture({\r\n          size: {\r\n            width: this._width,\r\n            height: this._height,\r\n            depthOrArrayLayers: this.isTextureCube() ? 6 : this._depth\r\n          },\r\n          format: this._gpuFormat,\r\n          mipLevelCount: this._mipLevelCount,\r\n          sampleCount: 1,\r\n          dimension: this.isTexture3D() ? '3d' : '2d',\r\n          usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC\r\n            | (this._renderable && !this.isTexture3D() ? GPUTextureUsage.RENDER_ATTACHMENT : 0)\r\n            | ((this._flags & GPUResourceUsageFlags.TF_WRITABLE) ? GPUTextureUsage.STORAGE_BINDING : 0)\r\n        }) as any;\r\n        const memCost = (this.getTextureCaps() as WebGPUTextureCap).calcMemoryUsage(this._format, this._width * this._height * (this.isTextureCube() ? 6 : this._depth));\r\n        this._device.updateVideoMemoryCost(memCost - this._memCost);\r\n        this._memCost = memCost;\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  static copyTexturePixelsToBuffer(device: GPUDevice, texture: GPUTexture, texWidth: number, texHeight: number, format: TextureFormat, x: number, y: number, w: number, h: number, layer: number, level: number, buffer: GPUDataBuffer): void {\r\n    if (!((buffer as WebGPUBuffer).gpuUsage & GPUBufferUsage.COPY_DST)) {\r\n      throw new Error('copyTexturePixelsToBuffer() failed: destination buffer does not have COPY_DST usage set');\r\n    }\r\n    const blockWidth = getTextureFormatBlockWidth(format);\r\n    const blockHeight = getTextureFormatBlockHeight(format);\r\n    const blockSize = getTextureFormatBlockSize(format);\r\n    const blocksPerRow = texWidth / blockWidth;\r\n    const blocksPerCol = texHeight / blockHeight;\r\n    const rowStride = blocksPerRow * blockSize;\r\n    const bufferStride = (rowStride + 255) & ~255;\r\n    const bufferSize = blocksPerRow * rowStride;\r\n    const bufferSizeAligned = blocksPerCol * bufferStride;\r\n    if (buffer.byteLength < bufferSize) {\r\n      throw new Error(`copyTexturePixelsToBuffer() failed: destination buffer size is ${buffer.byteLength}, should be at least ${bufferSize}`);\r\n    }\r\n    const tmpBuffer = device.createBuffer({ size: bufferSizeAligned, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC });\r\n    const encoder = device.createCommandEncoder();\r\n    encoder.copyTextureToBuffer({\r\n      texture: texture,\r\n      mipLevel: level ?? 0,\r\n      origin: {\r\n        x: x,\r\n        y: y,\r\n        z: layer ?? 0\r\n      }\r\n    }, {\r\n      buffer: tmpBuffer as GPUBuffer,\r\n      offset: 0,\r\n      bytesPerRow: bufferStride\r\n    }, {\r\n      width: w,\r\n      height: h,\r\n      depthOrArrayLayers: 1\r\n    });\r\n    if (bufferSize !== bufferSizeAligned) {\r\n      for (let i = 0; i < blocksPerCol; i++) {\r\n        encoder.copyBufferToBuffer(tmpBuffer, i * bufferStride, buffer.object as GPUBuffer, i * rowStride, rowStride);\r\n      }\r\n    } else {\r\n      encoder.copyBufferToBuffer(tmpBuffer, 0, buffer.object as GPUBuffer, 0, bufferSize);\r\n    }\r\n    device.queue.submit([encoder.finish()]);\r\n    tmpBuffer.destroy();\r\n  }\r\n  /** @internal */\r\n  protected uploadRaw(pixels: TypedArray, width: number, height: number, depth: number, offsetX: number, offsetY: number, offsetZ: number, miplevel: number) {\r\n    const data = new Uint8Array(pixels.buffer, pixels.byteOffset, pixels.byteLength);\r\n    const info = (this._device.getTextureCaps() as WebGPUTextureCap).getTextureFormatInfo(this._format);\r\n    const blockWidth = info.blockWidth || 1;\r\n    const blockHeight = info.blockHeight || 1;\r\n    const blocksPerRow = Math.ceil(width / blockWidth);\r\n    const blocksPerCol = Math.ceil(height / blockHeight);\r\n    const rowStride = blocksPerRow * info.size;\r\n    if (rowStride * blocksPerCol * depth !== data.byteLength) {\r\n      throw new Error(`WebGPUTexture.update() invalid data size: ${data.byteLength}`);\r\n    }\r\n    if (!this._device.isTextureUploading(this as any)) {\r\n      this.clearPendingUploads();\r\n      const destination: GPUImageCopyTexture = {\r\n        texture: this._object as GPUTexture,\r\n        mipLevel: miplevel,\r\n        origin: {\r\n          x: offsetX,\r\n          y: offsetY,\r\n          z: offsetZ,\r\n        },\r\n      };\r\n      const dataLayout: GPUImageDataLayout = {\r\n        bytesPerRow: rowStride,\r\n        rowsPerImage: blockHeight * blocksPerCol,\r\n      };\r\n      const size: GPUExtent3D = {\r\n        width: blockWidth * blocksPerRow,\r\n        height: blockHeight * blocksPerCol,\r\n        depthOrArrayLayers: depth\r\n      };\r\n      this._device.device.queue.writeTexture(destination, data, dataLayout, size);\r\n    } else {\r\n      const bufferStride = (rowStride + 255) & ~255; // align to 256 bytes\r\n      const uploadSize = bufferStride * blocksPerCol * depth;\r\n      const upload = this._ringBuffer.uploadBuffer(null, null, 0, 0, uploadSize);\r\n      const mappedRange = upload.mappedBuffer.mappedRange;\r\n      const src = new Uint8Array(data);\r\n      const dst = new Uint8Array(mappedRange, upload.mappedBuffer.offset, uploadSize);\r\n      if (uploadSize === data.byteLength) {\r\n        dst.set(new Uint8Array(data));\r\n      } else {\r\n        for (let d = 0; d < depth; d++) {\r\n          const srcLayerOffset = d * rowStride * blocksPerRow;\r\n          const dstLayerOffset = d * bufferStride * blocksPerCol;\r\n          for (let i = 0; i < blocksPerCol; i++) {\r\n            dst.set(src.subarray(srcLayerOffset + i * rowStride, srcLayerOffset + (i + 1) * rowStride), dstLayerOffset + i * bufferStride);\r\n          }\r\n        }\r\n      }\r\n      this._pendingUploads.push({\r\n        mappedBuffer: upload.mappedBuffer,\r\n        uploadOffsetX: offsetX,\r\n        uploadOffsetY: offsetY,\r\n        uploadOffsetZ: offsetZ,\r\n        uploadWidth: blockWidth * blocksPerRow,\r\n        uploadHeight: blockHeight * blocksPerCol,\r\n        uploadDepth: depth,\r\n        bufferStride: bufferStride,\r\n        mipLevel: miplevel,\r\n      });\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected uploadImageData(data: ImageBitmap | HTMLCanvasElement, width: number, height: number, offsetX: number, offsetY: number, miplevel: number, faceIndex: number) {\r\n    if (!this._device.isTextureUploading(this as any) && this._device.device.queue.copyExternalImageToTexture) {\r\n      this.clearPendingUploads();\r\n      const copyView: GPUImageCopyTextureTagged = {\r\n        texture: this._object as GPUTexture,\r\n        origin: {\r\n          x: offsetX,\r\n          y: offsetY,\r\n          z: faceIndex || 0\r\n        },\r\n        mipLevel: miplevel || 0\r\n      };\r\n      this._device.device.queue.copyExternalImageToTexture({ source: data }, copyView, {\r\n        width: width,\r\n        height: height,\r\n        depthOrArrayLayers: 1\r\n      });\r\n    } else {\r\n      const tmpCanvas = document.createElement('canvas');\r\n      tmpCanvas.width = width;\r\n      tmpCanvas.height = height;\r\n      const ctx = tmpCanvas.getContext('2d');\r\n      ctx.drawImage(data, 0, 0, width, height, 0, 0, width, height);\r\n      const imageData = ctx.getImageData(0, 0, width, height);\r\n      this.uploadRaw(imageData.data, width, height, 1, offsetX, offsetY, faceIndex, miplevel);\r\n      tmpCanvas.width = 0;\r\n      tmpCanvas.height = 0;\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected _getSamplerOptions(params: Partial<ITextureFormatInfoWebGPU>, shadow: boolean): SamplerOptions {\r\n    const comparison = this.isDepth() && shadow;\r\n    const filterable = params.filterable || comparison;\r\n    const magFilter = filterable\r\n      ? TextureFilter.Linear\r\n      : TextureFilter.Nearest;\r\n    const minFilter = params.filterable\r\n      ? TextureFilter.Linear\r\n      : TextureFilter.Nearest;\r\n    const mipFilter = this._mipLevelCount > 1\r\n      ? filterable ? TextureFilter.Linear : TextureFilter.Nearest\r\n      : TextureFilter.None;\r\n    const addressU = TextureWrapping.ClampToEdge;\r\n    const addressV = TextureWrapping.ClampToEdge;\r\n    const addressW = TextureWrapping.ClampToEdge;\r\n    const compare = comparison ? CompareFunc.Less : null;\r\n    return {\r\n      addressU,\r\n      addressV,\r\n      addressW,\r\n      magFilter,\r\n      minFilter,\r\n      mipFilter,\r\n      compare,\r\n    };\r\n  }\r\n  /** @internal */\r\n  _markAsCurrentFB(b: boolean) {\r\n    this._fb = b;\r\n  }\r\n  /** @internal */\r\n  _isMarkedAsCurrentFB(): boolean {\r\n    return this._fb;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}