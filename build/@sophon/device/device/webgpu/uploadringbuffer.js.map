{"version":3,"file":"uploadringbuffer.js","sources":["../../../../../libs/device/src/device/webgpu/uploadringbuffer.ts"],"sourcesContent":["import type { WebGPUDevice } from './device';\r\n\r\nexport interface MappedBuffer {\r\n  buffer: GPUBuffer;\r\n  size: number;\r\n  offset: number;\r\n  used: boolean;\r\n  mappedRange: ArrayBuffer;\r\n}\r\n\r\nexport interface UploadBuffer {\r\n  mappedBuffer: MappedBuffer;\r\n  uploadSize: number;\r\n  uploadBuffer: GPUBuffer;\r\n  uploadOffset: number;\r\n}\r\n\r\nexport interface UploadImage {\r\n  offsetX: number;\r\n  offsetY: number;\r\n  offsetZ: number;\r\n  width: number;\r\n  height: number;\r\n  depth: number;\r\n  mipLevel: number;\r\n  image: ImageBitmap | HTMLCanvasElement | OffscreenCanvas;\r\n}\r\n\r\nexport interface UploadTexture {\r\n  mappedBuffer: MappedBuffer;\r\n  uploadOffsetX: number;\r\n  uploadOffsetY: number;\r\n  uploadOffsetZ: number;\r\n  uploadWidth: number;\r\n  uploadHeight: number;\r\n  uploadDepth: number;\r\n  bufferStride: number;\r\n  mipLevel: number;\r\n}\r\n\r\nexport class UploadRingBuffer {\r\n  private _device: WebGPUDevice;\r\n  private _bufferList: MappedBuffer[];\r\n  private _defaultSize: number;\r\n  private _unmappedBufferList: MappedBuffer[];\r\n  constructor(device: WebGPUDevice, defaultSize = 64 * 1024) {\r\n    this._device = device;\r\n    this._bufferList = [];\r\n    this._defaultSize = defaultSize;\r\n    this._unmappedBufferList = [];\r\n  }\r\n  uploadBuffer(src: ArrayBuffer, dst: GPUBuffer, srcOffset: number, dstOffset: number, uploadSize: number, allowOverlap?: boolean): UploadBuffer {\r\n    const size = (uploadSize + 3) & ~3;\r\n    const mappedBuffer = this.fetchBufferMapped(size, !!allowOverlap);\r\n    if (src) {\r\n      const mappedRange = mappedBuffer.mappedRange;//mappedBuffer.buffer.getMappedRange(mappedBuffer.offset, size);\r\n      new Uint8Array(mappedRange, mappedBuffer.offset, size).set(new Uint8Array(src, srcOffset, uploadSize));\r\n    }\r\n    const upload = {\r\n      mappedBuffer: {...mappedBuffer},\r\n      uploadSize: size,\r\n      uploadBuffer: dst,\r\n      uploadOffset: dstOffset,\r\n    };\r\n    mappedBuffer.offset += size;\r\n    mappedBuffer.offset = (mappedBuffer.offset + 7) & ~7;\r\n    return upload;\r\n  }\r\n  beginUploads(): number {\r\n    for (let i = this._bufferList.length - 1; i >= 0; i--) {\r\n      const buffer = this._bufferList[i];\r\n      if (buffer.used) {\r\n        buffer.buffer.unmap();\r\n        this._unmappedBufferList.push(buffer);\r\n        this._bufferList.splice(i, 1);\r\n        buffer.mappedRange = null;\r\n      }\r\n    }\r\n    return this._unmappedBufferList.length;\r\n  }\r\n  endUploads() {\r\n    for (const buffer of this._unmappedBufferList) {\r\n      buffer.buffer.mapAsync(GPUMapMode.WRITE).then(() => {\r\n        buffer.offset = 0;\r\n        buffer.used = false;\r\n        buffer.mappedRange = buffer.buffer.getMappedRange();\r\n        this._bufferList.push(buffer);\r\n      });\r\n    }\r\n    this._unmappedBufferList = [];\r\n  }\r\n  purge() {\r\n    for (let i = this._bufferList.length - 1; i >= 0; i--) {\r\n      const buffer = this._bufferList[i];\r\n      if (buffer.mappedRange) {\r\n        buffer.buffer.unmap();\r\n        buffer.buffer.destroy();\r\n      }\r\n    }\r\n    this._bufferList = [];\r\n    for (const buffer of this._unmappedBufferList) {\r\n      buffer.buffer.destroy();\r\n    }\r\n    this._unmappedBufferList = [];\r\n  }\r\n  fetchBufferMapped(size: number, allowOverlap: boolean): MappedBuffer {\r\n    for (const buffer of this._bufferList) {\r\n      if (allowOverlap || buffer.size - buffer.offset >= size) {\r\n        buffer.used = true;\r\n        return buffer;\r\n      }\r\n    }\r\n    const bufferSize = (Math.max(size, this._defaultSize) + 3) & ~3;\r\n    const buf = this._device.device.createBuffer({\r\n      label: `StagingRingBuffer${this._bufferList.length}:${bufferSize}`,\r\n      size: bufferSize,\r\n      usage: GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,\r\n      mappedAtCreation: true\r\n    });\r\n    this._bufferList.push({\r\n      buffer: buf,\r\n      size: bufferSize,\r\n      offset: 0,\r\n      used: true,\r\n      mappedRange: buf.getMappedRange(),\r\n    });\r\n    return this._bufferList[this._bufferList.length -1];\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}