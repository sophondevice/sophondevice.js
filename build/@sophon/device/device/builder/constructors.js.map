{"version":3,"file":"constructors.js","sources":["../../../../../libs/device/src/device/builder/constructors.ts"],"sourcesContent":["import { PBShaderExp, ProgramBuilder, ShaderTypeFunc, makeConstructor } from './programbuilder';\r\nimport { TextureFormat } from '../base_types';\r\nimport * as typeinfo from './types';\r\nimport * as AST from './ast';\r\nimport * as errors from './errors';\r\n\r\nconst StorageTextureFormatMap = {\r\n  rgba8unorm: TextureFormat.RGBA8UNORM,\r\n  rgba8snorm: TextureFormat.RGBA8SNORM,\r\n  rgba8uint: TextureFormat.RGBA8UI,\r\n  rgba8sint: TextureFormat.RGBA8I,\r\n  rgba16uint: TextureFormat.RGBA16UI,\r\n  rgba16sint: TextureFormat.RGBA16I,\r\n  rgba16float: TextureFormat.RGBA16F,\r\n  r32float: TextureFormat.R32F,\r\n  r32uint: TextureFormat.R32UI,\r\n  r32sint: TextureFormat.R32I,\r\n  rg32float: TextureFormat.RG32F,\r\n  rg32uint: TextureFormat.RG32UI,\r\n  rg32sint: TextureFormat.RG32I,\r\n  rgba32float: TextureFormat.RGBA32F,\r\n  rgba32uint: TextureFormat.RGBA32UI,\r\n  rgba32sint: TextureFormat.RGBA32I,\r\n};\r\n\r\nexport type StorageTextureConstructor = { [k in keyof typeof StorageTextureFormatMap]: (s?: string) => PBShaderExp };\r\n\r\nfunction vec_n(this: ProgramBuilder, vecType: typeinfo.PBPrimitiveTypeInfo, ...args: (number | boolean | string | PBShaderExp)[]): PBShaderExp {\r\n  if (this.getDeviceType() === 'webgl') {\r\n    if (vecType.scalarType === typeinfo.PBPrimitiveType.U32) {\r\n      throw new errors.PBDeviceNotSupport('unsigned integer type');\r\n    }\r\n    if (vecType.isMatrixType() && vecType.cols !== vecType.rows) {\r\n      throw new errors.PBDeviceNotSupport('non-square matrix type');\r\n    }\r\n  }\r\n\r\n  if (args.length === 1 && typeof args[0] === 'string') {\r\n    return new PBShaderExp(args[0], vecType);\r\n  } else {\r\n    const exp = new PBShaderExp('', vecType);\r\n    exp.$ast = new AST.ASTShaderExpConstructor(exp.$typeinfo, args.map(arg => {\r\n      if (typeof arg === 'string') {\r\n        throw new errors.PBParamTypeError('vec_n');\r\n      }\r\n      return arg instanceof PBShaderExp ? arg.$ast : arg;\r\n    }));\r\n    return exp;\r\n  }\r\n}\r\n\r\nconst primitiveCtors = {\r\n  float: typeinfo.typeF32,\r\n  int: typeinfo.typeI32,\r\n  uint: typeinfo.typeU32,\r\n  bool: typeinfo.typeBool,\r\n  vec2: typeinfo.typeF32Vec2,\r\n  ivec2: typeinfo.typeI32Vec2,\r\n  uvec2: typeinfo.typeU32Vec2,\r\n  bvec2: typeinfo.typeBVec2,\r\n  vec3: typeinfo.typeF32Vec3,\r\n  ivec3: typeinfo.typeI32Vec3,\r\n  uvec3: typeinfo.typeU32Vec3,\r\n  bvec3: typeinfo.typeBVec3,\r\n  vec4: typeinfo.typeF32Vec4,\r\n  ivec4: typeinfo.typeI32Vec4,\r\n  uvec4: typeinfo.typeU32Vec4,\r\n  bvec4: typeinfo.typeBVec4,\r\n  mat2: typeinfo.typeMat2,\r\n  mat2x3: typeinfo.typeMat2x3,\r\n  mat2x4: typeinfo.typeMat2x4,\r\n  mat3x2: typeinfo.typeMat3x2,\r\n  mat3: typeinfo.typeMat3,\r\n  mat3x4: typeinfo.typeMat3x4,\r\n  mat4x2: typeinfo.typeMat4x2,\r\n  mat4x3: typeinfo.typeMat4x3,\r\n  mat4: typeinfo.typeMat4\r\n};\r\n\r\nObject.keys(primitiveCtors).forEach(k => {\r\n  ProgramBuilder.prototype[k] = makeConstructor(function (this: ProgramBuilder, ...args: any[]): PBShaderExp {\r\n    return vec_n.call(this, primitiveCtors[k], ...args);\r\n  } as ShaderTypeFunc, primitiveCtors[k]);\r\n});\r\n\r\nconst simpleCtors = {\r\n  tex1D: typeinfo.typeTex1D,\r\n  tex2D: typeinfo.typeTex2D,\r\n  tex3D: typeinfo.typeTex3D,\r\n  texCube: typeinfo.typeTexCube,\r\n  tex2DShadow: typeinfo.typeTexDepth2D,\r\n  texCubeShadow: typeinfo.typeTexDepthCube,\r\n  tex2DArray: typeinfo.typeTex2DArray,\r\n  tex2DArrayShadow: typeinfo.typeTexDepth2DArray,\r\n  texExternal: typeinfo.typeTexExternal,\r\n  itex1D: typeinfo.typeITex1D,\r\n  itex2D: typeinfo.typeITex2D,\r\n  itex3D: typeinfo.typeITex3D,\r\n  itexCube: typeinfo.typeITexCube,\r\n  itex2DArray: typeinfo.typeITex2DArray,\r\n  utex1D: typeinfo.typeUTex1D,\r\n  utex2D: typeinfo.typeUTex2D,\r\n  utex3D: typeinfo.typeUTex3D,\r\n  utexCube: typeinfo.typeUTexCube,\r\n  utex2DArray: typeinfo.typeUTex2DArray,\r\n  sampler: typeinfo.typeSampler,\r\n  samplerComparison: typeinfo.typeSamplerComparison,\r\n};\r\n\r\nObject.keys(simpleCtors).forEach(k => {\r\n  ProgramBuilder.prototype[k] = function (this: ProgramBuilder, rhs: string): PBShaderExp {\r\n    return new PBShaderExp(rhs, simpleCtors[k]);\r\n  };\r\n});\r\n\r\nfunction makeStorageTextureCtor(type: typeinfo.PBTextureType): StorageTextureConstructor {\r\n  const ctor = {} as StorageTextureConstructor;\r\n  for (const k of Object.keys(StorageTextureFormatMap)) {\r\n    ctor[k] = function (rhs: string): PBShaderExp {\r\n      return new PBShaderExp(rhs, new typeinfo.PBTextureTypeInfo(type, StorageTextureFormatMap[k]));\r\n    };\r\n  }\r\n  return ctor;\r\n}\r\n\r\nconst texStorageCtors = {\r\n  texStorage1D: typeinfo.PBTextureType.TEX_STORAGE_1D,\r\n  texStorage2D: typeinfo.PBTextureType.TEX_STORAGE_2D,\r\n  texStorage2DArray: typeinfo.PBTextureType.TEX_STORAGE_2D_ARRAY,\r\n  texStorage3D: typeinfo.PBTextureType.TEX_STORAGE_3D\r\n};\r\n\r\nObject.keys(texStorageCtors).forEach(k => {\r\n  ProgramBuilder.prototype[k] = makeStorageTextureCtor(texStorageCtors[k]);\r\n});\r\n\r\n/*\r\nProgramBuilder.prototype.texStorage1D = makeStorageTextureCtor(typeinfo.PBTextureType.TEX_STORAGE_1D);\r\nProgramBuilder.prototype.texStorage2D = makeStorageTextureCtor(typeinfo.PBTextureType.TEX_STORAGE_2D);\r\nProgramBuilder.prototype.texStorage2DArray = makeStorageTextureCtor(typeinfo.PBTextureType.TEX_STORAGE_2D_ARRAY);\r\nProgramBuilder.prototype.texStorage3D = makeStorageTextureCtor(typeinfo.PBTextureType.TEX_STORAGE_3D);\r\n*/\r\n"],"names":["typeinfo.PBPrimitiveType","errors.PBDeviceNotSupport","AST.ASTShaderExpConstructor","errors.PBParamTypeError","typeinfo.typeF32","typeinfo.typeI32","typeinfo.typeU32","typeinfo.typeBool","typeinfo.typeF32Vec2","typeinfo.typeI32Vec2","typeinfo.typeU32Vec2","typeinfo.typeBVec2","typeinfo.typeF32Vec3","typeinfo.typeI32Vec3","typeinfo.typeU32Vec3","typeinfo.typeBVec3","typeinfo.typeF32Vec4","typeinfo.typeI32Vec4","typeinfo.typeU32Vec4","typeinfo.typeBVec4","typeinfo.typeMat2","typeinfo.typeMat2x3","typeinfo.typeMat2x4","typeinfo.typeMat3x2","typeinfo.typeMat3","typeinfo.typeMat3x4","typeinfo.typeMat4x2","typeinfo.typeMat4x3","typeinfo.typeMat4","typeinfo.typeTex1D","typeinfo.typeTex2D","typeinfo.typeTex3D","typeinfo.typeTexCube","typeinfo.typeTexDepth2D","typeinfo.typeTexDepthCube","typeinfo.typeTex2DArray","typeinfo.typeTexDepth2DArray","typeinfo.typeTexExternal","typeinfo.typeITex1D","typeinfo.typeITex2D","typeinfo.typeITex3D","typeinfo.typeITexCube","typeinfo.typeITex2DArray","typeinfo.typeUTex1D","typeinfo.typeUTex2D","typeinfo.typeUTex3D","typeinfo.typeUTexCube","typeinfo.typeUTex2DArray","typeinfo.typeSampler","typeinfo.typeSamplerComparison","typeinfo.PBTextureTypeInfo","typeinfo.PBTextureType"],"mappings":"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"}