{"version":3,"file":"ast.js","sources":["../../../../../libs/device/src/device/builder/ast.ts"],"sourcesContent":["import { ShaderType } from '../base_types';\r\nimport { semanticToAttrib } from '../gpuobject';\r\nimport * as typeinfo from './types';\r\nimport * as errors from './errors';\r\nimport type { PBShaderExp, PBGlobalScope } from './programbuilder';\r\nimport type { DeviceType } from '../device';\r\n\r\nexport const BuiltinInputStructNameVS = 'ch_VertexInput';\r\nexport const BuiltinOutputStructNameVS = 'ch_VertexOutput';\r\nexport const BuiltinInputStructNameFS = 'ch_FragInput';\r\nexport const BuiltinOutputStructNameFS = 'ch_FragOutput';\r\nexport const BuiltinInputStructNameCS = 'ch_ComputeInput';\r\nexport const BuiltinOutputStructNameCS = 'ch_ComputeOutput';\r\n\r\nexport const BuiltinInputStructInstanceNameVS = 'ch_VertexInputCpy';\r\nexport const BuiltinOutputStructInstanceNameVS = 'ch_VertexOutputCpy';\r\nexport const BuiltinInputStructInstanceNameFS = 'ch_FragInputCpy';\r\nexport const BuiltinOutputStructInstanceNameFS = 'ch_FragOutputCpy';\r\nexport const BuiltinInputStructInstanceNameCS = 'ch_ComputeInputCpy';\r\nexport const BuiltinOutputStructInstanceNameCS = 'ch_ComputeOutputCpy';\r\n\r\nexport enum DeclareType {\r\n  DECLARE_TYPE_NONE = 0,\r\n  DECLARE_TYPE_IN,\r\n  DECLARE_TYPE_OUT,\r\n  DECLARE_TYPE_WORKGROUP,\r\n  DECLARE_TYPE_UNIFORM,\r\n  DECLARE_TYPE_STORAGE,\r\n}\r\n\r\nexport enum ShaderPrecisionType {\r\n  NONE = 0,\r\n  HIGH,\r\n  MEDIUM,\r\n  LOW\r\n}\r\n\r\n/** @internal */\r\nexport function getBuiltinInputStructInstanceName(shaderType: ShaderType) {\r\n  switch (shaderType) {\r\n    case ShaderType.Vertex: return BuiltinInputStructInstanceNameVS;\r\n    case ShaderType.Fragment: return BuiltinInputStructInstanceNameFS;\r\n    case ShaderType.Compute: return BuiltinInputStructInstanceNameCS;\r\n    default: return null;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function getBuiltinOutputStructInstanceName(shaderType: ShaderType) {\r\n  switch (shaderType) {\r\n    case ShaderType.Vertex: return BuiltinOutputStructInstanceNameVS;\r\n    case ShaderType.Fragment: return BuiltinOutputStructInstanceNameFS;\r\n    case ShaderType.Compute: return BuiltinOutputStructInstanceNameCS;\r\n    default: return null;\r\n  }\r\n}\r\n/** @internal */\r\nexport function getBuiltinInputStructName(shaderType: ShaderType) {\r\n  switch (shaderType) {\r\n    case ShaderType.Vertex: return BuiltinInputStructNameVS;\r\n    case ShaderType.Fragment: return BuiltinInputStructNameFS;\r\n    case ShaderType.Compute: return BuiltinInputStructNameCS;\r\n    default: return null;\r\n  }\r\n}\r\n/** @internal */\r\nexport function getBuiltinOutputStructName(shaderType: ShaderType) {\r\n  switch (shaderType) {\r\n    case ShaderType.Vertex: return BuiltinOutputStructNameVS;\r\n    case ShaderType.Fragment: return BuiltinOutputStructNameFS;\r\n    case ShaderType.Compute: return BuiltinOutputStructNameCS;\r\n    default: return null;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function getTextureSampleType(type: typeinfo.PBTextureTypeInfo): typeinfo.PBPrimitiveTypeInfo {\r\n  switch (type.textureType) {\r\n    case typeinfo.PBTextureType.TEX_1D:\r\n    case typeinfo.PBTextureType.TEX_STORAGE_1D:\r\n    case typeinfo.PBTextureType.TEX_2D:\r\n    case typeinfo.PBTextureType.TEX_STORAGE_2D:\r\n    case typeinfo.PBTextureType.TEX_2D_ARRAY:\r\n    case typeinfo.PBTextureType.TEX_STORAGE_2D_ARRAY:\r\n    case typeinfo.PBTextureType.TEX_3D:\r\n    case typeinfo.PBTextureType.TEX_STORAGE_3D:\r\n    case typeinfo.PBTextureType.TEX_CUBE:\r\n    case typeinfo.PBTextureType.TEX_EXTERNAL:\r\n      return new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4);\r\n    case typeinfo.PBTextureType.TEX_DEPTH_2D_ARRAY:\r\n    case typeinfo.PBTextureType.TEX_DEPTH_2D:\r\n    case typeinfo.PBTextureType.TEX_DEPTH_CUBE:\r\n      return new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32);\r\n    case typeinfo.PBTextureType.ITEX_2D_ARRAY:\r\n    case typeinfo.PBTextureType.ITEX_1D:\r\n    case typeinfo.PBTextureType.ITEX_2D:\r\n    case typeinfo.PBTextureType.ITEX_3D:\r\n    case typeinfo.PBTextureType.ITEX_CUBE:\r\n      return new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.I32);\r\n    case typeinfo.PBTextureType.UTEX_2D_ARRAY:\r\n    case typeinfo.PBTextureType.UTEX_1D:\r\n    case typeinfo.PBTextureType.UTEX_2D:\r\n    case typeinfo.PBTextureType.UTEX_3D:\r\n    case typeinfo.PBTextureType.UTEX_CUBE:\r\n      return new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32);\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function genSamplerName(textureName: string, comparison: boolean): string {\r\n  return `ch_auto_sampler_${textureName}${comparison ? '_comparison' : ''}`;\r\n}\r\n\r\nconst webGLExtensions: string[] = [\r\n  'GL_EXT_shader_texture_lod',\r\n  'GL_OES_standard_derivatives',\r\n  'GL_EXT_draw_buffers',\r\n  'GL_EXT_frag_depth',\r\n  'GL_ANGLE_multi_draw',\r\n];\r\n\r\nconst webGL2Extensions: string[] = [\r\n  'GL_ANGLE_multi_draw',\r\n  'GL_OVR_multiview2',\r\n];\r\n\r\n/** @internal */\r\nexport const builtinVariables = {\r\n  'webgl': {\r\n    position: {\r\n      name: 'gl_Position',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      stage: 'vertex',\r\n    },\r\n    pointSize: {\r\n      name: 'gl_PointSize',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32),\r\n      stage: 'vertex',\r\n    },\r\n    fragCoord: {\r\n      name: 'gl_FragCoord',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      stage: 'fragment',\r\n    },\r\n    frontFacing: {\r\n      name: 'gl_FrontFacing',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.BOOL),\r\n      stage: 'fragment',\r\n    },\r\n    fragDepth: {\r\n      name: 'gl_FragDepthEXT',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32),\r\n      inOrOut: 'out',\r\n      extension: 'GL_EXT_frag_depth',\r\n      stage: 'fragment',\r\n    },\r\n  },\r\n  webgl2: {\r\n    vertexIndex: {\r\n      name: 'gl_VertexID',\r\n      semantic: 'vertex_index',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'vertex',\r\n    },\r\n    instanceIndex: {\r\n      name: 'gl_InstanceID',\r\n      semantic: 'instance_index',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'vertex',\r\n    },\r\n    position: {\r\n      name: 'gl_Position',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      stage: 'vertex',\r\n    },\r\n    pointSize: {\r\n      name: 'gl_PointSize',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32),\r\n      stage: 'vertex',\r\n    },\r\n    fragCoord: {\r\n      name: 'gl_FragCoord',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      stage: 'fragment',\r\n    },\r\n    frontFacing: {\r\n      name: 'gl_FrontFacing',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.BOOL),\r\n      stage: 'fragment',\r\n    },\r\n    fragDepth: {\r\n      name: 'gl_FragDepth',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32),\r\n      stage: 'fragment',\r\n    },\r\n  },\r\n  webgpu: {\r\n    vertexIndex: {\r\n      name: 'ch_builtin_vertexIndex',\r\n      semantic: 'vertex_index',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'vertex',\r\n    },\r\n    instanceIndex: {\r\n      name: 'ch_builtin_instanceIndex',\r\n      semantic: 'instance_index',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'vertex',\r\n    },\r\n    position: {\r\n      name: 'ch_builtin_position',\r\n      semantic: 'position',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      inOrOut: 'out',\r\n      stage: 'vertex',\r\n    },\r\n    fragCoord: {\r\n      name: 'ch_builtin_fragCoord',\r\n      semantic: 'position',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32VEC4),\r\n      inOrOut: 'in',\r\n      stage: 'fragment',\r\n    },\r\n    frontFacing: {\r\n      name: 'ch_builtin_frontFacing',\r\n      semantic: 'front_facing',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.BOOL),\r\n      inOrOut: 'in',\r\n      stage: 'fragment',\r\n    },\r\n    fragDepth: {\r\n      name: 'ch_builtin_fragDepth',\r\n      semantic: 'frag_depth',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.F32),\r\n      inOrOut: 'out',\r\n      stage: 'fragment',\r\n    },\r\n    localInvocationId: {\r\n      name: 'ch_builtin_localInvocationId',\r\n      semantic: 'local_invocation_id',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32VEC3),\r\n      inOrOut: 'in',\r\n      stage: 'compute',\r\n    },\r\n    globalInvocationId: {\r\n      name: 'ch_builtin_globalInvocationId',\r\n      semantic: 'global_invocation_id',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32VEC3),\r\n      inOrOut: 'in',\r\n      stage: 'compute',\r\n    },\r\n    workGroupId: {\r\n      name: 'ch_builtin_workGroupId',\r\n      semantic: 'workgroup_id',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32VEC3),\r\n      inOrOut: 'in',\r\n      stage: 'compute',\r\n    },\r\n    numWorkGroups: {\r\n      name: 'ch_builtin_numWorkGroups',\r\n      semantic: 'num_workgroups',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32VEC3),\r\n      inOrOut: 'in',\r\n      stage: 'compute',\r\n    },\r\n    sampleMaskIn: {\r\n      name: 'ch_builtin_sampleMaskIn',\r\n      semantic: 'sample_mask_in',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'fragment'\r\n    },\r\n    sampleMaskOut: {\r\n      name: 'ch_builtin_sampleMaskOut',\r\n      semantic: 'sample_mask_out',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'out',\r\n      stage: 'fragment'\r\n    },\r\n    sampleIndex: {\r\n      name: 'ch_builtin_sampleIndex',\r\n      semantic: 'sample_index',\r\n      type: new typeinfo.PBPrimitiveTypeInfo(typeinfo.PBPrimitiveType.U32),\r\n      inOrOut: 'in',\r\n      stage: 'fragment',\r\n    }\r\n  }\r\n} as const;\r\n\r\nfunction toFixed(n: number): string {\r\n  return n % 1 === 0 ? n.toFixed(1) : String(n);\r\n}\r\n\r\nfunction toInt(n: number): string {\r\n  return String(n | 0);\r\n}\r\n\r\nfunction toUint(n: number): string {\r\n  return String(n >>> 0);\r\n}\r\n\r\nfunction unbracket(e: string): string {\r\n  e = e.trim();\r\n  if (e[0] === '(' && e[e.length - 1] === ')') {\r\n    return e.substring(1, e.length - 1);\r\n  } else {\r\n    return e;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface ASTContext {\r\n  type: ShaderType;\r\n  mrt: boolean;\r\n  defines: string[];\r\n  extensions: Set<string>;\r\n  builtins: string[];\r\n  inputs: ShaderAST[];\r\n  outputs: ShaderAST[];\r\n  types: ShaderAST[];\r\n  typeReplacement: Map<PBShaderExp, typeinfo.PBTypeInfo>;\r\n  global: PBGlobalScope;\r\n  vertexAttributes: number[];\r\n  workgroupSize: [number, number, number];\r\n}\r\n\r\n/** @internal */\r\nexport class ShaderAST {\r\n  constructor() {\r\n  }\r\n  isReference(): boolean {\r\n    return false;\r\n  }\r\n  isPointer(): boolean {\r\n    return !!this.getType()?.isPointerType();\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return '';\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return '';\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    return '';\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return this.constructor.name;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class ASTExpression extends ShaderAST {\r\n  abstract getType(): typeinfo.PBTypeInfo;\r\n  abstract markWritable(): void;\r\n  abstract isWritable(): boolean;\r\n  abstract getAddressSpace(): typeinfo.PBAddressSpace;\r\n  abstract isConstExp(): boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class ASTFunctionParameter extends ASTExpression {\r\n  paramAST: ASTPrimitive | ASTReferenceOf;\r\n  deviceType: DeviceType;\r\n  writable: boolean;\r\n  constructor(init: ASTPrimitive, deviceType: DeviceType) {\r\n    super();\r\n    this.paramAST = init;\r\n    this.deviceType = deviceType;\r\n    this.writable = false;\r\n  }\r\n  getType(): typeinfo.PBTypeInfo<typeinfo.TypeInfo> {\r\n    return this.paramAST.getType();\r\n  }\r\n  markWritable(): void {\r\n    if (this.paramAST instanceof ASTPrimitive) {\r\n      if (this.deviceType === 'webgpu') {\r\n        this.paramAST.value.$typeinfo = new typeinfo.PBPointerTypeInfo(this.paramAST.value.$typeinfo, typeinfo.PBAddressSpace.UNKNOWN);\r\n      }\r\n      this.paramAST = new ASTReferenceOf(this.paramAST);\r\n    }\r\n    this.writable = true;\r\n  }\r\n  isWritable(): boolean {\r\n    return this.writable;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return this.paramAST.getAddressSpace();\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.paramAST.isConstExp();\r\n  }\r\n  isReference(): boolean {\r\n    return this.paramAST.isReference();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return this.paramAST.toWebGL(indent, ctx);\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return this.paramAST.toWebGL2(indent, ctx);\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    return this.paramAST.toWGSL(indent, ctx);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTScope extends ShaderAST {\r\n  statements: ShaderAST[];\r\n  constructor() {\r\n    super();\r\n    this.statements = [];\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return this.statements.filter(stmt => !(stmt instanceof ASTCallFunction) || stmt.isStatement).map(stmt => stmt.toWebGL(indent, ctx)).join('');\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return this.statements.filter(stmt => !(stmt instanceof ASTCallFunction) || stmt.isStatement).map(stmt => stmt.toWebGL2(indent, ctx)).join('');\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    return this.statements.filter(stmt => !(stmt instanceof ASTCallFunction) || stmt.isStatement).map(stmt => {\r\n      if (stmt instanceof ASTCallFunction) {\r\n        if (!stmt.getType().isVoidType()) {\r\n          return `${indent}_ = ${stmt.toWGSL('', ctx)}`;\r\n        }\r\n      }\r\n      return stmt.toWGSL(indent, ctx);\r\n    }).join('');\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTNakedScope extends ASTScope {\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return `${indent}{\\n${super.toWebGL(indent + ' ', ctx)}${indent}}\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return `${indent}{\\n${super.toWebGL2(indent + ' ', ctx)}${indent}}\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    return `${indent}{\\n${super.toWGSL(indent + ' ', ctx)}${indent}}\\n`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTGlobalScope extends ASTScope {\r\n  uniforms: ASTDeclareVar[];\r\n  constructor() {\r\n    super();\r\n    this.uniforms = [];\r\n  }\r\n  findFunction(name: string): ASTFunction {\r\n    for (const stmt of this.statements) {\r\n      if (stmt instanceof ASTFunction && stmt.name === name) {\r\n        return stmt;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    // TODO: precision\r\n    const precisions = `${indent}precision highp float;\\n${indent}precision highp int;\\n`;\r\n    const version = `${indent}#version 100\\n`;\r\n    const body = ctx.types.map(val => val.toWebGL(indent, ctx)).join('')\r\n      + this.uniforms.map(uniform => uniform.toWebGL(indent, ctx)).join('')\r\n      + ctx.inputs.map(input => input.toWebGL(indent, ctx)).join('')\r\n      + ctx.outputs.map(output => output.toWebGL(indent, ctx)).join('')\r\n      + super.toWebGL(indent, ctx);\r\n    for (const k of ctx.builtins) {\r\n      const info = builtinVariables.webgl[k];\r\n      if (info.extension) {\r\n        ctx.extensions.add(info.extension);\r\n      }\r\n    }\r\n    const extensions = [...ctx.extensions].map(s => `${indent}#extension ${s}: enable\\n`).join('');\r\n    const defines = ctx.defines.join('');\r\n    return version + extensions + precisions + defines + body;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    const precisions = `${indent}precision highp float;\\n${indent}precision highp int;\\n`;\r\n    const version = `${indent}#version 300 es\\n`;\r\n    const body = ctx.types.map(val => val.toWebGL2(indent, ctx)).join('')\r\n      + this.uniforms.map(uniform => uniform.toWebGL2(indent, ctx)).join('')\r\n      + ctx.inputs.map(input => input.toWebGL2(indent, ctx)).join('')\r\n      + ctx.outputs.map(output => output.toWebGL2(indent, ctx)).join('')\r\n      + super.toWebGL2(indent, ctx);\r\n    for (const k of ctx.builtins) {\r\n      const info = builtinVariables.webgl2[k];\r\n      if (info.extension) {\r\n        ctx.extensions.add(info.extension);\r\n      }\r\n    }\r\n    const extensions = [...ctx.extensions].map(s => `${indent}#extension ${s}: enable\\n`).join('');\r\n    const defines = ctx.defines.join('');\r\n    return version + extensions + precisions + defines + body;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    const structNames = ctx.type === ShaderType.Vertex\r\n      ? [BuiltinInputStructNameVS, BuiltinOutputStructNameVS]\r\n      : ctx.type === ShaderType.Fragment\r\n        ? [BuiltinInputStructNameFS, BuiltinOutputStructNameFS]\r\n        : [BuiltinInputStructNameCS];\r\n    const usedBuiltins: string[] = [];\r\n    for (const k of ctx.builtins) {\r\n      usedBuiltins.push(builtinVariables.webgpu[k].name);\r\n    }\r\n    const allBuiltins = Object.keys(builtinVariables.webgpu).map(val => builtinVariables.webgpu[val].name);\r\n    for (const type of ctx.types) {\r\n      if (type instanceof ASTStructDefine && structNames.indexOf(type.type.structName) >= 0) {\r\n        for (let i = type.type.structMembers.length - 1; i >= 0; i--) {\r\n          const member = type.type.structMembers[i];\r\n          if (allBuiltins.indexOf(member.name) >= 0 && usedBuiltins.indexOf(member.name) < 0) {\r\n            type.type.structMembers.splice(i, 1);\r\n            type.prefix.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ctx.types = ctx.types.filter(val => !(val instanceof ASTStructDefine) || val.type.structMembers.length > 0);\r\n    return ctx.types.map(val => val.toWGSL(indent, ctx)).join('')\r\n      + this.uniforms.map(uniform => uniform.toWGSL(indent, ctx)).join('')\r\n      + super.toWGSL(indent, ctx);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTPrimitive extends ASTExpression {\r\n  value: PBShaderExp;\r\n  ref: ASTExpression;\r\n  writable: boolean;\r\n  constExp: boolean;\r\n  constructor(value: PBShaderExp) {\r\n    super();\r\n    this.value = value;\r\n    this.ref = null;\r\n    this.writable = false;\r\n    this.constExp = false;\r\n  }\r\n  get name(): string {\r\n    return this.value.$str;\r\n  }\r\n  isReference(): boolean {\r\n    return true;\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.constExp;\r\n  }\r\n  markWritable() {\r\n    this.writable = true;\r\n    this.constExp = false;\r\n    if (this.ref) {\r\n      this.ref.markWritable();\r\n    }\r\n  }\r\n  isWritable(): boolean {\r\n    return this.writable;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    switch (this.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n        return typeinfo.PBAddressSpace.UNIFORM;\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        return typeinfo.PBAddressSpace.STORAGE;\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n        return null;\r\n      default:\r\n        return this.value.$global ? typeinfo.PBAddressSpace.PRIVATE : typeinfo.PBAddressSpace.FUNCTION;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.value.$typeinfo;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return this.name;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return this.name;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    if (this.value.$declareType === DeclareType.DECLARE_TYPE_IN) {\r\n      const structName = getBuiltinInputStructInstanceName(ctx.type);\r\n      return ctx.global[structName][this.name].$ast.toWGSL(indent, ctx);\r\n    } else if (this.value.$declareType === DeclareType.DECLARE_TYPE_OUT) {\r\n      const structName = getBuiltinOutputStructInstanceName(ctx.type);\r\n      return ctx.global[structName][this.name].$ast.toWGSL(indent, ctx);\r\n    } else {\r\n      return this.name;\r\n    }\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class ASTLValue extends ShaderAST {\r\n  abstract getType(): typeinfo.PBTypeInfo;\r\n  abstract markWritable(): void;\r\n  abstract isWritable(): boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class ASTLValueScalar extends ASTLValue {\r\n  value: ASTExpression;\r\n  constructor(value: ASTExpression) {\r\n    super();\r\n    if (value.getAddressSpace() === typeinfo.PBAddressSpace.UNIFORM) {\r\n      throw new errors.PBASTError(value, 'cannot assign to uniform variable');\r\n    }\r\n    this.value = value;\r\n    if (this.value instanceof ASTCallFunction) {\r\n      this.value.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.value.getType();\r\n  }\r\n  markWritable(): void {\r\n    this.value.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.value.isWritable();\r\n  }\r\n  isReference(): boolean {\r\n    return this.value.isReference();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return this.value.toWebGL(indent, ctx);\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return this.value.toWebGL2(indent, ctx);\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    return this.value.toWGSL(indent, ctx);\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return this.value.toString(deviceType);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTLValueHash extends ASTLValue {\r\n  scope: ASTLValueScalar | ASTLValueHash | ASTLValueArray;\r\n  field: string;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(scope: ASTLValueScalar | ASTLValueHash | ASTLValueArray, field: string, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.scope = scope;\r\n    this.field = field;\r\n    this.type = type;\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable(): void {\r\n    this.scope.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.scope.isWritable();\r\n  }\r\n  isReference(): boolean {\r\n    return this.scope.isReference();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return `${this.scope.toWebGL(indent, ctx)}.${this.field}`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return `${this.scope.toWebGL2(indent, ctx)}.${this.field}`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    const scope = this.scope.isPointer() ? new ASTReferenceOf(this.scope) : this.scope;\r\n    return `${scope.toWGSL(indent, ctx)}.${this.field}`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const scope = this.scope.isPointer() ? new ASTReferenceOf(this.scope) : this.scope;\r\n    return `${scope.toString(deviceType)}.${this.field}`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTLValueArray extends ASTLValue {\r\n  value: ASTLValueScalar | ASTLValueHash | ASTLValueArray;\r\n  index: ASTExpression;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(value: ASTLValueScalar | ASTLValueHash | ASTLValueArray, index: ASTExpression, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.value = value;\r\n    this.index = index;\r\n    this.type = type;\r\n    if (this.index instanceof ASTCallFunction) {\r\n      this.index.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable(): void {\r\n    this.value.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.value.isWritable();\r\n  }\r\n  isReference(): boolean {\r\n    return this.value.isReference();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return `${this.value.toWebGL(indent, ctx)}[${this.index.toWebGL(indent, ctx)}]`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return `${this.value.toWebGL2(indent, ctx)}[${this.index.toWebGL2(indent, ctx)}]`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    const value = this.value.isPointer() ? new ASTReferenceOf(this.value) : this.value;\r\n    return `${value.toWGSL(indent, ctx)}[${this.index.toWGSL(indent, ctx)}]`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const value = this.value.isPointer() ? new ASTReferenceOf(this.value) : this.value;\r\n    return `${value.toString(deviceType)}[${this.index.toString(deviceType)}]`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTLValueDeclare extends ASTLValue {\r\n  value: ASTPrimitive;\r\n  constructor(value: ASTPrimitive) {\r\n    super();\r\n    this.value = value;\r\n    this.value.constExp = true;\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.value.getType();\r\n  }\r\n  markWritable(): void {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isReference(): boolean {\r\n    return true;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    let prefix = '';\r\n    const builtin = false;\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        throw new Error('invalid declare type');\r\n      default:\r\n        prefix = this.value.constExp && !this.value.writable && !this.getType().isStructType() ? 'const ' : '';\r\n        break;\r\n    }\r\n    if (!builtin) {\r\n      return `${prefix}${this.getType().toTypeName('webgl', this.value.name)}`;\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    let prefix = '';\r\n    const builtin = false;\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        throw new Error('invalid declare type');\r\n      default:\r\n        prefix = this.value.constExp && !this.value.writable && !this.getType().isStructType() ? 'const ' : '';\r\n        break;\r\n    }\r\n    if (!builtin) {\r\n      return `${prefix}${this.getType().toTypeName('webgl2', this.value.name)}`;\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    let prefix: string;\r\n    const builtin = false;\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        throw new Error('invalid declare type');\r\n      default: {\r\n        const addressSpace = this.value.getAddressSpace();\r\n        const readonly = this.getType().isPointerType()\r\n          || (!this.value.writable\r\n            && (addressSpace === typeinfo.PBAddressSpace.PRIVATE || addressSpace === typeinfo.PBAddressSpace.FUNCTION));\r\n        const moduleScope = addressSpace === typeinfo.PBAddressSpace.PRIVATE;\r\n        const storageAccessMode = addressSpace === typeinfo.PBAddressSpace.STORAGE && this.value.writable ? ', read_write' : '';\r\n        const decorator = addressSpace !== typeinfo.PBAddressSpace.FUNCTION ? `<${addressSpace}${storageAccessMode}>` : '';\r\n        prefix = readonly ? moduleScope ? 'const ' : 'let ' : `var${decorator} `;\r\n        break;\r\n      }\r\n    }\r\n    if (!builtin) {\r\n      // const decl = this.value.value.$global ? this.getType().toTypeName('webgpu', this.value.name) : this.value.name;\r\n      const type = this.getType();\r\n      if (type.isPointerType() && (this.value.writable || this.value.ref.isWritable())) {\r\n        type.writable = true;\r\n      }\r\n      const decl = type.toTypeName('webgpu', this.value.name);\r\n      return `${prefix}${decl}`;\r\n    }\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return this.value.toString(deviceType);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTShaderExpConstructor extends ASTExpression {\r\n  type: typeinfo.PBTypeInfo;\r\n  args: (number | boolean | ASTExpression)[];\r\n  constExp: boolean;\r\n  constructor(type: typeinfo.PBTypeInfo, args: (number | boolean | ASTExpression)[]) {\r\n    super();\r\n    this.type = type;\r\n    this.args = args;\r\n    this.constExp = true;\r\n    for (const arg of args) {\r\n      if (arg === null || arg === undefined) {\r\n        throw new Error('invalid constructor argument');\r\n      }\r\n      if (arg instanceof ASTCallFunction) {\r\n        arg.isStatement = false;\r\n      }\r\n      this.constExp &&= !(arg instanceof ASTExpression) || arg.isConstExp();\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.constExp;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    console.assert(!this.type.isArrayType(), 'array constructor not supported in webgl1 device');\r\n    console.assert(this.type.isConstructible(), `type '${this.type.toTypeName('webgl')}' is not constructible`);\r\n    const overloads = this.type.getConstructorOverloads('webgl');\r\n    for (const overload of overloads) {\r\n      const convertedArgs = convertArgs(this.args, overload);\r\n      if (convertedArgs) {\r\n        const c = convertedArgs.args.map(arg => unbracket(arg.toWebGL(indent, ctx))).join(',');\r\n        return `${convertedArgs.name}(${c})`;\r\n      }\r\n    }\r\n    throw new Error(`no matching overload function found for type ${this.type.toTypeName('webgl')}`);\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    console.assert(this.type.isConstructible(), `type '${this.type.toTypeName('webgl2')}' is not constructible`, true);\r\n    const overloads = this.type.getConstructorOverloads('webgl2');\r\n    for (const overload of overloads) {\r\n      const convertedArgs = convertArgs(this.args, overload);\r\n      if (convertedArgs) {\r\n        const c = convertedArgs.args.map(arg => unbracket(arg.toWebGL2(indent, ctx))).join(',');\r\n        return `${convertedArgs.name}(${c})`;\r\n      }\r\n    }\r\n    throw new Error(`no matching overload function found for type ${this.type.toTypeName('webgl2')}`);\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    console.assert(this.type.isConstructible(), `type '${this.type.toTypeName('webgpu')}' is not constructible`, true);\r\n    const overloads = this.type.getConstructorOverloads('webgpu');\r\n    for (const overload of overloads) {\r\n      const convertedArgs = convertArgs(this.args, overload);\r\n      if (convertedArgs) {\r\n        const c = convertedArgs.args.map(arg => unbracket(arg.toWGSL(indent, ctx))).join(',');\r\n        return `${convertedArgs.name}(${c})`;\r\n      }\r\n    }\r\n    throw new Error(`no matching overload function found for type ${this.type.toTypeName('webgpu')}`);\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return 'constructor';\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTScalar extends ASTExpression {\r\n  value: number | boolean;\r\n  type: typeinfo.PBPrimitiveTypeInfo;\r\n  constructor(value: number | boolean, type: typeinfo.PBPrimitiveTypeInfo) {\r\n    super();\r\n    this.value = value;\r\n    this.type = type;\r\n    const valueType = typeof value;\r\n    if (valueType === 'number') {\r\n      if (type.primitiveType === typeinfo.PBPrimitiveType.BOOL) {\r\n        throw new errors.PBTypeCastError(value, valueType, type);\r\n      }\r\n      if (type.primitiveType === typeinfo.PBPrimitiveType.I32 && (!Number.isInteger(value) || value < (0x80000000 >> 0) || value > 0xFFFFFFFF)) {\r\n        throw new errors.PBTypeCastError(value, valueType, type);\r\n      }\r\n      if (value < 0 && type.primitiveType === typeinfo.PBPrimitiveType.U32 && (!Number.isInteger(value) || value < 0 || value > 0xFFFFFFFF)) {\r\n        throw new errors.PBTypeCastError(value, valueType, type);\r\n      }\r\n    } else if (type.primitiveType !== typeinfo.PBPrimitiveType.BOOL) {\r\n      throw new errors.PBTypeCastError(value, valueType, type);\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isConstExp(): boolean {\r\n    return true;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    switch (this.type.primitiveType) {\r\n      case typeinfo.PBPrimitiveType.F32:\r\n        return toFixed(this.value as number);\r\n      case typeinfo.PBPrimitiveType.I32:\r\n        return toInt(this.value as number);\r\n      case typeinfo.PBPrimitiveType.U32:\r\n        return toUint(this.value as number);\r\n      case typeinfo.PBPrimitiveType.BOOL:\r\n        return String(!!this.value);\r\n      default:\r\n        throw new Error('Invalid scalar type');\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    switch (this.type.primitiveType) {\r\n      case typeinfo.PBPrimitiveType.F32:\r\n        return toFixed(this.value as number);\r\n      case typeinfo.PBPrimitiveType.I32:\r\n        return toInt(this.value as number);\r\n      case typeinfo.PBPrimitiveType.U32:\r\n        return toUint(this.value as number);\r\n      case typeinfo.PBPrimitiveType.BOOL:\r\n        return String(!!this.value);\r\n      default:\r\n        throw new Error('Invalid scalar type');\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    switch (this.type.primitiveType) {\r\n      case typeinfo.PBPrimitiveType.F32:\r\n        return toFixed(this.value as number);\r\n      case typeinfo.PBPrimitiveType.I32:\r\n        return toInt(this.value as number);\r\n      case typeinfo.PBPrimitiveType.U32:\r\n        return `${toUint(this.value as number)}u`;\r\n      case typeinfo.PBPrimitiveType.BOOL:\r\n        return String(!!this.value);\r\n      default:\r\n        throw new Error('Invalid scalar type');\r\n    }\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return `${this.value}`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTHash extends ASTExpression {\r\n  source: ASTExpression;\r\n  field: string;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(source: ASTExpression, field: string, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.source = source;\r\n    this.field = field;\r\n    this.type = type;\r\n    if (this.source instanceof ASTCallFunction) {\r\n      this.source.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  isReference(): boolean {\r\n    return this.source.isReference();\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.source.isConstExp();\r\n  }\r\n  markWritable() {\r\n    this.source.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.source.isWritable();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return this.source.getAddressSpace();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${this.source.toWebGL(indent, ctx)}.${this.field}`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${this.source.toWebGL2(indent, ctx)}.${this.field}`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    const source = this.source.isPointer() ? new ASTReferenceOf(this.source) : this.source;\r\n    return `${source.toWGSL(indent, ctx)}.${this.field}`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const source = this.source.isPointer() ? new ASTReferenceOf(this.source) : this.source;\r\n    return `${source.toString(deviceType)}.${this.field}`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTCast extends ASTExpression {\r\n  sourceValue: ASTExpression;\r\n  castType: typeinfo.PBTypeInfo;\r\n  constructor(source: ASTExpression, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.sourceValue = source;\r\n    this.castType = type;\r\n    if (this.sourceValue instanceof ASTCallFunction) {\r\n      this.sourceValue.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.castType;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.sourceValue.isConstExp();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    if (this.castType.typeId !== this.sourceValue.getType().typeId) {\r\n      return `${this.castType.toTypeName('webgl')}(${unbracket(this.sourceValue.toWebGL(indent, ctx))})`;\r\n    } else {\r\n      return this.sourceValue.toWebGL(indent, ctx);\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    if (this.castType.typeId !== this.sourceValue.getType().typeId) {\r\n      return `${this.castType.toTypeName('webgl2')}(${unbracket(this.sourceValue.toWebGL2(indent, ctx))})`;\r\n    } else {\r\n      return this.sourceValue.toWebGL2(indent, ctx);\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    if (this.castType.typeId !== this.sourceValue.getType().typeId) {\r\n      return `${this.castType.toTypeName('webgpu')}(${unbracket(this.sourceValue.toWGSL(indent, ctx))})`;\r\n    } else {\r\n      return this.sourceValue.toWGSL(indent, ctx);\r\n    }\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return `${this.castType.toTypeName(deviceType)}(${unbracket(this.sourceValue.toString(deviceType))})`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTAddressOf extends ASTExpression {\r\n  value: ASTExpression;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(value: ASTExpression) {\r\n    super();\r\n    console.assert(value.isReference(), 'no pointer type for non-reference values', true);\r\n    this.value = value;\r\n    this.type = new typeinfo.PBPointerTypeInfo(value.getType(), value.getAddressSpace());\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  isConstExp(): boolean {\r\n    return false;\r\n  }\r\n  markWritable() {\r\n    const addressSpace = this.value.getAddressSpace();\r\n    if (addressSpace === typeinfo.PBAddressSpace.UNIFORM) {\r\n      throw new errors.PBASTError(this.value, 'uniforms are not writable');\r\n    }\r\n    this.value.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.value.isWritable();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return this.value.getAddressSpace();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    throw new Error('GLSL does not support pointer type');\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    throw new Error('GLSL does not support pointer type');\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    const ast = this.value instanceof ASTFunctionParameter ? this.value.paramAST : this.value;\r\n    return ast instanceof ASTReferenceOf ? ast.value.toWGSL(indent, ctx) : `(&${ast.toWGSL(indent, ctx)})`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const ast = this.value instanceof ASTFunctionParameter ? this.value.paramAST : this.value;\r\n    return ast instanceof ASTReferenceOf ? ast.value.toString(deviceType) : `(&${ast.toString(deviceType)})`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTReferenceOf extends ASTExpression {\r\n  value: ASTExpression | ASTLValue;\r\n  constructor(value: ASTExpression | ASTLValue) {\r\n    super();\r\n    this.value = value;\r\n    if (this.value instanceof ASTCallFunction) {\r\n      this.value.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    const type = this.value.getType();\r\n    return type.isPointerType() ? type.pointerType : type;\r\n  }\r\n  isReference(): boolean {\r\n    return true;\r\n  }\r\n  markWritable() {\r\n    this.value.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.value.isWritable();\r\n  }\r\n  isConstExp(): boolean {\r\n    return false;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return this.value instanceof ASTExpression ? this.value.getAddressSpace() : null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    return this.value.toWebGL(indent, ctx);\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    return this.value.toWebGL2(indent, ctx);\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return this.value.getType().isPointerType() ? `(*${this.value.toWGSL(indent, ctx)})` : this.value.toWGSL(indent, ctx);\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return `*${this.value.toString(deviceType)}`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTUnaryFunc extends ASTExpression {\r\n  value: ASTExpression;\r\n  op: string;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(value: ASTExpression, op: string, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.value = value;\r\n    this.op = op;\r\n    this.type = type;\r\n    if (this.value instanceof ASTCallFunction) {\r\n      this.value.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.value.isConstExp();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${this.op}${this.value.toWebGL(indent, ctx)}`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${this.op}${this.value.toWebGL2(indent, ctx)}`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    const value = this.value.isPointer() ? new ASTReferenceOf(this.value) : this.value;\r\n    return `${this.op}${value.toWGSL(indent, ctx)}`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const value = this.value.isPointer() ? new ASTReferenceOf(this.value) : this.value;\r\n    return `${this.op}${value.toString(deviceType)}`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTBinaryFunc extends ASTExpression {\r\n  left: ASTExpression;\r\n  right: ASTExpression;\r\n  type: typeinfo.PBTypeInfo;\r\n  op: string;\r\n  constructor(left: ASTExpression, right: ASTExpression, op: string, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.left = left;\r\n    this.right = right;\r\n    this.op = op;\r\n    this.type = type;\r\n    if (this.left instanceof ASTCallFunction) {\r\n      this.left.isStatement = false;\r\n    }\r\n    if (this.right instanceof ASTCallFunction) {\r\n      this.right.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.left.isConstExp() && this.right.isConstExp();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `(${this.left.toWebGL(indent, ctx)} ${this.op} ${this.right.toWebGL(indent, ctx)})`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `(${this.left.toWebGL2(indent, ctx)} ${this.op} ${this.right.toWebGL2(indent, ctx)})`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    const left = this.left.isPointer() ? new ASTReferenceOf(this.left) : this.left;\r\n    const right = this.right.isPointer() ? new ASTReferenceOf(this.right) : this.right;\r\n    return `(${left.toWGSL(indent, ctx)} ${this.op} ${right.toWGSL(indent, ctx)})`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    const left = this.left.isPointer() ? new ASTReferenceOf(this.left) : this.left;\r\n    const right = this.right.isPointer() ? new ASTReferenceOf(this.right) : this.right;\r\n    return `(${left.toString(deviceType)} ${this.op} ${right.toString(deviceType)})`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTArrayIndex extends ASTExpression {\r\n  source: ASTExpression;\r\n  index: ASTExpression;\r\n  type: typeinfo.PBTypeInfo;\r\n  constructor(source: ASTExpression, index: ASTExpression, type: typeinfo.PBTypeInfo) {\r\n    super();\r\n    this.source = source;\r\n    this.index = index;\r\n    this.type = type;\r\n    if (this.source instanceof ASTCallFunction) {\r\n      this.source.isStatement = false;\r\n    }\r\n    if (this.index instanceof ASTCallFunction) {\r\n      this.index.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.type;\r\n  }\r\n  isReference(): boolean {\r\n    return this.source.isReference();\r\n  }\r\n  markWritable() {\r\n    this.source.markWritable();\r\n  }\r\n  isWritable(): boolean {\r\n    return this.source.isWritable();\r\n  }\r\n  isConstExp(): boolean {\r\n    return this.source.isConstExp() && this.index.isConstExp();\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return this.source.getAddressSpace();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${this.source.toWebGL(indent, ctx)}[${unbracket(this.index.toWebGL(indent, ctx))}]`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${this.source.toWebGL2(indent, ctx)}[${unbracket(this.index.toWebGL2(indent, ctx))}]`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return `${this.source.toWGSL(indent, ctx)}[${unbracket(this.index.toWGSL(indent, ctx))}]`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return `${this.source.toString(deviceType)}[${unbracket(this.index.toString(deviceType))}]`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTTouch extends ShaderAST {\r\n  value: ASTExpression;\r\n  constructor(value: ASTExpression) {\r\n    super();\r\n    if (value.getType().isVoidType()) {\r\n      throw new Error('can not touch void type');\r\n    }\r\n    if (value instanceof ASTCallFunction) {\r\n      value.isStatement = false;\r\n    }\r\n    this.value = value;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${indent}${this.value.toWebGL('', ctx)};\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${indent}${this.value.toWebGL2('', ctx)};\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    if (!this.value.getType().isVoidType()) {\r\n      return `${indent}_ = ${this.value.toWGSL('', ctx)};\\n`;\r\n    } else {\r\n      return `${indent}${this.value.toWGSL('', ctx)};\\n`;\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTAssignment extends ShaderAST {\r\n  lvalue: ASTLValue;\r\n  rvalue: ASTExpression | number | boolean;\r\n  constructor(lvalue: ASTLValue, rvalue: ASTExpression | number | boolean) {\r\n    super();\r\n    if (!lvalue.isReference()) {\r\n      throw new Error('assignment: l-value required');\r\n    }\r\n    this.lvalue = lvalue;\r\n    this.rvalue = rvalue;\r\n    if (!(this.lvalue instanceof ASTLValueDeclare)) {\r\n      if (this.lvalue.getType().isPointerType()) {\r\n        throw new errors.PBASTError(this.lvalue, 'cannot assign to read-only variable');\r\n      }\r\n      this.lvalue.markWritable();\r\n    } else if (this.lvalue.getType().isPointerType()) {\r\n      if (this.rvalue instanceof ASTPrimitive) {\r\n        this.lvalue.value.ref = this.rvalue.ref;\r\n      } else if (this.rvalue instanceof ASTAddressOf) {\r\n        this.lvalue.value.ref = this.rvalue.value;\r\n      } else {\r\n        throw new errors.PBASTError(this.lvalue, 'invalid pointer assignment');\r\n      }\r\n    } else if (this.rvalue instanceof ASTExpression) {\r\n      this.lvalue.value.constExp = this.rvalue.isConstExp();\r\n    }\r\n    if (this.rvalue instanceof ASTCallFunction) {\r\n      this.rvalue.isStatement = false;\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    let rhs: string = null;\r\n    const ltype = this.lvalue.getType();\r\n    const rtype = this.checkScalarType(this.rvalue, ltype);\r\n    if (ltype.typeId !== rtype.typeId) {\r\n      throw new errors.PBTypeCastError(this.rvalue instanceof ASTExpression ? this.rvalue.toString('webgl') : `${this.rvalue}`, rtype, ltype);\r\n    }\r\n    if (typeof this.rvalue === 'number' || typeof this.rvalue === 'boolean') {\r\n      rhs = (rtype as typeinfo.PBPrimitiveTypeInfo).primitiveType === typeinfo.PBPrimitiveType.F32 ? toFixed(this.rvalue as number) : String(this.rvalue);\r\n    } else {\r\n      rhs = unbracket(this.rvalue.toWebGL(indent, ctx));\r\n    }\r\n    if (this.lvalue instanceof ASTLValueDeclare) {\r\n      this.lvalue.value.constExp &&= !(this.rvalue instanceof ASTExpression) || this.rvalue.isConstExp();\r\n    }\r\n    return `${indent}${this.lvalue.toWebGL(indent, ctx)} = ${rhs};\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    let rhs: string = null;\r\n    const ltype = this.lvalue.getType();\r\n    const rtype = this.checkScalarType(this.rvalue, ltype);\r\n    if (ltype.typeId !== rtype.typeId) {\r\n      throw new errors.PBTypeCastError(this.rvalue instanceof ASTExpression ? this.rvalue.toString('webgl2') : `${this.rvalue}`, rtype, ltype);\r\n    }\r\n    if (typeof this.rvalue === 'number' || typeof this.rvalue === 'boolean') {\r\n      rhs = (rtype as typeinfo.PBPrimitiveTypeInfo).primitiveType === typeinfo.PBPrimitiveType.F32 ? toFixed(this.rvalue as number) : String(this.rvalue);\r\n    } else {\r\n      rhs = unbracket(this.rvalue.toWebGL2(indent, ctx));\r\n    }\r\n    if (this.lvalue instanceof ASTLValueDeclare) {\r\n      this.lvalue.value.constExp &&= !(this.rvalue instanceof ASTExpression) || this.rvalue.isConstExp();\r\n    }\r\n    return `${indent}${this.lvalue.toWebGL2(indent, ctx)} = ${rhs};\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    const ltype = this.lvalue.getType();\r\n    const [valueTypeLeft, lvalueIsPtr] = ltype.isPointerType() ? [ltype.pointerType, true] : [ltype, false];\r\n    const rtype = this.checkScalarType(this.rvalue, valueTypeLeft);\r\n    const rvalueIsPtr = rtype && rtype.isPointerType();\r\n    const valueTypeRight = rvalueIsPtr ? (rtype as typeinfo.PBPointerTypeInfo).pointerType : rtype;\r\n    if (valueTypeLeft.typeId !== valueTypeRight.typeId) {\r\n      throw new errors.PBTypeCastError(this.rvalue instanceof ASTExpression ? this.rvalue.toString('webgpu') : `${this.rvalue}`, rtype, ltype);\r\n    }\r\n    if (this.lvalue instanceof ASTLValueScalar || this.lvalue instanceof ASTLValueDeclare) {\r\n      const structName = valueTypeLeft.isStructType() ? valueTypeLeft.structName : null;\r\n      if (structName && ctx.types.findIndex(val => val instanceof ASTStructDefine && val.type.structName === structName) < 0) {\r\n        return '';\r\n      }\r\n    }\r\n    let rhs: string;\r\n    if (typeof this.rvalue === 'number' || typeof this.rvalue === 'boolean') {\r\n      rhs = (rtype as typeinfo.PBPrimitiveTypeInfo).primitiveType === typeinfo.PBPrimitiveType.F32 ? toFixed(this.rvalue as number) : String(this.rvalue);\r\n    } else {\r\n      rhs = unbracket(this.rvalue.toWGSL(indent, ctx));\r\n    }\r\n    const name = this.lvalue.toWGSL(indent, ctx);\r\n    if (lvalueIsPtr && !rvalueIsPtr) {\r\n      if (this.lvalue instanceof ASTLValueDeclare) {\r\n        throw new Error(`rvalue must be pointer type: ${rhs}`);\r\n      } else {\r\n        return `${indent}*(${name}) = ${rhs};\\n`;\r\n      }\r\n    } else if (rvalueIsPtr && !lvalueIsPtr) {\r\n      return `${indent}${name} = *(${rhs});\\n`\r\n    } else {\r\n      return `${indent}${name} = ${rhs};\\n`;\r\n    }\r\n  }\r\n  private checkScalarType(value: number | boolean | ASTExpression, targetType: typeinfo.PBTypeInfo): typeinfo.PBTypeInfo {\r\n    if (value instanceof ASTExpression) {\r\n      return value.getType();\r\n    }\r\n    const isBool = typeof value === 'boolean';\r\n    const isInt = typeof value === 'number' && Number.isInteger(value) && value >= (0x80000000 >> 0) && value <= 0x7fffffff;\r\n    const isUint = typeof value === 'number' && Number.isInteger(value) && value >= 0 && value <= 0xffffffff;\r\n    const isFloat = typeof value === 'number';\r\n    if (targetType.isPrimitiveType()) {\r\n      switch (targetType.primitiveType) {\r\n        case typeinfo.PBPrimitiveType.BOOL:\r\n          return isBool ? targetType : isInt ? typeinfo.typeI32 : isUint ? typeinfo.typeU32 : typeinfo.typeF32;\r\n        case typeinfo.PBPrimitiveType.F32:\r\n          return isFloat ? targetType : typeinfo.typeBool;\r\n        case typeinfo.PBPrimitiveType.I32:\r\n          return isInt ? targetType : isBool ? typeinfo.typeBool : isUint ? typeinfo.typeU32 : typeinfo.typeF32;\r\n        case typeinfo.PBPrimitiveType.U32:\r\n          return isUint ? targetType : isBool ? typeinfo.typeBool : isInt ? typeinfo.typeI32 : typeinfo.typeF32;\r\n        default:\r\n          return null;\r\n      }\r\n    } else {\r\n      return isBool ? typeinfo.typeBool : isInt ? typeinfo.typeI32 : isUint ? typeinfo.typeU32 : typeinfo.typeF32;\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTDiscard extends ShaderAST {\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${indent}discard;\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${indent}discard;\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return `${indent}discard;\\n`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTBreak extends ShaderAST {\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${indent}break;\\n`\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${indent}break;\\n`\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return `${indent}break;\\n`\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTContinue extends ShaderAST {\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return `${indent}continue;\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return `${indent}continue;\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return `${indent}continue;\\n`\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTReturn extends ShaderAST {\r\n  value: ASTExpression;\r\n  constructor(value: ASTExpression) {\r\n    super();\r\n    this.value = value;\r\n    if (this.value instanceof ASTCallFunction) {\r\n      this.value.isStatement = false;\r\n    }\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    return this.value ? `${indent}return ${unbracket(this.value.toWebGL(indent, ctx))};\\n` : `${indent}return;\\n`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    return this.value ? `${indent}return ${unbracket(this.value.toWebGL2(indent, ctx))};\\n` : `${indent}return;\\n`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    return this.value ? `${indent}return ${unbracket(this.value.toWGSL(indent, ctx))};\\n` : `${indent}return;\\n`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTCallFunction extends ASTExpression {\r\n  name: string;\r\n  args: ASTExpression[];\r\n  retType: typeinfo.PBTypeInfo;\r\n  func: ASTFunction;\r\n  isStatement: boolean;\r\n  constructor(name: string, args: ASTExpression[], retType: typeinfo.PBTypeInfo, func: ASTFunction, deviceType: DeviceType) {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n    this.retType = retType;\r\n    this.func = func;\r\n    this.isStatement = true;\r\n    if (func) {\r\n      if (func.args.length !== this.args.length) {\r\n        throw new errors.PBInternalError(`ASTCallFunction(): number of parameters mismatch`);\r\n      }\r\n      for (let i = 0; i < this.args.length; i++) {\r\n        const funcArg = func.args[i];\r\n        if (funcArg.paramAST instanceof ASTReferenceOf) {\r\n          if (deviceType === 'webgpu') {\r\n            const argAddressSpace = args[i].getAddressSpace();\r\n            if (argAddressSpace !== typeinfo.PBAddressSpace.FUNCTION && argAddressSpace !== typeinfo.PBAddressSpace.PRIVATE) {\r\n              throw new errors.PBParamTypeError(name, 'pointer type of function parameter must be function or private');\r\n            }\r\n            const argType = funcArg.paramAST.value.getType();\r\n            if (!argType.isPointerType()) {\r\n              throw new errors.PBInternalError(`ASTCallFunction(): invalid reference type`);\r\n            }\r\n            if (argType.addressSpace === typeinfo.PBAddressSpace.UNKNOWN) {\r\n              argType.addressSpace = argAddressSpace;\r\n            } else if (argType.addressSpace !== argAddressSpace) {\r\n              throw new errors.PBParamTypeError(name, `invalid pointer parameter address space '${argAddressSpace}', should be '${argType.addressSpace}`);\r\n            }\r\n          }\r\n          this.args[i].markWritable();\r\n        }\r\n      }\r\n    }\r\n    for (const arg of this.args) {\r\n      if (arg instanceof ASTCallFunction) {\r\n        arg.isStatement = false;\r\n      }\r\n    }\r\n  }\r\n  getType(): typeinfo.PBTypeInfo {\r\n    return this.retType;\r\n  }\r\n  isConstExp(): boolean {\r\n    return false;\r\n  }\r\n  markWritable() {\r\n  }\r\n  isWritable(): boolean {\r\n    return false;\r\n  }\r\n  getAddressSpace(): typeinfo.PBAddressSpace {\r\n    return null;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    if (this.name === 'dFdx' || this.name === 'dFdy' || this.name === 'fwidth') {\r\n      ctx.extensions.add('GL_OES_standard_derivatives');\r\n    } else if (this.name === 'texture2DLodEXT' || this.name === 'texture2DProjLodEXT' || this.name === 'textureCubeLodEXT' || this.name === 'texture2DGradEXT' || this.name === 'texture2DProjGradEXT' || this.name === 'textureCubeGradEXT') {\r\n      ctx.extensions.add('GL_EXT_shader_texture_lod');\r\n    }\r\n    const args = this.args.map(arg => unbracket(arg.toWebGL(indent, ctx)));\r\n    return `${this.isStatement ? indent : ''}${this.name}(${args.join(',')})${this.isStatement ? ';\\n' : ''}`;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    const args = this.args.map(arg => unbracket(arg.toWebGL2(indent, ctx)));\r\n    return `${this.isStatement ? indent : ''}${this.name}(${args.join(',')})${this.isStatement ? ';\\n' : ''}`;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    let thisArgs = this.args.filter(val => {\r\n      const type = val.getType();\r\n      if ((val instanceof ASTPrimitive)\r\n        && type.isStructType()\r\n        && ctx.types.findIndex(t => (t instanceof ASTStructDefine) && t.type.structName === type.structName) < 0) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n    const overloads = ctx.global.$getFunction(this.name)?.overloads;\r\n    if (overloads) {\r\n      let argsNew: ASTExpression[];\r\n      for (const overload of overloads) {\r\n        const convertedArgs = convertArgs(thisArgs, overload);\r\n        if (convertedArgs) {\r\n          argsNew = convertedArgs.args;\r\n          break;\r\n        }\r\n      }\r\n      if (!argsNew) {\r\n        throw new Error(`no matching overloading found for function '${this.name}'`);\r\n      }\r\n      thisArgs = argsNew;\r\n    }\r\n    const args = thisArgs.map(arg => unbracket(arg.toWGSL(indent, ctx)));\r\n    return `${this.isStatement ? indent : ''}${this.name}(${args.join(',')})${this.isStatement ? ';\\n' : ''}`;\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return `${this.name}(...)`;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTDeclareVar extends ShaderAST {\r\n  value: ASTPrimitive;\r\n  group: number;\r\n  binding: number;\r\n  blockName: string;\r\n  constructor(exp: ASTPrimitive) {\r\n    super();\r\n    this.value = exp;\r\n    this.group = 0;\r\n    this.binding = 0;\r\n  }\r\n  isReference(): boolean {\r\n    return true;\r\n  }\r\n  isPointer(): boolean {\r\n    return this.value.getType().isPointerType();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    let prefix = '';\r\n    let builtin = false;\r\n    let valueType = this.value.getType();\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n        if (ctx.type === ShaderType.Vertex) {\r\n          prefix = 'attribute ';\r\n          ctx.defines.push(`#define ${this.value.name} ${semanticToAttrib(ctx.vertexAttributes[this.value.value.$location])}\\n`);\r\n        } else {\r\n          prefix = 'varying ';\r\n          // ctx.defines.push(`#define ${this.value.$str} ch_varying_${this.value.$location}\\n`);\r\n        }\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n        if (ctx.type === ShaderType.Vertex) {\r\n          prefix = 'varying ';\r\n          // ctx.defines.push(`#define ${this.value.$str} ch_varying_${this.value.$location}\\n`);\r\n        } else {\r\n          builtin = true;\r\n          if (ctx.mrt) {\r\n            ctx.defines.push(`#define ${this.value.name} gl_FragData[${this.value.value.$location}]\\n`);\r\n            ctx.extensions.add('GL_EXT_draw_buffers');\r\n          } else {\r\n            ctx.defines.push(`#define ${this.value.name} gl_FragColor\\n`);\r\n          }\r\n        }\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n        prefix = 'uniform ';\r\n        valueType = ctx.typeReplacement?.get(this.value.value) || valueType;\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        throw new Error(`invalid variable declare type: ${this.value.name}`)\r\n    }\r\n    if (!builtin) {\r\n      return `${indent}${prefix}${valueType.toTypeName('webgl', this.value.name)};\\n`;\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    let prefix = '';\r\n    const builtin = false;\r\n    let valueType = this.value.getType();\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n        prefix = 'in ';\r\n        if (ctx.type === ShaderType.Vertex) {\r\n          ctx.defines.push(`#define ${this.value.name} ${semanticToAttrib(ctx.vertexAttributes[this.value.value.$location])}\\n`);\r\n        } else {\r\n          // ctx.defines.push(`#define ${this.value.$str} ch_varying_${this.value.$location}\\n`);\r\n        }\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n        prefix = 'out ';\r\n        if (ctx.type === ShaderType.Vertex) {\r\n          // ctx.defines.push(`#define ${this.value.$str} ch_varying_${this.value.$location}\\n`);\r\n        } else {\r\n          prefix = `layout(location = ${this.value.value.$location}) out `;\r\n        }\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n        if (valueType.isStructType()) {\r\n          if (valueType.layout !== 'std140') {\r\n            throw new errors.PBASTError(this, 'uniform buffer layout must be std140');\r\n          }\r\n          return `${indent}layout(std140) uniform ${this.blockName} { ${valueType.structName} ${this.value.name}; };\\n`;\r\n        } else {\r\n          valueType = ctx.typeReplacement?.get(this.value.value) || valueType;\r\n          return `${indent}uniform ${valueType.toTypeName('webgl2', this.value.name)};\\n`;\r\n        }\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        throw new Error(`invalid variable declare type: ${this.value.name}`);\r\n    }\r\n    if (!builtin) {\r\n      return `${indent}${prefix}${this.value.getType().toTypeName('webgl2', this.value.name)};\\n`;\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    let prefix: string;\r\n    const builtin = false;\r\n    const isBlock = this.value.getType().isPrimitiveType() || this.value.getType().isStructType() || this.value.getType().isArrayType();\r\n    switch (this.value.value.$declareType) {\r\n      case DeclareType.DECLARE_TYPE_IN:\r\n      case DeclareType.DECLARE_TYPE_OUT:\r\n        // prefix = `@location(${this.value.value.$location}) var<out> `;\r\n        throw new Error(`Internal error`);\r\n      case DeclareType.DECLARE_TYPE_UNIFORM:\r\n        prefix = `@group(${this.group}) @binding(${this.binding}) var${isBlock ? '<uniform>' : ''} `;\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_STORAGE:\r\n        prefix = `@group(${this.group}) @binding(${this.binding}) var<storage, ${this.value.writable ? 'read_write' : 'read'}> `;\r\n        break;\r\n      case DeclareType.DECLARE_TYPE_WORKGROUP:\r\n        prefix = `var<workgroup> `;\r\n        break;\r\n      default:\r\n        prefix = `${this.value.getType().isPointerType() ? 'let' : 'var'}${this.value.value.$global && !this.value.getType().isPointerType() ? '<private>' : ''} `;\r\n    }\r\n    if (!builtin) {\r\n      const type = this.value.getType();\r\n      const structName = type.isStructType() ? type.structName : null;\r\n      if (structName && ctx.types.findIndex(val => val instanceof ASTStructDefine && val.type.structName === structName) < 0) {\r\n        return '';\r\n      } else {\r\n        return `${indent}${prefix}${type.toTypeName('webgpu', this.value.name)};\\n`;\r\n      }\r\n    }\r\n  }\r\n  toString(deviceType: DeviceType): string {\r\n    return this.value.toString(deviceType);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTFunction extends ASTScope {\r\n  isBuiltin: boolean;\r\n  isMainFunc: boolean;\r\n  name: string;\r\n  returnType: typeinfo.PBTypeInfo;\r\n  args: ASTFunctionParameter[];\r\n  funcOverloads: typeinfo.PBFunctionTypeInfo[];\r\n  builtins: string[];\r\n  constructor(name: string, args: ASTFunctionParameter[], isMainFunc: boolean, isBuiltin = false, overloads: typeinfo.PBFunctionTypeInfo[] = null) {\r\n    super();\r\n    this.name = name;\r\n    this.returnType = undefined;\r\n    this.args = args;\r\n    this.args.forEach(arg => {\r\n      if (!(arg instanceof ASTFunctionParameter)) {\r\n        throw new Error('invalid function argument type');\r\n      }\r\n    });\r\n    this.builtins = [];\r\n    this.isBuiltin = isBuiltin;\r\n    this.isMainFunc = isMainFunc;\r\n    this.funcOverloads = null;\r\n  }\r\n  get overloads(): typeinfo.PBFunctionTypeInfo[] {\r\n    return this.getOverloads();\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext) {\r\n    if (!this.isBuiltin) {\r\n      let str = '';\r\n      const p: string[] = [];\r\n      for (const param of this.args) {\r\n        let exp: PBShaderExp;\r\n        let name: string;\r\n        let qualifier: string;\r\n        if (param.paramAST instanceof ASTPrimitive) {\r\n          exp = param.paramAST.value;\r\n          name = param.paramAST.name;\r\n          qualifier = '';\r\n        } else {\r\n          exp = (param.paramAST.value as ASTPrimitive).value;\r\n          name = (param.paramAST.value as ASTPrimitive).name;\r\n          qualifier = 'inout ';\r\n        }\r\n        p.push(`${qualifier}${param.getType().toTypeName('webgl', name)}`);\r\n      }\r\n      str += `${indent}${this.returnType.toTypeName('webgl')} ${this.name}(${p.join(',')}) {\\n`;\r\n      str += super.toWebGL(indent + '  ', ctx);\r\n      str += `${indent}}\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext) {\r\n    if (!this.isBuiltin) {\r\n      let str = '';\r\n      const p: string[] = [];\r\n      for (const param of this.args) {\r\n        let exp: PBShaderExp;\r\n        let name: string;\r\n        let qualifier: string;\r\n        if (param.paramAST instanceof ASTPrimitive) {\r\n          exp = param.paramAST.value;\r\n          name = param.paramAST.name;\r\n          qualifier = '';\r\n        } else {\r\n          exp = (param.paramAST.value as ASTPrimitive).value;\r\n          name = (param.paramAST.value as ASTPrimitive).name;\r\n          qualifier = 'inout ';\r\n        }\r\n        p.push(`${qualifier}${param.getType().toTypeName('webgl2', name)}`);\r\n      }\r\n      str += `${indent}${this.returnType.toTypeName('webgl2')} ${this.name}(${p.join(',')}) {\\n`;\r\n      str += super.toWebGL2(indent + '  ', ctx);\r\n      str += `${indent}}\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext) {\r\n    if (!this.isBuiltin) {\r\n      let str = '';\r\n      const p: string[] = [...this.builtins];\r\n      for (const param of this.args) {\r\n        const name = param.paramAST instanceof ASTPrimitive ? param.paramAST.name : (param.paramAST.value as ASTPrimitive).name;\r\n        const paramType = param.paramAST instanceof ASTPrimitive ? param.paramAST.getType() : (param.paramAST.value as ASTPrimitive).getType();\r\n        const dataType = paramType.isPointerType() ? paramType.pointerType : paramType;\r\n        if (dataType.isStructType() && ctx.types.findIndex(t => (t instanceof ASTStructDefine) && t.type.structName === dataType.structName) < 0) {\r\n          continue;\r\n        }\r\n        p.push(`${paramType.toTypeName('webgpu', name)}`);\r\n      }\r\n      let t = '';\r\n      if (this.isMainFunc) {\r\n        switch (ctx.type) {\r\n          case ShaderType.Vertex: t = '@vertex '; break;\r\n          case ShaderType.Fragment: t = '@fragment '; break;\r\n          case ShaderType.Compute: t = `@compute @workgroup_size(${ctx.workgroupSize[0]}, ${ctx.workgroupSize[1]}, ${ctx.workgroupSize[2]}) `; break;\r\n        }\r\n      }\r\n      const retName = this.returnType.isVoidType() ? null : this.returnType.toTypeName('webgpu');\r\n      const retStr = retName ? ` -> ${retName}` : '';\r\n      str += `${indent}${t}fn ${this.name}(${p.join(',')})${retStr} {\\n`;\r\n      str += super.toWGSL(indent + '  ', ctx);\r\n      str += `${indent}}\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  private getOverloads(): typeinfo.PBFunctionTypeInfo[] {\r\n    if (!this.funcOverloads && this.args) {\r\n      this.funcOverloads = this.args ? [new typeinfo.PBFunctionTypeInfo(this.name, this.returnType, this.args.map(arg => {\r\n        return {\r\n          type: arg.paramAST.getType(),\r\n          byRef: arg.paramAST instanceof ASTReferenceOf\r\n        };\r\n      }))] : [];\r\n    }\r\n    return this.funcOverloads;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTIf extends ASTScope {\r\n  keyword: string;\r\n  condition: ASTExpression;\r\n  nextElse: ASTIf;\r\n  constructor(keyword: string, condition: ASTExpression) {\r\n    super();\r\n    this.keyword = keyword;\r\n    this.condition = condition;\r\n    this.nextElse = null;\r\n    if (this.condition instanceof ASTCallFunction) {\r\n      this.condition.isStatement = false;\r\n    }\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}${this.keyword} ${this.condition ? '(' + unbracket(this.condition.toWebGL(indent, ctx)) + ')' : ''} {\\n`;\r\n    str += super.toWebGL(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    if (this.nextElse) {\r\n      str += this.nextElse.toWebGL(indent, ctx);\r\n    }\r\n    return str;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}${this.keyword} ${this.condition ? '(' + unbracket(this.condition.toWebGL2(indent, ctx)) + ')' : ''} {\\n`;\r\n    str += super.toWebGL2(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    if (this.nextElse) {\r\n      str += this.nextElse.toWebGL2(indent, ctx);\r\n    }\r\n    return str;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}${this.keyword} ${this.condition ? '(' + unbracket(this.condition.toWGSL(indent, ctx)) + ')' : ''} {\\n`;\r\n    str += super.toWGSL(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    if (this.nextElse) {\r\n      str += this.nextElse.toWGSL(indent, ctx);\r\n    }\r\n    return str;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTRange extends ASTScope {\r\n  init: ASTPrimitive;\r\n  start: ASTExpression;\r\n  end: ASTExpression;\r\n  open: boolean;\r\n  constructor(init: ASTPrimitive, start: ASTExpression, end: ASTExpression, open: boolean) {\r\n    super();\r\n    this.init = init;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.open = open;\r\n    this.statements = [];\r\n    if (this.start instanceof ASTCallFunction) {\r\n      this.start.isStatement = false;\r\n    }\r\n    if (this.end instanceof ASTCallFunction) {\r\n      this.end.isStatement = false;\r\n    }\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    const init = this.init.getType().toTypeName('webgl', this.init.name);\r\n    const start = unbracket(this.start.toWebGL(indent, ctx));\r\n    const end = unbracket(this.end.toWebGL(indent, ctx));\r\n    const comp = this.open ? '<' : '<=';\r\n    let str = `${indent}for (${init} = ${start}; ${this.init.name} ${comp} ${end}; ${this.init.name}++) {\\n`;\r\n    str += super.toWebGL(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    const init = this.init.getType().toTypeName('webgl2', this.init.name);\r\n    const start = unbracket(this.start.toWebGL2(indent, ctx));\r\n    const end = unbracket(this.end.toWebGL2(indent, ctx));\r\n    const comp = this.open ? '<' : '<=';\r\n    let str = `${indent}for (${init} = ${start}; ${this.init.name} ${comp} ${end}; ${this.init.name}++) {\\n`;\r\n    str += super.toWebGL2(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    const init = `var ${this.init.getType().toTypeName('webgpu', this.init.name)}`;\r\n    const start = unbracket(this.start.toWGSL(indent, ctx));\r\n    const end = unbracket(this.end.toWGSL(indent, ctx));\r\n    const incr = new ASTScalar(1, this.init.getType() as typeinfo.PBPrimitiveTypeInfo).toWGSL(indent, ctx);\r\n    const comp = this.open ? '<' : '<=';\r\n    let str = `${indent}for (${init} = ${start}; ${this.init.name} ${comp} ${end}; ${this.init.name} = ${this.init.name} + ${incr}) {\\n`;\r\n    str += super.toWGSL(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTDoWhile extends ASTScope {\r\n  condition: ASTExpression;\r\n  constructor(condition: ASTExpression) {\r\n    super();\r\n    this.condition = condition;\r\n    if (this.condition instanceof ASTCallFunction) {\r\n      this.condition.isStatement = false;\r\n    }\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}do {\\n`;\r\n    str += super.toWebGL(indent + ' ', ctx);\r\n    str += `${indent}} while(${unbracket(this.condition.toWebGL(indent, ctx))});\\n`;\r\n    return str;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}do {\\n`;\r\n    str += super.toWebGL2(indent + ' ', ctx);\r\n    str += `${indent}} while(${unbracket(this.condition.toWebGL2(indent, ctx))});\\n`;\r\n    return str;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}loop {\\n`;\r\n    str += super.toWGSL(indent + ' ', ctx);\r\n    str += `${indent}  if (!(${unbracket(this.condition.toWGSL(indent, ctx))})) { break; }\\n`;\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTWhile extends ASTScope {\r\n  condition: ASTExpression;\r\n  constructor(condition: ASTExpression) {\r\n    super();\r\n    this.condition = condition;\r\n    if (this.condition instanceof ASTCallFunction) {\r\n      this.condition.isStatement = false;\r\n    }\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}while(${unbracket(this.condition.toWebGL(indent, ctx))}) {\\n`;\r\n    str += super.toWebGL(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}while(${unbracket(this.condition.toWebGL2(indent, ctx))}) {\\n`;\r\n    str += super.toWebGL2(indent + '  ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    let str = `${indent}loop {\\n`;\r\n    str += `${indent}  if (!(${unbracket(this.condition.toWGSL(indent, ctx))})) { break; }\\n`;\r\n    str += super.toWGSL(indent + ' ', ctx);\r\n    str += `${indent}}\\n`;\r\n    return str;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class ASTStructDefine extends ShaderAST {\r\n  type: typeinfo.PBStructTypeInfo;\r\n  prefix: string[];\r\n  builtin: boolean;\r\n  constructor(type: typeinfo.PBStructTypeInfo, builtin: boolean) {\r\n    super();\r\n    this.prefix = null;\r\n    this.builtin = builtin;\r\n    this.type = type;\r\n  }\r\n  getType(): typeinfo.PBStructTypeInfo {\r\n    return this.type;\r\n  }\r\n  toWebGL(indent: string, ctx: ASTContext): string {\r\n    if (!this.builtin) {\r\n      let str = `${indent}struct ${this.type.structName} {\\n`;\r\n      for (const arg of this.type.structMembers) {\r\n        str += `${indent}  ${arg.type.toTypeName('webgl', arg.name)};\\n`;\r\n      }\r\n      str += `${indent}};\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  toWebGL2(indent: string, ctx: ASTContext): string {\r\n    if (!this.builtin) {\r\n      let str = `${indent}struct ${this.type.structName} {\\n`;\r\n      for (const arg of this.type.structMembers) {\r\n        str += `${indent}  ${arg.type.toTypeName('webgl2', arg.name)};\\n`;\r\n      }\r\n      str += `${indent}};\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  toWGSL(indent: string, ctx: ASTContext): string {\r\n    if (!this.builtin) {\r\n      let str = `${indent}struct ${this.type.structName} {\\n`;\r\n      str += this.type.structMembers.map((arg, i) => {\r\n        const prefix = this.prefix ? this.prefix[i] : '';\r\n        const sizePrefix = arg.type.getLayoutSize(this.type.layout) !== arg.type.getLayoutSize('default') ? `@size(${arg.type.getLayoutSize(this.type.layout)}) ` : '';\r\n        const alignPrefix = i > 0 && arg.type.getLayoutAlignment(this.type.layout) !== arg.type.getLayoutAlignment('default') ? `@align(${arg.type.getLayoutAlignment(this.type.layout)}) ` : '';\r\n        return `${indent}  ${prefix}${alignPrefix}${sizePrefix}${arg.type.toTypeName('webgpu', arg.name)}`;\r\n      }).join(',\\n');\r\n      str += `\\n${indent}};\\n`;\r\n      return str;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n\r\nfunction convertArgs(args: (number | boolean | ASTExpression)[], overload: typeinfo.PBFunctionTypeInfo): { name: string, args: ASTExpression[] } {\r\n  if (args.length !== overload.argTypes.length) {\r\n    return null;\r\n  }\r\n  const result: ASTExpression[] = [];\r\n  for (let i = 0; i < args.length; i++) {\r\n    const isRef = !!overload.argTypes[i].byRef;\r\n    const argType = overload.argTypes[i].type;\r\n    const arg = args[i];\r\n    if (typeof arg === 'number') {\r\n      if (!isRef && argType.isPrimitiveType() && argType.isScalarType() && argType.primitiveType !== typeinfo.PBPrimitiveType.BOOL) {\r\n        result.push(new ASTScalar(arg, argType))\r\n      } else {\r\n        return null;\r\n      }\r\n    } else if (typeof arg === 'boolean') {\r\n      if (!isRef && argType.isPrimitiveType() && argType.primitiveType === typeinfo.PBPrimitiveType.BOOL) {\r\n        result.push(new ASTScalar(arg, argType));\r\n      } else {\r\n        return null;\r\n      }\r\n    } else if (argType.typeId === arg.getType().typeId) {\r\n      if (isRef) {\r\n        arg.markWritable();\r\n        result.push(new ASTAddressOf(arg));\r\n      } else {\r\n        result.push(arg);\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return { name: overload.name, args: result };\r\n}\r\n\r\n"],"names":["typeinfo.PBTextureType","typeinfo.PBPrimitiveTypeInfo","typeinfo.PBPrimitiveType","typeinfo.PBPointerTypeInfo","typeinfo.PBAddressSpace","errors.PBASTError","errors.PBTypeCastError","typeinfo.typeI32","typeinfo.typeU32","typeinfo.typeF32","typeinfo.typeBool","errors.PBInternalError","errors.PBParamTypeError","typeinfo.PBFunctionTypeInfo"],"mappings":"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"}