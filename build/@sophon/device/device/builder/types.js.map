{"version":3,"file":"types.js","sources":["../../../../../libs/device/src/device/builder/types.ts"],"sourcesContent":["import { TextureFormat } from '../base_types';\nimport { DeviceType } from '../device';\nimport type { UniformBufferLayout } from '../gpuobject';\n\nexport const F16_BITMASK = 1\nexport const F32_BITMASK = 2;\nexport const BOOL_BITMASK = 3;\nexport const I8_BITMASK = 4;\nexport const I16_BITMASK = 5;\nexport const I32_BITMASK = 6;\nexport const U8_BITMASK = 7;\nexport const U16_BITMASK = 8;\nexport const U32_BITMASK = 9;\nexport const SCALAR_TYPE_BITMASK = 15;\nexport const ROWS_BITMASK = 7;\nexport const ROWS_BITSHIFT = 4;\nexport const COLS_BITMASK = 7;\nexport const COLS_BITSHIFT = 7;\nexport const NORM_BITMASK = 1;\nexport const NORM_BITSHIFT = 10;\n\ntype LayoutableType = PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo;\n\nexport interface ILayoutableType {\n  getLayoutAlignment(layout: PBStructLayout): number;\n  getLayoutSize(layout: PBStructLayout): number\n}\n\nfunction align(n: number, alignment: number): number {\n  return (n + alignment - 1) & ~(alignment - 1);\n}\n\nfunction getAlignment(type: LayoutableType): number {\n  if (type.isPrimitiveType()) {\n    return type.isScalarType() ? 4 : 1 << Math.min(4, (type.cols + 1));\n  } else if (type.isArrayType()) {\n    return getAlignment(type.elementType);\n  } else {\n    let alignment = 0;\n    for (const member of type.structMembers) {\n      alignment = Math.max(alignment, getAlignment(member.type));\n    }\n    return alignment;\n  }\n}\nfunction getAlignmentPacked(type: LayoutableType): number {\n  return 1;\n}\nfunction getSize(type: LayoutableType): number {\n  if (type.isPrimitiveType()) {\n    return type.isMatrixType()\n      ? type.rows * getAlignment(PBPrimitiveTypeInfo.getCachedTypeInfo(type.resizeType(1, type.cols)))\n      : 4 * type.cols;\n  } else if (type.isArrayType()) {\n    return type.dimension * align(getSize(type.elementType), getAlignment(type.elementType));\n  } else {\n    let size = 0;\n    let structAlignment = 0;\n    for (const member of type.structMembers) {\n      const memberAlignment = getAlignment(member.type);\n      size = align(size, memberAlignment);\n      size += getSize(member.type);\n      structAlignment = Math.max(structAlignment, memberAlignment);\n    }\n    return align(size, structAlignment);\n  }\n}\nfunction getSizePacked(type: LayoutableType): number {\n  if (type.isPrimitiveType()) {\n    let scalarSize: number;\n    switch (type.scalarType) {\n      case PBPrimitiveType.U8:\n      case PBPrimitiveType.U8_NORM:\n      case PBPrimitiveType.I8:\n      case PBPrimitiveType.I8_NORM:\n        scalarSize = 1;\n        break;\n      case PBPrimitiveType.F16:\n      case PBPrimitiveType.I16:\n      case PBPrimitiveType.I16_NORM:\n      case PBPrimitiveType.U16:\n      case PBPrimitiveType.U16_NORM:\n        scalarSize = 2;\n        break;\n      default:\n        scalarSize = 4;\n        break;\n    }\n    return type.rows * type.cols * scalarSize;\n  } else if (type.isArrayType()) {\n    return type.dimension * getSizePacked(type.elementType);\n  } else {\n    let size = 0;\n    for (const member of type.structMembers) {\n      size += getSizePacked(member.type);\n    }\n    return size;\n  }\n}\n\nexport function makePrimitiveType(scalarTypeMask: number, rows: number, cols: number, norm: 0 | 1): PBPrimitiveType {\n  return scalarTypeMask | (rows << ROWS_BITSHIFT) | (cols << COLS_BITSHIFT) | (norm << NORM_BITSHIFT);\n}\n\nfunction typeToTypedArray(type: LayoutableType): PBPrimitiveType {\n  if (type.isPrimitiveType()) {\n    return type.scalarType;\n  } else if (type.isArrayType()) {\n    return typeToTypedArray(type.elementType);\n  } else {\n    return PBPrimitiveType.U8;\n  }\n}\n\nexport type PBStructLayout = 'default' | 'std140' | 'packed';\n\nexport enum PBPrimitiveType {\n  NONE = 0,\n  F16 = makePrimitiveType(F16_BITMASK, 1, 1, 0),\n  F16VEC2 = makePrimitiveType(F16_BITMASK, 1, 2, 0),\n  F16VEC3 = makePrimitiveType(F16_BITMASK, 1, 3, 0),\n  F16VEC4 = makePrimitiveType(F16_BITMASK, 1, 4, 0),\n  F32 = makePrimitiveType(F32_BITMASK, 1, 1, 0),\n  F32VEC2 = makePrimitiveType(F32_BITMASK, 1, 2, 0),\n  F32VEC3 = makePrimitiveType(F32_BITMASK, 1, 3, 0),\n  F32VEC4 = makePrimitiveType(F32_BITMASK, 1, 4, 0),\n  BOOL = makePrimitiveType(BOOL_BITMASK, 1, 1, 0),\n  BVEC2 = makePrimitiveType(BOOL_BITMASK, 1, 2, 0),\n  BVEC3 = makePrimitiveType(BOOL_BITMASK, 1, 3, 0),\n  BVEC4 = makePrimitiveType(BOOL_BITMASK, 1, 4, 0),\n  I8 = makePrimitiveType(I8_BITMASK, 1, 1, 0),\n  I8VEC2 = makePrimitiveType(I8_BITMASK, 1, 2, 0),\n  I8VEC3 = makePrimitiveType(I8_BITMASK, 1, 3, 0),\n  I8VEC4 = makePrimitiveType(I8_BITMASK, 1, 4, 0),\n  I8_NORM = makePrimitiveType(I8_BITMASK, 1, 1, 1),\n  I8VEC2_NORM = makePrimitiveType(I8_BITMASK, 1, 2, 1),\n  I8VEC3_NORM = makePrimitiveType(I8_BITMASK, 1, 3, 1),\n  I8VEC4_NORM = makePrimitiveType(I8_BITMASK, 1, 4, 1),\n  I16 = makePrimitiveType(I16_BITMASK, 1, 1, 0),\n  I16VEC2 = makePrimitiveType(I16_BITMASK, 1, 2, 0),\n  I16VEC3 = makePrimitiveType(I16_BITMASK, 1, 3, 0),\n  I16VEC4 = makePrimitiveType(I16_BITMASK, 1, 4, 0),\n  I16_NORM = makePrimitiveType(I16_BITMASK, 1, 1, 1),\n  I16VEC2_NORM = makePrimitiveType(I16_BITMASK, 1, 2, 1),\n  I16VEC3_NORM = makePrimitiveType(I16_BITMASK, 1, 3, 1),\n  I16VEC4_NORM = makePrimitiveType(I16_BITMASK, 1, 4, 1),\n  I32 = makePrimitiveType(I32_BITMASK, 1, 1, 0),\n  I32VEC2 = makePrimitiveType(I32_BITMASK, 1, 2, 0),\n  I32VEC3 = makePrimitiveType(I32_BITMASK, 1, 3, 0),\n  I32VEC4 = makePrimitiveType(I32_BITMASK, 1, 4, 0),\n  I32_NORM = makePrimitiveType(I32_BITMASK, 1, 1, 1),\n  I32VEC2_NORM = makePrimitiveType(I32_BITMASK, 1, 2, 1),\n  I32VEC3_NORM = makePrimitiveType(I32_BITMASK, 1, 3, 1),\n  I32VEC4_NORM = makePrimitiveType(I32_BITMASK, 1, 4, 1),\n  U8 = makePrimitiveType(U8_BITMASK, 1, 1, 0),\n  U8VEC2 = makePrimitiveType(U8_BITMASK, 1, 2, 0),\n  U8VEC3 = makePrimitiveType(U8_BITMASK, 1, 3, 0),\n  U8VEC4 = makePrimitiveType(U8_BITMASK, 1, 4, 0),\n  U8_NORM = makePrimitiveType(U8_BITMASK, 1, 1, 1),\n  U8VEC2_NORM = makePrimitiveType(U8_BITMASK, 1, 2, 1),\n  U8VEC3_NORM = makePrimitiveType(U8_BITMASK, 1, 3, 1),\n  U8VEC4_NORM = makePrimitiveType(U8_BITMASK, 1, 4, 1),\n  U16 = makePrimitiveType(U16_BITMASK, 1, 1, 0),\n  U16VEC2 = makePrimitiveType(U16_BITMASK, 1, 2, 0),\n  U16VEC3 = makePrimitiveType(U16_BITMASK, 1, 3, 0),\n  U16VEC4 = makePrimitiveType(U16_BITMASK, 1, 4, 0),\n  U16_NORM = makePrimitiveType(U16_BITMASK, 1, 1, 1),\n  U16VEC2_NORM = makePrimitiveType(U16_BITMASK, 1, 2, 1),\n  U16VEC3_NORM = makePrimitiveType(U16_BITMASK, 1, 3, 1),\n  U16VEC4_NORM = makePrimitiveType(U16_BITMASK, 1, 4, 1),\n  U32 = makePrimitiveType(U32_BITMASK, 1, 1, 0),\n  U32VEC2 = makePrimitiveType(U32_BITMASK, 1, 2, 0),\n  U32VEC3 = makePrimitiveType(U32_BITMASK, 1, 3, 0),\n  U32VEC4 = makePrimitiveType(U32_BITMASK, 1, 4, 0),\n  U32_NORM = makePrimitiveType(U32_BITMASK, 1, 1, 1),\n  U32VEC2_NORM = makePrimitiveType(U32_BITMASK, 1, 2, 1),\n  U32VEC3_NORM = makePrimitiveType(U32_BITMASK, 1, 3, 1),\n  U32VEC4_NORM = makePrimitiveType(U32_BITMASK, 1, 4, 1),\n  MAT2 = makePrimitiveType(F32_BITMASK, 2, 2, 0),\n  MAT2x3 = makePrimitiveType(F32_BITMASK, 2, 3, 0),\n  MAT2x4 = makePrimitiveType(F32_BITMASK, 2, 4, 0),\n  MAT3x2 = makePrimitiveType(F32_BITMASK, 3, 2, 0),\n  MAT3 = makePrimitiveType(F32_BITMASK, 3, 3, 0),\n  MAT3x4 = makePrimitiveType(F32_BITMASK, 3, 4, 0),\n  MAT4x2 = makePrimitiveType(F32_BITMASK, 4, 2, 0),\n  MAT4x3 = makePrimitiveType(F32_BITMASK, 4, 3, 0),\n  MAT4 = makePrimitiveType(F32_BITMASK, 4, 4, 0),\n}\n\nconst primitiveTypeMapWebGL = {\n  [PBPrimitiveType.F32]: 'float',\n  [PBPrimitiveType.F32VEC2]: 'vec2',\n  [PBPrimitiveType.F32VEC3]: 'vec3',\n  [PBPrimitiveType.F32VEC4]: 'vec4',\n  [PBPrimitiveType.BOOL]: 'bool',\n  [PBPrimitiveType.BVEC2]: 'bvec2',\n  [PBPrimitiveType.BVEC3]: 'bvec3',\n  [PBPrimitiveType.BVEC4]: 'bvec4',\n  [PBPrimitiveType.I32]: 'int',\n  [PBPrimitiveType.I32VEC2]: 'ivec2',\n  [PBPrimitiveType.I32VEC3]: 'ivec3',\n  [PBPrimitiveType.I32VEC4]: 'ivec4',\n  [PBPrimitiveType.U32]: 'uint',\n  [PBPrimitiveType.U32VEC2]: 'uvec2',\n  [PBPrimitiveType.U32VEC3]: 'uvec3',\n  [PBPrimitiveType.U32VEC4]: 'uvec4',\n  [PBPrimitiveType.MAT2]: 'mat2',\n  [PBPrimitiveType.MAT2x3]: 'mat2x3',\n  [PBPrimitiveType.MAT2x4]: 'mat2x4',\n  [PBPrimitiveType.MAT3x2]: 'mat3x2',\n  [PBPrimitiveType.MAT3]: 'mat3',\n  [PBPrimitiveType.MAT3x4]: 'mat3x4',\n  [PBPrimitiveType.MAT4x2]: 'mat4x2',\n  [PBPrimitiveType.MAT4x3]: 'mat4x3',\n  [PBPrimitiveType.MAT4]: 'mat4',\n};\n\nconst primitiveTypeMapWGSL = {\n  [PBPrimitiveType.F32]: 'f32',\n  [PBPrimitiveType.F32VEC2]: 'vec2<f32>',\n  [PBPrimitiveType.F32VEC3]: 'vec3<f32>',\n  [PBPrimitiveType.F32VEC4]: 'vec4<f32>',\n  [PBPrimitiveType.BOOL]: 'bool',\n  [PBPrimitiveType.BVEC2]: 'vec2<bool>',\n  [PBPrimitiveType.BVEC3]: 'vec3<bool>',\n  [PBPrimitiveType.BVEC4]: 'vec4<bool>',\n  [PBPrimitiveType.I32]: 'i32',\n  [PBPrimitiveType.I32VEC2]: 'vec2<i32>',\n  [PBPrimitiveType.I32VEC3]: 'vec3<i32>',\n  [PBPrimitiveType.I32VEC4]: 'vec4<i32>',\n  [PBPrimitiveType.U32]: 'u32',\n  [PBPrimitiveType.U32VEC2]: 'vec2<u32>',\n  [PBPrimitiveType.U32VEC3]: 'vec3<u32>',\n  [PBPrimitiveType.U32VEC4]: 'vec4<u32>',\n  [PBPrimitiveType.MAT2]: 'mat2x2<f32>',\n  [PBPrimitiveType.MAT2x3]: 'mat2x3<f32>',\n  [PBPrimitiveType.MAT2x4]: 'mat2x4<f32>',\n  [PBPrimitiveType.MAT3x2]: 'mat3x2<f32>',\n  [PBPrimitiveType.MAT3]: 'mat3x3<f32>',\n  [PBPrimitiveType.MAT3x4]: 'mat3x4<f32>',\n  [PBPrimitiveType.MAT4x2]: 'mat4x2<f32>',\n  [PBPrimitiveType.MAT4x3]: 'mat4x3<f32>',\n  [PBPrimitiveType.MAT4]: 'mat4x4<f32>',\n};\n\nconst BITFLAG_1D = (1 << 0);\nconst BITFLAG_2D = (1 << 1);\nconst BITFLAG_3D = (1 << 2);\nconst BITFLAG_CUBE = (1 << 3);\nconst BITFLAG_ARRAY = (1 << 4);\nconst BITFLAG_MULTISAMPLED = (1 << 5);\nconst BITFLAG_STORAGE = (1 << 6);\nconst BITFLAG_DEPTH = (1 << 7);\nconst BITFLAG_FLOAT = (1 << 8);\nconst BITFLAG_INT = (1 << 9);\nconst BITFLAG_UINT = (1 << 10);\nconst BITFLAG_EXTERNAL = (1 << 11);\n\nexport enum PBTextureType {\n  TEX_1D = BITFLAG_1D | BITFLAG_FLOAT,\n  ITEX_1D = BITFLAG_1D | BITFLAG_INT,\n  UTEX_1D = BITFLAG_1D | BITFLAG_UINT,\n  TEX_2D = BITFLAG_2D | BITFLAG_FLOAT,\n  ITEX_2D = BITFLAG_2D | BITFLAG_INT,\n  UTEX_2D = BITFLAG_2D | BITFLAG_UINT,\n  TEX_2D_ARRAY = BITFLAG_2D | BITFLAG_FLOAT | BITFLAG_ARRAY,\n  ITEX_2D_ARRAY = BITFLAG_2D | BITFLAG_INT | BITFLAG_ARRAY,\n  UTEX_2D_ARRAY = BITFLAG_2D | BITFLAG_UINT | BITFLAG_ARRAY,\n  TEX_3D = BITFLAG_3D | BITFLAG_FLOAT,\n  ITEX_3D = BITFLAG_3D | BITFLAG_INT,\n  UTEX_3D = BITFLAG_3D | BITFLAG_UINT,\n  TEX_CUBE = BITFLAG_CUBE | BITFLAG_FLOAT,\n  ITEX_CUBE = BITFLAG_CUBE | BITFLAG_INT,\n  UTEX_CUBE = BITFLAG_CUBE | BITFLAG_UINT,\n  TEX_CUBE_ARRAY = BITFLAG_CUBE | BITFLAG_FLOAT | BITFLAG_ARRAY,\n  ITEX_CUBE_ARRAY = BITFLAG_CUBE | BITFLAG_INT | BITFLAG_ARRAY,\n  UTEX_CUBE_ARRAY = BITFLAG_CUBE | BITFLAG_UINT | BITFLAG_ARRAY,\n  TEX_MULTISAMPLED_2D = BITFLAG_2D | BITFLAG_FLOAT | BITFLAG_MULTISAMPLED,\n  ITEX_MULTISAMPLED_2D = BITFLAG_2D | BITFLAG_INT | BITFLAG_MULTISAMPLED,\n  UTEX_MULTISAMPLED_2D = BITFLAG_2D | BITFLAG_UINT | BITFLAG_MULTISAMPLED,\n  TEX_STORAGE_1D = BITFLAG_1D | BITFLAG_STORAGE,\n  TEX_STORAGE_2D = BITFLAG_2D | BITFLAG_STORAGE,\n  TEX_STORAGE_2D_ARRAY = BITFLAG_2D | BITFLAG_ARRAY | BITFLAG_STORAGE,\n  TEX_STORAGE_3D = BITFLAG_3D | BITFLAG_STORAGE,\n  TEX_DEPTH_2D = BITFLAG_2D | BITFLAG_DEPTH,\n  TEX_DEPTH_2D_ARRAY = BITFLAG_2D | BITFLAG_ARRAY | BITFLAG_DEPTH,\n  TEX_DEPTH_CUBE = BITFLAG_CUBE | BITFLAG_DEPTH,\n  TEX_DEPTH_CUBE_ARRAY = BITFLAG_CUBE | BITFLAG_ARRAY | BITFLAG_DEPTH,\n  TEX_DEPTH_MULTISAMPLED_2D = BITFLAG_2D | BITFLAG_MULTISAMPLED | BITFLAG_DEPTH,\n  TEX_EXTERNAL = BITFLAG_EXTERNAL,\n}\n\nconst textureTypeMapWebGL = {\n  [PBTextureType.TEX_1D]: 'highp sampler2D',\n  [PBTextureType.TEX_2D]: 'highp sampler2D',\n  [PBTextureType.TEX_CUBE]: 'highp samplerCube',\n  [PBTextureType.TEX_EXTERNAL]: 'highp sampler2D',\n};\n\nconst textureTypeMapWebGL2 = {\n  [PBTextureType.TEX_1D]: 'highp sampler2D',\n  [PBTextureType.TEX_2D]: 'highp sampler2D',\n  [PBTextureType.ITEX_1D]: 'highp isampler2D',\n  [PBTextureType.ITEX_2D]: 'highp isampler2D',\n  [PBTextureType.UTEX_1D]: 'highp usampler2D',\n  [PBTextureType.UTEX_2D]: 'highp usampler2D',\n  [PBTextureType.TEX_2D_ARRAY]: 'highp sampler2DArray',\n  [PBTextureType.ITEX_2D_ARRAY]: 'highp isampler2DArray',\n  [PBTextureType.UTEX_2D_ARRAY]: 'highp usampler2DArray',\n  [PBTextureType.TEX_3D]: 'highp sampler3D',\n  [PBTextureType.ITEX_3D]: 'highp isampler3D',\n  [PBTextureType.UTEX_3D]: 'highp usampler3D',\n  [PBTextureType.TEX_CUBE]: 'highp samplerCube',\n  [PBTextureType.ITEX_CUBE]: 'highp isamplerCube',\n  [PBTextureType.UTEX_CUBE]: 'highp usamplerCube',\n  [PBTextureType.TEX_DEPTH_2D]: 'highp sampler2DShadow',\n  [PBTextureType.TEX_DEPTH_2D_ARRAY]: 'highp sampler2DArrayShadow',\n  [PBTextureType.TEX_DEPTH_CUBE]: 'highp samplerCubeShadow',\n  [PBTextureType.TEX_EXTERNAL]: 'highp sampler2D',\n};\n\nconst textureTypeMapWGSL = {\n  [PBTextureType.TEX_1D]: 'texture_1d<f32>',\n  [PBTextureType.ITEX_1D]: 'texture_1d<i32>',\n  [PBTextureType.UTEX_1D]: 'texture_1d<u32>',\n  [PBTextureType.TEX_2D]: 'texture_2d<f32>',\n  [PBTextureType.ITEX_2D]: 'texture_2d<i32>',\n  [PBTextureType.UTEX_2D]: 'texture_2d<u32>',\n  [PBTextureType.TEX_2D_ARRAY]: 'texture_2d_array<f32>',\n  [PBTextureType.ITEX_2D_ARRAY]: 'texture_2d_array<i32>',\n  [PBTextureType.UTEX_2D_ARRAY]: 'texture_2d_array<u32>',\n  [PBTextureType.TEX_3D]: 'texture_3d<f32>',\n  [PBTextureType.ITEX_3D]: 'texture_3d<i32>',\n  [PBTextureType.UTEX_3D]: 'texture_3d<u32>',\n  [PBTextureType.TEX_CUBE]: 'texture_cube<f32>',\n  [PBTextureType.ITEX_CUBE]: 'texture_cube<i32>',\n  [PBTextureType.UTEX_CUBE]: 'texture_cube<u32>',\n  [PBTextureType.TEX_CUBE_ARRAY]: 'texture_cube_array<f32>',\n  [PBTextureType.ITEX_CUBE_ARRAY]: 'texture_cube_array<i32>',\n  [PBTextureType.UTEX_CUBE_ARRAY]: 'texture_cube_array<u32>',\n  [PBTextureType.TEX_MULTISAMPLED_2D]: 'texture_multisampled_2d<f32>',\n  [PBTextureType.ITEX_MULTISAMPLED_2D]: 'texture_multisampled_2d<i32>',\n  [PBTextureType.UTEX_MULTISAMPLED_2D]: 'texture_multisampled_2d<u32>',\n  [PBTextureType.TEX_STORAGE_1D]: 'texture_storage_1d',\n  [PBTextureType.TEX_STORAGE_2D]: 'texture_storage_2d',\n  [PBTextureType.TEX_STORAGE_2D_ARRAY]: 'texture_storage_2d_array',\n  [PBTextureType.TEX_STORAGE_3D]: 'texture_storage_3d',\n  [PBTextureType.TEX_DEPTH_2D]: 'texture_depth_2d',\n  [PBTextureType.TEX_DEPTH_2D_ARRAY]: 'texture_depth_2d_array',\n  [PBTextureType.TEX_DEPTH_CUBE]: 'texture_depth_cube',\n  [PBTextureType.TEX_DEPTH_CUBE_ARRAY]: 'texture_depth_cube_array',\n  [PBTextureType.TEX_DEPTH_MULTISAMPLED_2D]: 'texture_depth_multisampled_2d',\n  [PBTextureType.TEX_EXTERNAL]: 'texture_external',\n};\n\nconst storageTexelFormatMap = {\n  [TextureFormat.RGBA8UNORM]: 'rgba8unorm',\n  [TextureFormat.RGBA8SNORM]: 'rgba8snorm',\n  [TextureFormat.BGRA8UNORM]: 'bgra8unorm',\n  [TextureFormat.RGBA8UI]: 'rgba8uint',\n  [TextureFormat.RGBA8I]: 'rgba8sint',\n  [TextureFormat.RGBA16UI]: 'rgba16uint',\n  [TextureFormat.RGBA16I]: 'rgba16sint',\n  [TextureFormat.RGBA16F]: 'rgba16float',\n  [TextureFormat.R32F]: 'r32float',\n  [TextureFormat.R32UI]: 'r32uint',\n  [TextureFormat.R32I]: 'r32sint',\n  [TextureFormat.RG32F]: 'rg32float',\n  [TextureFormat.RG32UI]: 'rg32uint',\n  [TextureFormat.RG32I]: 'rg32sint',\n  [TextureFormat.RGBA32F]: 'rgba32float',\n  [TextureFormat.RGBA32UI]: 'rgba32uint',\n  [TextureFormat.RGBA32I]: 'rgba32sint',\n};\n\nexport enum PBSamplerAccessMode {\n  UNKNOWN = 0,\n  SAMPLE,\n  COMPARISON\n}\n\nexport enum PBAddressSpace {\n  UNKNOWN = 'unknown',\n  FUNCTION = 'function',\n  PRIVATE = 'private',\n  WORKGROUP = 'workgroup',\n  UNIFORM = 'uniform',\n  STORAGE = 'storage',\n}\n\nexport enum PBTypeClass {\n  UNKNOWN = 0,\n  PLAIN,\n  ARRAY,\n  POINTER,\n  ATOMIC,\n  TEXTURE,\n  SAMPLER,\n  FUNCTION,\n  VOID,\n}\n\nexport type TypeInfo = PrimitiveTypeDetail | StructTypeDetail | ArrayTypeDetail | PointerTypeDetail | AtomicTypeInfoDetail | SamplerTypeDetail | TextureTypeDetail | FunctionTypeDetail | null;\n\nexport interface PrimitiveTypeDetail {\n  primitiveType?: PBPrimitiveType,\n}\n\nexport interface StructTypeDetail {\n  layout: PBStructLayout;\n  structName?: string;\n  structMembers?: {\n    name: string,\n    type: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo,\n    alignment: number,\n    size: number,\n    defaultAlignment: number,\n    defaultSize: number,\n  }[];\n}\n\nexport interface ArrayTypeDetail {\n  elementType: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo;\n  dimension: number;\n}\n\nexport interface PointerTypeDetail {\n  pointerType: PBTypeInfo;\n  addressSpace: PBAddressSpace;\n}\n\nexport interface AtomicTypeInfoDetail {\n  type: PBPrimitiveType;\n}\n\nexport interface SamplerTypeDetail {\n  accessMode: PBSamplerAccessMode;\n}\n\nexport interface TextureTypeDetail {\n  textureType: PBTextureType;\n  storageTexelFormat: TextureFormat;\n  readable: boolean;\n  writable: boolean;\n}\n\nexport interface FunctionTypeDetail {\n  name: string;\n  returnType: PBTypeInfo;\n  argTypes: { type: PBTypeInfo, byRef?: boolean }[];\n}\n\nexport abstract class PBTypeInfo<DetailType extends TypeInfo = TypeInfo>  {\n  /** @internal */\n  cls: PBTypeClass;\n  /** @internal */\n  detail: DetailType;\n  /** @internal */\n  protected id: string;\n  constructor(cls: PBTypeClass, detail: DetailType) {\n    this.cls = cls;\n    this.detail = detail;\n    this.id = null;\n  }\n  get typeId(): string {\n    if (!this.id) {\n      this.id = this.genTypeId();\n    }\n    return this.id;\n  }\n  isVoidType(): this is PBVoidTypeInfo {\n    return false;\n  }\n  isPrimitiveType(): this is PBPrimitiveTypeInfo {\n    return false;\n  }\n  isStructType(): this is PBStructTypeInfo {\n    return false;\n  }\n  isArrayType(): this is PBArrayTypeInfo {\n    return false;\n  }\n  isPointerType(): this is PBPointerTypeInfo {\n    return false;\n  }\n  isAtomicType(): this is PBAtomicTypeInfo {\n    return false;\n  }\n  isSamplerType(): this is PBSamplerTypeInfo {\n    return false;\n  }\n  isTextureType(): this is PBTextureTypeInfo {\n    return false;\n  }\n  isHostSharable(): boolean {\n    return false;\n  }\n  isConstructible(): boolean {\n    return false;\n  }\n  isStorable(): boolean {\n    return false;\n  }\n  getConstructorOverloads(deviceType: DeviceType): PBFunctionTypeInfo[] {\n    return [];\n  }\n  abstract toBufferLayout(offset: number, layout: PBStructLayout): UniformBufferLayout;\n  abstract toTypeName(deviceType: DeviceType, varName?: string): string;\n  /** @internal */\n  protected abstract genTypeId(): string;\n}\n\nexport class PBVoidTypeInfo extends PBTypeInfo<null> {\n  constructor() {\n    super(PBTypeClass.VOID, null);\n  }\n  isVoidType(): this is PBVoidTypeInfo {\n    return true;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    return 'void';\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return 'void';\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n}\nexport class PBPrimitiveTypeInfo extends PBTypeInfo<PrimitiveTypeDetail> implements ILayoutableType {\n  /** @internal */\n  private static cachedTypes: { [primitiveType: number]: PBPrimitiveTypeInfo } = {};\n  /** @internal */\n  private static cachedCtorOverloads: { [deviceType: string]: { [primitiveType: number]: PBFunctionTypeInfo[] } } = {};\n  constructor(type: PBPrimitiveType) {\n    super(PBTypeClass.PLAIN, { primitiveType: type });\n  }\n  static getCachedTypeInfo(primitiveType: PBPrimitiveType): PBPrimitiveTypeInfo {\n    let typeinfo = this.cachedTypes[primitiveType];\n    if (!typeinfo) {\n      typeinfo = new PBPrimitiveTypeInfo(primitiveType);\n      this.cachedTypes[primitiveType] = typeinfo;\n    }\n    return typeinfo;\n  }\n  static getCachedOverloads(deviceType: DeviceType, primitiveType: PBPrimitiveType): PBFunctionTypeInfo[] {\n    let deviceOverloads = this.cachedCtorOverloads[deviceType];\n    if (!deviceOverloads) {\n      deviceOverloads = {};\n      this.cachedCtorOverloads[deviceType] = deviceOverloads;\n    }\n    let result = deviceOverloads[primitiveType];\n    if (!result) {\n      const typeinfo = this.getCachedTypeInfo(primitiveType);\n      const name = typeinfo.toTypeName(deviceType);\n      result = [new PBFunctionTypeInfo(name, typeinfo, [])];\n      if (typeinfo.isScalarType()) {\n        result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: this.getCachedTypeInfo(PBPrimitiveType.F32) }]));\n        result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: this.getCachedTypeInfo(PBPrimitiveType.I32) }]));\n        result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: this.getCachedTypeInfo(PBPrimitiveType.U32) }]));\n        result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: this.getCachedTypeInfo(PBPrimitiveType.BOOL) }]));\n      } else if (typeinfo.isVectorType()) {\n        const scalarTypeInfo = { type: this.getCachedTypeInfo(typeinfo.scalarType) };\n        const vec2TypeInfo = { type: this.getCachedTypeInfo(typeinfo.resizeType(1, 2)) };\n        const vec3TypeInfo = { type: this.getCachedTypeInfo(typeinfo.resizeType(1, 3)) };\n        result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo]));\n        switch (typeinfo.cols) {\n          case 2:\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeF32Vec2 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeI32Vec2 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeU32Vec2 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeBVec2 }]));\n            break;\n          case 3:\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, scalarTypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, vec2TypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [vec2TypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeF32Vec3 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeI32Vec3 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeU32Vec3 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeBVec3 }]));\n            break;\n          case 4:\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, scalarTypeInfo, scalarTypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, scalarTypeInfo, vec2TypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, vec2TypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [vec2TypeInfo, scalarTypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [vec2TypeInfo, vec2TypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [scalarTypeInfo, vec3TypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [vec3TypeInfo, scalarTypeInfo]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeF32Vec4 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeI32Vec4 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeU32Vec4 }]));\n            result.push(new PBFunctionTypeInfo(name, typeinfo, [{ type: typeBVec4 }]));\n        }\n      } else if (typeinfo.isMatrixType()) {\n        const colType = this.getCachedTypeInfo(typeinfo.resizeType(1, typeinfo.cols));\n        result.push(new PBFunctionTypeInfo(name, typeinfo, Array.from({ length: typeinfo.rows }).map(() => ({ type: colType }))));\n        result.push(new PBFunctionTypeInfo(name, typeinfo, Array.from({ length: typeinfo.rows * typeinfo.cols }).map(() => ({ type: typeF32 }))));\n      }\n      deviceOverloads[primitiveType] = result;\n    }\n    return result;\n  }\n  get primitiveType(): PBPrimitiveType {\n    return this.detail.primitiveType;\n  }\n  get scalarType(): PBPrimitiveType {\n    return this.resizeType(1, 1);\n  }\n  get rows(): number {\n    return (this.primitiveType >> ROWS_BITSHIFT) & ROWS_BITMASK;\n  }\n  get cols(): number {\n    return (this.primitiveType >> COLS_BITSHIFT) & COLS_BITMASK;\n  }\n  get normalized(): boolean {\n    return !!((this.primitiveType >> NORM_BITSHIFT) & NORM_BITMASK);\n  }\n  getLayoutAlignment(layout: PBStructLayout): number {\n    return layout === 'packed' ? 1 : this.isScalarType() ? 4 : 1 << Math.min(4, (this.cols + 1));\n  }\n  getLayoutSize(): number {\n    return this.getSize();\n  }\n  getSize(): number {\n    let scalarSize: number;\n    switch (this.scalarType) {\n      case PBPrimitiveType.BOOL:\n      case PBPrimitiveType.I32:\n      case PBPrimitiveType.I32_NORM:\n      case PBPrimitiveType.U32:\n      case PBPrimitiveType.U32_NORM:\n      case PBPrimitiveType.F32:\n        scalarSize = 4;\n        break;\n      case PBPrimitiveType.F16:\n      case PBPrimitiveType.I16:\n      case PBPrimitiveType.I16_NORM:\n      case PBPrimitiveType.U16:\n      case PBPrimitiveType.U16_NORM:\n        scalarSize = 2;\n        break;\n      default:\n        scalarSize = 1;\n        break;\n    }\n    return scalarSize * this.cols * this.rows;\n  }\n  resizeType(rows: number, cols: number): PBPrimitiveType {\n    return makePrimitiveType(this.primitiveType & SCALAR_TYPE_BITMASK, rows, cols, this.normalized ? 1 : 0);\n  }\n  isScalarType(): boolean {\n    return this.rows === 1 && this.cols === 1;\n  }\n  isVectorType(): boolean {\n    return this.rows === 1 && this.cols > 1;\n  }\n  isMatrixType(): boolean {\n    return this.rows > 1 && this.cols > 1;\n  }\n  isPrimitiveType(): this is PBPrimitiveTypeInfo {\n    return true;\n  }\n  isHostSharable(): boolean {\n    return this.scalarType !== PBPrimitiveType.BOOL\n  }\n  isConstructible(): boolean {\n    return true;\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  getConstructorOverloads(deviceType: DeviceType): PBFunctionTypeInfo[] {\n    return PBPrimitiveTypeInfo.getCachedOverloads(deviceType, this.primitiveType);\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      const typename = primitiveTypeMapWGSL[this.primitiveType];\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      const typename = primitiveTypeMapWebGL[this.primitiveType];\n      return varName ? `${typename} ${varName}` : typename;\n    }\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `PRIM:${this.primitiveType}`;\n  }\n}\n\nexport class PBStructTypeInfo extends PBTypeInfo<StructTypeDetail> implements ILayoutableType {\n  constructor(name: string, layout: PBStructLayout, members: { name: string, type: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo }[]) {\n    super(PBTypeClass.PLAIN, {\n      layout: layout || 'default',\n      structName: name,\n      structMembers: members.map(val => {\n        const defaultAlignment = getAlignment(val.type);\n        const defaultSize = getSize(val.type);\n        return {\n          name: val.name,\n          type: val.type,\n          alignment: defaultAlignment,\n          size: defaultSize,\n          defaultAlignment: defaultAlignment,\n          defaultSize: defaultSize,\n        };\n      }),\n    });\n    if (this.layout === 'std140') {\n      this.calcAlignmentAndSizeSTD140();\n    } else if (this.layout === 'packed') {\n      this.calcAlignmentAndSizePacked();\n    }\n  }\n  get layout(): PBStructLayout {\n    return this.detail.layout;\n  }\n  get structName(): string {\n    return this.detail.structName;\n  }\n  set structName(val: string) {\n    this.detail.structName = val;\n  }\n  get structMembers() {\n    return this.detail.structMembers;\n  }\n  extends(name: string, members: { name: string, type: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo }[]): PBStructTypeInfo {\n    const oldMembers = this.structMembers.map(member => ({ name: member.name, type: member.type }));\n    return new PBStructTypeInfo(name, this.layout, [...oldMembers, ...members]);\n  }\n  isStructType(): this is PBStructTypeInfo {\n    return true;\n  }\n  isHostSharable(): boolean {\n    return this.detail.structMembers.every(val => val.type.isHostSharable());\n  }\n  isConstructible(): boolean {\n    return this.detail.structMembers.every(val => val.type.isConstructible());\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  getConstructorOverloads(): PBFunctionTypeInfo[] {\n    const result: PBFunctionTypeInfo[] = [new PBFunctionTypeInfo(this.structName, this, [])];\n    if (this.isConstructible()) {\n      result.push(new PBFunctionTypeInfo(this.structName, this, this.structMembers.map(val => ({ type: val.type }))));\n    }\n    return result;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      return varName ? `${varName}: ${this.structName}` : this.structName;\n    } else {\n      return varName ? `${this.structName} ${varName}` : this.structName;\n    }\n  }\n  getLayoutAlignment(layout: PBStructLayout): number {\n    if (layout === 'packed') {\n      return 1;\n    }\n    let alignment = 0;\n    for (const member of this.structMembers) {\n      alignment = Math.max(alignment, member.type.getLayoutAlignment(layout));\n    }\n    if (layout === 'std140') {\n      alignment = align(alignment, 16);\n    }\n    return alignment;\n  }\n  getLayoutSize(layout: PBStructLayout): number {\n    let size = 0;\n    let structAlignment = 0;\n    for (const member of this.structMembers) {\n      const memberAlignment = member.type.getLayoutAlignment(layout);\n      size = align(size, memberAlignment);\n      size += member.type.getLayoutSize(layout);\n      structAlignment = Math.max(structAlignment, memberAlignment);\n    }\n    if (layout === 'packed') {\n      return size;\n    }\n    size = align(size, structAlignment);\n    if (layout === 'std140') {\n      size = align(size, 16);\n    }\n    return size;\n  }\n  toBufferLayout(offset: number, layout: PBStructLayout): UniformBufferLayout {\n    const bufferLayout: UniformBufferLayout = {\n      byteSize: 0,\n      entries: []\n    };\n    const start = offset;\n    for (const member of this.structMembers) {\n      offset = align(offset, member.type.getLayoutAlignment(layout));\n      const size = member.type.getLayoutSize(layout);\n      bufferLayout.entries.push({\n        name: member.name,\n        offset: offset,\n        byteSize: size,\n        type: typeToTypedArray(member.type),\n        subLayout: member.type.isStructType() ? member.type.toBufferLayout(offset, layout) : null,\n        arraySize: member.type.isArrayType() ? member.type.dimension : 0,\n      });\n      offset += size;\n    }\n    bufferLayout.byteSize = layout === 'std140' ? align(offset - start, 16) : offset - start;\n    return bufferLayout;\n  }\n  clone(newName?: string): PBStructTypeInfo {\n    return new PBStructTypeInfo(newName || this.structName, this.layout, this.structMembers);\n  }\n  reset(name: string, layout: PBStructLayout, members: { name: string, type: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo }[]) {\n    this.detail = {\n      layout: layout || 'default',\n      structName: name,\n      structMembers: members.map(val => {\n        const defaultAlignment = getAlignment(val.type);\n        const defaultSize = getSize(val.type);\n        return {\n          name: val.name,\n          type: val.type,\n          alignment: defaultAlignment,\n          size: defaultSize,\n          defaultAlignment: defaultAlignment,\n          defaultSize: defaultSize,\n        };\n      }),\n    }\n    if (this.layout === 'std140') {\n      this.calcAlignmentAndSizeSTD140();\n    } else if (this.layout === 'packed') {\n      this.calcAlignmentAndSizePacked();\n    }\n    this.id = null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `STRUCT:${this.structName}:${this.layout}:${this.structMembers.map(val => `${val.name}(${val.type.typeId})`).join(':')}`\n  }\n  /** @internal */\n  private calcAlignmentAndSizeSTD140() {\n    for (const member of this.structMembers) {\n      if (member.type.isPrimitiveType()) {\n        if (member.type.isMatrixType() && member.type.cols === 2) {\n          throw new Error(`matrix${member.type.rows}x${member.type.cols} can not be used in std140 layout`);\n        }\n      } else if (member.type.isArrayType() && getAlignment(member.type.elementType) !== 16) {\n        throw new Error('array element must be 16 bytes aligned in std140 layout');\n      } else if (member.type.isStructType()) {\n        member.alignment = 16;\n        member.size = align(member.defaultSize, 16);\n      }\n    }\n  }\n  /** @internal */\n  private calcAlignmentAndSizePacked() {\n    for (const member of this.structMembers) {\n      member.alignment = getAlignmentPacked(member.type);\n      member.size = getSizePacked(member.type);\n    }\n  }\n}\n\nexport class PBArrayTypeInfo extends PBTypeInfo<ArrayTypeDetail> implements ILayoutableType {\n  constructor(elementType: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo, dimension?: number) {\n    super(PBTypeClass.ARRAY, {\n      elementType: elementType,\n      dimension: Number(dimension) || 0,\n    });\n  }\n  get elementType(): PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo {\n    return this.detail.elementType;\n  }\n  get dimension(): number {\n    return this.detail.dimension;\n  }\n  isArrayType(): this is PBArrayTypeInfo {\n    return true;\n  }\n  isHostSharable(): boolean {\n    return this.detail.elementType.isHostSharable();\n  }\n  isConstructible(): boolean {\n    return this.dimension && this.detail.elementType.isConstructible();\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  getConstructorOverloads(deviceType: DeviceType): PBFunctionTypeInfo[] {\n    const name = this.toTypeName(deviceType);\n    const result: PBFunctionTypeInfo[] = [new PBFunctionTypeInfo(name, this, [])];\n    if (deviceType !== 'webgl' && this.isConstructible()) {\n      result.push(new PBFunctionTypeInfo(name, this, Array.from({ length: this.dimension }).map(() => ({ type: this.elementType }))));\n    }\n    return result;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      const elementTypeName = this.elementType.toTypeName(deviceType);\n      const typename = `array<${elementTypeName}${this.dimension ? ', ' + this.dimension : ''}>`;\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      console.assert(!!this.dimension, 'runtime-sized array not supported for webgl');\n      console.assert(!this.elementType.isArrayType(), 'multi-dimensional arrays not supported for webgl');\n      const elementTypeName = this.elementType.toTypeName(deviceType, varName);\n      return `${elementTypeName}[${this.dimension}]`;\n    }\n  }\n  getLayoutAlignment(layout: PBStructLayout): number {\n    return this.elementType.getLayoutAlignment(layout);\n  }\n  getLayoutSize(layout: PBStructLayout): number {\n    const elementAlignment = this.elementType.getLayoutAlignment(layout);\n    if (layout === 'std140' && !!(elementAlignment & 15)) {\n      // array element stride of std140 layout must be multiple of 16\n      throw new Error('Error: array element stride of std140 must be multiple of 16');\n    }\n    return this.dimension * align(this.elementType.getLayoutSize(layout), elementAlignment);\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `ARRAY:(${this.elementType.typeId})[${this.dimension}]`;\n  }\n}\n\nexport class PBPointerTypeInfo extends PBTypeInfo<PointerTypeDetail> {\n  /** @internal */\n  writable: boolean;\n  constructor(pointerType: PBTypeInfo, addressSpace: PBAddressSpace) {\n    super(PBTypeClass.POINTER, {\n      pointerType,\n      addressSpace,\n    });\n    console.assert(pointerType.isStorable(), 'the pointee type must be storable');\n    this.writable = false;\n  }\n  get pointerType(): PBTypeInfo {\n    return this.detail.pointerType;\n  }\n  get addressSpace(): PBAddressSpace {\n    return this.detail.addressSpace;\n  }\n  set addressSpace(val: PBAddressSpace) {\n    if (this.detail.addressSpace !== val) {\n      this.detail.addressSpace = val;\n      this.id = null;\n    }\n  }\n  isPointerType(): this is PBPointerTypeInfo {\n    return true;\n  }\n  toTypeName(device: DeviceType, varName?: string): string {\n    if (device === 'webgpu') {\n      const addressSpace = this.addressSpace === PBAddressSpace.UNKNOWN ? PBAddressSpace.FUNCTION : this.addressSpace;\n      /*\n      const mode = addressSpace === PBAddressSpace.UNIFORM || (addressSpace === PBAddressSpace.STORAGE && !this.writable) ? 'read' : 'read_write'\n      const typename = `ptr<${addressSpace}, ${this.pointerType.toTypeName(device)}, ${mode}>`;\n      */\n      /* WGSL spec:\n        When writing a variable declaration or a pointer type in WGSL source:\n        For the storage address space, the access mode is optional, and defaults to read.\n        For other address spaces, the access mode must not be written.\n      */\n      const mode = addressSpace === PBAddressSpace.STORAGE && this.writable ? ', read_write' : '';\n      const typename = `ptr<${addressSpace}, ${this.pointerType.toTypeName(device)} ${mode}>`;\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      throw new Error('pointer type not supported for webgl');\n    }\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `PTR:(${this.pointerType.typeId})`;\n  }\n}\n\nexport class PBAtomicTypeInfo extends PBTypeInfo<AtomicTypeInfoDetail> {\n  constructor(type: PBPrimitiveType) {\n    console.assert(type === PBPrimitiveType.I32 || type === PBPrimitiveType.U32, 'invalid atomic type');\n    super(PBTypeClass.ATOMIC, {\n      type\n    });\n  }\n  get type(): PBPrimitiveType {\n    return this.detail.type;\n  }\n  isAtomicType(): this is PBAtomicTypeInfo {\n    return true;\n  }\n  isHostSharable(): boolean {\n    return true;\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      const typename = `atomic<${primitiveTypeMapWGSL[this.type]}>`;\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      throw new Error('atomic type not supported for webgl');\n    }\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `ATOMIC:${this.type}`;\n  }\n}\n\nexport class PBSamplerTypeInfo extends PBTypeInfo<SamplerTypeDetail> {\n  constructor(accessMode: PBSamplerAccessMode) {\n    super(PBTypeClass.SAMPLER, {\n      accessMode: accessMode\n    });\n  }\n  get accessMode(): PBSamplerAccessMode {\n    return this.detail.accessMode;\n  }\n  isSamplerType(): this is PBSamplerTypeInfo {\n    return true;\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      const typename = this.accessMode === PBSamplerAccessMode.SAMPLE ? 'sampler' : 'sampler_comparison';\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      throw new Error('sampler type not supported for webgl');\n    }\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `SAMPLER:${this.accessMode}`;\n  }\n}\n\nexport class PBTextureTypeInfo extends PBTypeInfo<TextureTypeDetail> {\n  constructor(textureType: PBTextureType, texelFormat?: TextureFormat, readable?: boolean, writable?: boolean) {\n    super(PBTypeClass.TEXTURE, {\n      textureType: textureType,\n      readable,\n      writable,\n      storageTexelFormat: texelFormat || null\n    });\n    console.assert(!!textureTypeMapWGSL[textureType], 'unsupported texture type');\n    console.assert(!(textureType & BITFLAG_STORAGE) || !!storageTexelFormatMap[texelFormat], 'invalid texel format for storage texture');\n  }\n  get textureType(): PBTextureType {\n    return this.detail.textureType;\n  }\n  get storageTexelFormat(): TextureFormat {\n    return this.detail.storageTexelFormat;\n  }\n  get readable(): boolean {\n    return this.detail.readable;\n  }\n  get writable(): boolean {\n    return this.detail.writable;\n  }\n  isStorable(): boolean {\n    return true;\n  }\n  is1DTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_1D);\n  }\n  is2DTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_2D);\n  }\n  is3DTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_3D);\n  }\n  isCubeTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_CUBE);\n  }\n  isArrayTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_ARRAY);\n  }\n  isStorageTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_STORAGE);\n  }\n  isDepthTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_DEPTH);\n  }\n  isMultisampledTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_MULTISAMPLED);\n  }\n  isExternalTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_EXTERNAL);\n  }\n  isIntTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_INT);\n  }\n  isUIntTexture(): boolean {\n    return !!(this.detail.textureType & BITFLAG_UINT);\n  }\n  isTextureType(): this is PBTextureTypeInfo {\n    return true;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    if (deviceType === 'webgpu') {\n      let typename = textureTypeMapWGSL[this.textureType];\n      if (this.isStorageTexture()) {\n        const storageTexelFormat = storageTexelFormatMap[this.storageTexelFormat];\n        // storage textures currently only support 'write' access control\n        const accessMode = 'write'; //this.readable ? (this.writable ? 'read_write' : 'read') : 'write';\n        typename = `${typename}<${storageTexelFormat}, ${accessMode}>`;\n      }\n      return varName ? `${varName}: ${typename}` : typename;\n    } else {\n      const typename = (deviceType === 'webgl' ? textureTypeMapWebGL : textureTypeMapWebGL2)[this.textureType];\n      console.assert(!!typename, 'unsupported texture type');\n      return varName ? `${typename} ${varName}` : typename;\n    }\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `TEXTURE:${this.textureType}`;\n  }\n}\n\nexport class PBFunctionTypeInfo extends PBTypeInfo<FunctionTypeDetail> {\n  constructor(name: string, returnType: PBTypeInfo, argTypes: { type: PBTypeInfo, byRef?: boolean }[]) {\n    super(PBTypeClass.FUNCTION, {\n      name,\n      returnType,\n      argTypes\n    });\n  }\n  get name(): string {\n    return this.detail.name;\n  }\n  get returnType(): PBTypeInfo {\n    return this.detail.returnType;\n  }\n  get argTypes(): { type: PBTypeInfo, byRef?: boolean }[] {\n    return this.detail.argTypes;\n  }\n  /** @internal */\n  protected genTypeId(): string {\n    return `FUNCTION:(${this.argTypes.map(val => val.type.typeId).join(',')}):${this.returnType?.typeId || 'void'}`;\n  }\n  toBufferLayout(offset: number): UniformBufferLayout {\n    return null;\n  }\n  toTypeName(deviceType: DeviceType, varName?: string): string {\n    throw new Error('not supported');\n  }\n}\n\nexport const typeF16 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F16);\nexport const typeF16Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F16VEC2);\nexport const typeF16Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F16VEC3);\nexport const typeF16Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F16VEC4);\nexport const typeF32 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F32);\nexport const typeF32Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F32VEC2);\nexport const typeF32Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F32VEC3);\nexport const typeF32Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.F32VEC4);\nexport const typeI8 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8);\nexport const typeI8Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC2);\nexport const typeI8Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC3);\nexport const typeI8Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC4);\nexport const typeI8_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8_NORM);\nexport const typeI8Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC2_NORM);\nexport const typeI8Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC3_NORM);\nexport const typeI8Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I8VEC4_NORM);\nexport const typeI16 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16);\nexport const typeI16Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC2);\nexport const typeI16Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC3);\nexport const typeI16Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC4);\nexport const typeI16_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16_NORM);\nexport const typeI16Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC2_NORM);\nexport const typeI16Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC3_NORM);\nexport const typeI16Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I16VEC4_NORM);\nexport const typeI32 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32);\nexport const typeI32Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC2);\nexport const typeI32Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC3);\nexport const typeI32Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC4);\nexport const typeI32_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32);\nexport const typeI32Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC2_NORM);\nexport const typeI32Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC3_NORM);\nexport const typeI32Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.I32VEC4_NORM);\nexport const typeU8 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8);\nexport const typeU8Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC2);\nexport const typeU8Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC3);\nexport const typeU8Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC4);\nexport const typeU8_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8_NORM);\nexport const typeU8Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC2_NORM);\nexport const typeU8Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC3_NORM);\nexport const typeU8Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U8VEC4_NORM);\nexport const typeU16 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16);\nexport const typeU16Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC2);\nexport const typeU16Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC3);\nexport const typeU16Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC4);\nexport const typeU16_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16_NORM);\nexport const typeU16Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC2_NORM);\nexport const typeU16Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC3_NORM);\nexport const typeU16Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U16VEC4_NORM);\nexport const typeU32 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32);\nexport const typeU32Vec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC2);\nexport const typeU32Vec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC3);\nexport const typeU32Vec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC4);\nexport const typeU32_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32_NORM);\nexport const typeU32Vec2_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC2_NORM);\nexport const typeU32Vec3_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC3_NORM);\nexport const typeU32Vec4_Norm = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.U32VEC4_NORM);\nexport const typeBool = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.BOOL);\nexport const typeBVec2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.BVEC2);\nexport const typeBVec3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.BVEC3);\nexport const typeBVec4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.BVEC4);\nexport const typeMat2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT2);\nexport const typeMat2x3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT2x3);\nexport const typeMat2x4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT2x4);\nexport const typeMat3x2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT3x2);\nexport const typeMat3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT3);\nexport const typeMat3x4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT3x4);\nexport const typeMat4x2 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT4x2);\nexport const typeMat4x3 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT4x3);\nexport const typeMat4 = PBPrimitiveTypeInfo.getCachedTypeInfo(PBPrimitiveType.MAT4);\nexport const typeTex1D = new PBTextureTypeInfo(PBTextureType.TEX_1D);\nexport const typeITex1D = new PBTextureTypeInfo(PBTextureType.ITEX_1D);\nexport const typeUTex1D = new PBTextureTypeInfo(PBTextureType.UTEX_1D);\nexport const typeTex2D = new PBTextureTypeInfo(PBTextureType.TEX_2D);\nexport const typeITex2D = new PBTextureTypeInfo(PBTextureType.ITEX_2D);\nexport const typeUTex2D = new PBTextureTypeInfo(PBTextureType.UTEX_2D);\nexport const typeTex2DArray = new PBTextureTypeInfo(PBTextureType.TEX_2D_ARRAY);\nexport const typeITex2DArray = new PBTextureTypeInfo(PBTextureType.ITEX_2D_ARRAY);\nexport const typeUTex2DArray = new PBTextureTypeInfo(PBTextureType.UTEX_2D_ARRAY);\nexport const typeTex3D = new PBTextureTypeInfo(PBTextureType.TEX_3D);\nexport const typeITex3D = new PBTextureTypeInfo(PBTextureType.ITEX_3D);\nexport const typeUTex3D = new PBTextureTypeInfo(PBTextureType.UTEX_3D);\nexport const typeTexCube = new PBTextureTypeInfo(PBTextureType.TEX_CUBE);\nexport const typeITexCube = new PBTextureTypeInfo(PBTextureType.ITEX_CUBE);\nexport const typeUTexCube = new PBTextureTypeInfo(PBTextureType.UTEX_CUBE);\nexport const typeTexExternal = new PBTextureTypeInfo(PBTextureType.TEX_EXTERNAL);\nexport const typeTexCubeArray = new PBTextureTypeInfo(PBTextureType.TEX_CUBE_ARRAY);\nexport const typeITexCubeArray = new PBTextureTypeInfo(PBTextureType.ITEX_CUBE_ARRAY);\nexport const typeUTexCubeArray = new PBTextureTypeInfo(PBTextureType.UTEX_CUBE_ARRAY);\nexport const typeTexMultisampled2D = new PBTextureTypeInfo(PBTextureType.TEX_MULTISAMPLED_2D);\nexport const typeITexMultisampled2D = new PBTextureTypeInfo(PBTextureType.ITEX_MULTISAMPLED_2D);\nexport const typeUTexMultisampled2D = new PBTextureTypeInfo(PBTextureType.UTEX_MULTISAMPLED_2D);\nexport const typeTexStorage1D_rgba8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA8UNORM);\nexport const typeTexStorage1D_rgba8snorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA8SNORM);\nexport const typeTexStorage1D_bgra8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.BGRA8UNORM);\nexport const typeTexStorage1D_rgba8uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA8UI);\nexport const typeTexStorage1D_rgba8sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA8I);\nexport const typeTexStorage1D_rgba16uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA16UI);\nexport const typeTexStorage1D_rgba16sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA16I);\nexport const typeTexStorage1D_rgba16float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA16F);\nexport const typeTexStorage1D_rgba32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA32UI);\nexport const typeTexStorage1D_rgba32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA32I);\nexport const typeTexStorage1D_rgba32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RGBA32F);\nexport const typeTexStorage1D_rg32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RG32UI);\nexport const typeTexStorage1D_rg32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RG32I);\nexport const typeTexStorage1D_rg32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.RG32F);\nexport const typeTexStorage1D_r32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.R32UI);\nexport const typeTexStorage1D_r32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.R32I);\nexport const typeTexStorage1D_r32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_1D, TextureFormat.R32F);\nexport const typeTexStorage2D_rgba8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA8UNORM);\nexport const typeTexStorage2D_rgba8snorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA8SNORM);\nexport const typeTexStorage2D_bgra8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.BGRA8UNORM);\nexport const typeTexStorage2D_rgba8uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA8UI);\nexport const typeTexStorage2D_rgba8sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA8I);\nexport const typeTexStorage2D_rgba16uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA16UI);\nexport const typeTexStorage2D_rgba16sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA16I);\nexport const typeTexStorage2D_rgba16float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA16F);\nexport const typeTexStorage2D_rgba32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA32UI);\nexport const typeTexStorage2D_rgba32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA32I);\nexport const typeTexStorage2D_rgba32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RGBA32F);\nexport const typeTexStorage2D_rg32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RG32UI);\nexport const typeTexStorage2D_rg32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RG32I);\nexport const typeTexStorage2D_rg32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.RG32F);\nexport const typeTexStorage2D_r32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.R32UI);\nexport const typeTexStorage2D_r32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.R32I);\nexport const typeTexStorage2D_r32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D, TextureFormat.R32F);\nexport const typeTexStorage2DArray_rgba8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA8UNORM);\nexport const typeTexStorage2DArray_rgba8snorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA8SNORM);\nexport const typeTexStorage2DArray_bgra8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.BGRA8UNORM);\nexport const typeTexStorage2DArray_rgba8uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA8UI);\nexport const typeTexStorage2DArray_rgba8sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA8I);\nexport const typeTexStorage2DArray_rgba16uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA16UI);\nexport const typeTexStorage2DArray_rgba16sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA16I);\nexport const typeTexStorage2DArray_rgba16float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA16F);\nexport const typeTexStorage2DArray_rgba32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA32UI);\nexport const typeTexStorage2DArray_rgba32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA32I);\nexport const typeTexStorage2DArray_rgba32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RGBA32F);\nexport const typeTexStorage2DArray_rg32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RG32UI);\nexport const typeTexStorage2DArray_rg32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RG32I);\nexport const typeTexStorage2DArray_rg32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.RG32F);\nexport const typeTexStorage2DArray_r32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.R32UI);\nexport const typeTexStorage2DArray_r32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.R32I);\nexport const typeTexStorage2DArray_r32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_2D_ARRAY, TextureFormat.R32F);\nexport const typeTexStorage3D_rgba8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA8UNORM);\nexport const typeTexStorage3D_rgba8snorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA8SNORM);\nexport const typeTexStorage3D_bgra8unorm = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.BGRA8UNORM);\nexport const typeTexStorage3D_rgba8uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA8UI);\nexport const typeTexStorage3D_rgba8sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA8I);\nexport const typeTexStorage3D_rgba16uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA16UI);\nexport const typeTexStorage3D_rgba16sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA16I);\nexport const typeTexStorage3D_rgba16float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA16F);\nexport const typeTexStorage3D_rgba32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA32UI);\nexport const typeTexStorage3D_rgba32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA32I);\nexport const typeTexStorage3D_rgba32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RGBA32F);\nexport const typeTexStorage3D_rg32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RG32UI);\nexport const typeTexStorage3D_rg32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RG32I);\nexport const typeTexStorage3D_rg32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.RG32F);\nexport const typeTexStorage3D_r32uint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.R32UI);\nexport const typeTexStorage3D_r32sint = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.R32I);\nexport const typeTexStorage3D_r32float = new PBTextureTypeInfo(PBTextureType.TEX_STORAGE_3D, TextureFormat.R32F);\nexport const typeTexDepth2D = new PBTextureTypeInfo(PBTextureType.TEX_DEPTH_2D);\nexport const typeTexDepth2DArray = new PBTextureTypeInfo(PBTextureType.TEX_DEPTH_2D_ARRAY);\nexport const typeTexDepthCube = new PBTextureTypeInfo(PBTextureType.TEX_DEPTH_CUBE);\nexport const typeTexDepthCubeArray = new PBTextureTypeInfo(PBTextureType.TEX_DEPTH_CUBE_ARRAY);\nexport const typeTexDepthMultisampled2D = new PBTextureTypeInfo(PBTextureType.TEX_DEPTH_MULTISAMPLED_2D);\nexport const typeSampler = new PBSamplerTypeInfo(PBSamplerAccessMode.SAMPLE);\nexport const typeSamplerComparison = new PBSamplerTypeInfo(PBSamplerAccessMode.COMPARISON);\nexport const typeVoid = new PBVoidTypeInfo();\nexport const typeFrexpResult = new PBStructTypeInfo('FrexpResult', 'default', [{ name: 'sig', type: typeF32 }, { name: 'exp', type: typeI32 }]);\nexport const typeFrexpResultVec2 = new PBStructTypeInfo('FrexpResultVec2', 'default', [{ name: 'sig', type: typeF32Vec2 }, { name: 'exp', type: typeI32Vec2 }]);\nexport const typeFrexpResultVec3 = new PBStructTypeInfo('FrexpResultVec3', 'default', [{ name: 'sig', type: typeF32Vec3 }, { name: 'exp', type: typeI32Vec3 }]);\nexport const typeFrexpResultVec4 = new PBStructTypeInfo('FrexpResultVec4', 'default', [{ name: 'sig', type: typeF32Vec4 }, { name: 'exp', type: typeI32Vec4 }]);\n"],"names":[],"mappings":"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"}