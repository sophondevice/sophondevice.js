{"version":3,"file":"programbuilder.js","sources":["../../../../../libs/device/src/device/builder/programbuilder.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { ShaderType } from '../base_types';\r\nimport {\r\n  MAX_BINDING_GROUPS,\r\n  GPUProgram,\r\n  BindGroupLayout,\r\n  BindGroupLayoutEntry,\r\n  getVertexAttribByName,\r\n  VertexSemantic,\r\n} from '../gpuobject';\r\nimport { PBReflection, PBReflectionTagGetter } from './reflection';\r\nimport * as AST from './ast';\r\nimport * as errors from './errors';\r\nimport { PBAddressSpace, PBArrayTypeInfo, PBFunctionTypeInfo, PBPointerTypeInfo, PBPrimitiveType, PBPrimitiveTypeInfo, PBSamplerAccessMode, PBStructLayout, PBStructTypeInfo, PBTextureTypeInfo, PBTypeInfo, typeBool, typeF32, typeFrexpResult, typeFrexpResultVec2, typeFrexpResultVec3, typeFrexpResultVec4, typeI32, typeTex2D, typeTexCube, typeU32, typeVoid } from './types';\r\nimport type { StorageTextureConstructor } from './constructors';\r\nimport type { DeviceType, Device } from '../device';\r\n\r\nconst COMPUTE_UNIFORM_NAME = 'ch_compute_block';\r\nconst VERTEX_UNIFORM_NAME = 'ch_vertex_block';\r\nconst FRAGMENT_UNIFORM_NAME = 'ch_fragment_block';\r\nconst SHARED_UNIFORM_NAME = 'ch_shared_block';\r\ninterface UniformInfo {\r\n  group: number;\r\n  binding: number;\r\n  mask: number;\r\n  block?: {\r\n    name: string;\r\n    dynamicOffset: boolean;\r\n    exp: PBShaderExp;\r\n  };\r\n  texture?: {\r\n    autoBindSampler: 'sample' | 'comparison';\r\n    exp: PBShaderExp;\r\n  }\r\n  sampler?: PBShaderExp;\r\n}\r\n\r\nlet currentProgramBuilder: ProgramBuilder = null;\r\n\r\nexport type ExpValueNonArrayType = number | boolean | PBShaderExp;\r\nexport type ExpValueType = ExpValueNonArrayType | Array<ExpValueType>;\r\nexport type ShaderTypeFunc = {\r\n  (...args: any[]): PBShaderExp;\r\n  ptr: ShaderTypeFunc;\r\n  [dim: number]: ShaderTypeFunc;\r\n};\r\n\r\nconst input_prefix = 'ch_input_';\r\nconst output_prefix = 'ch_output_';\r\nconst constructorCache: Map<ShaderTypeFunc, Record<string | symbol, ShaderTypeFunc>> = new Map();\r\n\r\n/** @internal */\r\nexport function makeConstructor(typeFunc: ShaderTypeFunc, elementType: PBTypeInfo): ShaderTypeFunc {\r\n  const wrappedTypeFunc = new Proxy(typeFunc, {\r\n    get: function (target, prop) {\r\n      if (typeof prop === 'symbol' || prop in target) {\r\n        return target[prop];\r\n      }\r\n      let entries = constructorCache.get(typeFunc);\r\n      if (!entries) {\r\n        entries = {};\r\n        constructorCache.set(typeFunc, entries);\r\n      }\r\n      let ctor = entries[prop];\r\n      if (!ctor) {\r\n        if (elementType.isPrimitiveType() || elementType.isStructType() || elementType.isArrayType()) {\r\n          if (prop === 'ptr') {\r\n            const pointerType = new PBPointerTypeInfo(elementType, PBAddressSpace.FUNCTION);\r\n            ctor = function pointerCtor(this: ProgramBuilder, ...args: any[]) {\r\n              if (args.length === 1 && typeof args[0] === 'string') {\r\n                return new PBShaderExp(args[0], pointerType);\r\n              } else {\r\n                throw new Error(`Invalid pointer type constructor`);\r\n              }\r\n            } as ShaderTypeFunc;\r\n          } else {\r\n            const dim = Number(prop);\r\n            if (Number.isInteger(dim) && dim >= 0) {\r\n              const arrayType = new PBArrayTypeInfo(elementType, dim);\r\n              const arrayTypeFunc = function arrayCtor(this: ProgramBuilder, ...args: any[]) {\r\n                if (args.length === 1 && typeof args[0] === 'string') {\r\n                  return new PBShaderExp(args[0], arrayType);\r\n                } else {\r\n                  const exp = new PBShaderExp('', arrayType);\r\n                  exp.$ast = new AST.ASTShaderExpConstructor(exp.$typeinfo, args.map(arg => arg instanceof PBShaderExp ? arg.$ast : arg));\r\n                  return exp;\r\n                }\r\n              }\r\n              ctor = makeConstructor(arrayTypeFunc as ShaderTypeFunc, arrayType);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (ctor) {\r\n        entries[prop] = ctor;\r\n      }\r\n      return ctor;\r\n    },\r\n  });\r\n  return wrappedTypeFunc;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace ProgramBuilder {\r\n  export type VertexAttribSet = { [attrib: number]: PBShaderExp };\r\n  export type VaryingSet = { [name: string]: PBShaderExp };\r\n  export type ColorOutputs = PBShaderExp[];\r\n  export type BuildRenderResult = [string, string, BindGroupLayout[], number[]];\r\n  export type BuildComputeResult = [string, BindGroupLayout[]];\r\n  export type RenderOptions = {\r\n    label?: string,\r\n    vertex: (this: PBGlobalScope) => void,\r\n    fragment: (this: PBGlobalScope) => void\r\n  };\r\n  export type ComputeOptions = {\r\n    label?: string,\r\n    workgroupSize: [number, number, number],\r\n    compute: (this: PBGlobalScope) => void,\r\n  };\r\n  export interface ShaderExpTagRecord {\r\n    [name: string]: ShaderExpTagValue;\r\n  }\r\n  export type ShaderExpTagValue = string[] | string | ShaderExpTagRecord;\r\n}\r\n\r\ntype StructDef = {\r\n  structs: { [name: string]: ShaderTypeFunc };\r\n  types: AST.ASTStructDefine[];\r\n};\r\n\r\nexport interface ProgramBuilder {\r\n  /* constructors */\r\n  float: {\r\n    (): PBShaderExp;\r\n    (rhs: number): PBShaderExp;\r\n    (rhs: boolean): PBShaderExp;\r\n    (rhs: PBShaderExp): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  int: {\r\n    (): PBShaderExp;\r\n    (rhs: number | boolean | PBShaderExp | string): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  uint: {\r\n    (): PBShaderExp;\r\n    (rhs: number | boolean | PBShaderExp | string): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  bool: {\r\n    (): PBShaderExp;\r\n    (rhs: number | boolean | PBShaderExp | string): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  vec2: {\r\n    (): PBShaderExp;\r\n    (rhs: number | PBShaderExp | string): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  ivec2: {\r\n    (): PBShaderExp;\r\n    (rhs: number | PBShaderExp | string): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  uvec2: {\r\n    (): PBShaderExp;\r\n    (rhs: number | PBShaderExp | string): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  bvec2: {\r\n    (): PBShaderExp;\r\n    (rhs: number | boolean | PBShaderExp | string): PBShaderExp;\r\n    (x: number | boolean | PBShaderExp, y: number | boolean | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  vec3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yz: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  ivec3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yz: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  uvec3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yz: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  bvec3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: boolean | PBShaderExp): PBShaderExp;\r\n    (x: boolean | PBShaderExp, y: boolean | PBShaderExp, z: boolean | PBShaderExp): PBShaderExp;\r\n    (x: boolean | PBShaderExp, yz: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: boolean | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  vec4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, zw: PBShaderExp): PBShaderExp\r\n    (x: number | PBShaderExp, yz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yzw: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, zw: PBShaderExp): PBShaderExp;\r\n    (xyz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  ivec4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, zw: PBShaderExp): PBShaderExp\r\n    (x: number | PBShaderExp, yz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yzw: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, zw: PBShaderExp): PBShaderExp;\r\n    (xyz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  uvec4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, y: number | PBShaderExp, zw: PBShaderExp): PBShaderExp\r\n    (x: number | PBShaderExp, yz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (x: number | PBShaderExp, yzw: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: number | PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, zw: PBShaderExp): PBShaderExp;\r\n    (xyz: PBShaderExp, w: number | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  bvec4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (x: boolean | PBShaderExp): PBShaderExp;\r\n    (x: boolean | PBShaderExp, y: boolean | PBShaderExp, z: boolean | PBShaderExp, w: boolean | PBShaderExp): PBShaderExp;\r\n    (x: boolean | PBShaderExp, y: boolean | PBShaderExp, zw: PBShaderExp): PBShaderExp\r\n    (x: boolean | PBShaderExp, yz: PBShaderExp, w: boolean | PBShaderExp): PBShaderExp;\r\n    (x: boolean | PBShaderExp, yzw: PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, z: boolean | PBShaderExp, w: boolean | PBShaderExp): PBShaderExp;\r\n    (xy: PBShaderExp, zw: PBShaderExp): PBShaderExp;\r\n    (xyz: PBShaderExp, w: boolean | PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat2: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat2x3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat2x4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp, m03: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp, m13: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp, m22: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat3x2: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat3x4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp, m03: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp, m13: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp, m22: number | PBShaderExp, m23: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat4: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp, m03: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp, m13: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp, m22: number | PBShaderExp, m23: number | PBShaderExp,\r\n      m30: number | PBShaderExp, m31: number | PBShaderExp, m32: number | PBShaderExp, m33: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp, m3: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat4x2: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp,\r\n      m30: number | PBShaderExp, m31: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp, m3: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  mat4x3: {\r\n    (): PBShaderExp;\r\n    (name: string): PBShaderExp;\r\n    (m00: number | PBShaderExp, m01: number | PBShaderExp, m02: number | PBShaderExp,\r\n      m10: number | PBShaderExp, m11: number | PBShaderExp, m12: number | PBShaderExp,\r\n      m20: number | PBShaderExp, m21: number | PBShaderExp, m22: number | PBShaderExp,\r\n      m30: number | PBShaderExp, m31: number | PBShaderExp, m32: number | PBShaderExp): PBShaderExp;\r\n    (m0: PBShaderExp, m1: PBShaderExp, m2: PBShaderExp, m3: PBShaderExp): PBShaderExp;\r\n    ptr: ShaderTypeFunc;\r\n    [dim: number]: ShaderTypeFunc;\r\n  },\r\n  tex1D(rhs?: string): PBShaderExp;\r\n  tex2D(rhs?: string): PBShaderExp;\r\n  tex3D(rhs?: string): PBShaderExp;\r\n  texCube(rhs?: string): PBShaderExp;\r\n  texExternal(rhs?: string): PBShaderExp;\r\n  tex2DShadow(rhs?: string): PBShaderExp;\r\n  texCubeShadow(rhs?: string): PBShaderExp;\r\n  tex2DArray(rhs?: string): PBShaderExp;\r\n  tex2DArrayShadow(rhs?: string): PBShaderExp;\r\n  itex1D(rhs?: string): PBShaderExp;\r\n  itex2D(rhs?: string): PBShaderExp;\r\n  itex3D(rhs?: string): PBShaderExp;\r\n  itexCube(rhs?: string): PBShaderExp;\r\n  itex2DArray(rhs?: string): PBShaderExp;\r\n  utex1D(rhs?: string): PBShaderExp;\r\n  utex2D(rhs?: string): PBShaderExp;\r\n  utex3D(rhs?: string): PBShaderExp;\r\n  utexCube(rhs?: string): PBShaderExp;\r\n  utex2DArray(rhs?: string): PBShaderExp;\r\n  texStorage1D: StorageTextureConstructor;\r\n  texStorage2D: StorageTextureConstructor;\r\n  texStorage2DArray: StorageTextureConstructor;\r\n  texStorage3D: StorageTextureConstructor;\r\n  sampler(rhs?: string): PBShaderExp;\r\n  samplerComparison(rhs?: string): PBShaderExp;\r\n  /** builtin functions */\r\n  radians(val: number | PBShaderExp): PBShaderExp;\r\n  degrees(val: number | PBShaderExp): PBShaderExp;\r\n  sin(val: number | PBShaderExp): PBShaderExp;\r\n  cos(val: number | PBShaderExp): PBShaderExp;\r\n  tan(val: number | PBShaderExp): PBShaderExp;\r\n  asin(val: number | PBShaderExp): PBShaderExp;\r\n  acos(val: number | PBShaderExp): PBShaderExp;\r\n  atan(val: number | PBShaderExp): PBShaderExp;\r\n  atan2(y: number | PBShaderExp, x: number | PBShaderExp): PBShaderExp;\r\n  sinh(val: number | PBShaderExp): PBShaderExp;\r\n  cosh(val: number | PBShaderExp): PBShaderExp;\r\n  tanh(val: number | PBShaderExp): PBShaderExp;\r\n  asinh(val: number | PBShaderExp): PBShaderExp;\r\n  acosh(val: number | PBShaderExp): PBShaderExp;\r\n  atanh(val: number | PBShaderExp): PBShaderExp;\r\n  pow(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  exp(val: number | PBShaderExp): PBShaderExp;\r\n  exp2(val: number | PBShaderExp): PBShaderExp;\r\n  log(val: number | PBShaderExp): PBShaderExp;\r\n  log2(val: number | PBShaderExp): PBShaderExp;\r\n  sqrt(val: number | PBShaderExp): PBShaderExp;\r\n  inverseSqrt(val: number | PBShaderExp): PBShaderExp;\r\n  abs(val: number | PBShaderExp): PBShaderExp;\r\n  sign(val: number | PBShaderExp): PBShaderExp;\r\n  floor(val: number | PBShaderExp): PBShaderExp;\r\n  ceil(val: number | PBShaderExp): PBShaderExp;\r\n  fract(val: number | PBShaderExp): PBShaderExp;\r\n  mod(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  fma(x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n  round(val: number | PBShaderExp): PBShaderExp;\r\n  trunc(val: number | PBShaderExp): PBShaderExp;\r\n  min(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  max(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  clamp(x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n  mix(x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n  step(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  smoothStep(x: number | PBShaderExp, y: number | PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n  isnan(x: number | PBShaderExp): PBShaderExp;\r\n  isinf(x: number | PBShaderExp): PBShaderExp;\r\n  add_2(x: number | PBShaderExp, y: number | PBShaderExp);\r\n  add(x: number | PBShaderExp, ...rest: (number | PBShaderExp)[]);\r\n  sub(x: number | PBShaderExp, y: number | PBShaderExp);\r\n  mul_2(x: number | PBShaderExp, y: number | PBShaderExp);\r\n  mul(x: number | PBShaderExp, ...rest: (number | PBShaderExp)[]);\r\n  div(x: number | PBShaderExp, y: number | PBShaderExp);\r\n  length(x: number | PBShaderExp): PBShaderExp;\r\n  distance(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  dot(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  cross(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  normalize(x: PBShaderExp): PBShaderExp;\r\n  faceForward(x: PBShaderExp, y: PBShaderExp, z: PBShaderExp): PBShaderExp;\r\n  reflect(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  refract(x: PBShaderExp, y: PBShaderExp, z: number | PBShaderExp): PBShaderExp;\r\n  frexp(x: number | PBShaderExp): PBShaderExp;\r\n  outerProduct(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  transpose(mat: PBShaderExp): PBShaderExp;\r\n  determinant(mat: PBShaderExp): PBShaderExp;\r\n  inverse(mat: PBShaderExp): PBShaderExp;\r\n  lessThan(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  lessThanEqual(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  greaterThan(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  greaterThanEqual(x: number | PBShaderExp, y: number | PBShaderExp): PBShaderExp;\r\n  compEqual(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  compNotEqual(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  equal(x: PBShaderExp | number, y: PBShaderExp | number): PBShaderExp;\r\n  notEqual(x: PBShaderExp | number, y: PBShaderExp | number): PBShaderExp;\r\n  and_2(x: PBShaderExp | number | boolean, y: PBShaderExp | number | boolean): PBShaderExp;\r\n  and(x: PBShaderExp | number | boolean, ...rest: (PBShaderExp | number | boolean)[]);\r\n  compAnd(x: PBShaderExp | number | boolean, y: PBShaderExp | number | boolean): PBShaderExp;\r\n  or(x: PBShaderExp | number | boolean, y: PBShaderExp | number | boolean): PBShaderExp;\r\n  compOr(x: PBShaderExp | number | boolean, y: PBShaderExp | number | boolean): PBShaderExp;\r\n  any(x: PBShaderExp): PBShaderExp;\r\n  all(x: PBShaderExp): PBShaderExp;\r\n  not(x: boolean | PBShaderExp): PBShaderExp;\r\n  neg(x: number | PBShaderExp): PBShaderExp;\r\n  arrayLength(x: PBShaderExp): PBShaderExp;\r\n  select(x: number | PBShaderExp, y: number | PBShaderExp, cond: boolean | PBShaderExp): PBShaderExp;\r\n  floatBitsToInt(x: number | PBShaderExp): PBShaderExp;\r\n  floatBitsToUint(x: number | PBShaderExp): PBShaderExp;\r\n  intBitsToFloat(x: number | PBShaderExp): PBShaderExp;\r\n  uintBitsToFloat(x: number | PBShaderExp): PBShaderExp;\r\n  pack4x8snorm(x: PBShaderExp): PBShaderExp;\r\n  unpack4x8snorm(x: number | PBShaderExp): PBShaderExp;\r\n  pack4x8unorm(x: PBShaderExp): PBShaderExp;\r\n  unpack4x8unorm(x: number | PBShaderExp): PBShaderExp;\r\n  pack2x16snorm(x: PBShaderExp): PBShaderExp;\r\n  unpack2x16snorm(x: number | PBShaderExp): PBShaderExp;\r\n  pack2x16unorm(x: PBShaderExp): PBShaderExp;\r\n  unpack2x16unorm(x: number | PBShaderExp): PBShaderExp;\r\n  pack2x16float(x: PBShaderExp): PBShaderExp;\r\n  unpack2x16float(x: number | PBShaderExp): PBShaderExp;\r\n  matrixCompMult(x: PBShaderExp, y: PBShaderExp): PBShaderExp;\r\n  dpdx(x: PBShaderExp): PBShaderExp;\r\n  dpdy(x: PBShaderExp): PBShaderExp;\r\n  fwidth(x: PBShaderExp): PBShaderExp;\r\n  dpdxCoarse(x: PBShaderExp): PBShaderExp;\r\n  dpdxFine(x: PBShaderExp): PBShaderExp;\r\n  dpdyCoarse(x: PBShaderExp): PBShaderExp;\r\n  dpdyFine(x: PBShaderExp): PBShaderExp;\r\n  textureDimensions(tex: PBShaderExp, level?: number | PBShaderExp): PBShaderExp;\r\n  textureGather(tex: PBShaderExp, sampler: PBShaderExp, coords: PBShaderExp): PBShaderExp;\r\n  textureGather(component: number | PBShaderExp, tex: PBShaderExp, sampler: PBShaderExp, coords: PBShaderExp): PBShaderExp;\r\n  textureArrayGather(tex: PBShaderExp, sampler: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp): PBShaderExp;\r\n  textureArrayGather(component: number | PBShaderExp, tex: PBShaderExp, sampler: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp): PBShaderExp;\r\n  textureGatherCompare(tex: PBShaderExp, samplerCompare: PBShaderExp, coords: PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureArrayGatherCompare(tex: PBShaderExp, samplerCompare: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureLoad(tex: PBShaderExp, coords: number | PBShaderExp, levelOrSampleIndex: number | PBShaderExp): PBShaderExp;\r\n  textureArrayLoad(tex: PBShaderExp, coords: number | PBShaderExp, arrayIndex: number | PBShaderExp, level: number | PBShaderExp): PBShaderExp;\r\n  textureStore(tex: PBShaderExp, coords: number | PBShaderExp, value: PBShaderExp): void;\r\n  textureArrayStore(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, value: PBShaderExp): void;\r\n  textureNumLayers(tex: PBShaderExp): PBShaderExp;\r\n  textureNumLevels(tex: PBShaderExp): PBShaderExp;\r\n  textureNumSamples(tex: PBShaderExp): PBShaderExp;\r\n  textureSample(tex: PBShaderExp, coords: number | PBShaderExp): PBShaderExp;\r\n  textureArraySample(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp): PBShaderExp;\r\n  textureSampleBias(tex: PBShaderExp, coords: PBShaderExp, bias: number | PBShaderExp): PBShaderExp;\r\n  textureArraySampleBias(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, bias: number | PBShaderExp): PBShaderExp;\r\n  textureSampleCompare(tex: PBShaderExp, coords: PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureArraySampleCompare(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureSampleLevel(tex: PBShaderExp, coords: PBShaderExp): PBShaderExp;\r\n  textureSampleLevel(tex: PBShaderExp, coords: PBShaderExp, level: number | PBShaderExp): PBShaderExp;\r\n  textureArraySampleLevel(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, level: number | PBShaderExp): PBShaderExp;\r\n  textureSampleCompareLevel(tex: PBShaderExp, coords: PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureArraySampleCompareLevel(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, depthRef: number | PBShaderExp): PBShaderExp;\r\n  textureSampleGrad(tex: PBShaderExp, coords: PBShaderExp, ddx: PBShaderExp, ddy: PBShaderExp): PBShaderExp;\r\n  textureArraySampleGrad(tex: PBShaderExp, coords: PBShaderExp, arrayIndex: number | PBShaderExp, ddx: PBShaderExp, ddy: PBShaderExp): PBShaderExp;\r\n  storageBarrier(): void\r\n  workgroupBarrier(): void;\r\n}\r\n\r\nexport class ProgramBuilder {\r\n  /** @internal */\r\n  _device: Device;\r\n  /** @internal */\r\n  _workgroupSize: [number, number, number];\r\n  /** @internal */\r\n  _scopeStack: PBScope[] = [];\r\n  /** @internal */\r\n  _shaderType: ShaderType = ShaderType.Vertex | ShaderType.Fragment | ShaderType.Compute;\r\n  /** @internal */\r\n  _deviceType: DeviceType;\r\n  /** @internal */\r\n  _structInfo: { [type: number]: StructDef };\r\n  /** @internal */\r\n  _uniforms: UniformInfo[];\r\n  /** @internal */\r\n  _globalScope: PBGlobalScope;\r\n  /** @internal */\r\n  _builtinScope: PBBuiltinScope;\r\n  /** @internal */\r\n  _inputScope: PBInputScope;\r\n  /** @internal */\r\n  _outputScope: PBOutputScope;\r\n  /** @internal */\r\n  _inputs: [string, AST.ASTDeclareVar][];\r\n  /** @internal */\r\n  _outputs: [string, AST.ASTDeclareVar][];\r\n  /** @internal */\r\n  _vertexAttributes: number[];\r\n  /** @internal */\r\n  _depthRangeCorrection: boolean;\r\n  /** @internal */\r\n  _emulateDepthClamp: boolean;\r\n  /** @internal */\r\n  _lastError: string;\r\n  /** @internal */\r\n  _reflection: PBReflection;\r\n  /** @internal */\r\n  _autoStructureTypeIndex: number;\r\n  /** @internal */\r\n  _nameMap: { [name: string]: string }[];\r\n  constructor(device: Device | DeviceType) {\r\n    this._device = typeof device === 'string' ? null : device;\r\n    this._deviceType = typeof device === 'string' ? device : device.getDeviceType();\r\n    this._workgroupSize = null;\r\n    this._structInfo = {};\r\n    this._uniforms = [];\r\n    this._scopeStack = [];\r\n    this._globalScope = null;\r\n    this._builtinScope = null;\r\n    this._inputScope = null;\r\n    this._outputScope = null;\r\n    this._inputs = [];\r\n    this._outputs = [];\r\n    this._vertexAttributes = [];\r\n    this._depthRangeCorrection = this._deviceType === 'webgpu';\r\n    this._emulateDepthClamp = false;\r\n    this._lastError = null;\r\n    this._reflection = new PBReflection(this);\r\n    this._autoStructureTypeIndex = 0;\r\n    this._nameMap = [];\r\n  }\r\n  get lastError(): string {\r\n    return this._lastError;\r\n  }\r\n  get shaderType(): ShaderType {\r\n    return this._shaderType;\r\n  }\r\n  get globalScope(): PBGlobalScope {\r\n    return this._globalScope;\r\n  }\r\n  get builtinScope(): PBBuiltinScope {\r\n    return this._builtinScope;\r\n  }\r\n  get inputScope(): PBInputScope {\r\n    return this._inputScope;\r\n  }\r\n  get outputScope(): PBOutputScope {\r\n    return this._outputScope;\r\n  }\r\n  get depthRangeCorrection(): boolean {\r\n    return this._depthRangeCorrection;\r\n  }\r\n  set depthRangeCorrection(val: boolean) {\r\n    this._depthRangeCorrection = !!val;\r\n  }\r\n  get emulateDepthClamp(): boolean {\r\n    return this._emulateDepthClamp;\r\n  }\r\n  set emulateDepthClamp(val: boolean) {\r\n    if (val && !this.device?.getShaderCaps().supportFragmentDepth) {\r\n      console.error('can not enable depth clamp emulation');\r\n    } else {\r\n      this._emulateDepthClamp = !!val;\r\n    }\r\n  }\r\n  get reflection(): PBReflection {\r\n    return this._reflection;\r\n  }\r\n  get device(): Device {\r\n    return this._device;\r\n  }\r\n  reset(): void {\r\n    this._workgroupSize = null;\r\n    this._structInfo = {};\r\n    this._uniforms = [];\r\n    this._scopeStack = [];\r\n    this._globalScope = null;\r\n    this._builtinScope = null;\r\n    this._inputScope = null;\r\n    this._outputScope = null;\r\n    this._inputs = [];\r\n    this._outputs = [];\r\n    this._vertexAttributes = [];\r\n    this._depthRangeCorrection = this._deviceType === 'webgpu';\r\n    this._reflection = new PBReflection(this);\r\n    this._autoStructureTypeIndex = 0;\r\n    this._nameMap = [];\r\n  }\r\n  queryGlobal(name: string): PBShaderExp {\r\n    return this.reflection.tag(name);\r\n  }\r\n  isVertexShader(): boolean {\r\n    return this._shaderType === ShaderType.Vertex;\r\n  }\r\n  isFragmentShader(): boolean {\r\n    return this._shaderType === ShaderType.Fragment;\r\n  }\r\n  isComputeShader(): boolean {\r\n    return this._shaderType === ShaderType.Compute;\r\n  }\r\n  pushScope(scope: PBScope) {\r\n    this._scopeStack.unshift(scope);\r\n  }\r\n  popScope(): PBScope {\r\n    return this._scopeStack.shift();\r\n  }\r\n  currentScope(): PBScope {\r\n    return this._scopeStack[0];\r\n  }\r\n  buildRender(options: ProgramBuilder.RenderOptions): ProgramBuilder.BuildRenderResult {\r\n    currentProgramBuilder = this;\r\n    this._lastError = null;\r\n    this.defineInternalStructs();\r\n    const ret = this.buildRenderSource(options);\r\n    currentProgramBuilder = null;\r\n    this.reset();\r\n    return ret;\r\n  }\r\n  buildCompute(options: ProgramBuilder.ComputeOptions): ProgramBuilder.BuildComputeResult {\r\n    currentProgramBuilder = this;\r\n    this._lastError = null;\r\n    this._workgroupSize = options.workgroupSize;\r\n    this.defineInternalStructs();\r\n    const ret = this.buildComputeSource(options);\r\n    currentProgramBuilder = null;\r\n    this.reset();\r\n    return ret;\r\n  }\r\n  buildRenderProgram(options: ProgramBuilder.RenderOptions): GPUProgram {\r\n    const ret = this.buildRender(options);\r\n    return ret ? this._device.createGPUProgram({\r\n      type: 'render',\r\n      label: options.label,\r\n      params: {\r\n        vs: ret[0],\r\n        fs: ret[1],\r\n        bindGroupLayouts: ret[2],\r\n        vertexAttributes: ret[3]\r\n      }\r\n    }) : null;\r\n  }\r\n  buildComputeProgram(options: ProgramBuilder.ComputeOptions): GPUProgram {\r\n    const ret = this.buildCompute(options);\r\n    return ret ? this._device.createGPUProgram({\r\n      type: 'compute',\r\n      params: {\r\n        source: ret[0],\r\n        bindGroupLayouts: ret[1],\r\n      },\r\n    }) : null;\r\n  }\r\n  getDeviceType() {\r\n    return this._deviceType;\r\n  }\r\n  addressOf(ref: PBShaderExp): PBShaderExp {\r\n    if (this.getDeviceType() !== 'webgpu') {\r\n      throw new errors.PBDeviceNotSupport('pointer shader type');\r\n    }\r\n    if (!ref.$ast.isReference()) {\r\n      throw new errors.PBReferenceValueRequired(ref);\r\n    }\r\n    const exp = new PBShaderExp('', ref.$ast.getType());\r\n    exp.$ast = new AST.ASTAddressOf(ref.$ast);\r\n    return exp;\r\n  }\r\n  referenceOf(ptr: PBShaderExp): PBShaderExp {\r\n    if (this.getDeviceType() !== 'webgpu') {\r\n      throw new errors.PBDeviceNotSupport('pointer shader type');\r\n    }\r\n    if (!ptr.$ast.getType().isPointerType()) {\r\n      throw new errors.PBPointerValueRequired(ptr);\r\n    }\r\n    const ast = new AST.ASTReferenceOf(ptr.$ast);\r\n    const exp = new PBShaderExp('', ast.getType());\r\n    exp.$ast = ast;\r\n    return exp;\r\n  }\r\n  struct(structName: string, instanceName: string): PBShaderExp {\r\n    let ctor: ShaderTypeFunc = null;\r\n    for (const st of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      if (st & this._shaderType) {\r\n        const structInfo = this._structInfo[st];\r\n        ctor = structInfo?.structs[structName];\r\n        if (ctor) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (!ctor) {\r\n      throw new errors.PBParamValueError('struct', 'structName', `Struct type ${structName} not exists`);\r\n    }\r\n    return ctor.call(this, instanceName);\r\n  }\r\n  /** @internal */\r\n  isIdenticalStruct(a: PBStructTypeInfo, b: PBStructTypeInfo): boolean {\r\n    if (a.structName && b.structName && a.structName !== b.structName) {\r\n      return false;\r\n    }\r\n    if (a.structMembers.length !== b.structMembers.length) {\r\n      return false;\r\n    }\r\n    for (let index = 0; index < a.structMembers.length; index++) {\r\n      const val = a.structMembers[index];\r\n      const other = b.structMembers[index];\r\n      if (val.name !== other.name) {\r\n        return false;\r\n      }\r\n      if (val.type.isStructType()) {\r\n        if (!other.type.isStructType()) {\r\n          return false;\r\n        }\r\n        if (!this.isIdenticalStruct(val.type, other.type)) {\r\n          return false;\r\n        }\r\n      } else if (val.type.typeId !== other.type.typeId) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  generateStructureName(): string {\r\n    return `ch_generated_struct_name${this._autoStructureTypeIndex++}`;\r\n  }\r\n  /** @internal */\r\n  getVertexAttributes(): number[] {\r\n    return this._vertexAttributes;\r\n  }\r\n  /** @internal */\r\n  defineHiddenStruct(type: PBStructTypeInfo) {\r\n    for (const shaderType of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      let structInfo = this._structInfo[shaderType];\r\n      if (!structInfo) {\r\n        structInfo = { structs: {}, types: [] };\r\n        this._structInfo[shaderType] = structInfo;\r\n      }\r\n      if (structInfo.structs[type.structName]) {\r\n        throw new errors.PBParamValueError('defineStruct', 'structName', `cannot re-define struct '${type.structName}'`);\r\n      }\r\n      structInfo.types.push(new AST.ASTStructDefine(type, true));\r\n    }\r\n  }\r\n  defineStruct(structName: string, layout: PBStructLayout, ...args: PBShaderExp[]): ShaderTypeFunc {\r\n    layout = layout || 'default';\r\n    const structType = new PBStructTypeInfo(structName || '', layout, args.map(arg => {\r\n      if (!arg.$typeinfo.isPrimitiveType() && !arg.$typeinfo.isArrayType() && !arg.$typeinfo.isStructType()) {\r\n        throw new Error(`invalid struct member type: '${arg.$str}'`);\r\n      }\r\n      return {\r\n        name: arg.$str,\r\n        type: arg.$typeinfo\r\n      };\r\n    }));\r\n    for (const shaderType of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      let structDef: AST.ASTStructDefine = null;\r\n      let ctor: ShaderTypeFunc = null;\r\n      const structInfo = this._structInfo[shaderType];\r\n      if (structInfo) {\r\n        if (currentProgramBuilder.shaderType === shaderType && structInfo.structs[structType.structName]) {\r\n          throw new errors.PBParamValueError('defineStruct', 'structName', `cannot re-define struct '${structType.structName}'`);\r\n        }\r\n        for (const type of structInfo.types) {\r\n          if (!type.builtin && this.isIdenticalStruct(type.getType(), structType)) {\r\n            structDef = type;\r\n            ctor = structInfo.structs[type.getType().structName];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (structDef) {\r\n        if (structDef.type.layout !== layout) {\r\n          throw new Error(`Can not redefine struct ${structDef.type.structName} with different layout`);\r\n        }\r\n        if (shaderType !== currentProgramBuilder.shaderType) {\r\n          if (!this._structInfo[currentProgramBuilder.shaderType]) {\r\n            this._structInfo[currentProgramBuilder.shaderType] = { structs: {}, types: [] };\r\n          }\r\n          this._structInfo[currentProgramBuilder.shaderType].types.push(structDef);\r\n          this._structInfo[currentProgramBuilder.shaderType].structs[structDef.getType().structName] = ctor;\r\n        }\r\n        return ctor;\r\n      }\r\n    }\r\n    return this.internalDefineStruct(structName || this.generateStructureName(), layout, this._shaderType, false, ...args);\r\n  }\r\n  defineStructByType(structType: PBStructTypeInfo): ShaderTypeFunc {\r\n    const typeCopy = structType.extends(structType.structName || this.generateStructureName(), []);\r\n    for (const shaderType of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      let structDef: AST.ASTStructDefine = null;\r\n      let ctor: ShaderTypeFunc = null;\r\n      const structInfo = this._structInfo[shaderType];\r\n      if (structInfo) {\r\n        if (currentProgramBuilder.shaderType === shaderType && structInfo.structs[typeCopy.structName]) {\r\n          throw new errors.PBParamValueError('defineStruct', 'structName', `cannot re-define struct '${typeCopy.structName}'`);\r\n        }\r\n        for (const type of structInfo.types) {\r\n          if (!type.builtin && this.isIdenticalStruct(type.getType(), typeCopy)) {\r\n            structDef = type;\r\n            ctor = structInfo.structs[type.getType().structName];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (structDef) {\r\n        if (structDef.type.layout !== typeCopy.layout) {\r\n          throw new Error(`Can not redefine struct ${structDef.type.structName} with different layout`);\r\n        }\r\n        if (shaderType !== currentProgramBuilder.shaderType) {\r\n          if (!this._structInfo[currentProgramBuilder.shaderType]) {\r\n            this._structInfo[currentProgramBuilder.shaderType] = { structs: {}, types: [] };\r\n          }\r\n          this._structInfo[currentProgramBuilder.shaderType].types.push(structDef);\r\n          this._structInfo[currentProgramBuilder.shaderType].structs[structDef.getType().structName] = ctor;\r\n        }\r\n        return ctor;\r\n      }\r\n    }\r\n    return this.internalDefineStructByType(this._shaderType, false, typeCopy);\r\n  }\r\n  /** @internal */\r\n  internalDefineStruct(structName: string, layout: PBStructLayout, shaderTypeMask: number, builtin: boolean, ...args: PBShaderExp[]): ShaderTypeFunc {\r\n    const structType = new PBStructTypeInfo(structName, layout, args.map(arg => {\r\n      if (!arg.$typeinfo.isPrimitiveType() && !arg.$typeinfo.isArrayType() && !arg.$typeinfo.isStructType()) {\r\n        throw new Error(`invalid struct member type: '${arg.$str}'`);\r\n      }\r\n      return {\r\n        name: arg.$str,\r\n        type: arg.$typeinfo\r\n      };\r\n    }));\r\n    return this.internalDefineStructByType(shaderTypeMask, builtin, structType);\r\n  }\r\n  /** @internal */\r\n  internalDefineStructByType(shaderTypeMask: number, builtin: boolean, structType: PBStructTypeInfo): ShaderTypeFunc {\r\n    const struct = makeConstructor(function structConstructor(...blockArgs: any[]) {\r\n      let e: PBShaderExp;\r\n      if (blockArgs.length === 1 && typeof blockArgs[0] === 'string') {\r\n        e = new PBShaderExp(blockArgs[0], structType);\r\n      } else {\r\n        e = new PBShaderExp('', structType);\r\n        e.$ast = new AST.ASTShaderExpConstructor(e.$typeinfo, blockArgs.map(arg => arg instanceof PBShaderExp ? arg.$ast : arg));\r\n      }\r\n      return e;\r\n    } as ShaderTypeFunc, structType);\r\n    for (const shaderType of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      if (shaderTypeMask & shaderType) {\r\n        let structInfo = this._structInfo[shaderType];\r\n        if (!structInfo) {\r\n          structInfo = { structs: {}, types: [] };\r\n          this._structInfo[shaderType] = structInfo;\r\n        }\r\n        if (structInfo.structs[structType.structName]) {\r\n          throw new errors.PBParamValueError('defineStruct', 'structName', `cannot re-define struct '${structType.structName}'`);\r\n        }\r\n        structInfo.types.push(new AST.ASTStructDefine(structType, builtin));\r\n        structInfo.structs[structType.structName] = struct;\r\n      }\r\n    }\r\n    // this.changeStructLayout(structType, layout);\r\n    return struct;\r\n  }\r\n  /** @internal */\r\n  getFunction(name: string): AST.ASTFunction {\r\n    return this._globalScope ? this._globalScope.$getFunction(name) : null;\r\n  }\r\n  /** @internal */\r\n  get structInfo(): StructDef {\r\n    return this._structInfo[this._shaderType];\r\n  }\r\n  /** @internal */\r\n  getBlockName(instanceName: string): string {\r\n    return `ch_block_name_${instanceName}`;\r\n  }\r\n  /** @internal */\r\n  defineBuiltinStruct(shaderType: ShaderType, inOrOut: 'in' | 'out'): [ShaderTypeFunc, PBShaderExp, string, PBShaderExp] {\r\n    const structName = inOrOut === 'in' ? AST.getBuiltinInputStructName(shaderType) : AST.getBuiltinOutputStructName(shaderType);\r\n    const instanceName = inOrOut === 'in' ? AST.getBuiltinInputStructInstanceName(shaderType) : AST.getBuiltinOutputStructInstanceName(shaderType);\r\n    const stage = shaderType === ShaderType.Vertex\r\n      ? 'vertex'\r\n      : shaderType === ShaderType.Fragment\r\n        ? 'fragment'\r\n        : 'compute';\r\n    const builtinVars = AST.builtinVariables['webgpu'];\r\n    const args: { name: string, type: PBPrimitiveTypeInfo | PBArrayTypeInfo | PBStructTypeInfo }[] = [];\r\n    const prefix: string[] = [];\r\n    for (const k in builtinVars) {\r\n      if (builtinVars[k].stage === stage && builtinVars[k].inOrOut === inOrOut) {\r\n        args.push({ name: builtinVars[k].name, type: builtinVars[k].type });\r\n        prefix.push(`@builtin(${builtinVars[k].semantic}) `);\r\n      }\r\n    }\r\n    const inoutList = inOrOut === 'in' ? this._inputs : this._outputs;\r\n    for (const k of inoutList) {\r\n      // for debug only\r\n      if (!(k[1] instanceof AST.ASTDeclareVar)) {\r\n        throw new errors.PBInternalError('defineBuiltinStruct() failed: input/output is not declare var ast node');\r\n      }\r\n      const type = k[1].value.getType();\r\n      if (!type.isPrimitiveType() && !type.isArrayType() && !type.isStructType()) {\r\n        throw new Error(`invalid in/out variable type: '${k[1].value.name}'`);\r\n      }\r\n      args.push({ name: k[1].value.name, type: type });\r\n      prefix.push(`@location(${k[1].value.value.$location}) `);\r\n    }\r\n    if (args.length > 0) {\r\n      const st = this.findStructType(structName, shaderType);\r\n      if (st) {\r\n        st.getType().reset(structName, 'default', args);\r\n        st.prefix = prefix;\r\n        return null;\r\n      } else {\r\n        const structType = this.internalDefineStructByType(this._shaderType, false, new PBStructTypeInfo(structName, 'default', args));\r\n        this.findStructType(structName, shaderType).prefix = prefix;\r\n        const structInstance = this.struct(structName, instanceName);\r\n        const structInstanceIN = inOrOut === 'in' ? this.struct(structName, 'ch_app_input') : structInstance;\r\n        return [structType, structInstance, structName, structInstanceIN];\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /** @internal */\r\n  private defineInternalStructs() {\r\n    this.defineHiddenStruct(typeFrexpResult);\r\n    this.defineHiddenStruct(typeFrexpResultVec2);\r\n    this.defineHiddenStruct(typeFrexpResultVec3);\r\n    this.defineHiddenStruct(typeFrexpResultVec4);\r\n  }\r\n  /** @internal */\r\n  private array(...args: ExpValueNonArrayType[]) {\r\n    if (args.length === 0) {\r\n      throw new errors.PBParamLengthError('array');\r\n    }\r\n    args = args.map(arg => this.normalizeExpValue(arg));\r\n    let typeok = true;\r\n    let type: PBTypeInfo = null;\r\n    let isBool = true;\r\n    let isFloat = true;\r\n    let isInt = true;\r\n    let isUint = true;\r\n    let isComposite = false;\r\n    for (const arg of args) {\r\n      if (arg instanceof PBShaderExp) {\r\n        const argType = arg.$ast.getType();\r\n        if (!argType.isConstructible()) {\r\n          typeok = false;\r\n          break;\r\n        }\r\n        if (!type) {\r\n          type = argType;\r\n        } else if (argType.typeId !== type.typeId) {\r\n          typeok = false;\r\n        }\r\n      }\r\n    }\r\n    if (typeok) {\r\n      if (type && type.isPrimitiveType() && type.isScalarType()) {\r\n        isBool = type.primitiveType === PBPrimitiveType.BOOL;\r\n        isFloat = type.primitiveType === PBPrimitiveType.F32;\r\n        isUint = type.primitiveType === PBPrimitiveType.U32;\r\n        isInt = type.primitiveType === PBPrimitiveType.I32;\r\n      } else if (type) {\r\n        isBool = false;\r\n        isFloat = false;\r\n        isUint = false;\r\n        isInt = false;\r\n        isComposite = true;\r\n      }\r\n      for (const arg of args) {\r\n        if (!(arg instanceof PBShaderExp) && isComposite) {\r\n          typeok = false;\r\n          break;\r\n        }\r\n        if (typeof arg === 'number') {\r\n          isBool = false;\r\n          if ((arg | 0) === arg) {\r\n            if (arg < 0) {\r\n              isUint = false;\r\n              isInt = isInt && (arg >= (0x80000000 >> 0));\r\n            } else {\r\n              isUint = isUint && (arg <= 0xFFFFFFFF);\r\n              isInt = isInt && (arg <= 0x7FFFFFFF);\r\n            }\r\n          }\r\n        } else if (typeof arg === 'boolean') {\r\n          isFloat = false;\r\n          isInt = false;\r\n          isUint = false;\r\n        }\r\n      }\r\n    }\r\n    if (typeok && !isComposite) {\r\n      if (isBool) {\r\n        type = typeBool;\r\n      } else if (isInt) {\r\n        type = typeI32;\r\n      } else if (isUint) {\r\n        type = typeU32;\r\n      } else if (isFloat) {\r\n        type = typeF32;\r\n      }\r\n      typeok = !!type;\r\n    }\r\n    if (!typeok) {\r\n      throw new errors.PBParamTypeError('array');\r\n    }\r\n    if (!type.isPrimitiveType() && !type.isArrayType() && !type.isStructType()) {\r\n      throw new errors.PBParamTypeError('array');\r\n    }\r\n    const arrayType = new PBArrayTypeInfo(type, args.length);\r\n    const exp = new PBShaderExp('', arrayType);\r\n    exp.$ast = new AST.ASTShaderExpConstructor(arrayType, args.map(arg => {\r\n      if (arg instanceof PBShaderExp) {\r\n        return arg.$ast;\r\n      }\r\n      if (!type.isPrimitiveType() || !type.isScalarType()) {\r\n        throw new errors.PBTypeCastError(arg, typeof arg, type);\r\n      }\r\n      return new AST.ASTScalar(arg, type);\r\n    }));\r\n    return exp;\r\n  }\r\n  discard() {\r\n    this.currentScope().$ast.statements.push(new AST.ASTDiscard());\r\n  }\r\n  /** @internal */\r\n  tagShaderExp(getter: PBReflectionTagGetter, tagValue: ProgramBuilder.ShaderExpTagValue) {\r\n    if (typeof tagValue === 'string') {\r\n      this._reflection.tag(tagValue, getter);\r\n    } else if (Array.isArray(tagValue)) {\r\n      tagValue.forEach(tag => this.tagShaderExp(getter, tag));\r\n    } else {\r\n      for (const k of Object.keys(tagValue)) {\r\n        this.tagShaderExp((scope: PBGlobalScope) => {\r\n          const value = getter(scope);\r\n          return value[k]\r\n        }, tagValue[k]);\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  in(location: number, name: string, variable: PBShaderExp): void {\r\n    if (this._inputs[location]) {\r\n      throw new Error(`input location ${location} already declared`);\r\n    }\r\n    variable.$location = location;\r\n    variable.$declareType = AST.DeclareType.DECLARE_TYPE_IN;\r\n    variable.$inout = 'in';\r\n    this._inputs[location] = [name, new AST.ASTDeclareVar(new AST.ASTPrimitive(variable))];\r\n    Object.defineProperty(this._inputScope, name, {\r\n      get: function (this: PBInputScope) {\r\n        return variable;\r\n      },\r\n      set: function () {\r\n        throw new Error(`cannot assign to readonly variable: ${name}`);\r\n      }\r\n    });\r\n    variable.$tags.forEach(val => this.tagShaderExp(() => variable, val));\r\n  }\r\n  /** @internal */\r\n  out(location: number, name: string, variable: PBShaderExp): void {\r\n    if (this._outputs[location]) {\r\n      throw new Error(`output location ${location} has already been used`);\r\n    }\r\n    variable.$location = location;\r\n    variable.$declareType = AST.DeclareType.DECLARE_TYPE_OUT;\r\n    variable.$inout = 'out';\r\n    this._outputs[location] = [name, new AST.ASTDeclareVar(new AST.ASTPrimitive(variable))];\r\n    Object.defineProperty(this._outputScope, name, {\r\n      get: function (this: PBOutputScope) {\r\n        return variable;\r\n      },\r\n      set: function (this: PBOutputScope, v) {\r\n        currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueScalar(variable.$ast), v instanceof PBShaderExp ? v.$ast : v));\r\n      }\r\n    });\r\n  }\r\n  /** @internal */\r\n  getDefaultSampler(t: PBShaderExp, comparison: boolean): PBShaderExp {\r\n    const u = this._uniforms.findIndex(val => val.texture?.exp === t);\r\n    if (u < 0) {\r\n      throw new Error('invalid texture uniform object');\r\n    }\r\n    const samplerType = comparison ? 'comparison' : 'sample';\r\n    if (this._uniforms[u].texture.autoBindSampler && this._uniforms[u].texture.autoBindSampler !== samplerType) {\r\n      throw new Error('multiple sampler not supported');\r\n    }\r\n    this._uniforms[u].texture.autoBindSampler = samplerType;\r\n    if (this._deviceType === 'webgpu') {\r\n      const samplerName = AST.genSamplerName(t.$str, comparison);\r\n      if (!this.globalScope[samplerName]) {\r\n        throw new Error(`failed to find sampler name ${samplerName}`);\r\n      }\r\n      return this.globalScope[samplerName];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /** @internal */\r\n  normalizeExpValue(value: ExpValueType): ExpValueNonArrayType {\r\n    if (Array.isArray(value)) {\r\n      const converted = value.map(val => Array.isArray(val) ? this.normalizeExpValue(val) : val);\r\n      return this.array(...converted);\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n  /** @internal */\r\n  guessExpValueType(value: ExpValueType): PBTypeInfo {\r\n    const val = this.normalizeExpValue(value);\r\n    if (typeof val === 'boolean') {\r\n      return typeBool;\r\n    } else if (typeof val === 'number') {\r\n      if (!Number.isInteger(val)) {\r\n        return typeF32;\r\n      } else if (val >= (0x80000000 >> 1) && val <= 0x7FFFFFFF) {\r\n        return typeI32;\r\n      } else if (val >= 0 && val <= 0xFFFFFFFF) {\r\n        return typeU32;\r\n      } else {\r\n        throw new errors.PBValueOutOfRange(val);\r\n      }\r\n    } else if (val instanceof PBShaderExp) {\r\n      return val.$ast?.getType() || val.$typeinfo;\r\n    }\r\n  }\r\n  /** @internal */\r\n  findStructType(name: string, shaderType: number): AST.ASTStructDefine {\r\n    for (const st of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      if (st & shaderType) {\r\n        const structInfo = this._structInfo[st];\r\n        if (structInfo) {\r\n          for (const t of structInfo.types) {\r\n            if (t.type.structName === name) {\r\n              return t;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  findStructConstructor(name: string, shaderType: number): ShaderTypeFunc {\r\n    for (const st of [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Compute]) {\r\n      if (st & shaderType) {\r\n        const structInfo = this._structInfo[st];\r\n        if (structInfo && structInfo.structs?.[name]) {\r\n          return structInfo.structs[name];\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  private buildComputeSource(options: ProgramBuilder.ComputeOptions): ProgramBuilder.BuildComputeResult {\r\n    try {\r\n      this._lastError = null;\r\n      this._shaderType = ShaderType.Compute\r\n      this._scopeStack = [];\r\n      this._globalScope = new PBGlobalScope();\r\n      this._builtinScope = new PBBuiltinScope();\r\n      this._inputs = [];\r\n      this._outputs = [];\r\n      this._inputScope = new PBInputScope();\r\n      this._outputScope = new PBOutputScope();\r\n      this._reflection.clear();\r\n      this.generate(options.compute);\r\n      // this.removeUnusedSamplerBindings(this._globalScope);\r\n      this.mergeUniformsCompute(this._globalScope);\r\n      this.updateUniformBindings([this._globalScope], [ShaderType.Compute]);\r\n      return [\r\n        this.generateComputeSource(this._globalScope, this._builtinScope),\r\n        this.createBindGroupLayouts(options.label),\r\n      ];\r\n    } catch (err) {\r\n      if (err instanceof errors.PBError) {\r\n        this._lastError = err.getMessage(this.getDeviceType());\r\n        console.error(this._lastError);\r\n        return null;\r\n      } else if (err instanceof Error) {\r\n        this._lastError = err.toString();\r\n        console.error(this._lastError);\r\n        return null;\r\n      } else {\r\n        this._lastError = Object.prototype.toString.call(err);\r\n        console.log(`Error: ${this._lastError}`);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  private buildRenderSource(options: ProgramBuilder.RenderOptions): ProgramBuilder.BuildRenderResult {\r\n    try {\r\n      this._lastError = null;\r\n\r\n      this._shaderType = ShaderType.Vertex;\r\n      this._scopeStack = [];\r\n      this._globalScope = new PBGlobalScope();\r\n      this._builtinScope = new PBBuiltinScope();\r\n      this._inputs = [];\r\n      this._outputs = [];\r\n      this._inputScope = new PBInputScope();\r\n      this._outputScope = new PBOutputScope();\r\n      this._reflection.clear();\r\n      this.generate(options.vertex);\r\n      const vertexScope = this._globalScope;\r\n      const vertexBuiltinScope = this._builtinScope;\r\n      const vertexInputs = this._inputs;\r\n      const vertexOutputs = this._outputs;\r\n      if (this._deviceType === 'webgpu') {\r\n        // this.removeUnusedSamplerBindings(vertexScope);\r\n      }\r\n\r\n      this._shaderType = ShaderType.Fragment;\r\n      this._scopeStack = [];\r\n      this._globalScope = new PBGlobalScope();\r\n      this._builtinScope = new PBBuiltinScope();\r\n      this._inputs = [];\r\n      this._outputs = [];\r\n      this._inputScope = new PBInputScope();\r\n      this._outputScope = new PBOutputScope();\r\n      this._reflection.clear();\r\n      vertexOutputs.forEach((val, index) => {\r\n        this.in(index, val[0], new PBShaderExp(val[1].value.name, val[1].value.getType()).tag(...val[1].value.value.$tags));\r\n      });\r\n      this.generate(options.fragment);\r\n      const fragScope = this._globalScope;\r\n      const fragBuiltinScope = this._builtinScope;\r\n      const fragInputs = this._inputs;\r\n      const fragOutputs = this._outputs;\r\n      if (this._deviceType === 'webgpu') {\r\n        // this.removeUnusedSamplerBindings(fragScope);\r\n      }\r\n\r\n      this.mergeUniforms(vertexScope, fragScope);\r\n      this.updateUniformBindings([vertexScope, fragScope], [ShaderType.Vertex, ShaderType.Fragment]);\r\n\r\n      return [\r\n        this.generateRenderSource(ShaderType.Vertex, vertexScope, vertexBuiltinScope, vertexInputs.map(val => val[1]), vertexOutputs.map(val => val[1])),\r\n        this.generateRenderSource(ShaderType.Fragment, fragScope, fragBuiltinScope, fragInputs.map(val => val[1]), fragOutputs.map(val => val[1])),\r\n        this.createBindGroupLayouts(options.label),\r\n        this._vertexAttributes,\r\n      ];\r\n    } catch (err) {\r\n      if (err instanceof errors.PBError) {\r\n        this._lastError = err.getMessage(this.getDeviceType());\r\n        console.error(this._lastError);\r\n        return null;\r\n      } else if (err instanceof Error) {\r\n        this._lastError = err.toString();\r\n        console.error(this._lastError);\r\n        return null;\r\n      } else {\r\n        this._lastError = Object.prototype.toString.call(err);\r\n        console.log(`Error: ${this._lastError}`);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  private generate(\r\n    body?: (this: PBGlobalScope) => void,\r\n  ): void {\r\n    this.pushScope(this._globalScope);\r\n    if (this._emulateDepthClamp && this._shaderType === ShaderType.Vertex) {\r\n      this._globalScope.$outputs.clamppedDepth = this.float().tag('CLAMPPED_DEPTH');\r\n    }\r\n    body && body.call(this._globalScope);\r\n    this.popScope();\r\n  }\r\n  /** @internal */\r\n  private generateRenderSource(shaderType: ShaderType, scope: PBGlobalScope, builtinScope: PBBuiltinScope, inputs: AST.ShaderAST[], outputs: AST.ShaderAST[]) {\r\n    const context = {\r\n      type: shaderType,\r\n      mrt: shaderType === ShaderType.Fragment && outputs.length > 1,\r\n      defines: [],\r\n      extensions: new Set<string>(),\r\n      builtins: [...builtinScope.$_usedBuiltins],\r\n      types: this._structInfo[shaderType]?.types || [],\r\n      typeReplacement: new Map(),\r\n      inputs: inputs,\r\n      outputs: outputs,\r\n      global: scope,\r\n      vertexAttributes: this._vertexAttributes,\r\n      workgroupSize: null,\r\n    };\r\n    switch (this._deviceType) {\r\n      case 'webgl':\r\n        for (const u of this._uniforms) {\r\n          if (u.texture) {\r\n            const type = u.texture.exp.$ast.getType();\r\n            if (type.isTextureType() && type.isDepthTexture()) {\r\n              if (u.texture.autoBindSampler === 'comparison') {\r\n                throw new errors.PBDeviceNotSupport('depth texture comparison');\r\n              }\r\n              if (u.texture.autoBindSampler === 'sample') {\r\n                if (type.is2DTexture()) {\r\n                  context.typeReplacement.set(u.texture.exp, typeTex2D);\r\n                } else if (type.isCubeTexture()) {\r\n                  context.typeReplacement.set(u.texture.exp, typeTexCube);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return scope.$ast.toWebGL('', context);\r\n      case 'webgl2':\r\n        for (const u of this._uniforms) {\r\n          if (u.texture) {\r\n            const type = u.texture.exp.$ast.getType();\r\n            if (type.isTextureType() && type.isDepthTexture() && u.texture.autoBindSampler === 'sample') {\r\n              if (type.is2DTexture()) {\r\n                context.typeReplacement.set(u.texture.exp, typeTex2D);\r\n              } else if (type.isCubeTexture()) {\r\n                context.typeReplacement.set(u.texture.exp, typeTexCube);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return scope.$ast.toWebGL2('', context);\r\n      case 'webgpu':\r\n        return scope.$ast.toWGSL('', context);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  /** @internal */\r\n  private generateComputeSource(scope: PBGlobalScope, builtinScope: PBBuiltinScope) {\r\n    const context = {\r\n      type: ShaderType.Compute,\r\n      mrt: false,\r\n      defines: [],\r\n      extensions: new Set<string>(),\r\n      builtins: [...builtinScope.$_usedBuiltins],\r\n      types: this._structInfo[ShaderType.Compute]?.types || [],\r\n      typeReplacement: null,\r\n      inputs: [],\r\n      outputs: [],\r\n      global: scope,\r\n      vertexAttributes: [],\r\n      workgroupSize: this._workgroupSize,\r\n    };\r\n    return scope.$ast.toWGSL('', context);\r\n  }\r\n  /** @internal */\r\n  private mergeUniformsCompute(globalScope: PBGlobalScope) {\r\n    const uniformList: { members: PBShaderExp[], uniforms: number[] }[] = [];\r\n    for (let i = 0; i < this._uniforms.length; i++) {\r\n      const u = this._uniforms[i];\r\n      if (u.block && u.block.exp.$declareType === AST.DeclareType.DECLARE_TYPE_UNIFORM) {\r\n        const type = u.block.exp.$ast.getType();\r\n        if (type.isStructType() && type.detail.layout === 'std140') {\r\n          continue;\r\n        }\r\n        if (!uniformList[u.group]) {\r\n          uniformList[u.group] = { members: [], uniforms: [] };\r\n        }\r\n        uniformList[u.group].members.push(new PBShaderExp(u.block.exp.$str, u.block.exp.$ast.getType()));\r\n        uniformList[u.group].uniforms.push(i);\r\n      }\r\n    }\r\n    const uniformLists = [uniformList];\r\n    const nameList = [COMPUTE_UNIFORM_NAME];\r\n    const maskList = [ShaderType.Compute];\r\n    for (let i = 0; i < 1; i++) {\r\n      for (const k in uniformLists[i]) {\r\n        if (uniformLists[i][k]?.members.length > 0) {\r\n          const uname = `${nameList[i]}_${k}`;\r\n          const t = currentProgramBuilder.internalDefineStruct(this.generateStructureName(), 'std140', maskList[i], false, ...uniformLists[i][k].members);\r\n          globalScope[uname] = t().uniform(Number(k));\r\n          const index = this._uniforms.findIndex(val => val.block?.name === uname);\r\n          this._uniforms[index].mask = maskList[i];\r\n          let nameMap = this._nameMap[Number(k)];\r\n          if (!nameMap) {\r\n            nameMap = {};\r\n            this._nameMap[Number(k)] = nameMap;\r\n          }\r\n          for (let j = uniformLists[i][k].uniforms.length - 1; j >= 0; j--) {\r\n            const u = uniformLists[i][k].uniforms[j];\r\n            const exp = this._uniforms[u].block.exp;\r\n            nameMap[exp.$str] = uname;\r\n            exp.$str = `${uname}.${exp.$str}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this._uniforms = this._uniforms.filter(val => {\r\n      if (!val.block || val.block.exp.$declareType !== AST.DeclareType.DECLARE_TYPE_UNIFORM) {\r\n        return true;\r\n      }\r\n      const type = val.block.exp.$ast.getType();\r\n      return type.isTextureType() || type.isSamplerType() || (type.isStructType() && type.detail.layout === 'std140');\r\n    });\r\n  }\r\n  /** @internal */\r\n  private mergeUniforms(globalScopeVertex: PBGlobalScope, globalScopeFragmet: PBGlobalScope) {\r\n    const vertexUniformList: { members: PBShaderExp[], uniforms: number[] }[] = [];\r\n    const fragUniformList: { members: PBShaderExp[], uniforms: number[] }[] = [];\r\n    const sharedUniformList: { members: PBShaderExp[], uniforms: number[] }[] = [];\r\n    for (let i = 0; i < this._uniforms.length; i++) {\r\n      const u = this._uniforms[i];\r\n      if (u.block && u.block.exp.$declareType === AST.DeclareType.DECLARE_TYPE_UNIFORM) {\r\n        const type = u.block.exp.$ast.getType();\r\n        if (type.isStructType() && type.detail.layout === 'std140') {\r\n          continue;\r\n        }\r\n        const v = !!(u.mask & ShaderType.Vertex);\r\n        const f = !!(u.mask & ShaderType.Fragment);\r\n        if (v && f) {\r\n          if (!sharedUniformList[u.group]) {\r\n            sharedUniformList[u.group] = { members: [], uniforms: [] };\r\n          }\r\n          sharedUniformList[u.group].members.push(new PBShaderExp(u.block.exp.$str, u.block.exp.$ast.getType()));\r\n          sharedUniformList[u.group].uniforms.push(i);\r\n        } else if (v) {\r\n          if (!vertexUniformList[u.group]) {\r\n            vertexUniformList[u.group] = { members: [], uniforms: [] };\r\n          }\r\n          vertexUniformList[u.group].members.push(new PBShaderExp(u.block.exp.$str, u.block.exp.$ast.getType()));\r\n          vertexUniformList[u.group].uniforms.push(i);\r\n        } else if (f) {\r\n          if (!fragUniformList[u.group]) {\r\n            fragUniformList[u.group] = { members: [], uniforms: [] };\r\n          }\r\n          fragUniformList[u.group].members.push(new PBShaderExp(u.block.exp.$str, u.block.exp.$ast.getType()));\r\n          fragUniformList[u.group].uniforms.push(i);\r\n        }\r\n      }\r\n    }\r\n    const uniformLists = [vertexUniformList, fragUniformList, sharedUniformList];\r\n    const nameList = [VERTEX_UNIFORM_NAME, FRAGMENT_UNIFORM_NAME, SHARED_UNIFORM_NAME];\r\n    const maskList = [ShaderType.Vertex, ShaderType.Fragment, ShaderType.Vertex | ShaderType.Fragment];\r\n    for (let i = 0; i < 3; i++) {\r\n      for (const k in uniformLists[i]) {\r\n        if (uniformLists[i][k]?.members.length > 0) {\r\n          const uname = `${nameList[i]}_${k}`;\r\n          const structName = this.generateStructureName();\r\n          const t = currentProgramBuilder.internalDefineStruct(structName, 'std140', maskList[i], false, ...uniformLists[i][k].members);\r\n          if (maskList[i] & ShaderType.Vertex) {\r\n            globalScopeVertex[uname] = t().uniform(Number(k));\r\n          }\r\n          if (maskList[i] & ShaderType.Fragment) {\r\n            globalScopeFragmet[uname] = t().uniform(Number(k));\r\n          }\r\n          const index = this._uniforms.findIndex(val => val.block?.name === uname);\r\n          this._uniforms[index].mask = maskList[i];\r\n          let nameMap = this._nameMap[Number(k)];\r\n          if (!nameMap) {\r\n            nameMap = {};\r\n            this._nameMap[Number(k)] = nameMap;\r\n          }\r\n          for (let j = uniformLists[i][k].uniforms.length - 1; j >= 0; j--) {\r\n            const u = uniformLists[i][k].uniforms[j];\r\n            const exp = this._uniforms[u].block.exp;\r\n            nameMap[exp.$str] = uname;\r\n            exp.$str = `${uname}.${exp.$str}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this._uniforms = this._uniforms.filter(val => {\r\n      if (!val.block || val.block.exp.$declareType !== AST.DeclareType.DECLARE_TYPE_UNIFORM) {\r\n        return true;\r\n      }\r\n      const type = val.block.exp.$ast.getType();\r\n      return type.isTextureType() || type.isSamplerType() || (type.isStructType() && type.detail.layout === 'std140');\r\n    });\r\n  }\r\n  /** @internal */\r\n  private updateUniformBindings(scopes: PBGlobalScope[], shaderTypes: ShaderType[]) {\r\n    this._uniforms = this._uniforms.filter(val => !!val.mask);\r\n    const bindings: number[] = Array.from<number>({ length: MAX_BINDING_GROUPS }).fill(0);\r\n    for (const u of this._uniforms) {\r\n      u.binding = bindings[u.group]++;\r\n    }\r\n    for (let i = 0; i < scopes.length; i++) {\r\n      const scope = scopes[i];\r\n      const type = shaderTypes[i];\r\n      for (const u of this._uniforms) {\r\n        if (u.mask & type) {\r\n          const uniforms = (scope.$ast as AST.ASTGlobalScope).uniforms;\r\n          const name = u.block ? u.block.name : u.texture ? u.texture.exp.$str : u.sampler.$str;\r\n          const index = uniforms.findIndex(val => val.value.name === name);\r\n          if (index < 0) {\r\n            throw new Error(`updateUniformBindings() failed: unable to find uniform ${name}`);\r\n          }\r\n          (uniforms[index] as AST.ASTDeclareVar).binding = u.binding;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  private createBindGroupLayouts(label: string): BindGroupLayout[] {\r\n    const layouts: BindGroupLayout[] = [];\r\n    for (const uniformInfo of this._uniforms) {\r\n      let layout = layouts[uniformInfo.group];\r\n      if (!layout) {\r\n        layout = {\r\n          label: `${label || 'unknown'}[${uniformInfo.group}]`,\r\n          entries: []\r\n        };\r\n        if (this._nameMap[uniformInfo.group]) {\r\n          layout.nameMap = this._nameMap[uniformInfo.group];\r\n        }\r\n        layouts[uniformInfo.group] = layout;\r\n      }\r\n      const entry: BindGroupLayoutEntry = {\r\n        binding: uniformInfo.binding,\r\n        visibility: uniformInfo.mask,\r\n        type: null,\r\n        name: '',\r\n      };\r\n      if (uniformInfo.block) {\r\n        entry.type = (uniformInfo.block.exp.$typeinfo as PBStructTypeInfo).clone(this.getBlockName(uniformInfo.block.name));\r\n        entry.buffer = {\r\n          type: uniformInfo.block.exp.$declareType === AST.DeclareType.DECLARE_TYPE_UNIFORM\r\n            ? 'uniform'\r\n            : (uniformInfo.block.exp.$ast as AST.ASTPrimitive).writable ? 'storage' : 'read-only-storage',\r\n          hasDynamicOffset: uniformInfo.block.dynamicOffset,\r\n          uniformLayout: entry.type.toBufferLayout(0, (entry.type as PBStructTypeInfo).layout),\r\n        };\r\n        entry.name = uniformInfo.block.name;\r\n      } else if (uniformInfo.texture) {\r\n        entry.type = uniformInfo.texture.exp.$typeinfo;\r\n        if (!entry.type.isTextureType()) {\r\n          throw new Error('internal error');\r\n        }\r\n        if (entry.type.isStorageTexture()) {\r\n          entry.storageTexture = {\r\n            access: 'write-only',\r\n            viewDimension: entry.type.is1DTexture() ? '1d' : '2d',\r\n            format: entry.type.storageTexelFormat,\r\n          };\r\n        } else if (entry.type.isExternalTexture()) {\r\n          entry.externalTexture = {\r\n            autoBindSampler: uniformInfo.texture.autoBindSampler ? AST.genSamplerName(uniformInfo.texture.exp.$str, false) : null,\r\n          };\r\n        } else {\r\n          const sampleType = this._deviceType === 'webgpu' ? uniformInfo.texture.exp.$sampleType : (uniformInfo.texture.autoBindSampler && entry.type.isDepthTexture()) ? 'float' : uniformInfo.texture.exp.$sampleType;\r\n          let viewDimension: typeof entry.texture.viewDimension;\r\n          if (entry.type.isArrayTexture()) {\r\n            viewDimension = entry.type.isCubeTexture() ? 'cube-array' : '2d-array';\r\n          } else if (entry.type.is3DTexture()) {\r\n            viewDimension = '3d';\r\n          } else if (entry.type.isCubeTexture()) {\r\n            viewDimension = 'cube';\r\n          } else if (entry.type.is1DTexture()) {\r\n            viewDimension = '1d';\r\n          } else {\r\n            viewDimension = '2d';\r\n          }\r\n          entry.texture = {\r\n            sampleType: sampleType,\r\n            viewDimension: viewDimension,\r\n            multisampled: false,\r\n            autoBindSampler: null,\r\n            autoBindSamplerComparison: null,\r\n          };\r\n          if (this.getDeviceType() === 'webgpu' || uniformInfo.texture.autoBindSampler === 'sample') {\r\n            entry.texture.autoBindSampler = AST.genSamplerName(uniformInfo.texture.exp.$str, false);\r\n          }\r\n          if ((this.getDeviceType() === 'webgpu' && entry.type.isDepthTexture()) || uniformInfo.texture.autoBindSampler === 'comparison') {\r\n            entry.texture.autoBindSamplerComparison = AST.genSamplerName(uniformInfo.texture.exp.$str, true);\r\n          }\r\n        }\r\n        entry.name = uniformInfo.texture.exp.$str;\r\n      } else if (uniformInfo.sampler) {\r\n        entry.type = uniformInfo.sampler.$typeinfo;\r\n        if (!entry.type.isSamplerType()) {\r\n          throw new Error('internal error');\r\n        }\r\n        entry.sampler = {\r\n          type: (entry.type.accessMode === PBSamplerAccessMode.SAMPLE)\r\n            ? uniformInfo.sampler.$sampleType === 'float' ? 'filtering' : 'non-filtering'\r\n            : 'comparison'\r\n        };\r\n        entry.name = uniformInfo.sampler.$str;\r\n      } else {\r\n        throw new errors.PBInternalError('invalid uniform entry type');\r\n      }\r\n      layout.entries.push(entry);\r\n    }\r\n    for (let i = 0; i < layouts.length; i++) {\r\n      if (!layouts[i]) {\r\n        layouts[i] = {\r\n          label: `${label || 'unknown'}[${i}]`,\r\n          entries: []\r\n        };\r\n      }\r\n    }\r\n    return layouts;\r\n  }\r\n  /** @internal */\r\n  _getFunctionOverload(funcName: string, args: ExpValueNonArrayType[]): [PBFunctionTypeInfo, AST.ASTExpression[]] {\r\n    const thisArgs = args.filter(val => {\r\n      if (val instanceof PBShaderExp) {\r\n        const type = val.$ast.getType();\r\n        if (type.isStructType()\r\n          && (this._structInfo[this._shaderType]?.types.findIndex(t => t.type.structName === type.structName) < 0)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    const fn = this.globalScope.$getFunction(funcName);\r\n    return fn ? this._matchFunctionOverloading(fn.overloads, thisArgs) : null;\r\n  }\r\n  /** @internal */\r\n  _matchFunctionOverloading(overloadings: PBFunctionTypeInfo[], args: ExpValueNonArrayType[]): [PBFunctionTypeInfo, AST.ASTExpression[]] {\r\n    for (const overload of overloadings) {\r\n      if (args.length !== overload.argTypes.length) {\r\n        continue;\r\n      }\r\n      const result: AST.ASTExpression[] = [];\r\n      let matches = true;\r\n      for (let i = 0; i < args.length; i++) {\r\n        const argType = overload.argTypes[i].type;\r\n        const arg = args[i];\r\n        if (typeof arg === 'boolean') {\r\n          if (!argType.isPrimitiveType() || argType.primitiveType !== PBPrimitiveType.BOOL) {\r\n            matches = false;\r\n            break;\r\n          }\r\n          result.push(new AST.ASTScalar(arg, typeBool));\r\n        } else if (typeof arg === 'number') {\r\n          if (!argType.isPrimitiveType() || !argType.isScalarType() || argType.scalarType === PBPrimitiveType.BOOL) {\r\n            matches = false;\r\n            break;\r\n          }\r\n          if (argType.scalarType === PBPrimitiveType.I32) {\r\n            if (!Number.isInteger(arg) || arg < (0x80000000 >> 0) || arg > 0x7FFFFFFF) {\r\n              matches = false;\r\n              break;\r\n            }\r\n            result.push(new AST.ASTScalar(arg, typeI32));\r\n          } else if (argType.scalarType === PBPrimitiveType.U32) {\r\n            if (!Number.isInteger(arg) || arg < 0 || arg > 0xFFFFFFFF) {\r\n              matches = false;\r\n              break;\r\n            }\r\n            result.push(new AST.ASTScalar(arg, typeU32));\r\n          } else {\r\n            result.push(new AST.ASTScalar(arg, argType));\r\n          }\r\n        } else {\r\n          if (argType.typeId !== arg.$ast.getType().typeId) {\r\n            matches = false;\r\n            break;\r\n          }\r\n          result.push(arg.$ast);\r\n        }\r\n      }\r\n      if (matches) {\r\n        return [overload, result];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  $callFunction(funcName: string, args: AST.ASTExpression[], returnType: PBTypeInfo): PBShaderExp {\r\n    if (this.currentScope() === this.globalScope) {\r\n      throw new errors.PBNonScopedFunctionCall(funcName);\r\n    }\r\n    const func = this.getFunction(funcName) || null;\r\n    const exp = new PBShaderExp('', returnType);\r\n    exp.$ast = new AST.ASTCallFunction(funcName, args, returnType, func, currentProgramBuilder.getDeviceType());\r\n    this.currentScope().$ast.statements.push(exp.$ast);\r\n    return exp;\r\n  }\r\n}\r\n\r\nabstract class Proxiable<T> {\r\n  /** @internal */\r\n  private proxy: Proxiable<T>;\r\n  constructor() {\r\n    this.proxy = new Proxy(this, {\r\n      get: function (target, prop) {\r\n        return typeof prop === 'string' ? target.$get(prop) : undefined;\r\n      },\r\n      set: function (target, prop, value) {\r\n        return typeof prop === 'string' ? target.$set(prop, value) : false;\r\n      }\r\n    }) as Proxiable<T>;\r\n    return this.proxy;\r\n  }\r\n  get $thisProxy(): T {\r\n    return this.proxy as unknown as T;\r\n  }\r\n  /** @internal */\r\n  protected abstract $get(prop: string): any;\r\n  /** @internal */\r\n  protected abstract $set(prop: string, value: any): boolean;\r\n}\r\n\r\nexport class PBScope extends Proxiable<PBScope> {\r\n  /** @internal */\r\n  protected $_variables: { [name: string]: PBShaderExp };\r\n  /** @internal */\r\n  protected $_parentScope: PBScope;\r\n  /** @internal */\r\n  protected $_AST: AST.ASTScope;\r\n  /** @internal */\r\n  protected $_localScope: PBLocalScope;\r\n  [props: string]: any;\r\n  /** @internal */\r\n  constructor(astScope: AST.ASTScope, parent?: PBScope) {\r\n    super();\r\n    this.$_parentScope = parent || null;\r\n    this.$_variables = {};\r\n    this.$_AST = astScope;\r\n    this.$_localScope = null;\r\n  }\r\n  get $builder(): ProgramBuilder {\r\n    return currentProgramBuilder;\r\n  }\r\n  get $builtins(): PBBuiltinScope {\r\n    return currentProgramBuilder.builtinScope;\r\n  }\r\n  get $inputs(): PBInputScope {\r\n    return currentProgramBuilder.inputScope;\r\n  }\r\n  get $outputs(): PBOutputScope {\r\n    return currentProgramBuilder.outputScope;\r\n  }\r\n  /** @internal */\r\n  get $parent(): PBScope {\r\n    return this.$_parentScope;\r\n  }\r\n  /** @internal */\r\n  get $ast(): AST.ASTScope {\r\n    return this.$_AST;\r\n  }\r\n  /** @internal */\r\n  set $ast(ast: AST.ASTScope) {\r\n    this.$_AST = ast;\r\n  }\r\n  $getVertexAttrib(loc: number): PBShaderExp {\r\n    return currentProgramBuilder.reflection.attribute(loc);\r\n  }\r\n  get $l(): PBLocalScope {\r\n    return this.$_getLocalScope();\r\n  }\r\n  get $g(): PBGlobalScope {\r\n    return this.$_getGlobalScope();\r\n  }\r\n  $local(variable: PBShaderExp, init?: ExpValueType): void {\r\n    const initNonArray = currentProgramBuilder.normalizeExpValue(init);\r\n    variable.$global = this instanceof PBGlobalScope;\r\n    this.$_declare(variable, initNonArray);\r\n  }\r\n  $touch(exp: PBShaderExp): void {\r\n    this.$ast.statements.push(new AST.ASTTouch(exp.$ast));\r\n  }\r\n  $query(name: string): PBShaderExp {\r\n    return currentProgramBuilder.queryGlobal(name);\r\n  }\r\n  /** @internal */\r\n  $_declareInternal(variable: PBShaderExp, init?: ExpValueNonArrayType): AST.ShaderAST {\r\n    const key = variable.$str;\r\n    if (this.$_variables[key]) {\r\n      throw new Error(`cannot re-declare variable '${key}'`);\r\n    }\r\n    if (!(variable.$ast instanceof AST.ASTPrimitive)) {\r\n      throw new Error(`invalid variable declaration: '${variable.$ast.toString(currentProgramBuilder.getDeviceType())}'`);\r\n    }\r\n    const varType = variable.$typeinfo;\r\n    if (varType.isPointerType()) {\r\n      if (!init) {\r\n        throw new Error(`cannot declare pointer type variable without initialization: '${variable.$str}'`);\r\n      }\r\n      if (!(init instanceof PBShaderExp)) {\r\n        throw new Error(`invalid initialization for pointer type declaration: '${variable.$str}`);\r\n      }\r\n      const initType = init.$ast.getType();\r\n      if (!initType.isPointerType() || varType.pointerType.typeId !== initType.pointerType.typeId) {\r\n        throw new Error(`incompatible pointer type assignment: '${variable.$str}'`);\r\n      }\r\n      variable.$typeinfo = initType;\r\n    }\r\n    this.$_registerVar(variable, key);\r\n    if (init === undefined || init === null) {\r\n      return new AST.ASTDeclareVar(variable.$ast as AST.ASTPrimitive);\r\n    } else {\r\n      if (init instanceof PBShaderExp && init.$ast instanceof AST.ASTShaderExpConstructor && init.$ast.args.length === 0) {\r\n        if (init.$ast.getType().typeId !== variable.$ast.getType().typeId) {\r\n          throw new errors.PBTypeCastError(init, init.$ast.getType(), variable.$ast.getType());\r\n        }\r\n        return new AST.ASTDeclareVar(variable.$ast as AST.ASTPrimitive);\r\n      } else {\r\n        return new AST.ASTAssignment(new AST.ASTLValueDeclare(variable.$ast as AST.ASTPrimitive), init instanceof PBShaderExp ? init.$ast : init);\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  $_findOrSetUniform(variable: PBShaderExp): PBShaderExp {\r\n    const name = variable.$str;\r\n    const uniformInfo: UniformInfo = {\r\n      group: variable.$group,\r\n      binding: 0,\r\n      mask: 0,\r\n    };\r\n    if (variable.$typeinfo.isTextureType()) {\r\n      uniformInfo.texture = {\r\n        autoBindSampler: null,\r\n        exp: variable,\r\n      };\r\n    } else if (variable.$typeinfo.isSamplerType()) {\r\n      uniformInfo.sampler = variable;\r\n    } else {\r\n      uniformInfo.block = {\r\n        name: name,\r\n        dynamicOffset: false,\r\n        exp: variable,\r\n      };\r\n      // throw new Error(`unsupported uniform type: ${name}`);\r\n    }\r\n    let found = false;\r\n    for (const u of currentProgramBuilder._uniforms) {\r\n      if (u.group !== uniformInfo.group) {\r\n        continue;\r\n      }\r\n      if (uniformInfo.block && u.block && u.block.name === uniformInfo.block.name && u.block.exp.$typeinfo.typeId === uniformInfo.block.exp.$typeinfo.typeId) {\r\n        u.mask |= currentProgramBuilder.shaderType;\r\n        variable = u.block.exp;\r\n        // u.block.exp = variable;\r\n        found = true;\r\n        break;\r\n      }\r\n      if (uniformInfo.texture && u.texture && uniformInfo.texture.exp.$str === u.texture.exp.$str && uniformInfo.texture.exp.$typeinfo.typeId === u.texture.exp.$typeinfo.typeId) {\r\n        u.mask |= currentProgramBuilder.shaderType;\r\n        variable = u.texture.exp;\r\n        // u.texture.exp = variable;\r\n        found = true;\r\n        break;\r\n      }\r\n      if (uniformInfo.sampler && u.sampler && uniformInfo.sampler.$str === u.sampler.$str && uniformInfo.sampler.$typeinfo.typeId === u.sampler.$typeinfo.typeId) {\r\n        u.mask |= currentProgramBuilder.shaderType;\r\n        variable = u.sampler;\r\n        // u.sampler = variable;\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      uniformInfo.mask = currentProgramBuilder.shaderType;\r\n      currentProgramBuilder._uniforms.push(uniformInfo);\r\n    }\r\n    if (uniformInfo.texture\r\n      && !(uniformInfo.texture.exp.$typeinfo as PBTextureTypeInfo).isStorageTexture()\r\n      && !(uniformInfo.texture.exp.$typeinfo as PBTextureTypeInfo).isExternalTexture()\r\n      && currentProgramBuilder.getDeviceType() === 'webgpu') {\r\n      // webgpu requires explicit sampler bindings\r\n      const isDepth = variable.$typeinfo.isTextureType() && variable.$typeinfo.isDepthTexture();\r\n      const samplerName = AST.genSamplerName(variable.$str, false);\r\n      const samplerExp = currentProgramBuilder.sampler(samplerName).uniform(uniformInfo.group).sampleType(variable.$sampleType);\r\n      samplerExp.$sampleType = variable.$sampleType;\r\n      this.$local(samplerExp);\r\n      if (isDepth) {\r\n        const samplerNameComp = AST.genSamplerName(variable.$str, true);\r\n        const samplerExpComp = currentProgramBuilder.samplerComparison(samplerNameComp).uniform(uniformInfo.group).sampleType(variable.$sampleType);\r\n        this.$local(samplerExpComp);\r\n      }\r\n    }\r\n    return variable;\r\n  }\r\n  /** @internal */\r\n  $_declare(variable: PBShaderExp, init?: ExpValueNonArrayType): void {\r\n    if (this.$_variables[variable.$str]) {\r\n      throw new errors.PBASTError(variable.$ast, 'cannot re-declare variable');\r\n    }\r\n    if (variable.$declareType === AST.DeclareType.DECLARE_TYPE_UNIFORM || variable.$declareType === AST.DeclareType.DECLARE_TYPE_STORAGE) {\r\n      const name = (variable.$ast as AST.ASTPrimitive).name;\r\n      if (!(this instanceof PBGlobalScope)) {\r\n        throw new Error(`uniform or storage variables can only be declared within global scope: ${name}`);\r\n      }\r\n      if (variable.$declareType === AST.DeclareType.DECLARE_TYPE_UNIFORM\r\n        && !variable.$typeinfo.isTextureType()\r\n        && !variable.$typeinfo.isSamplerType()\r\n        && (!variable.$typeinfo.isConstructible() || !variable.$typeinfo.isHostSharable())) {\r\n        throw new errors.PBASTError(variable.$ast, `type '${variable.$typeinfo.toTypeName(currentProgramBuilder.getDeviceType())}' cannot be declared in uniform address space`);\r\n      }\r\n      if (variable.$declareType === AST.DeclareType.DECLARE_TYPE_STORAGE) {\r\n        if (currentProgramBuilder.getDeviceType() !== 'webgpu') {\r\n          throw new errors.PBDeviceNotSupport('storage buffer binding');\r\n        } else if (!variable.$typeinfo.isHostSharable()) {\r\n          throw new errors.PBASTError(variable.$ast, `type '${variable.$typeinfo.toTypeName(currentProgramBuilder.getDeviceType())}' cannot be declared in storage address space`);\r\n        }\r\n      }\r\n      let originalType: PBPrimitiveTypeInfo | PBArrayTypeInfo = null;\r\n      if (variable.$declareType === AST.DeclareType.DECLARE_TYPE_STORAGE && (variable.$typeinfo.isPrimitiveType() || variable.$typeinfo.isArrayType())) {\r\n        originalType = variable.$typeinfo as PBPrimitiveTypeInfo | PBArrayTypeInfo;\r\n        const wrappedStruct = currentProgramBuilder.defineStruct(null, 'default', new PBShaderExp('value', originalType));\r\n        variable.$typeinfo = wrappedStruct().$typeinfo;\r\n      }\r\n      variable = this.$_findOrSetUniform(variable);\r\n      const ast = this.$_declareInternal(variable) as AST.ASTDeclareVar;\r\n      if (originalType) {\r\n        variable.$ast = new AST.ASTHash(variable.$ast, 'value', originalType);\r\n      }\r\n      ast.group = variable.$group;\r\n      ast.binding = 0;\r\n      ast.blockName = currentProgramBuilder.getBlockName(name);\r\n      const type = variable.$typeinfo;\r\n      if (type.isTextureType() || type.isSamplerType() || variable.$declareType === AST.DeclareType.DECLARE_TYPE_STORAGE || (type.isStructType() && type.detail.layout === 'std140')) {\r\n        (this.$ast as AST.ASTGlobalScope).uniforms.push(ast);\r\n      }\r\n      variable.$tags.forEach(val => {\r\n        currentProgramBuilder.tagShaderExp(() => variable, val);\r\n      });\r\n    } else {\r\n      const ast = this.$_declareInternal(variable, init);\r\n      this.$ast.statements.push(ast);\r\n    }\r\n  }\r\n  /** @internal */\r\n  $_registerVar(variable: PBShaderExp, name?: string) {\r\n    const key = name || variable.$str;\r\n    const options: any = {\r\n      configurable: true,\r\n      get: function (this: PBScope) {\r\n        return variable;\r\n      },\r\n      set: function (this: PBScope, val: number | PBShaderExp) {\r\n        currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueScalar(variable.$ast), val instanceof PBShaderExp ? val.$ast : val));\r\n      },\r\n    };\r\n    Object.defineProperty(this, key, options);\r\n    this.$_variables[key] = variable;\r\n  }\r\n  /** @internal */\r\n  $localGet(prop: string): any {\r\n    if (typeof prop === 'string' && (prop[0] === '$' || prop in this)) {\r\n      return this[prop];\r\n    }\r\n    return undefined;\r\n  }\r\n  /** @internal */\r\n  $localSet(prop: string, value: any): boolean {\r\n    if (prop[0] === '$' || prop in this) {\r\n      this[prop] = value;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /** @internal */\r\n  protected $get(prop: string): any {\r\n    const ret = this.$localGet(prop);\r\n    return ret === undefined && this.$_parentScope ? this.$_parentScope.$thisProxy.$get(prop) : ret;\r\n  }\r\n  /** @internal */\r\n  protected $set(prop: string, value: any): boolean {\r\n    if (prop[0] === '$') {\r\n      this[prop] = value;\r\n      return true;\r\n    } else {\r\n      let scope: PBScope = this;\r\n      while (scope && !(prop in scope)) {\r\n        scope = scope.$_parentScope;\r\n      }\r\n      if (scope) {\r\n        scope[prop] = value;\r\n        return true;\r\n      } else {\r\n        if (this.$l) {\r\n          this.$l[prop] = value;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /** @internal */\r\n  protected $_getLocalScope(): PBLocalScope {\r\n    if (!this.$_localScope) {\r\n      this.$_localScope = new PBLocalScope(this);\r\n    }\r\n    return this.$_localScope;\r\n  }\r\n  /** @internal */\r\n  protected $_getGlobalScope(): PBGlobalScope {\r\n    return this.$builder.globalScope;\r\n  }\r\n}\r\n\r\nexport class PBLocalScope extends PBScope {\r\n  /** @internal */\r\n  $_scope: PBScope;\r\n  [props: string]: any;\r\n  constructor(scope: PBScope) {\r\n    super(null, null);\r\n    this.$_scope = scope;\r\n  }\r\n  /** @internal */\r\n  protected $get(prop: string): any {\r\n    return prop[0] === '$' ? this[prop] : this.$_scope.$localGet(prop);\r\n  }\r\n  /** @internal */\r\n  protected $set(prop: string, value: any): boolean {\r\n    if (prop[0] === '$') {\r\n      this[prop] = value;\r\n      return true;\r\n    }\r\n    const val = this.$_scope.$localGet(prop);\r\n    if (val === undefined) {\r\n      const type = currentProgramBuilder.guessExpValueType(value);\r\n      const exp = new PBShaderExp(prop, type);\r\n      if (value instanceof PBShaderExp && !this.$_scope.$parent) {\r\n        exp.$declareType = value.$declareType;\r\n        exp.$group = value.$group;\r\n        exp.$attrib = value.$attrib;\r\n        exp.$sampleType = value.$sampleType;\r\n        exp.$precision = value.$precision;\r\n        exp.tag(...value.$tags);\r\n      }\r\n      this.$_scope.$local(exp, value);\r\n      return true;\r\n    } else {\r\n      return this.$_scope.$localSet(prop, value);\r\n    }\r\n  }\r\n  /** @internal */\r\n  $_getLocalScope(): PBLocalScope {\r\n    return this;\r\n  }\r\n}\r\n\r\nexport interface PBBuiltinScope {\r\n  position: PBShaderExp;\r\n  pointSize: PBShaderExp;\r\n  fragDepth: PBShaderExp;\r\n  readonly fragCoord: PBShaderExp;\r\n  readonly frontFacing: PBShaderExp;\r\n  readonly vertexIndex: PBShaderExp;\r\n  readonly instanceIndex: PBShaderExp;\r\n  readonly localInvocationId: PBShaderExp;\r\n  readonly globalInvocationId: PBShaderExp;\r\n  readonly workGroupId: PBShaderExp;\r\n  readonly numWorkGroups: PBShaderExp;\r\n  readonly sampleMaskIn: PBShaderExp;\r\n  sampleMaskOut: PBShaderExp;\r\n  readonly sampleIndex: PBShaderExp;\r\n}\r\n\r\nexport class PBBuiltinScope extends PBScope {\r\n  /** @internal */\r\n  $_usedBuiltins: Set<string>;\r\n  /** @internal */\r\n  $_builtinVars: { [k: string]: PBShaderExp };\r\n  constructor() {\r\n    super(null);\r\n    this.$_usedBuiltins = new Set();\r\n    const isWebGPU = currentProgramBuilder.getDeviceType() === 'webgpu';\r\n    if (!isWebGPU) {\r\n      this.$_builtinVars = {};\r\n      const v = AST.builtinVariables[currentProgramBuilder.getDeviceType()];\r\n      for (const k in v) {\r\n        const info = v[k];\r\n        this.$_builtinVars[k] = new PBShaderExp(info.name, info.type);\r\n      }\r\n    }\r\n    const v = AST.builtinVariables[currentProgramBuilder.getDeviceType()];\r\n    const that = this;\r\n    for (const k of Object.keys(v)) {\r\n      Object.defineProperty(this, k, {\r\n        get: function () {\r\n          return that.$getBuiltinVar(k);\r\n        },\r\n        set: function (v) {\r\n          if ((typeof v !== 'number') && !(v instanceof PBShaderExp)) {\r\n            throw new Error(`Invalid output value assignment`);\r\n          }\r\n          const exp = that.$getBuiltinVar(k);\r\n          currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueScalar(exp.$ast), v instanceof PBShaderExp ? v.$ast : v));\r\n        },\r\n      });\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected $_getLocalScope(): PBLocalScope {\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  private $getBuiltinVar(name: string) {\r\n    this.$_usedBuiltins.add(name);\r\n    const isWebGPU = currentProgramBuilder.getDeviceType() === 'webgpu';\r\n    if (isWebGPU) {\r\n      const v = AST.builtinVariables[currentProgramBuilder.getDeviceType()];\r\n      const info = v[name];\r\n      const inout = info.inOrOut;\r\n      const structName = inout === 'in' ? AST.getBuiltinInputStructInstanceName(currentProgramBuilder.shaderType) : AST.getBuiltinOutputStructInstanceName(currentProgramBuilder.shaderType);\r\n      const scope = currentProgramBuilder.currentScope();\r\n      if (!scope[structName] || !scope[structName][info.name]) {\r\n        throw new Error(`invalid use of builtin variable ${name}`);\r\n      }\r\n      return scope[structName][info.name];\r\n    } else {\r\n      return this.$_builtinVars[name];\r\n    }\r\n  }\r\n}\r\n\r\nexport class PBInputScope extends PBScope {\r\n  constructor() {\r\n    super(null);\r\n  }\r\n  /** @internal */\r\n  protected $_getLocalScope(): PBLocalScope {\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  protected $set(prop: string, value: any): boolean {\r\n    if (prop[0] === '$') {\r\n      this[prop] = value;\r\n    } else if (prop in this) {\r\n      throw new Error(`Can not assign to shader input variable: \"${prop}\"`);\r\n    } else {\r\n      const st = currentProgramBuilder.shaderType;\r\n      if (st !== ShaderType.Vertex) {\r\n        throw new Error(`shader input variables can only be declared in vertex shader: \"${prop}\"`);\r\n      }\r\n      const attrib = getVertexAttribByName(value.$attrib);\r\n      if (attrib === undefined) {\r\n        throw new Error(`can not declare shader input variable: invalid vertex attribute: \"${prop}\"`);\r\n      }\r\n      if (currentProgramBuilder._vertexAttributes.indexOf(attrib) >= 0) {\r\n        throw new Error(`can not declare shader input variable: attribute already declared: \"${prop}\"`);\r\n      }\r\n      if (!(value instanceof PBShaderExp) || !(value.$ast instanceof AST.ASTShaderExpConstructor)) {\r\n        throw new Error(`invalid shader input variable declaration: \"${prop}\"`);\r\n      }\r\n      const type = value.$ast.getType();\r\n      if (!type.isPrimitiveType() || type.isMatrixType() || type.primitiveType === PBPrimitiveType.BOOL) {\r\n        throw new Error(`type cannot be used as pipeline input/output: ${prop}`);\r\n      }\r\n      const location = currentProgramBuilder._inputs.length;\r\n      const exp = new PBShaderExp(`${input_prefix}${prop}`, type).tag(...value.$tags);\r\n      currentProgramBuilder.in(location, prop, exp);\r\n      currentProgramBuilder._vertexAttributes.push(attrib);\r\n      currentProgramBuilder.reflection.setAttrib(attrib, exp);\r\n      // modify input struct for webgpu\r\n      if (currentProgramBuilder.getDeviceType() === 'webgpu') {\r\n        if (currentProgramBuilder.findStructType(AST.getBuiltinInputStructName(st), st)) {\r\n          currentProgramBuilder.defineBuiltinStruct(st, 'in');\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class PBOutputScope extends PBScope {\r\n  constructor() {\r\n    super(null);\r\n  }\r\n  /** @internal */\r\n  protected $_getLocalScope(): PBLocalScope {\r\n    return null;\r\n  }\r\n  /** @internal */\r\n  protected $set(prop: string, value: any): boolean {\r\n    if (prop[0] === '$'/* || prop in this*/) {\r\n      this[prop] = value;\r\n    } else {\r\n      if (!(prop in this)) {\r\n        if (currentProgramBuilder.currentScope() === currentProgramBuilder.globalScope\r\n          && (!(value instanceof PBShaderExp) || !(value.$ast instanceof AST.ASTShaderExpConstructor))) {\r\n          throw new Error(`invalid shader output variable declaration: ${prop}`);\r\n        }\r\n        const type = value.$ast.getType();\r\n        if (!type.isPrimitiveType() || type.isMatrixType() || type.primitiveType === PBPrimitiveType.BOOL) {\r\n          throw new Error(`type cannot be used as pipeline input/output: ${prop}`);\r\n        }\r\n        const location = currentProgramBuilder._outputs.length;\r\n        currentProgramBuilder.out(location, prop, new PBShaderExp(`${output_prefix}${prop}`, type).tag(...value.$tags));\r\n        // modify output struct for webgpu\r\n        if (currentProgramBuilder.getDeviceType() === 'webgpu') {\r\n          const st = currentProgramBuilder.shaderType;\r\n          if (currentProgramBuilder.findStructType(AST.getBuiltinInputStructName(st), st)) {\r\n            currentProgramBuilder.defineBuiltinStruct(st, 'out');\r\n          }\r\n        }\r\n      }\r\n      if (currentProgramBuilder.currentScope() !== currentProgramBuilder.globalScope) {\r\n        this[prop] = value;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class PBGlobalScope extends PBScope {\r\n  constructor() {\r\n    super(new AST.ASTGlobalScope());\r\n  }\r\n  $mainFunc(\r\n    this: PBGlobalScope,\r\n    body?: (this: PBFunctionScope) => void\r\n  ) {\r\n    const builder = currentProgramBuilder;\r\n    if (builder.getDeviceType() === 'webgpu') {\r\n      const inputStruct = builder.defineBuiltinStruct(builder.shaderType, 'in');\r\n      this.$local(inputStruct[1]);\r\n      const isCompute = builder.shaderType === ShaderType.Compute;\r\n      const outputStruct = isCompute ? null : builder.defineBuiltinStruct(builder.shaderType, 'out');\r\n      if (!isCompute) {\r\n        this.$local(outputStruct[1]);\r\n      }\r\n      this.$internalFunction('chMainStub', [], false, body);\r\n      this.$internalFunction('main', inputStruct ? [inputStruct[3]] : [], true, function (this: PBFunctionScope) {\r\n        if (inputStruct) {\r\n          this[inputStruct[1].$str] = this[inputStruct[3].$str];\r\n        }\r\n        if (builder.shaderType === ShaderType.Fragment && builder.emulateDepthClamp) {\r\n          this.$builtins.fragDepth = builder.clamp(this.$inputs.clamppedDepth, 0, 1);\r\n        }\r\n        this.chMainStub();\r\n        if (builder.shaderType === ShaderType.Vertex) {\r\n          if (builder.depthRangeCorrection) {\r\n            this.$builtins.position.z = builder.mul(builder.add(this.$builtins.position.z, this.$builtins.position.w), 0.5);\r\n          }\r\n          if (builder.emulateDepthClamp) {\r\n            //z = gl_Position.z / gl_Position.w;\r\n            //z = (gl_DepthRange.diff * z + gl_DepthRange.near + gl_DepthRange.far) * 0.5;\r\n            this.$outputs.clamppedDepth = builder.div(this.$builtins.position.z, this.$builtins.position.w);\r\n            this.$builtins.position.z = 0;\r\n          }\r\n        }\r\n\r\n        if (!isCompute) {\r\n          this.$return(outputStruct[1]);\r\n        }\r\n      });\r\n    } else {\r\n      this.$internalFunction('main', [], true, function () {\r\n        if (builder.shaderType === ShaderType.Fragment && builder.emulateDepthClamp) {\r\n          this.$builtins.fragDepth = builder.clamp(this.$inputs.clamppedDepth, 0, 1);\r\n        }\r\n        body?.call(this);\r\n        if (builder.shaderType === ShaderType.Vertex && builder.emulateDepthClamp) {\r\n          this.$outputs.clamppedDepth = builder.div(builder.add(builder.div(this.$builtins.position.z, this.$builtins.position.w), 1), 2);\r\n          this.$builtins.position.z = 0;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  $function(\r\n    this: PBGlobalScope,\r\n    name: string,\r\n    params: PBShaderExp[],\r\n    body?: (this: PBFunctionScope) => void,\r\n  ) {\r\n    this.$internalFunction(name, params, false, body);\r\n  }\r\n  /** @internal */\r\n  $getFunction(name: string): AST.ASTFunction {\r\n    return (this.$ast as AST.ASTGlobalScope).findFunction(name);\r\n  }\r\n  /** @internal */\r\n  $getCurrentFunctionScope(): PBScope {\r\n    let scope = currentProgramBuilder.currentScope();\r\n    while (scope && !(scope instanceof PBFunctionScope)) {\r\n      scope = scope.$parent;\r\n    }\r\n    return scope;\r\n  }\r\n  /** @internal */\r\n  private $internalFunction(\r\n    this: PBGlobalScope,\r\n    name: string,\r\n    params: PBShaderExp[],\r\n    isMain: boolean,\r\n    body?: (this: PBFunctionScope) => void,\r\n  ) {\r\n    const numArgs = params.length;\r\n    const pb = currentProgramBuilder;\r\n    params.forEach(param => {\r\n      if (!(param.$ast instanceof AST.ASTPrimitive)) {\r\n        throw new Error(`${name}(): invalid function definition`);\r\n      }\r\n      param.$ast = new AST.ASTFunctionParameter(param.$ast, currentProgramBuilder.getDeviceType());\r\n    });\r\n    Object.defineProperty(this, name, {\r\n      get: function () {\r\n        const func = this.$getFunction(name);\r\n        if (!func) {\r\n          throw new Error(`function ${name} not found`);\r\n        }\r\n        return (...args: (ExpValueType)[]) => {\r\n          if (args.length !== numArgs) {\r\n            throw new Error(`ERROR: incorrect argument count for ${name}`);\r\n          }\r\n          const argsNonArray = args.map(val => pb.normalizeExpValue(val));\r\n          const funcType = pb._getFunctionOverload(name, argsNonArray);\r\n          if (!funcType) {\r\n            throw new Error(`ERROR: no matching overloads for function ${name}`);\r\n          }\r\n          return currentProgramBuilder.$callFunction(name, funcType[1], funcType[0].returnType);\r\n        };\r\n      },\r\n    });\r\n    const currentFunctionScope = this.$getCurrentFunctionScope();\r\n    const astFunc = new AST.ASTFunction(name, params.map(param => param.$ast as AST.ASTFunctionParameter), isMain);\r\n    if (currentFunctionScope) {\r\n      const curIndex = this.$ast.statements.indexOf(currentFunctionScope.$ast);\r\n      if (curIndex < 0) {\r\n        throw new Error('Internal error');\r\n      }\r\n      this.$ast.statements.splice(curIndex, 0, astFunc);\r\n    } else {\r\n      this.$ast.statements.push(astFunc);\r\n    }\r\n    new PBFunctionScope(this, params, astFunc, body);\r\n  }\r\n}\r\n\r\nexport class PBInsideFunctionScope extends PBScope {\r\n  /** @internal */\r\n  constructor(parent: PBGlobalScope | PBInsideFunctionScope) {\r\n    super(new AST.ASTScope(), parent);\r\n  }\r\n  $return(retval?: ExpValueType) {\r\n    const functionScope = this.findOwnerFunction();\r\n    const astFunc = functionScope.$ast as AST.ASTFunction;\r\n    let returnType: PBTypeInfo = null;\r\n    const retValNonArray = currentProgramBuilder.normalizeExpValue(retval);\r\n    if (retValNonArray !== undefined && retValNonArray !== null) {\r\n      if (typeof retValNonArray === 'number') {\r\n        if (Number.isInteger(retValNonArray)) {\r\n          if (retValNonArray < 0) {\r\n            if (retValNonArray < (0x80000000 >> 0)) {\r\n              throw new Error(`function ${astFunc.name}: invalid return value: ${retValNonArray}`);\r\n            }\r\n            returnType = typeI32;\r\n          } else {\r\n            if (retValNonArray > 0xFFFFFFFF) {\r\n              throw new Error(`function ${astFunc.name}: invalid return value: ${retValNonArray}`);\r\n            }\r\n            returnType = retValNonArray <= 0x7FFFFFFF ? typeI32 : typeU32;\r\n          }\r\n        } else {\r\n          returnType = typeF32;\r\n        }\r\n      } else if (typeof retValNonArray === 'boolean') {\r\n        returnType = typeBool;\r\n      } else {\r\n        returnType = retValNonArray.$ast.getType();\r\n      }\r\n    } else {\r\n      returnType = typeVoid;\r\n    }\r\n    if (returnType.isPointerType()) {\r\n      throw new Error('function can not return pointer type');\r\n    }\r\n    if (!astFunc.returnType) {\r\n      astFunc.returnType = returnType;\r\n    } else if (astFunc.returnType.typeId !== returnType.typeId) {\r\n      throw new Error(`function ${astFunc.name}: return type must be ${astFunc.returnType?.toTypeName(currentProgramBuilder.getDeviceType()) || 'void'}`);\r\n    }\r\n    let returnValue: AST.ASTExpression = null;\r\n    if (retValNonArray !== undefined && retValNonArray !== null) {\r\n      if (retValNonArray instanceof PBShaderExp) {\r\n        returnValue = retValNonArray.$ast;\r\n      } else {\r\n        if (!returnType.isPrimitiveType() || !returnType.isScalarType()) {\r\n          throw new errors.PBTypeCastError(retValNonArray, typeof retValNonArray, returnType);\r\n        }\r\n        returnValue = new AST.ASTScalar(retValNonArray, returnType);\r\n      }\r\n    }\r\n    this.$ast.statements.push(new AST.ASTReturn(returnValue));\r\n  }\r\n  $scope(body: (this: PBInsideFunctionScope) => void): PBInsideFunctionScope {\r\n    const astScope = new AST.ASTNakedScope();\r\n    this.$ast.statements.push(astScope);\r\n    return new PBNakedScope(this, astScope, body);\r\n  }\r\n  $if(condition: ExpValueNonArrayType, body: (this: PBIfScope) => void): PBIfScope {\r\n    const astIf = new AST.ASTIf('if', condition instanceof PBShaderExp ? condition.$ast : new AST.ASTScalar(condition, typeof condition === 'number' ? typeF32 : typeBool));\r\n    this.$ast.statements.push(astIf);\r\n    return new PBIfScope(this, astIf, body);\r\n  }\r\n  $break() {\r\n    this.$ast.statements.push(new AST.ASTBreak());\r\n  }\r\n  $continue() {\r\n    this.$ast.statements.push(new AST.ASTContinue());\r\n  }\r\n  $for(counter: PBShaderExp, init: number | PBShaderExp, count: number | PBShaderExp, body: (this: PBForScope) => void) {\r\n    const initializerType = counter.$ast.getType();\r\n    if (!initializerType.isPrimitiveType() || !initializerType.isScalarType()) {\r\n      throw new errors.PBASTError(counter.$ast, 'invalid for range initializer type');\r\n    }\r\n    const initval = init instanceof PBShaderExp ? init.$ast : new AST.ASTScalar(init, initializerType);\r\n    const astFor = new AST.ASTRange(counter.$ast as AST.ASTPrimitive, initval, count instanceof PBShaderExp ? count.$ast : new AST.ASTScalar(count, initializerType), true);\r\n    this.$ast.statements.push(astFor);\r\n    new PBForScope(this, counter, count, astFor, body);\r\n  }\r\n  $do(body: (this: PBDoWhileScope) => void): PBDoWhileScope {\r\n    const astDoWhile = new AST.ASTDoWhile(null);\r\n    this.$ast.statements.push(astDoWhile);\r\n    return new PBDoWhileScope(this, astDoWhile, body);\r\n  }\r\n  $while(condition: ExpValueNonArrayType, body: (this: PBWhileScope) => void) {\r\n    const astWhile = new AST.ASTWhile(condition instanceof PBShaderExp ? condition.$ast : new AST.ASTScalar(condition, typeof condition === 'number' ? typeF32 : typeBool));\r\n    this.$ast.statements.push(astWhile);\r\n    new PBWhileScope(this, astWhile, body);\r\n  }\r\n  /** @internal */\r\n  private findOwnerFunction(): PBFunctionScope {\r\n    for (let scope: PBScope = this; scope; scope = scope.$parent) {\r\n      if (scope instanceof PBFunctionScope) {\r\n        return scope;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class PBFunctionScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(\r\n    parent: PBGlobalScope,\r\n    params: PBShaderExp[],\r\n    ast: AST.ASTScope,\r\n    body?: (this: PBFunctionScope) => void,\r\n  ) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    for (const param of params) {\r\n      if (this.$_variables[param.$str]) {\r\n        throw new Error('Duplicate function parameter name is not allowed');\r\n      }\r\n      this.$_registerVar(param);\r\n    }\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n\r\n    const astFunc = this.$ast as AST.ASTFunction;\r\n    if (!astFunc.returnType) {\r\n      astFunc.returnType = typeVoid;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PBWhileScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(\r\n    parent: PBInsideFunctionScope,\r\n    ast: AST.ASTScope,\r\n    body: (this: PBWhileScope) => void,\r\n  ) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n  }\r\n}\r\n\r\nexport class PBDoWhileScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(parent: PBInsideFunctionScope, ast: AST.ASTScope, body: (this: PBDoWhileScope) => void) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n  }\r\n  $while(condition: ExpValueNonArrayType) {\r\n    (this.$ast as AST.ASTDoWhile).condition = condition instanceof PBShaderExp ? condition.$ast : new AST.ASTScalar(condition, typeof condition === 'number' ? typeF32 : typeBool);\r\n  }\r\n}\r\n\r\nexport class PBForScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(\r\n    parent: PBGlobalScope | PBInsideFunctionScope,\r\n    counter: PBShaderExp,\r\n    count: number | PBShaderExp,\r\n    ast: AST.ASTScope,\r\n    body: (this: PBForScope) => void,\r\n  ) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    this.$_registerVar(counter);\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n  }\r\n}\r\nexport class PBNakedScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(\r\n    parent: PBInsideFunctionScope,\r\n    ast: AST.ASTScope,\r\n    body: (this: PBNakedScope) => void\r\n  ) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n  }\r\n}\r\nexport class PBIfScope extends PBInsideFunctionScope {\r\n  /** @internal */\r\n  constructor(\r\n    parent: PBInsideFunctionScope,\r\n    ast: AST.ASTScope,\r\n    body: (this: PBIfScope) => void\r\n  ) {\r\n    super(parent);\r\n    this.$ast = ast;\r\n    currentProgramBuilder.pushScope(this);\r\n    body && body.call(this);\r\n    currentProgramBuilder.popScope();\r\n  }\r\n  $elseif(condition: ExpValueNonArrayType, body: (this: PBIfScope) => void): PBIfScope {\r\n    const astElseIf = new AST.ASTIf('else if', condition instanceof PBShaderExp ? condition.$ast : new AST.ASTScalar(condition, typeof condition === 'number' ? typeF32 : typeBool));\r\n    (this.$ast as AST.ASTIf).nextElse = astElseIf;\r\n    return new PBIfScope(this.$_parentScope as PBInsideFunctionScope, astElseIf, body);\r\n  }\r\n  $else(body: (this: PBIfScope) => void): void {\r\n    const astElse = new AST.ASTIf('else', null);\r\n    (this.$ast as AST.ASTIf).nextElse = astElse;\r\n    new PBIfScope(this.$_parentScope as PBInsideFunctionScope, astElse, body);\r\n  }\r\n}\r\n\r\nlet uidExp = 0;\r\n\r\nexport class PBShaderExp extends Proxiable<PBShaderExp> {\r\n  /** @internal */\r\n  $uid: number;\r\n  /** @internal */\r\n  $str: string;\r\n  /** @internal */\r\n  $location: number;\r\n  /** @internal */\r\n  $typeinfo: PBTypeInfo;\r\n  /** @internal */\r\n  $global: boolean;\r\n  /** @internal */\r\n  $sampleType: 'depth' | 'sint' | 'uint' | 'float' | 'unfilterable-float';\r\n  /** @internal */\r\n  $precision: AST.ShaderPrecisionType;\r\n  /** @internal */\r\n  $ast: AST.ASTExpression;\r\n  /** @internal */\r\n  $inout: string;\r\n  /** @internal */\r\n  $memberCache: { [name: string]: PBShaderExp };\r\n  /** @internal */\r\n  $attrib: VertexSemantic;\r\n  /** @internal */\r\n  $tags: ProgramBuilder.ShaderExpTagValue[];\r\n  /** @internal */\r\n  $group: number;\r\n  /** @internal */\r\n  $declareType: AST.DeclareType;\r\n  [name: string]: any;\r\n  /** @internal */\r\n  constructor(str: string, typeInfo: PBTypeInfo) {\r\n    super();\r\n    if (!str && typeInfo.isPointerType()) {\r\n      throw new Error('no default constructor for pointer type');\r\n    }\r\n    this.$uid = uidExp++;\r\n    this.$str = str || '';\r\n    this.$location = 0;\r\n    this.$global = false;\r\n    this.$typeinfo = typeInfo;\r\n    this.$qualifier = null;\r\n    this.$precision = AST.ShaderPrecisionType.NONE;\r\n    this.$ast = new AST.ASTPrimitive(this);\r\n    this.$inout = null;\r\n    this.$memberCache = {};\r\n    this.$attrib = null;\r\n    this.$tags = [];\r\n    this.$group = null;\r\n    this.$declareType = AST.DeclareType.DECLARE_TYPE_NONE;\r\n    if (typeInfo.isTextureType()) {\r\n      if (typeInfo.isDepthTexture()) {\r\n        this.$sampleType = 'depth';\r\n      } else {\r\n        const t = AST.getTextureSampleType(typeInfo);\r\n        if (t.primitiveType === PBPrimitiveType.I32) {\r\n          this.$sampleType = 'sint';\r\n        } else if (t.primitiveType === PBPrimitiveType.U32) {\r\n          this.$sampleType = 'uint';\r\n        } else {\r\n          this.$sampleType = 'float';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  uniform(group: number): PBShaderExp {\r\n    this.$declareType = AST.DeclareType.DECLARE_TYPE_UNIFORM;\r\n    this.$group = group;\r\n    return this;\r\n  }\r\n  workgroup(): PBShaderExp {\r\n    this.$declareType = AST.DeclareType.DECLARE_TYPE_WORKGROUP;\r\n    return this;\r\n  }\r\n  storage(group: number): PBShaderExp {\r\n    if (!this.$typeinfo.isHostSharable()) {\r\n      throw new errors.PBASTError(this.$ast, 'type cannot be declared in storage address space');\r\n    }\r\n    this.$declareType = AST.DeclareType.DECLARE_TYPE_STORAGE;\r\n    this.$group = group;\r\n    return this;\r\n  }\r\n  attrib(attr: VertexSemantic): PBShaderExp {\r\n    this.$declareType = AST.DeclareType.DECLARE_TYPE_IN;\r\n    this.$attrib = attr;\r\n    return this;\r\n  }\r\n  tag(...args: ProgramBuilder.ShaderExpTagValue[]): PBShaderExp {\r\n    args.forEach(val => {\r\n      if (this.$tags.indexOf(val) < 0) {\r\n        this.$tags.push(val);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n  sampleType(type: 'float' | 'unfilterable-float' | 'sint' | 'uint' | 'depth'): PBShaderExp {\r\n    if (type) {\r\n      this.$sampleType = type;\r\n    }\r\n    return this;\r\n  }\r\n  at(index: number | PBShaderExp) {\r\n    const varType = this.$ast.getType();\r\n    if (!varType.isArrayType()) {\r\n      throw new Error('at() function must be used with array types');\r\n    }\r\n    if (typeof index === 'number') {\r\n      if (!Number.isInteger(index)) {\r\n        throw new Error('at() array index must be integer type');\r\n      }\r\n      if (index < 0 || (varType.dimension > 0 && index >= varType.dimension)) {\r\n        throw new Error('at() array index out of bounds');\r\n      }\r\n    }\r\n    const result = new PBShaderExp('', varType.elementType);\r\n    result.$ast = new AST.ASTArrayIndex(this.$ast, typeof index === 'number' ? new AST.ASTScalar(index, typeI32) : index.$ast, varType.elementType);\r\n    return result;\r\n  }\r\n  setAt(index: number | PBShaderExp, val: number | boolean | PBShaderExp) {\r\n    const varType = this.$ast.getType();\r\n    if (!varType.isArrayType()) {\r\n      throw new Error('setAt() function must be used with array types');\r\n    }\r\n    if (typeof index === 'number') {\r\n      if (!Number.isInteger(index)) {\r\n        throw new Error('setAt() array index must be integer type');\r\n      }\r\n      if (index < 0 || (varType.dimension > 0 && index >= varType.dimension)) {\r\n        throw new Error('setAt() array index out of bounds');\r\n      }\r\n    }\r\n    currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueArray(new AST.ASTLValueScalar(this.$ast), typeof index === 'number' ? new AST.ASTScalar(index, typeI32) : index.$ast, varType.elementType), val instanceof PBShaderExp ? val.$ast : val));\r\n  }\r\n  highp(): PBShaderExp {\r\n    this.$precision = AST.ShaderPrecisionType.HIGH;\r\n    return this;\r\n  }\r\n  mediump(): PBShaderExp {\r\n    this.$precision = AST.ShaderPrecisionType.MEDIUM;\r\n    return this;\r\n  }\r\n  lowp(): PBShaderExp {\r\n    this.$precision = AST.ShaderPrecisionType.LOW;\r\n    return this;\r\n  }\r\n  isVector(): boolean {\r\n    const varType = this.$ast.getType();\r\n    return varType.isPrimitiveType() && varType.isVectorType();\r\n  }\r\n  numComponents(): number {\r\n    const varType = this.$ast.getType();\r\n    return varType.isPrimitiveType() ? varType.cols : 0;\r\n  }\r\n  getTypeName(): string {\r\n    return this.$ast.getType().toTypeName(currentProgramBuilder.getDeviceType());\r\n  }\r\n  /** @internal */\r\n  protected $get(prop: string): any {\r\n    if (typeof prop === 'string') {\r\n      if (prop[0] === '$' || prop in this) {\r\n        return this[prop];\r\n      } else {\r\n        let exp = this.$memberCache[prop];\r\n        if (!exp) {\r\n          const varType = this.$ast?.getType() || this.$typeinfo;\r\n          const num = Number(prop);\r\n          if (Number.isNaN(num)) {\r\n            if (varType.isStructType()) {\r\n              const elementIndex = varType.structMembers.findIndex(val => val.name === prop);\r\n              if (elementIndex < 0) {\r\n                throw new Error(`unknown struct member '${prop}'`);\r\n              }\r\n              const element = varType.structMembers[elementIndex];\r\n              if (element.type.isStructType()) {\r\n                const ctor = currentProgramBuilder.structInfo.structs[element.type.structName];\r\n                exp = ctor.call(currentProgramBuilder, `${this.$str}.${prop}`);\r\n              } else {\r\n                exp = new PBShaderExp(`${this.$str}.${prop}`, element.type);\r\n              }\r\n              exp.$ast = new AST.ASTHash(this.$ast, prop, element.type);\r\n            } else {\r\n              if (!varType.isPrimitiveType() || !varType.isVectorType()) {\r\n                throw new Error(`invalid index operation: ${this.$ast.toString(currentProgramBuilder.getDeviceType())}[${prop}]`);\r\n              }\r\n              if (prop.length === 0\r\n                || prop.length > varType.cols\r\n                || ([...prop].some(val => 'xyzw'.slice(0, varType.cols).indexOf(val) < 0)\r\n                  && [...prop].some(val => 'rgba'.slice(0, varType.cols).indexOf(val) < 0))) {\r\n                throw new Error(`unknown swizzle target: ${this.$ast.toString(currentProgramBuilder.getDeviceType())}[${prop}]`);\r\n              }\r\n              const type = PBPrimitiveTypeInfo.getCachedTypeInfo(varType.resizeType(1, prop.length));\r\n              exp = new PBShaderExp('', type);\r\n              exp.$ast = new AST.ASTHash(this.$ast, prop, type);\r\n            }\r\n          } else {\r\n            if (varType.isArrayType()) {\r\n              exp = this.at(num);\r\n            } else if (varType.isPrimitiveType() && varType.isVectorType()) {\r\n              if (num >= varType.cols) {\r\n                throw new Error(`component index out of bounds: ${this.$str}[${num}]`);\r\n              }\r\n              exp = this.$get('xyzw'[num]);\r\n            } else if (varType.isPrimitiveType() && varType.isMatrixType()) {\r\n              const type = PBPrimitiveTypeInfo.getCachedTypeInfo(varType.resizeType(1, varType.cols));\r\n              exp = new PBShaderExp('', type);\r\n              exp.$ast = new AST.ASTArrayIndex(this.$ast, new AST.ASTScalar(num, typeI32), type);\r\n            } else {\r\n              throw new Error(`invalid index operation: ${this.$str}[${num}]`);\r\n            }\r\n          }\r\n          this.$memberCache[prop] = exp;\r\n        }\r\n        return exp;\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected $set(prop: string, value: any): boolean {\r\n    if (typeof prop === 'string') {\r\n      if (prop[0] === '$' || prop in this) {\r\n        this[prop] = value;\r\n      } else {\r\n        if ((typeof value !== 'number') && (typeof value !== 'boolean') && !(value instanceof PBShaderExp)) {\r\n          throw new Error(`Invalid output value assignment`);\r\n        }\r\n        const varType = this.$ast?.getType() || this.$typeinfo;\r\n        const num = Number(prop);\r\n        if (Number.isNaN(num)) {\r\n          if (varType.isStructType()) {\r\n            const elementIndex = varType.structMembers.findIndex(val => val.name === prop);\r\n            if (elementIndex < 0) {\r\n              throw new Error(`unknown struct member '${prop}`);\r\n            }\r\n            const element = varType.structMembers[elementIndex];\r\n            let dstAST: AST.ASTExpression;\r\n            if (typeof value === 'number' || typeof value === 'boolean') {\r\n              if (!element.type.isPrimitiveType() || !element.type.isScalarType()) {\r\n                throw new Error(`can not set struct member '${prop}: invalid value type`);\r\n              }\r\n              dstAST = new AST.ASTScalar(value, element.type);\r\n            } else if (value instanceof PBShaderExp) {\r\n              dstAST = value.$ast;\r\n            }\r\n            if (!dstAST) {\r\n              throw new Error(`can not set struct member '${prop}: invalid value type`);\r\n            }\r\n            currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueHash(new AST.ASTLValueScalar(this.$ast), prop, element.type), dstAST));\r\n          } else {\r\n            // FIXME: WGSL does not support l-value swizzling\r\n            if (prop.length > 1 || ('xyzw'.indexOf(prop) < 0 && 'rgba'.indexOf(prop) < 0)) {\r\n              throw new Error(`invalid index operation: ${this.$str}[${num}]`);\r\n            }\r\n            if (!varType.isPrimitiveType() || !varType.isVectorType()) {\r\n              throw new Error(`invalid index operation: ${this.$str}[${num}]`);\r\n            }\r\n            const type = PBPrimitiveTypeInfo.getCachedTypeInfo(varType.scalarType);\r\n            currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueHash(new AST.ASTLValueScalar(this.$ast), prop, type), value instanceof PBShaderExp ? value.$ast : value));\r\n          }\r\n        } else {\r\n          if (varType.isArrayType()) {\r\n            this.setAt(num, value);\r\n          } else if (varType.isPrimitiveType() && varType.isVectorType()) {\r\n            if (num >= varType.cols) {\r\n              throw new Error(`component index out of bounds: ${this.$str}[${num}]`);\r\n            }\r\n            this.$set('xyzw'[num], value);\r\n          } else if (varType.isPrimitiveType() && varType.isMatrixType()) {\r\n            if (!(value instanceof PBShaderExp)) {\r\n              throw new Error(`invalid matrix column vector assignment: ${this.$str}[${num}]`);\r\n            }\r\n            const type = PBPrimitiveTypeInfo.getCachedTypeInfo(varType.resizeType(1, varType.cols));\r\n            currentProgramBuilder.currentScope().$ast.statements.push(new AST.ASTAssignment(new AST.ASTLValueArray(new AST.ASTLValueScalar(this.$ast), new AST.ASTScalar(num, typeI32), type), value.$ast));\r\n          } else {\r\n            throw new Error(`invalid index operation: ${this.$str}[${num}]`);\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"],"names":["AST.ASTShaderExpConstructor","errors.PBDeviceNotSupport","errors.PBReferenceValueRequired","AST.ASTAddressOf","errors.PBPointerValueRequired","AST.ASTReferenceOf","errors.PBParamValueError","AST.ASTStructDefine","AST.getBuiltinInputStructName","AST.getBuiltinOutputStructName","AST.getBuiltinInputStructInstanceName","AST.getBuiltinOutputStructInstanceName","AST.builtinVariables","AST.ASTDeclareVar","errors.PBInternalError","errors.PBParamLengthError","errors.PBParamTypeError","errors.PBTypeCastError","AST.ASTScalar","AST.ASTDiscard","AST.DeclareType","AST.ASTPrimitive","AST.ASTAssignment","AST.ASTLValueScalar","AST.genSamplerName","errors.PBValueOutOfRange","errors.PBError","errors.PBNonScopedFunctionCall","AST.ASTCallFunction","AST.ASTTouch","AST.ASTLValueDeclare","errors.PBASTError","AST.ASTHash","AST.ASTGlobalScope","AST.ASTFunctionParameter","AST.ASTFunction","AST.ASTScope","AST.ASTReturn","AST.ASTNakedScope","AST.ASTIf","AST.ASTBreak","AST.ASTContinue","AST.ASTRange","AST.ASTDoWhile","AST.ASTWhile","AST.ShaderPrecisionType","AST.getTextureSampleType","AST.ASTArrayIndex","AST.ASTLValueArray","AST.ASTLValueHash"],"mappings":"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"}