{"version":3,"file":"quadtree.js","sources":["../../../../../libs/device/src/scene/terrain/quadtree.ts"],"sourcesContent":["import { ClipState, Frustum, Matrix4x4, Vector3, isPowerOf2, nextPowerOf2 } from '@sophon/base';\r\nimport { PatchPosition } from './types';\r\nimport { BoundingBox } from '../bounding_volume';\r\nimport { TerrainPatch } from './patch';\r\nimport { IndexBuffer, makeVertexBufferType, PrimitiveType, StructuredBuffer, Texture2D, TextureFormat } from '../../device';\r\nimport { HeightField } from './heightfield';\r\nimport type { Terrain } from './terrain';\r\nimport type { Camera } from '../camera';\r\nimport type { Scene } from '../scene';\r\n\r\nexport class QuadtreeNode {\r\n  private _patch: TerrainPatch;\r\n  private _parent: QuadtreeNode;\r\n  private _children: QuadtreeNode[];\r\n  constructor() {\r\n    this._patch = null;\r\n    this._parent = null;\r\n    this._children = null;\r\n  }\r\n  initialize(scene: Scene, quadtree: Quadtree, parent: QuadtreeNode, position: PatchPosition, baseVertices: StructuredBuffer, normals: Float32Array, elevations: Float32Array): boolean {\r\n    this._parent = parent;\r\n    this._children = [];\r\n    this._patch = new TerrainPatch();\r\n    if (!this._patch.initialize(scene, quadtree, this._parent?._patch || null, position, baseVertices, normals, elevations)) {\r\n      return false;\r\n    }\r\n    if (this._patch.getStep() > 1) {\r\n      let bbox: BoundingBox = null;\r\n      const size = (quadtree.getPatchSize() - 1) * (this._patch.getStep() >> 1);\r\n      const offsetX = this._patch.getOffsetX();\r\n      const offsetZ = this._patch.getOffsetZ();\r\n      const offsets = [\r\n        [offsetX, offsetZ],\r\n        [offsetX + size, offsetZ],\r\n        [offsetX, offsetZ + size],\r\n        [offsetX + size, offsetZ + size]\r\n      ];\r\n      const rootSizeX = quadtree.getRootSizeX() - 1;\r\n      const rootSizeZ = quadtree.getRootSizeZ() - 1;\r\n      for (let i = 0; i < 4; ++i) {\r\n        if (offsets[i][0] >= rootSizeX || offsets[i][1] >= rootSizeZ) {\r\n          this._children[i] = null;\r\n        } else {\r\n          this._children[i] = new QuadtreeNode();\r\n          if (!this._children[i].initialize(scene, quadtree, this, i, baseVertices, normals, elevations)) {\r\n            return false;\r\n          }\r\n          const childBBox = this._children[i]._patch.getBoundingBox();\r\n          if (childBBox) {\r\n            if (!bbox) {\r\n              bbox = new BoundingBox();\r\n              bbox.beginExtend();\r\n            }\r\n            bbox.extend(childBBox.minPoint);\r\n            bbox.extend(childBBox.maxPoint);\r\n          }\r\n        }\r\n      }\r\n      this._patch.setBoundingBox(bbox);\r\n    }\r\n    quadtree.addPatch(this._patch);\r\n    return true;\r\n  }\r\n  setupCamera(viewportH: number, tanHalfFovy: number, maxPixelError: number): void {\r\n    if (this._patch && !this._patch.isDummy()) {\r\n      this._patch.setupCamera(viewportH, tanHalfFovy, maxPixelError);\r\n    }\r\n    for (let i = 0; i < 4; ++i) {\r\n      if (this._children[i]) {\r\n        this._children[i].setupCamera(viewportH, tanHalfFovy, maxPixelError);\r\n      }\r\n    }\r\n  }\r\n  getBoundingbox(): BoundingBox {\r\n    return this._patch.getBoundingBox();\r\n  }\r\n  getPatch(): TerrainPatch {\r\n    return this._patch;\r\n  }\r\n  getParent(): QuadtreeNode {\r\n    return this._parent;\r\n  }\r\n  getChild(index: number): QuadtreeNode {\r\n    return this._children[index];\r\n  }\r\n}\r\n\r\nexport class Quadtree {\r\n  private _baseVertices: StructuredBuffer;\r\n  private _indices: IndexBuffer;\r\n  private _indicesWireframe: IndexBuffer;\r\n  private _normalMap: Texture2D;\r\n  private _scaleX: number;\r\n  private _scaleZ: number;\r\n  private _patchSize: number;\r\n  private _rootSizeX: number;\r\n  private _rootSizeZ: number;\r\n  private _rootSize: number;\r\n  private _primitiveCount: number;\r\n  private _primitiveType: PrimitiveType;\r\n  private _rootNode: QuadtreeNode;\r\n  private _terrain: Terrain;\r\n  private _heightField: HeightField;\r\n  private _patches: TerrainPatch[];\r\n  constructor(terrain: Terrain) {\r\n    this._terrain = terrain;\r\n    this._baseVertices = null;\r\n    this._indices = null;\r\n    this._indicesWireframe = null;\r\n    this._normalMap = null;\r\n    this._scaleX = 1;\r\n    this._scaleZ = 1;\r\n    this._patchSize = 0;\r\n    this._rootSizeX = 0;\r\n    this._rootSizeZ = 0;\r\n    this._rootSize = 0;\r\n    this._heightField = null;\r\n    this._rootNode = null;\r\n    this._primitiveCount = 0;\r\n    this._primitiveType = PrimitiveType.TriangleStrip;\r\n    this._patches = [];\r\n  }\r\n  get normalMap(): Texture2D {\r\n    return this._normalMap;\r\n  }\r\n  build(scene: Scene, patchSize: number, rootSizeX: number, rootSizeZ: number, elevations: Float32Array, scaleX: number, scaleZ: number, vertexCacheSize: number): boolean {\r\n    const device = scene.device;\r\n    if (!isPowerOf2(patchSize - 1)\r\n      || !!((rootSizeX - 1) % (patchSize - 1))\r\n      || !!((rootSizeZ - 1) % (patchSize - 1))\r\n      || !elevations) {\r\n      return false;\r\n    }\r\n    this._heightField = new HeightField();\r\n    if (!this._heightField.init(rootSizeX, rootSizeZ, 0, 0, scaleX, scaleZ, 1, elevations, patchSize)) {\r\n      this._heightField = null;\r\n      return false;\r\n    }\r\n    this._patchSize = patchSize;\r\n    this._rootSizeX = rootSizeX;\r\n    this._rootSizeZ = rootSizeZ;\r\n    this._rootSize = nextPowerOf2(Math.max((rootSizeX - 1), (rootSizeZ - 1))) + 1;\r\n    this._scaleX = scaleX;\r\n    this._scaleZ = scaleZ;\r\n    // Create base vertex buffer\r\n    const dimension = patchSize + 2; // with \"skirts\"\r\n    const vertices = new Float32Array(dimension * dimension * 3);\r\n    let offset = 0;\r\n    // top skirt\r\n    vertices[0] = 0;\r\n    vertices[1] = 0;\r\n    vertices[2] = 0;\r\n    for (let i = 1; i < dimension - 1; ++i) {\r\n      vertices[3 * i + 0] = i - 1;\r\n      vertices[3 * i + 1] = 0;\r\n      vertices[3 * i + 2] = 0;\r\n    }\r\n    vertices[3 * (dimension - 1) + 0] = dimension - 3;\r\n    vertices[3 * (dimension - 1) + 1] = 0;\r\n    vertices[3 * (dimension - 1) + 2] = 0;\r\n    offset += dimension * 3;\r\n    for (let i = 1; i < dimension - 1; ++i, offset += dimension * 3) {\r\n      // left skirt\r\n      vertices[offset + 0] = 0;\r\n      vertices[offset + 1] = 0;\r\n      vertices[offset + 2] = i - 1;\r\n      // height\r\n      for (let j = 1; j < dimension - 1; ++j) {\r\n        vertices[offset + 3 * j + 0] = j - 1;\r\n        vertices[offset + 3 * j + 1] = 0;\r\n        vertices[offset + 3 * j + 2] = i - 1;\r\n      }\r\n      // right skirt\r\n      vertices[offset + (dimension - 1) * 3 + 0] = dimension - 3;\r\n      vertices[offset + (dimension - 1) * 3 + 1] = 0;\r\n      vertices[offset + (dimension - 1) * 3 + 2] = i - 1;\r\n    }\r\n    // bottom skirt\r\n    vertices[offset + 0] = 0;\r\n    vertices[offset + 1] = 0;\r\n    vertices[offset + 2] = dimension - 3;\r\n    for (let i = 1; i < dimension - 1; ++i) {\r\n      vertices[offset + 3 * i + 0] = i - 1;\r\n      vertices[offset + 3 * i + 1] = 0;\r\n      vertices[offset + 3 * i + 2] = dimension - 3;\r\n    }\r\n    vertices[offset + (dimension - 1) * 3 + 0] = dimension - 3;\r\n    vertices[offset + (dimension - 1) * 3 + 1] = 0;\r\n    vertices[offset + (dimension - 1) * 3 + 2] = dimension - 3;\r\n    this._baseVertices = device.createStructuredBuffer(makeVertexBufferType(dimension * dimension, 'position_f32x3'), { usage: 'vertex', managed: true }, vertices);\r\n    // Create base index buffer\r\n    const indices = this.strip(vertexCacheSize);\r\n    this._indices = device.createIndexBuffer(indices, { managed: true });\r\n    const lineIndices = this.line(indices);\r\n    this._indicesWireframe = device.createIndexBuffer(lineIndices, { managed: true });\r\n    this._primitiveCount = indices.length - 2;\r\n    this._primitiveType = PrimitiveType.TriangleStrip;\r\n    this._rootNode = new QuadtreeNode();\r\n    const normals = this._heightField.computeNormalVectors();\r\n    const normalMapBytes = new Uint8Array(normals.length / 3 * 4);\r\n    for (let i = 0; i < normals.length / 3; i++) {\r\n      normalMapBytes[i * 4 + 0] = Math.floor((normals[i * 3 + 0] * 0.5 + 0.5) * 255);\r\n      normalMapBytes[i * 4 + 1] = Math.floor((normals[i * 3 + 1] * 0.5 + 0.5) * 255);\r\n      normalMapBytes[i * 4 + 2] = Math.floor((normals[i * 3 + 2] * 0.5 + 0.5) * 255);\r\n      normalMapBytes[i * 4 + 3] = 255;\r\n    }\r\n    this._normalMap = device.createTexture2D(TextureFormat.RGBA8UNORM, rootSizeX, rootSizeZ, { colorSpace: 'linear' });\r\n    this._normalMap.name = `TerrainNormalMap-${this._normalMap.uid}`;\r\n    this._normalMap.update(normalMapBytes, 0, 0, this._normalMap.width, this._normalMap.height);\r\n    return this._rootNode.initialize(scene, this, null, PatchPosition.LeftTop, this._baseVertices, normals, elevations);\r\n  }\r\n  strip(vertexCacheSize: number): Uint16Array {\r\n    const dimension = this._patchSize + 2;\r\n    const step = (vertexCacheSize >> 1) - 1;\r\n    const indices: number[] = [];\r\n    for (let i = 0; i < dimension - 1; i += step) {\r\n      const start = i;\r\n      const end = (i + step > dimension - 1) ? dimension - 1 : i + step;\r\n      for (let j = 0; j < dimension - 1; ++j) {\r\n        for (let k = start; k <= end; ++k) {\r\n          indices.push((dimension - 1 - k) * dimension + j);\r\n          indices.push((dimension - 1 - k) * dimension + j + 1);\r\n        }\r\n        indices.push((dimension - 1 - end) * dimension + j + 1);\r\n        indices.push((j == dimension - 2) ? (dimension - 1 - end) * dimension : (dimension - 1 - start) * dimension + j + 1);\r\n      }\r\n    }\r\n    indices.length = indices.length - 2;\r\n    return new Uint16Array(indices);\r\n  }\r\n  line(strip: Uint16Array): Uint16Array {\r\n    const numTris = strip.length - 2;\r\n    const lineIndices: number[] = [];\r\n    let lastSkipped = true;\r\n    let a: number, b: number, c: number;\r\n    for (let i = 0; i < numTris; i++) {\r\n      if (i % 2 === 0) {\r\n        a = strip[i];\r\n        b = strip[i + 1];\r\n        c = strip[i + 2];\r\n      } else {\r\n        a = strip[i + 1];\r\n        b = strip[i];\r\n        c = strip[i + 2];\r\n      }\r\n      const thisSkipped = a === b || a === c || b === c;\r\n      if (!thisSkipped) {\r\n        if (lastSkipped) {\r\n          lineIndices.push(a, b);\r\n        }\r\n        lineIndices.push(b, c, c, a);\r\n      }\r\n      lastSkipped = thisSkipped;\r\n    }\r\n    return new Uint16Array(lineIndices);\r\n  }\r\n  setupCamera(viewportH: number, tanHalfFovy: number, maxPixelError: number): void {\r\n    this._rootNode?.setupCamera(viewportH, tanHalfFovy, maxPixelError);\r\n  }\r\n  getBoundingBox(bbox: BoundingBox): void {\r\n    if (this._heightField) {\r\n      bbox.minPoint = this._heightField.getBoundingbox().minPoint;\r\n      bbox.maxPoint = this._heightField.getBoundingbox().maxPoint;\r\n    } else {\r\n      bbox.minPoint = Vector3.zero();\r\n      bbox.maxPoint = Vector3.zero();\r\n    }\r\n  }\r\n  getPatchSize(): number {\r\n    return this._patchSize;\r\n  }\r\n  getRootSize(): number {\r\n    return this._rootSize;\r\n  }\r\n  getRootSizeX(): number {\r\n    return this._rootSizeX;\r\n  }\r\n  getRootSizeZ(): number {\r\n    return this._rootSizeZ;\r\n  }\r\n  getTerrain(): Terrain {\r\n    return this._terrain;\r\n  }\r\n  getElevations(): Float32Array {\r\n    return this._heightField?.getHeights() || null;\r\n  }\r\n  getScaleX(): number {\r\n    return this._scaleX;\r\n  }\r\n  getScaleZ(): number {\r\n    return this._scaleZ;\r\n  }\r\n  getIndices(): IndexBuffer {\r\n    return this._indices;\r\n  }\r\n  getIndicesWireframe(): IndexBuffer {\r\n    return this._indicesWireframe;\r\n  }\r\n  getPrimitiveCount(): number {\r\n    return this._primitiveCount;\r\n  }\r\n  getPrimitiveType(): PrimitiveType {\r\n    return this._primitiveType;\r\n  }\r\n  getHeightField(): HeightField {\r\n    return this._heightField;\r\n  }\r\n  getPatches(): TerrainPatch[] {\r\n    return this._patches;\r\n  }\r\n  /** @internal */\r\n  addPatch(patch: TerrainPatch) {\r\n    this._patches.push(patch);\r\n  }\r\n  /** @internal */\r\n  cull(camera: Camera, viewPoint: Vector3, worldMatrix: Matrix4x4) {\r\n    if (this._rootNode && this._terrain) {\r\n      const frustum = new Frustum(camera.viewProjectionMatrix, worldMatrix);\r\n      this.cull_r(camera, this._rootNode, viewPoint, worldMatrix, frustum, true);\r\n    }\r\n  }\r\n  /** @internal */\r\n  cull_r(camera: Camera, node: QuadtreeNode, viewPoint: Vector3, worldMatrix: Matrix4x4, frustum: Frustum, cliptest: boolean) {\r\n    const bbox = node.getBoundingbox();\r\n    if (cliptest) {\r\n      const clipState = bbox.getClipStateWithFrustum(frustum);\r\n      if (clipState === ClipState.NOT_CLIPPED) {\r\n        return;\r\n      } else if (clipState === ClipState.A_INSIDE_B) {\r\n        cliptest = false;\r\n      }\r\n    }\r\n    const ld = node.getPatch().isDummy() ? -1 : node.getPatch().getLODDistance();\r\n    const lodDistance = ld >= 0 ? ld * ld : Number.MAX_VALUE;\r\n    const eyeDistSq = ld >= 0 ? node.getPatch().sqrDistanceToPoint(viewPoint) : 0;\r\n    const lodLevel = this._terrain.detailLODLevel;\r\n    if (eyeDistSq < lodDistance && node.getChild(0) && (lodLevel === 0 || node.getPatch().getMipLevel() < lodLevel)) {\r\n      for (let i = 0; i < 4; i++) {\r\n        const child = node.getChild(i);\r\n        if (child) {\r\n          this.cull_r(camera, child, viewPoint, worldMatrix, frustum, cliptest);\r\n        }\r\n      }\r\n    } else if (!node.getPatch().isDummy()) {\r\n      this._terrain.addPatch(node.getPatch(), true);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}