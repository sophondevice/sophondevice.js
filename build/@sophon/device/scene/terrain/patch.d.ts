import { Vector3 } from "@sophon/base";
import { BoundingBox } from "../bounding_volume";
import { Primitive } from "../primitive";
import { PatchPosition } from "./types";
import { Device, StructuredBuffer } from "../../device";
import type { Terrain } from './terrain';
import type { Quadtree } from "./quadtree";
import type { Scene } from "../scene";
import type { DrawContext } from "../drawable";
export declare class TerrainPatch {
    private _geometry;
    private _geometryLines;
    private _quadtree;
    private _mipLevel;
    private _offsetX;
    private _offsetZ;
    private _step;
    private _boundingBox;
    private _lodDistance;
    private _maxError;
    private _parent;
    private _offsetScale;
    private _id;
    constructor();
    initialize(scene: Scene, quadtree: Quadtree, parent: TerrainPatch, position: PatchPosition, baseVertices: StructuredBuffer, normals: Float32Array, elevations: Float32Array): boolean;
    setupCamera(viewportH: number, tanHalfFovy: number, maxPixelError: number): void;
    setupVertices(device: Device, skirtLength: number, baseVertices: StructuredBuffer, normalVectors: Float32Array, elevations: Float32Array): void;
    getOffsetScale(terrain: Terrain, ctx: DrawContext): StructuredBuffer;
    getBoundingBox(): BoundingBox;
    setBoundingBox(bbox: BoundingBox): void;
    getMipLevel(): number;
    getOffsetX(): number;
    getOffsetZ(): number;
    getStep(): number;
    getLODDistance(): number;
    getGeometry(): Primitive;
    getGeometryWireframe(): Primitive;
    getHeight(x: number, z: number): number;
    computeMaxError(): number;
    computeSkirtLength(): number;
    computeErrorMetric(other: TerrainPatch): number;
    computeBoundingBox(box: BoundingBox): void;
    computeLodDistance(viewportH: number, tanHalfFovy: number, maxPixelError: number): number;
    sqrDistanceToPoint(point: Vector3): number;
    sqrDistancePointToTriangle(P: Vector3, t0: Vector3, t1: Vector3, t2: Vector3): number;
    computeHeightBound(): [number, number];
    isDummy(): boolean;
}
