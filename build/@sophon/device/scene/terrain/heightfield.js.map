{"version":3,"file":"heightfield.js","sources":["../../../../../libs/device/src/scene/terrain/heightfield.ts"],"sourcesContent":["import { Vector3, Vector4 } from \"@sophon/base\";\nimport { BoundingBox } from \"../bounding_volume\";\n\n/*\nfunction intersectRayTriangle (start: Vector3, normal: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, cull: boolean): number {\n  const edge1 = Vector3.sub(v2, v1);\n  const edge2 = Vector3.sub(v3, v1);\n  const pvec = Vector3.cross(normal, edge2);\n  const det = Vector3.dot(edge1, pvec);\n  if (!cull) {\n    if (numberEquals(det, 0, 0.00001)) {\n      return null;\n    }\n    const inv_det = 1 / det;\n    const tvec = Vector3.sub(start, v1);\n    const u = inv_det * Vector3.dot(tvec, pvec);\n    if (u < 0 || u > 1) {\n      return null;\n    }\n    const qvec = Vector3.cross(tvec, edge1);\n    const v = inv_det * Vector3.dot(normal, qvec);\n    if (v < 0 || u + v > 1) {\n      return null;\n    }\n    return Vector3.dot(edge2, qvec) * inv_det;\n  } else {\n    if (det < 0) {\n      return null;\n    }\n    const tvec = Vector3.sub(start, v1);\n    const u = Vector3.dot(tvec, pvec);\n    if (u < 0 || u > det) {\n      return null;\n    }\n    const qvec = Vector3.cross(tvec, edge1);\n    const v = Vector3.dot(normal, qvec);\n    if (v < 0 || u + v > det) {\n      return null;\n    }\n    return Vector3.dot(edge2, qvec) / det;\n  }\n}\n*/\n\nexport interface HeightfieldBBoxTreeNode {\n  bbox: BoundingBox;\n  rc: { x: number, y: number, w: number, h: number };\n  left: HeightfieldBBoxTreeNode;\n  right: HeightfieldBBoxTreeNode;\n}\n\nexport class HeightfieldBBoxTree {\n  private _resX: number;\n  private _resY: number;\n  private _heights: Float32Array;\n  private _rootNode: HeightfieldBBoxTreeNode;\n  private _patchSize: number;\n  constructor(res_x: number, res_y: number, vertices: Vector4[], patchSize: number) {\n    this._rootNode = null;\n    this._heights = null;\n    this._patchSize = patchSize;\n    this.create(res_x, res_y, vertices);\n  }\n  create(res_x: number, res_y: number, vertices: Vector4[]): boolean {\n    this._resX = res_x;\n    this._resY = res_y;\n    this._rootNode = this.allocNode();\n    this._heights = new Float32Array(res_x * res_y);\n    for (let i = 0; i < this._heights.length; i++) {\n      this._heights[i] = vertices[i].y;\n    }\n    this.createChildNode(this._rootNode, 0, 0, res_x, res_y, vertices);\n    return true;\n  }\n  getHeight(x: number, y: number): number {\n    return this._heights[(this._resY - 1 - y) * this._resX + x];\n  }\n  getRealHeight(x: number, y: number): number {\n    x -= this._rootNode.bbox.minPoint.x;\n    y -= this._rootNode.bbox.minPoint.z;\n    const tileSizeX = (this._rootNode.bbox.maxPoint.x - this._rootNode.bbox.minPoint.x) / (this._resX - 1);\n    const tileSizeY = (this._rootNode.bbox.maxPoint.z - this._rootNode.bbox.minPoint.z) / (this._resY - 1);\n    const x_unscale = x / tileSizeX;\n    const y_unscale = y / tileSizeY;\n    let l = Math.floor(x_unscale);\n    let t = Math.floor(y_unscale);\n    let r = l + 1;\n    let b = t + 1;\n    if (l < 0) {\n      l = 0;\n    }\n    if (t < 0) {\n      t = 0;\n    }\n    if (r >= this._resX) {\n      r = this._resX - 1;\n    }\n    if (b >= this._resY) {\n      b = this._resY - 1;\n    }\n    if (l === r) {\n      if (t === b) {\n        return this.getHeight(l, t);\n      } else {\n        const ht = this.getHeight(l, t);\n        const hb = this.getHeight(l, b);\n        return ht + (hb - ht) * (y_unscale - t);\n      }\n    } else {\n      const hlt = this.getHeight(l, t);\n      const hrt = this.getHeight(r, t);\n      const ht = hlt + (hrt - hlt) * (x_unscale - l);\n      if (t === b) {\n        return ht;\n      } else {\n        const hlb = this.getHeight(l, b);\n        const hrb = this.getHeight(r, b);\n        const hb = hlb + (hrb - hlb) * (x_unscale - l);\n        return ht + (hb - ht) * (y_unscale - t);\n      }\n    }\n  }\n  getRootNode(): HeightfieldBBoxTreeNode {\n    return this._rootNode;\n  }\n  getHeights(): Float32Array {\n    return this._heights;\n  }\n  allocNode(): HeightfieldBBoxTreeNode {\n    return {\n      bbox: new BoundingBox(),\n      rc: { x: 0, y: 0, w: 0, h: 0 },\n      left: null,\n      right: null,\n    };\n  }\n  computeNodeBoundingBox(node: HeightfieldBBoxTreeNode, bbox: BoundingBox, vertices: Vector4[]) {\n    bbox.beginExtend();\n    for (let i = 0; i < node.rc.w; i++) {\n      for (let j = 0; j < node.rc.h; j++) {\n        const index = node.rc.x + i + (node.rc.y + j) * this._resX;\n        bbox.extend(vertices[index])\n      }\n    }\n  }\n  createChildNode(node: HeightfieldBBoxTreeNode, x: number, y: number, w: number, h: number, vertices: Vector4[]): boolean {\n    node.rc.x = x;\n    node.rc.y = y;\n    node.rc.w = w;\n    node.rc.h = h;\n    if (w <= this._patchSize && h <= this._patchSize) {\n      node.left = null;\n      node.right = null;\n      this.computeNodeBoundingBox(node, node.bbox, vertices);\n    } else {\n      if (w >= h) {\n        const w1 = (w + 1) >> 1;\n        const w2 = w - w1 + 1;\n        node.left = this.allocNode();\n        this.createChildNode(node.left, x, y, w1, h, vertices);\n        node.right = this.allocNode();\n        this.createChildNode(node.right, x + w1 - 1, y, w2, h, vertices);\n      } else {\n        const h1 = (h + 1) >> 1;\n        const h2 = h - h1 + 1;\n        node.left = this.allocNode();\n        this.createChildNode(node.left, x, y, w, h1, vertices);\n        node.right = this.allocNode();\n        this.createChildNode(node.right, x, y + h1 - 1, w, h2, vertices);\n      }\n      node.bbox.beginExtend();\n      node.bbox.extend(node.left.bbox.minPoint);\n      node.bbox.extend(node.left.bbox.maxPoint);\n      node.bbox.extend(node.right.bbox.minPoint);\n      node.bbox.extend(node.right.bbox.maxPoint);\n    }\n    return true;\n  }\n}\n\nexport class HeightField {\n  private m_v4Range: Vector4;\n  private m_scale: Vector3;\n  private m_sizeX: number;\n  private m_sizeZ: number;\n  private m_bboxTree: HeightfieldBBoxTree;\n  constructor() {\n    this.m_v4Range = Vector4.zero();\n    this.m_bboxTree = null;\n    this.m_scale = Vector3.one();\n    this.m_sizeX = 0;\n    this.m_sizeZ = 0;\n  }\n  init(sizeX: number, sizeZ: number, offsetX: number, offsetZ: number, spacingX: number, spacingZ: number, vScale: number, heights: Float32Array, patchSize: number): boolean {\n    const v: Vector4[] = [];\n    for (let i = 0; i < sizeZ; ++i) {\n      const srcOffset = i * sizeX;\n      const dstOffset = (sizeZ - i - 1) * sizeX;\n      for (let j = 0; j < sizeX; ++j) {\n        v[dstOffset + j] = new Vector4(offsetX + j * spacingX, heights[srcOffset + j] * vScale, offsetZ + i * spacingZ, 1);\n      }\n    }\n    this.m_bboxTree = new HeightfieldBBoxTree(sizeX, sizeZ, v, patchSize);\n    this.m_v4Range.set(\n      this.m_bboxTree.getRootNode().bbox.minPoint.x,\n      this.m_bboxTree.getRootNode().bbox.minPoint.z,\n      this.m_bboxTree.getRootNode().bbox.extents.x * 2,\n      this.m_bboxTree.getRootNode().bbox.extents.z * 2\n    );\n    this.m_scale.set(spacingX, vScale, spacingZ);\n    this.m_sizeX = sizeX;\n    this.m_sizeZ = sizeZ;\n    return true;\n  }\n  initWithVertices(sizeX: number, sizeZ: number, vertices: Vector4[], patchSize: number): boolean {\n    this.m_bboxTree = new HeightfieldBBoxTree(sizeX, sizeZ, vertices, patchSize);\n    this.m_scale.set(1, 1, 1);\n    this.m_sizeX = sizeX;\n    this.m_sizeZ = sizeZ;\n    this.m_v4Range.set(\n      this.m_bboxTree.getRootNode().bbox.minPoint.x,\n      this.m_bboxTree.getRootNode().bbox.minPoint.z,\n      this.m_bboxTree.getRootNode().bbox.extents.x * 2,\n      this.m_bboxTree.getRootNode().bbox.extents.z * 2\n    );\n    return true;\n  }\n  clear(): void {\n    this.m_bboxTree = null;\n    this.m_v4Range.set(0, 0, 0, 0);\n    this.m_scale.set(1, 1, 1);\n    this.m_sizeX = 0;\n    this.m_sizeZ = 0;\n  }\n  computeNormals(): Uint8Array {\n    const scaleX = this.m_scale.x;\n    const scaleZ = this.m_scale.z;\n    const heights = this.getHeights();\n    const v = new Vector3();\n    const normals = new Uint8Array((this.m_sizeZ - 1) * (this.m_sizeX - 1) * 4);\n    for (let y = 0; y < this.m_sizeZ - 1; ++y) {\n      for (let x = 0; x < this.m_sizeX - 1; ++x) {\n        const h00 = heights[x + y * this.m_sizeX];\n        const h01 = heights[x + (y + 1) * this.m_sizeX];\n        const h11 = heights[x + 1 + (y + 1) * this.m_sizeX];\n        const h10 = heights[x + 1 + y * this.m_sizeX];\n        const sx = (h00 + h01 - h11 - h10) * 0.5;\n        const sy = (h00 + h10 - h01 - h11) * 0.5;\n        const index = (x + (this.m_sizeZ - 2 - y) * (this.m_sizeX - 1));\n        v.set(sx * scaleZ, 2 * scaleX * scaleZ, -sy * scaleX).inplaceNormalize();\n        normals[index * 4 + 0] = Math.floor((v.x * 0.5 + 0.5) * 255);\n        normals[index * 4 + 1] = Math.floor((v.y * 0.5 + 0.5) * 255);\n        normals[index * 4 + 2] = Math.floor((v.z * 0.5 + 0.5) * 255);\n        normals[index * 4 + 3] = 255;\n      }\n    }\n    return normals;\n  }\n  computeNormalVectors(): Float32Array {\n    const scaleX = this.m_scale.x;\n    const scaleZ = this.m_scale.z;\n    const heights = this.getHeights();\n    const v = new Vector3();\n    const normals = new Float32Array(this.m_sizeZ * this.m_sizeX * 3);\n    for (let y = 0; y < this.m_sizeZ; ++y) {\n      for (let x = 0; x < this.m_sizeX; ++x) {\n        const h = heights[x + y * this.m_sizeX];\n        const h00 = x > 0 && y > 0 ? heights[x - 1 + (y - 1) * this.m_sizeX] : h;\n        const h01 = y > 0 && y < this.m_sizeZ - 1 ? heights[(x - 1) + (y + 1) * this.m_sizeX] : h;\n        const h11 = x < this.m_sizeX - 1 && y < this.m_sizeZ - 1 ? heights[x + 1 + (y + 1) * this.m_sizeX] : h;\n        const h10 = x < this.m_sizeX - 1 && y > 0 ? heights[x + 1 + (y - 1) * this.m_sizeX] : h;\n        const sx = (h00 + h01 - h11 - h10) * 0.5;\n        const sy = (h00 + h10 - h01 - h11) * 0.5;\n        const index = x + (this.m_sizeZ - 1 - y) * this.m_sizeX;\n        v.set(sx * scaleZ, 2 * scaleX * scaleZ, -sy * scaleX).inplaceNormalize();\n        normals[index * 3 + 0] = v.x;\n        normals[index * 3 + 1] = v.y;\n        normals[index * 3 + 2] = v.z;\n      }\n    }\n    return normals;\n  }\n  getBBoxTree(): HeightfieldBBoxTree {\n    return this.m_bboxTree;\n  }\n  getSpacingX(): number {\n    return this.m_scale.x;\n  }\n  getSpacingZ(): number {\n    return this.m_scale.z;\n  }\n  getVerticalScale(): number {\n    return this.m_scale.y;\n  }\n  getSizeX(): number {\n    return this.m_sizeX;\n  }\n  getSizeZ(): number {\n    return this.m_sizeZ;\n  }\n  getOffsetX(): number {\n    return this.m_v4Range.x;\n  }\n  getOffsetZ(): number {\n    return this.m_v4Range.y;\n  }\n  getBoundingbox(): BoundingBox {\n    return this.m_bboxTree?.getRootNode()?.bbox || null;\n  }\n  getHeights(): Float32Array {\n    return this.m_bboxTree?.getHeights() || null;\n  }\n  getHeight(x: number, z: number): number {\n    return this.m_bboxTree ? this.m_bboxTree.getHeight(x, z) : 0;\n  }\n  getRealHeight(x: number, z: number): number {\n    return this.m_bboxTree ? this.m_bboxTree.getRealHeight(x, z) : 0;\n  }\n}\n"],"names":[],"mappings":"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"}