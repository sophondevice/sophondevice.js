{"version":3,"file":"patch.js","sources":["../../../../../libs/device/src/scene/terrain/patch.ts"],"sourcesContent":["import { Vector3 } from \"@sophon/base\";\r\nimport { BoundingBox } from \"../bounding_volume\";\r\nimport { Primitive } from \"../primitive\";\r\nimport { PatchPosition } from \"./types\";\r\nimport { Device, GPUDataBuffer, makeVertexBufferType, PBStructTypeInfo, PrimitiveType, StructuredBuffer } from \"../../device\";\r\nimport type { Terrain } from './terrain';\r\nimport type { Quadtree } from \"./quadtree\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { DrawContext } from \"../drawable\";\r\n\r\nlet patchId = 0;\r\nexport class TerrainPatch {\r\n  private _geometry: Primitive;\r\n  private _geometryLines: Primitive;\r\n  private _quadtree: Quadtree;\r\n  private _mipLevel: number;\r\n  private _offsetX: number;\r\n  private _offsetZ: number;\r\n  private _step: number;\r\n  private _boundingBox: BoundingBox;\r\n  private _lodDistance: number;\r\n  private _maxError: number;\r\n  private _parent: TerrainPatch;\r\n  private _offsetScale: StructuredBuffer;\r\n  private _id: number;\r\n  constructor() {\r\n    this._geometry = null;\r\n    this._geometryLines = null;\r\n    this._mipLevel = 0;\r\n    this._offsetX = 0;\r\n    this._offsetZ = 0;\r\n    this._boundingBox = null;\r\n    this._parent = null;\r\n    this._offsetScale = null;\r\n    this._quadtree = null;\r\n    this._step = 0;\r\n    this._lodDistance = 0;\r\n    this._id = patchId++;\r\n  }\r\n  initialize(scene: Scene, quadtree: Quadtree, parent: TerrainPatch, position: PatchPosition, baseVertices: StructuredBuffer, normals: Float32Array, elevations: Float32Array): boolean {\r\n    const device = scene.device;\r\n    const patchSize = quadtree.getPatchSize();\r\n    const rootSize = quadtree.getRootSize();\r\n    this._mipLevel = parent ? parent.getMipLevel() + 1 : 0;\r\n    const step = Math.floor((rootSize - 1) / (patchSize - 1)) >> this._mipLevel;\r\n    const interval = (patchSize - 1) * step;\r\n    const parentOffsetX = parent ? parent.getOffsetX() : 0;\r\n    const parentOffsetZ = parent ? parent.getOffsetZ() : 0;\r\n    switch (position) {\r\n      case PatchPosition.LeftTop:\r\n        this._offsetX = parentOffsetX;\r\n        this._offsetZ = parentOffsetZ;\r\n        break;\r\n      case PatchPosition.RightTop:\r\n        this._offsetX = parentOffsetX + interval;\r\n        this._offsetZ = parentOffsetZ;\r\n        break;\r\n      case PatchPosition.LeftBottom:\r\n        this._offsetX = parentOffsetX;\r\n        this._offsetZ = parentOffsetZ + interval;\r\n        break;\r\n      case PatchPosition.RightBottom:\r\n        this._offsetX = parentOffsetX + interval;\r\n        this._offsetZ = parentOffsetZ + interval;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    if (this._offsetX + interval >= quadtree.getRootSizeX() || this._offsetZ + interval >= quadtree.getRootSizeZ()) {\r\n      baseVertices = null;\r\n    }\r\n    this._quadtree = quadtree;\r\n    this._step = step;\r\n    this._parent = parent;\r\n    this._geometry = baseVertices ? new Primitive(device) : null;\r\n    this._geometryLines = baseVertices ? new Primitive(device) : null;\r\n    this._maxError = baseVertices ? this.computeMaxError() : 0;\r\n    if (baseVertices) {\r\n      const scaleX = this._quadtree.getScaleX();\r\n      const scaleZ = this._quadtree.getScaleZ();\r\n      if (step === 1) {\r\n        this._boundingBox = new BoundingBox();\r\n        this._boundingBox.minPoint.x = this._offsetX * scaleX;\r\n        this._boundingBox.minPoint.y = Number.MAX_VALUE;\r\n        this._boundingBox.minPoint.z = this._offsetZ * scaleZ;\r\n        this._boundingBox.maxPoint.x = this._offsetX * scaleX + (this._quadtree.getPatchSize() - 1) * this._step * scaleX;\r\n        this._boundingBox.maxPoint.y = -Number.MAX_VALUE;\r\n        this._boundingBox.maxPoint.z = this._offsetZ * scaleZ + (this._quadtree.getPatchSize() - 1) * this._step * scaleZ;\r\n      }\r\n      this.setupVertices(device, this.computeSkirtLength(), baseVertices, normals, elevations);\r\n    }\r\n    return true;\r\n  }\r\n  setupCamera(viewportH: number, tanHalfFovy: number, maxPixelError: number): void {\r\n    if (maxPixelError > 0 && tanHalfFovy > 0) {\r\n      this._lodDistance = this.computeLodDistance(viewportH, tanHalfFovy, maxPixelError);\r\n    } else {\r\n      this._lodDistance = -1;\r\n    }\r\n  }\r\n  setupVertices(device: Device, skirtLength: number, baseVertices: StructuredBuffer, normalVectors: Float32Array, elevations: Float32Array): void {\r\n    const that = this;\r\n    function setNormalAndHeight(heights: Float32Array, normals: Float32Array, index: number, x: number, z: number, width: number, height: number, hDelta: number): number {\r\n      const k = x + z * width;\r\n      const h = elevations[k];\r\n      normals[index * 3 + 0] = normalVectors[k * 3 + 0];\r\n      normals[index * 3 + 1] = normalVectors[k * 3 + 1];\r\n      normals[index * 3 + 2] = normalVectors[k * 3 + 2];\r\n      heights[index] = h + hDelta;\r\n      if (that._boundingBox) {\r\n        if (that._boundingBox.maxPoint.y < h) {\r\n          that._boundingBox.maxPoint.y = h;\r\n        }\r\n        if (that._boundingBox.minPoint.y > h) {\r\n          that._boundingBox.minPoint.y = h;\r\n        }\r\n      }\r\n      return index + 1;\r\n    }\r\n    const patchSize = this._quadtree.getPatchSize();\r\n    const numVerts = (patchSize + 2) * (patchSize + 2);\r\n    const heights = new Float32Array(numVerts);\r\n    const normals = new Float32Array(numVerts * 3);\r\n    let x = this._offsetX;\r\n    let z = this._offsetZ;\r\n    let t = 0;\r\n    const hf = this._quadtree.getHeightField();\r\n    const w = hf.getSizeX();\r\n    const h = hf.getSizeZ();\r\n    t = setNormalAndHeight(heights, normals, t, x, z, w, h, -skirtLength);\r\n    for (let i = 0; i < patchSize; i++, x += this._step) {\r\n      t = setNormalAndHeight(heights, normals, t, x, z, w, h, -skirtLength);\r\n    }\r\n    t = setNormalAndHeight(heights, normals, t, x - this._step, z, w, h, -skirtLength);\r\n    z = this._offsetZ;\r\n    for (let i = 0; i < patchSize; i++, z += this._step) {\r\n      x = this._offsetX;\r\n      t = setNormalAndHeight(heights, normals, t, x, z, w, h, -skirtLength);\r\n      for (let j = 0; j < patchSize; j++, x += this._step) {\r\n        t = setNormalAndHeight(heights, normals, t, x, z, w, h, 0);\r\n      }\r\n      t = setNormalAndHeight(heights, normals, t, x - this._step, z, w, h, -skirtLength);\r\n    }\r\n    x = this._offsetX;\r\n    z -= this._step;\r\n    t = setNormalAndHeight(heights, normals, t, x, z, w, h, -skirtLength);\r\n    for (let i = 0; i < patchSize; i++, x += this._step) {\r\n      t = setNormalAndHeight(heights, normals, t, x, z, w, h, -skirtLength);\r\n    }\r\n    t = setNormalAndHeight(heights, normals, t, x - this._step, z, w, h, -skirtLength);\r\n    const heightArray = device.createStructuredBuffer(makeVertexBufferType(numVerts, 'custom0_f32'), { usage: 'vertex', managed: true }, heights);\r\n    const normalArray = device.createStructuredBuffer(makeVertexBufferType(numVerts, 'normal_f32x3'), { usage: 'vertex', managed: true }, normals);\r\n    this._geometry.setVertexBuffer(baseVertices);\r\n    this._geometry.setVertexBuffer(normalArray);\r\n    this._geometry.setVertexBuffer(heightArray);\r\n    this._geometry.setIndexBuffer(this._quadtree.getIndices());\r\n    this._geometry.indexStart = 0;\r\n    this._geometry.indexCount = this._quadtree.getIndices().length;\r\n    this._geometry.primitiveType = PrimitiveType.TriangleStrip;\r\n    this._geometryLines.setVertexBuffer(baseVertices);\r\n    this._geometryLines.setVertexBuffer(normalArray);\r\n    this._geometryLines.setVertexBuffer(heightArray);\r\n    this._geometryLines.setIndexBuffer(this._quadtree.getIndicesWireframe());\r\n    this._geometryLines.indexStart = 0;\r\n    this._geometryLines.indexCount = this._quadtree.getIndicesWireframe().length;\r\n    this._geometryLines.primitiveType = PrimitiveType.LineList;\r\n  }\r\n  getOffsetScale(terrain: Terrain, ctx: DrawContext): StructuredBuffer {\r\n    if (!this._offsetScale) {\r\n      const terrainProgram = terrain.material.getOrCreateProgram(ctx);\r\n      const scaleX = this._quadtree.getScaleX();\r\n      const scaleZ = this._quadtree.getScaleZ();\r\n      const v = new Float32Array([this._step * scaleX, this._offsetX * scaleX, this._step * scaleZ, this._offsetZ * scaleZ]);\r\n      this._offsetScale = ctx.renderPass.device.createStructuredBuffer(terrainProgram.programs[ctx.materialFunc].getBindingInfo('scaleOffset').type as PBStructTypeInfo, { usage: 'uniform' }, v);\r\n      this._offsetScale.restoreHandler = async obj => {\r\n        (obj as GPUDataBuffer).bufferSubData(0, v);\r\n      };\r\n    }\r\n    return this._offsetScale;\r\n  }\r\n  getBoundingBox(): BoundingBox {\r\n    return this._boundingBox;\r\n  }\r\n  setBoundingBox(bbox: BoundingBox): void {\r\n    this._boundingBox = bbox;\r\n  }\r\n  getMipLevel(): number {\r\n    return this._mipLevel;\r\n  }\r\n  getOffsetX(): number {\r\n    return this._offsetX;\r\n  }\r\n  getOffsetZ(): number {\r\n    return this._offsetZ;\r\n  }\r\n  getStep(): number {\r\n    return this._step;\r\n  }\r\n  getLODDistance(): number {\r\n    return this._lodDistance;\r\n  }\r\n  getGeometry(): Primitive {\r\n    return this._geometry;\r\n  }\r\n  getGeometryWireframe(): Primitive {\r\n    return this._geometryLines;\r\n  }\r\n  getHeight(x: number, z: number): number {\r\n    const startX = this._offsetX + this._step * Math.floor((x - this._offsetX) / this._step);\r\n    const startZ = this._offsetZ + this._step * Math.floor((z - this._offsetZ) / this._step);\r\n    const endX = startX == x ? startX : startX + this._step;\r\n    const endZ = startZ == z ? startZ : startZ + this._step;\r\n    const hf = this._quadtree.getHeightField();\r\n    const lt_height = hf.getHeight(startX, startZ);\r\n    const rt_height = hf.getHeight(endX, startZ);\r\n    const lb_height = hf.getHeight(startX, endZ);\r\n    const rb_height = hf.getHeight(endX, endZ);\r\n    const t1 = (x - startX) / this._step;\r\n    const t2 = (z - startZ) / this._step;\r\n    const h1 = lt_height + (rt_height - lt_height) * t1;\r\n    const h2 = lb_height + (rb_height - lb_height) * t1;\r\n    return h1 + (h2 - h1) * t2;\r\n  }\r\n  computeMaxError(): number {\r\n    if (this._step === 1) {\r\n      return 0;\r\n    }\r\n    let maxError = 0;\r\n    const dimension = this._step * (this._quadtree.getPatchSize() - 1);\r\n    const rootSize = this._quadtree.getRootSize();\r\n    const hf = this._quadtree.getHeightField();\r\n    for (let i = this._offsetZ; i <= this._offsetZ + dimension; i++) {\r\n      for (let j = this._offsetX; j <= this._offsetX + dimension; j++) {\r\n        const i00 = this._offsetZ + Math.floor((i - this._offsetZ) / this._step) * this._step;\r\n        const j00 = this._offsetX + Math.floor((j - this._offsetX) / this._step) * this._step;\r\n        if (i00 === rootSize - 1 || j00 === rootSize - 1) {\r\n          continue;\r\n        }\r\n        const i11 = i00 + this._step;\r\n        const j11 = j00 + this._step;\r\n        const h00 = hf.getHeight(j00, i00);\r\n        const h01 = hf.getHeight(j11, i00);\r\n        const h10 = hf.getHeight(j00, i11);\r\n        const h11 = hf.getHeight(j11, i11);\r\n        const factorZ = (i - i00) / this._step;\r\n        const factorX = (j - j00) / this._step;\r\n        const h = hf.getHeight(j, i);\r\n        const h0 = h00 + factorX * (h01 - h00);\r\n        const h1 = h10 + factorX * (h11 - h10);\r\n        const h2 = h0 + factorZ * (h1 - h0);\r\n        const err = Math.abs(h - h2);\r\n        if (err > maxError) {\r\n          maxError = err;\r\n        }\r\n      }\r\n    }\r\n    return maxError;\r\n  }\r\n  computeSkirtLength(): number {\r\n    let skirtLength = 0;\r\n    let p = this._parent;\r\n    while (p) {\r\n      const f = this.computeErrorMetric(p);\r\n      if (f > skirtLength) {\r\n        skirtLength = f;\r\n      }\r\n      p = p._parent;\r\n    }\r\n    return skirtLength;\r\n  }\r\n  computeErrorMetric(other: TerrainPatch): number {\r\n    let errMetric = 0;\r\n    if (other.getMipLevel() > this._mipLevel) {\r\n      const otherOffsetX = other.getOffsetX();\r\n      const otherOffsetZ = other.getOffsetZ();\r\n      const otherStep = other.getStep();\r\n      const otherDimension = other.getStep() * this._quadtree.getPatchSize();\r\n      for (let i = otherOffsetZ; i < otherOffsetZ + otherDimension; i += otherStep) {\r\n        for (let j = otherOffsetX; j < otherOffsetX + otherDimension; j += otherStep) {\r\n          const err = Math.abs(this.getHeight(j, i) - other.getHeight(j, i));\r\n          if (err > errMetric) {\r\n            errMetric = err;\r\n          }\r\n        }\r\n      }\r\n    } else if (other.getMipLevel() < this._mipLevel) {\r\n      const dimension = this._step * (this._quadtree.getPatchSize() - 1);\r\n      for (let i = this._offsetZ; i <= this._offsetZ + dimension; i += this._step) {\r\n        for (let j = this._offsetX; j <= this._offsetX + dimension; j += this._step) {\r\n          const err = Math.abs(this.getHeight(j, i) - other.getHeight(j, i));\r\n          if (err > errMetric) {\r\n            errMetric = err;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return errMetric;\r\n  }\r\n  computeBoundingBox(box: BoundingBox): void {\r\n    const [maxHeight, minHeight] = this.computeHeightBound();\r\n    const scaleX = this._quadtree.getScaleX();\r\n    const scaleZ = this._quadtree.getScaleZ();\r\n    box.minPoint = new Vector3(this._offsetX * scaleX, minHeight, this._offsetZ * scaleZ);\r\n    box.maxPoint = new Vector3(this._offsetX * scaleX + (this._quadtree.getPatchSize() - 1) * this._step * scaleX, maxHeight, this._offsetZ * scaleZ + (this._quadtree.getPatchSize() - 1) * this._step * scaleZ);\r\n  }\r\n  computeLodDistance(viewportH: number, tanHalfFovy: number, maxPixelError: number): number {\r\n    return 0.5 * this._maxError * viewportH / (maxPixelError * tanHalfFovy);\r\n  }\r\n  sqrDistanceToPoint(point: Vector3) {\r\n    const bbox = this.getBoundingBox();\r\n    const radius = Math.sqrt(bbox.extents.x * bbox.extents.x + bbox.extents.z * bbox.extents.z);\r\n    const dx = point.x - bbox.center.x;\r\n    const dz = point.z - bbox.center.z;\r\n    const s = Math.max(0, Math.sqrt(dx * dx + dz * dz) - radius);\r\n    const t = point.y > bbox.maxPoint.y ? point.y - bbox.maxPoint.y : point.y < bbox.minPoint.y ? bbox.minPoint.y - point.y : 0;\r\n    return s * s + t * t;\r\n  }\r\n  sqrDistancePointToTriangle(P: Vector3, t0: Vector3, t1: Vector3, t2: Vector3): number {\r\n    const B = t0;\r\n    const E0 = Vector3.sub(t1, B);\r\n    const E1 = Vector3.sub(t2, B);\r\n    const D = Vector3.sub(B, P);\r\n    const a = Vector3.dot(E0, E0);\r\n    const b = Vector3.dot(E0, E1);\r\n    const c = Vector3.dot(E1, E1);\r\n    const d = Vector3.dot(E0, D);\r\n    const e = Vector3.dot(E1, D);\r\n    const f = Vector3.dot(D, D);\r\n    const det = a * c - b * b;\r\n    let s = b * e - c * d;\r\n    let t = b * d - a * e;\r\n    let sqrDistance: number;\r\n    if (s + t <= det) {\r\n      if (s < 0) {\r\n        if (t < 0) {\r\n          if (d < 0) {\r\n            t = 0;\r\n            if (-d >= a) {\r\n              s = 1;\r\n              sqrDistance = a + 2 * d + f;\r\n            } else {\r\n              s = -d / a;\r\n              sqrDistance = d * s + f;\r\n            }\r\n          } else {\r\n            s = 0;\r\n            if (e >= 0) {\r\n              t = 0;\r\n              sqrDistance = f;\r\n            } else {\r\n              if (-e >= c) {\r\n                t = 1;\r\n                sqrDistance = c + 2 * e + f;\r\n              } else {\r\n                t = -e / c;\r\n                sqrDistance = e * t + f;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          s = 0;\r\n          if (e >= 0) {\r\n            t = 0;\r\n            sqrDistance = f;\r\n          } else {\r\n            if (-e >= c) {\r\n              t = 1;\r\n              sqrDistance = c + 2 * e + f;\r\n            } else {\r\n              t = -e / c;\r\n              sqrDistance = e * t + f;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (t < 0) {\r\n          t = 0;\r\n          if (d >= 0) {\r\n            s = 0;\r\n            sqrDistance = f;\r\n          } else {\r\n            if (-d >= a) {\r\n              s = 1;\r\n              sqrDistance = a + 2 * d + f;\r\n            } else {\r\n              s = -d / a;\r\n              sqrDistance = d * s + f;\r\n            }\r\n          }\r\n        } else {\r\n          s /= det;\r\n          t /= det;\r\n          sqrDistance = s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;\r\n        }\r\n      }\r\n    } else {\r\n      if (s < 0) {\r\n        const tmp0 = b + d;\r\n        const tmp1 = c + e;\r\n        if (tmp1 > tmp0) {\r\n          const numer = tmp1 - tmp0;\r\n          const denom = a - 2 * b + c;\r\n          if (numer >= denom) {\r\n            s = 1;\r\n            t = 0;\r\n            sqrDistance = a + 2 * d + f;\r\n          } else {\r\n            s = numer / denom;\r\n            t = 1 - s;\r\n            sqrDistance = s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;\r\n          }\r\n        } else {\r\n          s = 0;\r\n          if (tmp1 <= 0) {\r\n            t = 1;\r\n            sqrDistance = c + 2 * e + f;\r\n          } else {\r\n            if (e >= 0) {\r\n              t = 0;\r\n              sqrDistance = f;\r\n            } else {\r\n              t = -e / c;\r\n              sqrDistance = e * t + f;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (t < 0) {\r\n          const tmp0 = b + e;\r\n          const tmp1 = a + d;\r\n          if (tmp1 > tmp0) {\r\n            const numer = tmp1 - tmp0;\r\n            const denom = a - 2 * b + c;\r\n            if (numer >= denom) {\r\n              t = 1;\r\n              s = 0;\r\n              sqrDistance = c + 2 * e + f;\r\n            } else {\r\n              t = numer / denom;\r\n              s = 1 - t;\r\n              sqrDistance = s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;\r\n            }\r\n          } else {\r\n            t = 0;\r\n            if (tmp1 <= 0) {\r\n              s = 1;\r\n              sqrDistance = a + 2 * d + f;\r\n            } else {\r\n              if (d >= 0) {\r\n                s = 0;\r\n                sqrDistance = f;\r\n              } else {\r\n                s = -d / a;\r\n                sqrDistance = d * s + f;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const numer = c + e - b - d;\r\n          if (numer <= 0) {\r\n            s = 0;\r\n            t = 1;\r\n            sqrDistance = c + 2 * e + f;\r\n          } else {\r\n            const denom = a - 2 * b + c;\r\n            if (numer >= denom) {\r\n              s = 1;\r\n              t = 0;\r\n              sqrDistance = a + 2 * d + f;\r\n            } else {\r\n              s = numer / denom;\r\n              t = 1 - s;\r\n              sqrDistance = s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (sqrDistance < 0) {\r\n      sqrDistance = 0;\r\n    }\r\n    return sqrDistance;\r\n  }\r\n  computeHeightBound(): [number, number] {\r\n    let maxHeight = -Number.MAX_VALUE;\r\n    let minHeight = Number.MAX_VALUE;\r\n    const dimension = this._step * (this._quadtree.getPatchSize() - 1);\r\n    const hf = this._quadtree.getHeightField();\r\n    const z = Math.min(hf.getSizeZ() - 1, this._offsetZ + dimension);\r\n    const x = Math.min(hf.getSizeX() - 1, this._offsetX + dimension);\r\n    for (let i = this._offsetZ; i <= z; i++) {\r\n      for (let j = this._offsetX; j <= x; j++) {\r\n        const h = hf.getHeight(j, i);\r\n        if (h > maxHeight) {\r\n          maxHeight = h;\r\n        }\r\n        if (h < minHeight) {\r\n          minHeight = h;\r\n        }\r\n      }\r\n    }\r\n    return [maxHeight, minHeight];\r\n  }\r\n  isDummy(): boolean {\r\n    return !this._geometry && !!this._quadtree;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}