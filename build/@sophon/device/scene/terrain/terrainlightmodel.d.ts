import { Vector2 } from "@sophon/base";
import { LambertLightModel } from "../materiallib";
import { PBInsideFunctionScope, PBGlobalScope, PBShaderExp, Texture2D, BindGroup, TextureSampler } from "../../device";
import type { DrawContext } from "../drawable";
export declare class TerrainLightModel extends LambertLightModel {
    protected static readonly funcNameCalcTerrainAlbedo = "lib_terrainLM_albedo";
    protected static readonly funcNameCalcTerrainNormal = "lib_terrainLM_normal";
    protected static readonly uniformTerrainBaseMap = "lib_terrainLM_baseMap";
    protected static readonly uniformTerrainNormalMap = "lib_terrainLM_normalMap";
    protected static readonly uniformMaskMap = "lib_terrainLM_maskMap";
    protected static readonly uniformDetailMap = "lib_terrainLM_detailMap";
    protected static readonly uniformDetailScales = "lib_terrainLM_detailScales";
    protected static readonly uniformTerrainUV = "lib_terrainLM_uv";
    protected _terrainBaseMap: Texture2D;
    protected _terrainBaseMapSampler: TextureSampler;
    protected _terrainNormalMap: Texture2D;
    protected _terrainNormalMapSampler: TextureSampler;
    protected _detailMaskMap: Texture2D;
    protected _detailMaskMapSampler: TextureSampler;
    protected _detailColorMaps: Texture2D[];
    protected _detailColorMapSamplers: TextureSampler[];
    protected _detailScales: Vector2[];
    constructor();
    get terrainBaseMap(): Texture2D;
    set terrainBaseMap(tex: Texture2D);
    get terrainNormalMap(): Texture2D;
    set terrainNormalMap(tex: Texture2D);
    get detailMaskMap(): Texture2D;
    set detailMaskMap(tex: Texture2D);
    get numDetailMaps(): number;
    get uniformUV(): string;
    getDetailColorMap(index: number): Texture2D;
    getDetailScale(index: number): Vector2;
    supportLighting(): boolean;
    calculateHash(): string;
    addDetailMap(color: Texture2D, scale: Vector2): void;
    applyUniforms(bindGroup: BindGroup, ctx: DrawContext): void;
    setupUniforms(scope: PBGlobalScope): void;
    calculateAlbedo(scope: PBInsideFunctionScope): PBShaderExp;
}
