{"version":3,"file":"terrainlightmodel.js","sources":["../../../../../libs/device/src/scene/terrain/terrainlightmodel.ts"],"sourcesContent":["import { Vector2 } from \"@sophon/base\";\nimport { LambertLightModel } from \"../materiallib\";\nimport { ShaderType, PBInsideFunctionScope, PBGlobalScope, PBShaderExp, Texture2D, BindGroup, TextureWrapping, TextureFilter, TextureSampler, BaseTexture } from \"../../device\";\nimport { MATERIAL_FUNC_NORMAL } from \"../values\";\nimport type { DrawContext } from \"../drawable\";\n\nexport class TerrainLightModel extends LambertLightModel {\n  protected static readonly funcNameCalcTerrainAlbedo = 'lib_terrainLM_albedo';\n  protected static readonly funcNameCalcTerrainNormal = 'lib_terrainLM_normal';\n  protected static readonly uniformTerrainBaseMap = 'lib_terrainLM_baseMap';\n  protected static readonly uniformTerrainNormalMap = 'lib_terrainLM_normalMap';\n  protected static readonly uniformMaskMap = 'lib_terrainLM_maskMap';\n  protected static readonly uniformDetailMap = 'lib_terrainLM_detailMap';\n  protected static readonly uniformDetailScales = 'lib_terrainLM_detailScales';\n  protected static readonly uniformTerrainUV = 'lib_terrainLM_uv';\n  protected _terrainBaseMap: Texture2D;\n  protected _terrainBaseMapSampler: TextureSampler;\n  protected _terrainNormalMap: Texture2D;\n  protected _terrainNormalMapSampler: TextureSampler;\n  protected _detailMaskMap: Texture2D;\n  protected _detailMaskMapSampler: TextureSampler;\n  protected _detailColorMaps: Texture2D[];\n  protected _detailColorMapSamplers: TextureSampler[];\n  protected _detailScales: Vector2[];\n  constructor() {\n    super();\n    this._terrainBaseMap = null;\n    this._terrainBaseMapSampler = null;\n    this._terrainNormalMap = null;\n    this._terrainNormalMapSampler = null;\n    this._detailMaskMap = null;\n    this._detailMaskMapSampler = null;\n    this._detailColorMaps = [];\n    this._detailColorMapSamplers = [];\n    this._detailScales = [];\n  }\n  get terrainBaseMap(): Texture2D {\n    return this._terrainBaseMap;\n  }\n  set terrainBaseMap(tex: Texture2D) {\n    tex = tex || null;\n    if (this._terrainBaseMap !== tex) {\n      this.optionChanged(!this._terrainBaseMap || !tex)\n      this._terrainBaseMap = tex;\n    }\n  }\n  get terrainNormalMap(): Texture2D {\n    return this._terrainNormalMap;\n  }\n  set terrainNormalMap(tex: Texture2D) {\n    tex = tex || null;\n    if (this._terrainNormalMap !== tex) {\n      this.optionChanged(!this._terrainNormalMap || !tex)\n      this._terrainNormalMap = tex;\n    }\n  }\n  get detailMaskMap(): Texture2D {\n    return this._detailMaskMap;\n  }\n  set detailMaskMap(tex: Texture2D) {\n    tex = tex || null;\n    if (this._detailMaskMap !== tex) {\n      this.optionChanged(!this._detailMaskMap || !tex)\n      this._detailMaskMap = tex;\n      this._detailMaskMapSampler = tex.device.createSampler({\n        magFilter: tex.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n        minFilter: tex.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n        mipFilter: tex.mipLevelCount === 1 ? TextureFilter.None : tex.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n      });\n    }\n  }\n  get numDetailMaps(): number {\n    return this._detailMaskMap ? this._detailColorMaps.length : 0;\n  }\n  get uniformUV(): string {\n    return TerrainLightModel.uniformTerrainUV;\n  }\n  getDetailColorMap(index: number): Texture2D {\n    return this._detailColorMaps[index];\n  }\n  getDetailScale(index: number): Vector2 {\n    return this._detailScales[index];\n  }\n  supportLighting(): boolean {\n    return !!this._terrainNormalMap;\n  }\n  calculateHash(): string {\n    return `${this._detailColorMaps.map(tex => this._calcTextureHash(tex)).join('')}_${this._calcTextureHash(this._terrainBaseMap)}_${this._calcTextureHash(this._terrainNormalMap)}`;\n  }\n  addDetailMap(color: Texture2D, scale: Vector2) {\n    if (!color) {\n      console.error(`addDetailMap(): texture can not be null`);\n      return;\n    }\n    scale = scale || Vector2.one();\n    this._detailColorMaps.push(color);\n    this._detailColorMapSamplers.push(color.device.createSampler({\n      addressU: TextureWrapping.Repeat,\n      addressV: TextureWrapping.Repeat,\n      magFilter: color.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n      minFilter: color.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n      mipFilter: color.mipLevelCount === 1 ? TextureFilter.None : color.isFilterable() ? TextureFilter.Linear : TextureFilter.Nearest,\n    }));\n    this._detailScales.push(scale);\n    this.optionChanged(true);\n  }\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext): void {\n    // super.applyUniforms(bindGroup, ctx);\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\n      if (this._terrainBaseMap) {\n        bindGroup.setTexture('terrainlm_baseMap', this._terrainBaseMap, this._terrainBaseMapSampler);\n      }\n      if (this._terrainNormalMap) {\n        bindGroup.setTexture('terrainlm_normalMap', this._terrainNormalMap, this._terrainNormalMapSampler);\n      }\n      if (this.numDetailMaps > 0) {\n        bindGroup.setTexture('terrainlm_maskMap', this._detailMaskMap, this._detailMaskMapSampler);\n        for (let i = 0; i < this.numDetailMaps; i++) {\n          bindGroup.setTexture(`terrainlm_detailMap${i}`, this._detailColorMaps[i], this._detailColorMapSamplers[i]);\n          bindGroup.setValue(`terrainlm_detailScale${i}`, this._detailScales[i]);\n        }\n      }\n    }\n  }\n  setupUniforms(scope: PBGlobalScope) {\n    const pb = scope.$builder;\n    if (pb.shaderType === ShaderType.Fragment) {\n      if (this._terrainBaseMap && !scope.$query(TerrainLightModel.uniformTerrainBaseMap)) {\n        scope.terrainlm_baseMap = pb.tex2D().uniform(2).tag(TerrainLightModel.uniformTerrainBaseMap);\n      }\n      if (this._terrainNormalMap && !scope.$query(TerrainLightModel.uniformTerrainNormalMap)) {\n        scope.terrainlm_normalMap = pb.tex2D().uniform(2).tag(TerrainLightModel.uniformTerrainNormalMap);\n      }\n      for (let i = 0; i < this.numDetailMaps; i++) {\n        scope[`terrainlm_detailMap${i}`] = pb.tex2D().uniform(2).tag(`${TerrainLightModel.uniformDetailMap}${i}`);\n        scope[`terrainlm_detailScale${i}`] = pb.vec2().uniform(2).tag(`${TerrainLightModel.uniformDetailScales}${i}`);\n      }\n      if (this.numDetailMaps > 0 && !scope.$query(TerrainLightModel.uniformMaskMap)) {\n        scope.terrainlm_maskMap = pb.tex2D().uniform(2).tag(TerrainLightModel.uniformMaskMap);\n      }\n    }\n  }\n  calculateAlbedo(scope: PBInsideFunctionScope): PBShaderExp {\n    const that = this;\n    const pb = scope.$builder;\n    if (!pb.getFunction(TerrainLightModel.funcNameCalcTerrainAlbedo)) {\n      pb.globalScope.$function(TerrainLightModel.funcNameCalcTerrainAlbedo, [], function () {\n        const maskMap = this.$query(TerrainLightModel.uniformMaskMap);\n        const uv = this.$query(TerrainLightModel.uniformTerrainUV);\n        if (maskMap) {\n          if (uv) {\n            this.$l.color = pb.vec3(0);\n            this.$l.uv = uv;\n            this.$l.mask = pb.textureSample(maskMap, this.uv);\n            for (let i = 0; i < that.numDetailMaps; i++) {\n              this.color = pb.add(this.color, pb.mul(pb.textureSample(this.$query(`${TerrainLightModel.uniformDetailMap}${i}`), pb.mul(this.uv, this.$query(`${TerrainLightModel.uniformDetailScales}${i}`))).xyz, this.mask[i]));\n            }\n            this.$return(pb.vec4(this.color, 1));\n          } else {\n            this.$return(pb.vec4(1));\n          }\n        } else {\n          const baseMap = this.$query(TerrainLightModel.uniformTerrainBaseMap);\n          if (baseMap && uv) {\n            this.$return(pb.textureSample(baseMap, uv));\n          } else {\n            this.$return(pb.vec4(1));\n          }\n        }\n      });\n    }\n    return pb.globalScope[TerrainLightModel.funcNameCalcTerrainAlbedo]();\n  }\n  /** @internal */\n  _calcTextureHash(tex: BaseTexture): string {\n    if (!tex) {\n      return '0';\n    } else if (tex.device.getDeviceType() === 'webgpu') {\n      return tex.isFilterable() ? '1' : '2';\n    } else {\n      return '1';\n    }\n  }\n}\n"],"names":[],"mappings":"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"}