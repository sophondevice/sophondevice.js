import { Vector3 } from "@sophon/base";
import { Texture2D } from "../../device";
import { TerrainMaterial } from "./terrainmaterial";
import { Drawable, DrawContext } from "../drawable";
import { GraphNode } from "../graph_node";
import type { Camera } from "../camera";
import type { TerrainPatch } from "./patch";
import type { BoundingVolume } from "../bounding_volume";
import type { Scene } from "../scene";
import type { SceneNode } from "../scene_node";
import type { CullVisitor } from "../visitors";
export declare class Terrain extends GraphNode implements Drawable {
    private _quadtree;
    private _maxPixelError;
    private _maxPixelErrorDirty;
    private _detailPatches;
    private _nondetailPatches;
    private _lodCamera;
    private _scale;
    private _patchSize;
    private _detailLodLevel;
    private _lastViewportH;
    private _lastTanHalfFOVY;
    private _width;
    private _height;
    private _material;
    private _terrainInfoBuffer;
    private _maxDetailTextureLevels;
    private _overridenStateSet;
    private _wireframe;
    private _viewPoint;
    private _castShadow;
    private _updateFunc;
    constructor(scene: Scene, parent?: SceneNode);
    get castShadow(): boolean;
    set castShadow(val: boolean);
    get maxDetailTextureLevels(): number;
    get maxPixelError(): number;
    set maxPixelError(val: number);
    get LODCamera(): Camera;
    set LODCamera(camera: Camera);
    get scale(): Vector3;
    get patchSize(): number;
    get width(): number;
    get height(): number;
    get detailLODLevel(): number;
    get material(): TerrainMaterial;
    get wireframe(): boolean;
    set wireframe(b: boolean);
    get normalMap(): Texture2D;
    create(sizeX: number, sizeZ: number, elevations: Float32Array, scale: Vector3, patchSize: number): boolean;
    computeBoundingVolume(bv: BoundingVolume): BoundingVolume;
    frameUpdate(camera: Camera): void;
    cull(cullVisitor: CullVisitor): boolean;
    isTransparency(): boolean;
    isUnlit(): boolean;
    isTerrain(): this is Terrain;
    draw(ctx: DrawContext): void;
    getPatches(): TerrainPatch[];
}
