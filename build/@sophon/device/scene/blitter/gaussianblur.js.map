{"version":3,"file":"gaussianblur.js","sources":["../../../../../libs/device/src/scene/blitter/gaussianblur.ts"],"sourcesContent":["import { Blitter, BlitType } from \"./blitter\";\r\nimport { ShaderType } from \"../../device/base_types\";\r\nimport type { BindGroup } from '../../device/gpuobject';\r\nimport type { PBShaderExp, PBInsideFunctionScope, PBGlobalScope } from \"../../device/builder\";\r\n\r\nexport class GaussianBlurBlitter extends Blitter {\r\n  protected _phase: 'horizonal' | 'vertical';\r\n  protected _kernelSize: number;\r\n  protected _sigma: number;\r\n  protected _blurSize: number;\r\n  protected _logSpace: boolean;\r\n  protected _logSpaceMultiplier: number;\r\n  constructor(phase: 'horizonal' | 'vertical', kernalSize: number, sigma: number, blurSize: number) {\r\n    super();\r\n    this._phase = phase;\r\n    this._kernelSize = kernalSize;\r\n    this._sigma = sigma;\r\n    this._blurSize = blurSize;\r\n    this._logSpace = false;\r\n    this._logSpaceMultiplier = 1;\r\n  }\r\n  get blurSize(): number {\r\n    return this._blurSize;\r\n  }\r\n  set blurSize(val: number) {\r\n    this._blurSize = val;\r\n  }\r\n  get kernelSize(): number {\r\n    return this._kernelSize;\r\n  }\r\n  set kernelSize(val: number) {\r\n    if (this._kernelSize !== val) {\r\n      this._kernelSize = val;\r\n      this.invalidateHash();\r\n    }\r\n  }\r\n  get logSpace(): boolean {\r\n    return this._logSpace;\r\n  }\r\n  set logSpace(val: boolean) {\r\n    if (this._logSpace !== !!val) {\r\n      this._logSpace = !!val;\r\n      this.invalidateHash();\r\n    }\r\n  }\r\n  get logSpaceMultiplier(): number {\r\n    return this._logSpaceMultiplier;\r\n  }\r\n  set logSpaceMultiplier(val: number) {\r\n    this._logSpaceMultiplier = val;\r\n  }\r\n  setup(scope: PBGlobalScope, type: BlitType) {\r\n    const pb = scope.$builder;\r\n    if (pb.shaderType === ShaderType.Fragment) {\r\n      scope.sigma = pb.float().uniform(0);\r\n      scope.blurSize = pb.float().uniform(0);\r\n      if (this._logSpace && this._phase === 'horizonal') {\r\n        scope.multiplier = pb.float().uniform(0);\r\n      }\r\n      if (this._phase !== 'horizonal' && this._phase !== 'vertical') {\r\n        throw new Error(`GaussianBlurFilter.setupFilter() failed: invalid phase: ${this._phase}`);\r\n      }\r\n      if (!Number.isInteger(this._kernelSize) || this._kernelSize < 0 || (this._kernelSize & 1) === 0) {\r\n        throw new Error(`GaussianBlurFilter.setupFilter() failed: invalid kernel size: ${this._kernelSize}`);\r\n      }\r\n      scope.blurMultiplyVec = type === 'cube'\r\n        ? this._phase === 'horizonal' ? pb.vec3(1, 0, 0) : pb.vec3(0, 1, 0)\r\n        : this._phase === 'horizonal' ? pb.vec2(1, 0) : pb.vec2(0, 1);\r\n      scope.numBlurPixelsPerSide = pb.float((this._kernelSize + 1) / 2);\r\n    }\r\n  }\r\n  setUniforms(bindGroup: BindGroup) {\r\n    bindGroup.setValue('sigma', this._sigma);\r\n    bindGroup.setValue('blurSize', this._blurSize);\r\n    if (this._logSpace && this._phase === 'horizonal') {\r\n      bindGroup.setValue('multiplier', this._logSpaceMultiplier);\r\n    }\r\n  }\r\n  filter(scope: PBInsideFunctionScope, type: BlitType, srcTex: PBShaderExp, srcUV: PBShaderExp, srcLayer: PBShaderExp): PBShaderExp {\r\n    const that = this;\r\n    const pb = scope.$builder;\r\n    scope.incrementalGaussian = pb.vec3();\r\n    scope.incrementalGaussian.x = pb.div(1, pb.mul(scope.sigma, Math.sqrt(2 * Math.PI)));\r\n    scope.incrementalGaussian.y = pb.exp(pb.div(-0.5, pb.mul(scope.sigma, scope.sigma)));\r\n    scope.incrementalGaussian.z = pb.mul(scope.incrementalGaussian.y, scope.incrementalGaussian.y);\r\n    scope.coefficientSum = pb.float(0);\r\n    scope.minExpValue = pb.vec4(87, 87, 87, 87);\r\n    scope.d0 = that.readTexel(scope, type, srcTex, srcUV, srcLayer);\r\n    if (that._logSpace) {\r\n      scope.avgValue = pb.vec4(scope.incrementalGaussian.x);\r\n    } else {\r\n      scope.avgValue = pb.mul(that.readTexel(scope, type, srcTex, srcUV, srcLayer), scope.incrementalGaussian.x);\r\n    }\r\n    scope.coefficientSum = pb.add(scope.coefficientSum, scope.incrementalGaussian.x);\r\n    scope.incrementalGaussian = pb.vec3(pb.mul(scope.incrementalGaussian.xy, scope.incrementalGaussian.yz), scope.incrementalGaussian.z);\r\n    scope.$for(pb.float('i'), 1, scope.numBlurPixelsPerSide, function () {\r\n      this.d1 = that.readTexel(scope, type, srcTex, pb.sub(srcUV, pb.mul(this.blurMultiplyVec, this.blurSize, this.i)), srcLayer);\r\n      this.d2 = that.readTexel(scope, type, srcTex, pb.add(srcUV, pb.mul(this.blurMultiplyVec, this.blurSize, this.i)), srcLayer);\r\n      if (that._logSpace) {\r\n        if (that._phase === 'horizonal') {\r\n          this.avgValue = pb.add(this.avgValue, pb.mul(pb.exp(pb.min(this.minExpValue, pb.mul(pb.sub(this.d1, this.d0), this.multiplier))), this.incrementalGaussian.x));\r\n          this.avgValue = pb.add(this.avgValue, pb.mul(pb.exp(pb.min(this.minExpValue, pb.mul(pb.sub(this.d2, this.d0), this.multiplier))), this.incrementalGaussian.x));\r\n        } else {\r\n          this.avgValue = pb.add(this.avgValue, pb.mul(pb.exp(pb.min(this.minExpValue, pb.sub(this.d1, this.d0))), this.incrementalGaussian.x));\r\n          this.avgValue = pb.add(this.avgValue, pb.mul(pb.exp(pb.min(this.minExpValue, pb.sub(this.d2, this.d0))), this.incrementalGaussian.x));\r\n        }\r\n      } else {\r\n        this.avgValue = pb.add(this.avgValue, pb.mul(this.d1, this.incrementalGaussian.x));\r\n        this.avgValue = pb.add(this.avgValue, pb.mul(this.d2, this.incrementalGaussian.x));\r\n      }\r\n      this.coefficientSum = pb.add(this.coefficientSum, pb.mul(this.incrementalGaussian.x, 2));\r\n      this.incrementalGaussian = pb.vec3(pb.mul(this.incrementalGaussian.xy, this.incrementalGaussian.yz), this.incrementalGaussian.z);\r\n    });\r\n    scope.$l.outColor = pb.div(scope.avgValue, scope.coefficientSum);\r\n    if (that._logSpace) {\r\n      if (that._phase === 'horizonal') {\r\n        scope.outColor = pb.add(pb.mul(scope.multiplier, scope.d0), pb.log(scope.outColor));\r\n      } else {\r\n        scope.outColor = pb.add(scope.d0, pb.log(scope.outColor));\r\n      }\r\n    }\r\n    return scope.outColor;\r\n  }\r\n  protected calcHash(): string {\r\n    return `${this._phase}-${this._kernelSize}-${Number(!!this._logSpace)}`;\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}