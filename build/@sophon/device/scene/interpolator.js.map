{"version":3,"file":"interpolator.js","sources":["../../../../libs/device/src/scene/interpolator.ts"],"sourcesContent":["import { Quaternion, numberClamp } from \"@sophon/base\";\r\nimport type { TypedArray } from \"../misc\";\r\n\r\nexport enum InterpolationMode {\r\n  UNKNOWN = 0,\r\n  STEP = 1,\r\n  LINEAR = 2,\r\n  CUBICSPLINE = 3\r\n}\r\n\r\nexport enum InterpolationTarget {\r\n  UNKNOWN = 0,\r\n  ROTATION = 1,\r\n  TRANSLATION = 2,\r\n  SCALING = 3,\r\n  WEIGHTS = 4,\r\n}\r\n\r\nconst tmpQuat1 = new Quaternion();\r\nconst tmpQuat2 = new Quaternion();\r\n\r\nexport class Interpolator {\r\n  private _prevKey: number;\r\n  private _prevT: number;\r\n  private _inputs: TypedArray;\r\n  private _outputs: TypedArray;\r\n  private _mode: InterpolationMode;\r\n  private _target: InterpolationTarget;\r\n  private _stride: number;\r\n  private _maxTime: number;\r\n  constructor(mode: InterpolationMode, target: InterpolationTarget, inputs: TypedArray, outputs: TypedArray, stride?: number) {\r\n    this._prevKey = 0;\r\n    this._prevT = 0;\r\n    this._inputs = inputs;\r\n    this._outputs = outputs;\r\n    this._mode = mode;\r\n    this._target = target;\r\n    this._stride = target === InterpolationTarget.WEIGHTS ? (stride ?? 0) : target === InterpolationTarget.ROTATION ? 4 : 3;\r\n    this._maxTime = inputs[inputs.length - 1];\r\n  }\r\n  get mode(): InterpolationMode {\r\n    return this._mode;\r\n  }\r\n  get target(): InterpolationTarget {\r\n    return this._target;\r\n  }\r\n  get maxTime(): number {\r\n    return this._maxTime;\r\n  }\r\n  slerpQuat(q1: Quaternion, q2: Quaternion, t: number, result?: Float32Array): Float32Array {\r\n    return Quaternion.slerp(Quaternion.normalize(q1), Quaternion.normalize(q2), t, new Quaternion(result)).inplaceNormalize().getArray();\r\n  }\r\n  step(prevKey: number, result?: Float32Array): Float32Array {\r\n    result = result || new Float32Array(this._stride);\r\n    for (let i = 0; i < this._stride; i++) {\r\n      result[i] = this._outputs[prevKey * this._stride + i];\r\n    }\r\n    return result;\r\n  }\r\n  linear(prevKey: number, nextKey: number, t: number, result?: Float32Array): Float32Array {\r\n    result = result || new Float32Array(this._stride);\r\n    for (let i = 0; i < this._stride; i++) {\r\n      result[i] = this._outputs[prevKey * this._stride + i] * (1 - t) + this._outputs[nextKey * this._stride + i] * t;\r\n    }\r\n    return result;\r\n  }\r\n  cubicSpline(prevKey: number, nextKey: number, keyDelta: number, t: number, result?: Float32Array): Float32Array {\r\n    result = result || new Float32Array(this._stride);\r\n    const prevIndex = prevKey * this._stride * 3;\r\n    const nextIndex = nextKey * this._stride * 3;\r\n    const A = 0;\r\n    const V = this._stride;\r\n    const B = 2 * this._stride;\r\n    const tSq = t * t;\r\n    const tCub = tSq * t;\r\n    for (let i = 0; i < this._stride; i++) {\r\n      const v0 = this._outputs[prevIndex + i + V];\r\n      const a = keyDelta * this._outputs[nextIndex + i + A];\r\n      const b = keyDelta * this._outputs[prevIndex + i + B];\r\n      const v1 = this._outputs[nextIndex + i + V];\r\n      result[i] = ((2 * tCub - 3 * tSq + 1) * v0) + ((tCub - 2 * tSq + t) * b) + ((-2 * tCub + 3 * tSq) * v1) + ((tCub - tSq) * a);\r\n    }\r\n    return result;\r\n  }\r\n  interpolate(t: number, maxTime: number, result?: Float32Array): Float32Array {\r\n    if (t === undefined) {\r\n      return undefined;\r\n    }\r\n    const input = this._inputs;\r\n    const output = this._outputs;\r\n    if (output.length === this._stride) {\r\n      result = result || new Float32Array(this._stride);\r\n      for (let i = 0; i < this._stride; i++) {\r\n        result[i] = output[i];\r\n      }\r\n      return result;\r\n    }\r\n    t = numberClamp(t % maxTime, input[0], input[input.length - 1]);\r\n    if (this._prevT > t) {\r\n      this._prevKey = 0;\r\n    }\r\n    this._prevT = t;\r\n    let nextKey: number;\r\n    for (let i = this._prevKey; i < input.length; ++i) {\r\n      if (t <= input[i]) {\r\n        nextKey = numberClamp(i, 1, input.length - 1);\r\n        break;\r\n      }\r\n    }\r\n    this._prevKey = numberClamp(nextKey - 1, 0, nextKey);\r\n    const keyDelta = input[nextKey] - input[this._prevKey];\r\n    const tn = (t - input[this._prevKey]) / keyDelta;\r\n    if (this._target === InterpolationTarget.ROTATION) {\r\n      if (this._mode === InterpolationMode.CUBICSPLINE) {\r\n        return this.cubicSpline(this._prevKey, nextKey, keyDelta, tn, result);\r\n      } else if (this._mode === InterpolationMode.LINEAR) {\r\n        this.getQuat(this._prevKey, tmpQuat1.getArray());\r\n        this.getQuat(nextKey, tmpQuat2.getArray());\r\n        return this.slerpQuat(tmpQuat1, tmpQuat2, tn, result);\r\n      } else /* if (this._mode === InterpolationMode.STEP) */ {\r\n        return this.getQuat(this._prevKey, result);\r\n      }\r\n    }\r\n    switch (this._mode) {\r\n      case InterpolationMode.STEP:\r\n        return this.step(this._prevKey, result);\r\n      case InterpolationMode.CUBICSPLINE:\r\n        return this.cubicSpline(this._prevKey, nextKey, keyDelta, tn, result);\r\n      case InterpolationMode.LINEAR:\r\n      default:\r\n        return this.linear(this._prevKey, nextKey, tn, result);\r\n    }\r\n  }\r\n  getQuat(index: number, result?: Float32Array): Float32Array {\r\n    result = result || new Float32Array(4);\r\n    result[0] = this._outputs[4 * index];\r\n    result[1] = this._outputs[4 * index + 1];\r\n    result[2] = this._outputs[4 * index + 2];\r\n    result[3] = this._outputs[4 * index + 3];\r\n    return result;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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"}