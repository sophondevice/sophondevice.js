{"version":3,"file":"octree.js","sources":["../../../../libs/device/src/scene/octree.ts"],"sourcesContent":["import { Vector3, AABB } from '@sophon/base';\nimport { GraphNode } from './graph_node';\nimport type { SceneNode } from './scene_node';\nimport type { Scene } from './scene';\nimport type { Visitor } from '../misc';\n\nexport enum OctreePlacement {\n  PPP = 0,\n  PPN = 1,\n  PNP = 2,\n  PNN = 3,\n  NPP = 4,\n  NPN = 5,\n  NNP = 6,\n  NNN = 7,\n}\nexport class OctreeNode {\n  /** @internal */\n  private _chunk: OctreeNodeChunk;\n  /** @internal */\n  private _position: number;\n  /** @internal */\n  private _references: number;\n  /** @internal */\n  private _nodes: GraphNode[];\n  /** @internal */\n  private _box: AABB;\n  /** @internal */\n  private _boxLoosed: AABB;\n  constructor() {\n    this._chunk = null;\n    this._position = 0;\n    this._references = 0;\n    this._nodes = [];\n    this._box = null;\n    this._boxLoosed = null;\n  }\n  getNodes(): GraphNode[] {\n    return this._nodes;\n  }\n  getLevel() {\n    return this._chunk.getLevel();\n  }\n  addNode(node: GraphNode) {\n    if (node && this._nodes.indexOf(node) < 0) {\n      this._nodes.push(node);\n    }\n  }\n  removeNode(node: GraphNode) {\n    const index = this._nodes.indexOf(node);\n    if (index >= 0) {\n      this._nodes.splice(index, 1);\n    }\n  }\n  clearNodes() {\n    this._nodes = [];\n  }\n  setChunk(chunk: OctreeNodeChunk) {\n    console.assert(!!chunk, 'Invalid chunk');\n    this._chunk = chunk;\n  }\n  getChunk(): OctreeNodeChunk {\n    return this._chunk;\n  }\n  setPosition(index: number) {\n    this._position = index;\n  }\n  getPosition(): number {\n    return this._position;\n  }\n  invalidateBox(): void {\n    this._box = null;\n    this.getParent()?.invalidateBox();\n  }\n  getBox() {\n    if (this._box === null) {\n      const box = new AABB();\n      box.beginExtend();\n      for (let i = 0; i < 8; i++) {\n        const child = this.getChild(i);\n        if (child) {\n          const childBox = child.getBox();\n          if (childBox) {\n            box.extend(childBox.minPoint);\n            box.extend(childBox.maxPoint);\n          }\n        }\n      }\n      for (const node of this._nodes) {\n        if (!node.isLight()) {\n          const bv = node.getWorldBoundingVolume()?.toAABB();\n          if (bv) {\n            box.extend(bv.minPoint);\n            box.extend(bv.maxPoint);\n          }\n        }\n      }\n      if (box.isValid()) {\n        this._box = box;\n      }\n    }\n    return this._box;\n  }\n  getBoxLoosed(): AABB {\n    if (this._boxLoosed === null) {\n      console.assert(!!this._chunk, 'Invalid chunk');\n      const d = this._chunk.getDimension();\n      const nodeSize = this._chunk.getNodeSize();\n      const halfWorldSize = this._chunk.getWorldSize() * 0.5;\n      const px = this._position % d;\n      const py = Math.floor(this._position / d) % d;\n      const pz = Math.floor(Math.floor(this._position / d) / d);\n      const minPoint = new Vector3(px - 0.5, py - 0.5, pz - 0.5)\n        .scaleBy(nodeSize)\n        .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\n      const maxPoint = new Vector3(\n        minPoint.x + nodeSize * 2,\n        minPoint.y + nodeSize * 2,\n        minPoint.z + nodeSize * 2,\n      );\n      this._boxLoosed = new AABB(minPoint, maxPoint);\n    }\n    return this._boxLoosed;\n  }\n  getMinPoint(): Vector3 {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const d = this._chunk.getDimension();\n    const nodeSize = this._chunk.getNodeSize();\n    const halfWorldSize = this._chunk.getWorldSize() * 0.5;\n    const px = this._position % d;\n    const py = Math.floor(this._position / d) % d;\n    const pz = Math.floor(Math.floor(this._position / d) / d);\n    return new Vector3(px, py, pz)\n      .scaleBy(nodeSize)\n      .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\n  }\n  getMaxPoint(): Vector3 {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const d = this._chunk.getDimension();\n    const nodeSize = this._chunk.getNodeSize();\n    const halfWorldSize = this._chunk.getWorldSize() * 0.5;\n    const px = (this._position % d) + 1;\n    const py = (Math.floor(this._position / d) % d) + 1;\n    const pz = Math.floor(Math.floor(this._position / d) / d) + 1;\n    return new Vector3(px, py, pz)\n      .scaleBy(nodeSize)\n      .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\n  }\n  getMinPointLoosed(): Vector3 {\n    const halfNodeSize = this._chunk.getNodeSize() * 0.5;\n    return this.getMinPoint().subBy(new Vector3(halfNodeSize, halfNodeSize, halfNodeSize));\n  }\n  getMaxPointLoosed(): Vector3 {\n    const halfNodeSize = this._chunk.getNodeSize() * 0.5;\n    return this.getMaxPoint().addBy(new Vector3(halfNodeSize, halfNodeSize, halfNodeSize));\n  }\n  getReference(): number {\n    return this._references;\n  }\n  getChild(placement: OctreePlacement): OctreeNode {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const next = this._chunk.getNext();\n    return next ? next.getNode(this._chunk.getChildIndex(this._position, placement)) : null;\n  }\n  getOrCreateChild(placement: OctreePlacement): OctreeNode {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const next = this._chunk.getNext();\n    return next ? next.getOrCreateNode(this._chunk.getChildIndex(this._position, placement)) : null;\n  }\n  getParent(): OctreeNode {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const prev = this._chunk.getPrev();\n    return prev ? prev.getNode(this._chunk.getParentIndex(this._position)) : null;\n  }\n  getOrCreateParent(): OctreeNode {\n    console.assert(!!this._chunk, 'Invalid chunk');\n    const prev = this._chunk.getPrev();\n    return prev ? prev.getOrCreateNode(this._chunk.getParentIndex(this._position)) : null;\n  }\n  createChildren() {\n    this.getOrCreateChild(OctreePlacement.PPP);\n    this.getOrCreateChild(OctreePlacement.PPN);\n    this.getOrCreateChild(OctreePlacement.PNP);\n    this.getOrCreateChild(OctreePlacement.PNN);\n    this.getOrCreateChild(OctreePlacement.NPP);\n    this.getOrCreateChild(OctreePlacement.NPN);\n    this.getOrCreateChild(OctreePlacement.NNP);\n    this.getOrCreateChild(OctreePlacement.NNN);\n  }\n  tidy(): boolean {\n    this._references = 8;\n    for (let i = 0; i < 8; i++) {\n      const node = this.getChild(i);\n      if (!node || node.tidy()) {\n        --this._references;\n      }\n    }\n    if (this._nodes.length === 0 && this._references === 0) {\n      this._chunk.freeNodeByIndex(this._position);\n      return true;\n    }\n    return false;\n  }\n  accept(v: Visitor) {\n    v.visit(this);\n  }\n  traverse(v: Visitor) {\n    if (v.visit(this)) {\n      for (let i = 0; i < 8; i++) {\n        const child = this.getChild(i);\n        if (child) {\n          child.traverse(v);\n        }\n      }\n    }\n  }\n}\n\nexport class OctreeNodeChunk {\n  /** @internal */\n  private _level: number;\n  /** @internal */\n  private _dimension: number;\n  /** @internal */\n  private _nodeSize: number;\n  /** @internal */\n  private _looseSize: number;\n  /** @internal */\n  private _prev: OctreeNodeChunk;\n  /** @internal */\n  private _next: OctreeNodeChunk;\n  /** @internal */\n  private _octree: Octree;\n  /** @internal */\n  private _nodeMap: Map<number, OctreeNode>;\n  constructor(octree: Octree) {\n    this._octree = octree;\n    this._level = 0;\n    this._dimension = 0;\n    this._nodeSize = 0;\n    this._looseSize = 0;\n    this._next = null;\n    this._prev = null;\n    this._nodeMap = new Map();\n  }\n  getNode(index: number): OctreeNode {\n    return this._nodeMap.get(index) || null;\n  }\n  getOrCreateNode(index: number): OctreeNode {\n    let node = this.getNode(index);\n    if (!node) {\n      node = new OctreeNode();\n      node.setChunk(this);\n      node.setPosition(index);\n      this._nodeMap.set(index, node);\n    }\n    return node;\n  }\n  getOrCreateNodeChain(index: number): OctreeNode {\n    const node = this.getOrCreateNode(index);\n    if (this._prev) {\n      this._prev.getOrCreateNodeChain(this.getParentIndex(index));\n    }\n    return node;\n  }\n  freeNodeByIndex(index: number) {\n    const node = this._nodeMap.get(index);\n    if (node) {\n      node.clearNodes();\n      this._nodeMap.delete(index);\n    }\n  }\n  freeNode(node: OctreeNode) {\n    if (node) {\n      console.assert(node.getChunk() === this, 'Invalid chunk');\n      this.freeNodeByIndex(node.getPosition());\n    }\n  }\n  clearNodes() {\n    for (const key of this._nodeMap.keys()) {\n      this._nodeMap.get(key).clearNodes();\n      this._nodeMap.delete(key);\n    }\n  }\n  getChildIndex(index: number, placement: OctreePlacement): number {\n    const dim = this._dimension;\n    let px = 2 * (index % dim);\n    let py = 2 * (Math.floor(index / dim) % dim);\n    let pz = 2 * Math.floor(Math.floor(index / dim) / dim);\n    switch (placement) {\n      case OctreePlacement.PPP:\n        ++px;\n        ++py;\n        ++pz;\n        break;\n      case OctreePlacement.PPN:\n        ++px;\n        ++py;\n        break;\n      case OctreePlacement.PNP:\n        ++px;\n        ++pz;\n        break;\n      case OctreePlacement.PNN:\n        ++px;\n        break;\n      case OctreePlacement.NPP:\n        ++py;\n        ++pz;\n        break;\n      case OctreePlacement.NPN:\n        ++py;\n        break;\n      case OctreePlacement.NNP:\n        ++pz;\n        break;\n      case OctreePlacement.NNN:\n        break;\n      default:\n        console.assert(false, 'getChildIndex: Got invalid index');\n        return 0;\n    }\n    const dimension2 = 2 * dim;\n    return pz * dimension2 * dimension2 + py * dimension2 + px;\n  }\n  getParentIndex(index: number): number {\n    const dim = this._dimension;\n    const px = index % dim >> 1;\n    const py = Math.floor(index / dim) % dim >> 1;\n    const pz = Math.floor(Math.floor(index / dim) / dim) >> 1;\n    const d = dim >> 1;\n    return px + py * d + pz * d * d;\n  }\n  getNodeSize(): number {\n    return this._nodeSize;\n  }\n  getNodeSizeLoosed(): number {\n    return this._looseSize;\n  }\n  getWorldSize(): number {\n    return this._octree.getRootSize();\n  }\n  getDimension(): number {\n    return this._dimension;\n  }\n  getLevel(): number {\n    return this._level;\n  }\n  empty(): boolean {\n    return this._nodeMap.size === 0;\n  }\n  getNext(): OctreeNodeChunk {\n    return this._next;\n  }\n  getPrev(): OctreeNodeChunk {\n    return this._prev;\n  }\n  getOctree(): Octree {\n    return this._octree;\n  }\n  setLevel(level: number) {\n    this._level = level;\n  }\n  setDimension(dimension: number) {\n    this._dimension = dimension;\n  }\n  setNodeSize(size: number) {\n    this._nodeSize = size;\n  }\n  setNodeSizeLoosed(size: number) {\n    this._looseSize = size;\n  }\n  setNext(chunk: OctreeNodeChunk) {\n    this._next = chunk;\n  }\n  setPrev(chunk: OctreeNodeChunk) {\n    this._prev = chunk;\n  }\n}\n\nexport class Octree {\n  /** @internal */\n  private _scene: Scene;\n  /** @internal */\n  private _chunks: OctreeNodeChunk[];\n  /** @internal */\n  private _rootSize: number;\n  /** @internal */\n  private _leafSize: number;\n  /** @internal */\n  private _rootNode: OctreeNode;\n  /** @internal */\n  private _nodeMap: WeakMap<GraphNode, OctreeNode>;\n  constructor(scene: Scene, rootSize = 4096, leafSize = 64) {\n    this._scene = scene;\n    this._chunks = [];\n    this._rootSize = 0;\n    this._leafSize = 0;\n    this._rootNode = null;\n    this._nodeMap = new WeakMap();\n    this.initialize(rootSize, leafSize);\n  }\n  initialize(rootSize: number, leafSize: number) {\n    console.assert(rootSize >= leafSize && leafSize > 0, 'Invalid rootSize or leafSize for octree');\n    this.finalize();\n    this._rootSize = rootSize;\n    this._leafSize = leafSize;\n    let n = 1;\n    for (; rootSize >= leafSize * 2; leafSize *= 2, ++n);\n    for (let i = 0; i < n; ++i, rootSize *= 0.5) {\n      const chunk = new OctreeNodeChunk(this);\n      chunk.setLevel(i);\n      chunk.setNodeSize(rootSize);\n      chunk.setNodeSizeLoosed(rootSize * 1.5);\n      chunk.setDimension(1 << i);\n      this._chunks.push(chunk);\n      if (i > 0) {\n        this._chunks[i - 1].setNext(chunk);\n        chunk.setPrev(this._chunks[i - 1]);\n      }\n    }\n  }\n  finalize() {\n    this._chunks = [];\n    this._rootSize = 0;\n    this._leafSize = 0;\n    this._rootNode = null;\n    this._nodeMap = new WeakMap();\n  }\n  getScene(): Scene {\n    return this._scene;\n  }\n  getRootSize(): number {\n    return this._rootSize;\n  }\n  getLeafSize(): number {\n    return this._leafSize;\n  }\n  locateNodeChain(candidate: OctreeNode, center: Vector3, radius: number) {\n    let level = this._chunks.length - 1;\n    while (level && this._chunks[level].getNodeSize() < 4 * radius) {\n      --level;\n    }\n    const dim = this._chunks[level].getDimension();\n    const inv_node_size = 1 / this._chunks[level].getNodeSize();\n    let px = Math.floor((center.x + this._rootSize * 0.5) * inv_node_size);\n    let py = Math.floor((center.y + this._rootSize * 0.5) * inv_node_size);\n    let pz = Math.floor((center.z + this._rootSize * 0.5) * inv_node_size);\n    if (px >= dim || py >= dim || pz >= dim) {\n      level = 0;\n      px = 0;\n      py = 0;\n      pz = 0;\n    }\n    const index = px + py * dim + pz * dim * dim;\n    if (\n      candidate &&\n      candidate.getChunk().getLevel() === level &&\n      candidate.getPosition() === index\n    ) {\n      return candidate;\n    }\n    return this._chunks[level].getOrCreateNodeChain(index);\n  }\n  getRootNode(): OctreeNode {\n    if (!this._rootNode) {\n      this._rootNode = this._chunks[0].getOrCreateNode(0);\n    }\n    return this._rootNode;\n  }\n  getNumChunks(): number {\n    return this._chunks.length;\n  }\n  getChunk(level: number): OctreeNodeChunk {\n    return this._chunks[level];\n  }\n  placeNode(node: SceneNode) {\n    if (node.isGraphNode()) {\n      const curNode = this._nodeMap.get(node) || null;\n      let locatedNode: OctreeNode = this.getRootNode();\n      if (node.computedClipMode === GraphNode.CLIP_ENABLED) {\n        const bbox = node.getWorldBoundingVolume()?.toAABB();\n        if (bbox && bbox.isValid()) {\n          const center = bbox.center;\n          const extents = bbox.extents;\n          const size = Math.max(Math.max(extents.x, extents.y), extents.z);\n          locatedNode = this.locateNodeChain(curNode, center, size) || this.getRootNode();\n        }\n      }\n      if (curNode !== locatedNode) {\n        curNode?.removeNode(node);\n        locatedNode?.addNode(node);\n        this._nodeMap.set(node, locatedNode);\n        curNode?.invalidateBox();\n        locatedNode?.invalidateBox();\n      }\n    }\n    for (const child of node.children) {\n      this.placeNode(child);\n    }\n  }\n  removeNode(node: SceneNode) {\n    if (node.isGraphNode()) {\n      const curNode = this._nodeMap.get(node) || null;\n      if (curNode) {\n        curNode.removeNode(node);\n        curNode.invalidateBox();\n        this._nodeMap.delete(node);\n      }\n    }\n    for (const child of node.children) {\n      this.removeNode(child);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}