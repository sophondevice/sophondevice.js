{"version":3,"file":"octree.js","sources":["../../../../libs/device/src/scene/octree.ts"],"sourcesContent":["import { Vector3, AABB } from '@sophon/base';\r\nimport { GraphNode } from './graph_node';\r\nimport type { SceneNode } from './scene_node';\r\nimport type { Scene } from './scene';\r\nimport type { Visitor } from '../misc';\r\n\r\nexport enum OctreePlacement {\r\n  PPP = 0,\r\n  PPN = 1,\r\n  PNP = 2,\r\n  PNN = 3,\r\n  NPP = 4,\r\n  NPN = 5,\r\n  NNP = 6,\r\n  NNN = 7,\r\n}\r\nexport class OctreeNode {\r\n  /** @internal */\r\n  private _chunk: OctreeNodeChunk;\r\n  /** @internal */\r\n  private _position: number;\r\n  /** @internal */\r\n  private _references: number;\r\n  /** @internal */\r\n  private _nodes: GraphNode[];\r\n  /** @internal */\r\n  private _box: AABB;\r\n  /** @internal */\r\n  private _boxLoosed: AABB;\r\n  constructor() {\r\n    this._chunk = null;\r\n    this._position = 0;\r\n    this._references = 0;\r\n    this._nodes = [];\r\n    this._box = null;\r\n    this._boxLoosed = null;\r\n  }\r\n  getNodes(): GraphNode[] {\r\n    return this._nodes;\r\n  }\r\n  getLevel() {\r\n    return this._chunk.getLevel();\r\n  }\r\n  addNode(node: GraphNode) {\r\n    if (node && this._nodes.indexOf(node) < 0) {\r\n      this._nodes.push(node);\r\n    }\r\n  }\r\n  removeNode(node: GraphNode) {\r\n    const index = this._nodes.indexOf(node);\r\n    if (index >= 0) {\r\n      this._nodes.splice(index, 1);\r\n    }\r\n  }\r\n  clearNodes() {\r\n    this._nodes = [];\r\n  }\r\n  setChunk(chunk: OctreeNodeChunk) {\r\n    console.assert(!!chunk, 'Invalid chunk');\r\n    this._chunk = chunk;\r\n  }\r\n  getChunk(): OctreeNodeChunk {\r\n    return this._chunk;\r\n  }\r\n  setPosition(index: number) {\r\n    this._position = index;\r\n  }\r\n  getPosition(): number {\r\n    return this._position;\r\n  }\r\n  invalidateBox(): void {\r\n    this._box = null;\r\n    this.getParent()?.invalidateBox();\r\n  }\r\n  getBox() {\r\n    if (this._box === null) {\r\n      const box = new AABB();\r\n      box.beginExtend();\r\n      for (let i = 0; i < 8; i++) {\r\n        const child = this.getChild(i);\r\n        if (child) {\r\n          const childBox = child.getBox();\r\n          if (childBox) {\r\n            box.extend(childBox.minPoint);\r\n            box.extend(childBox.maxPoint);\r\n          }\r\n        }\r\n      }\r\n      for (const node of this._nodes) {\r\n        if (!node.isLight()) {\r\n          const bv = node.getWorldBoundingVolume()?.toAABB();\r\n          if (bv) {\r\n            box.extend(bv.minPoint);\r\n            box.extend(bv.maxPoint);\r\n          }\r\n        }\r\n      }\r\n      if (box.isValid()) {\r\n        this._box = box;\r\n      }\r\n    }\r\n    return this._box;\r\n  }\r\n  getBoxLoosed(): AABB {\r\n    if (this._boxLoosed === null) {\r\n      console.assert(!!this._chunk, 'Invalid chunk');\r\n      const d = this._chunk.getDimension();\r\n      const nodeSize = this._chunk.getNodeSize();\r\n      const halfWorldSize = this._chunk.getWorldSize() * 0.5;\r\n      const px = this._position % d;\r\n      const py = Math.floor(this._position / d) % d;\r\n      const pz = Math.floor(Math.floor(this._position / d) / d);\r\n      const minPoint = new Vector3(px - 0.5, py - 0.5, pz - 0.5)\r\n        .scaleBy(nodeSize)\r\n        .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\r\n      const maxPoint = new Vector3(\r\n        minPoint.x + nodeSize * 2,\r\n        minPoint.y + nodeSize * 2,\r\n        minPoint.z + nodeSize * 2,\r\n      );\r\n      this._boxLoosed = new AABB(minPoint, maxPoint);\r\n    }\r\n    return this._boxLoosed;\r\n  }\r\n  getMinPoint(): Vector3 {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const d = this._chunk.getDimension();\r\n    const nodeSize = this._chunk.getNodeSize();\r\n    const halfWorldSize = this._chunk.getWorldSize() * 0.5;\r\n    const px = this._position % d;\r\n    const py = Math.floor(this._position / d) % d;\r\n    const pz = Math.floor(Math.floor(this._position / d) / d);\r\n    return new Vector3(px, py, pz)\r\n      .scaleBy(nodeSize)\r\n      .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\r\n  }\r\n  getMaxPoint(): Vector3 {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const d = this._chunk.getDimension();\r\n    const nodeSize = this._chunk.getNodeSize();\r\n    const halfWorldSize = this._chunk.getWorldSize() * 0.5;\r\n    const px = (this._position % d) + 1;\r\n    const py = (Math.floor(this._position / d) % d) + 1;\r\n    const pz = Math.floor(Math.floor(this._position / d) / d) + 1;\r\n    return new Vector3(px, py, pz)\r\n      .scaleBy(nodeSize)\r\n      .subBy(new Vector3(halfWorldSize, halfWorldSize, halfWorldSize));\r\n  }\r\n  getMinPointLoosed(): Vector3 {\r\n    const halfNodeSize = this._chunk.getNodeSize() * 0.5;\r\n    return this.getMinPoint().subBy(new Vector3(halfNodeSize, halfNodeSize, halfNodeSize));\r\n  }\r\n  getMaxPointLoosed(): Vector3 {\r\n    const halfNodeSize = this._chunk.getNodeSize() * 0.5;\r\n    return this.getMaxPoint().addBy(new Vector3(halfNodeSize, halfNodeSize, halfNodeSize));\r\n  }\r\n  getReference(): number {\r\n    return this._references;\r\n  }\r\n  getChild(placement: OctreePlacement): OctreeNode {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const next = this._chunk.getNext();\r\n    return next ? next.getNode(this._chunk.getChildIndex(this._position, placement)) : null;\r\n  }\r\n  getOrCreateChild(placement: OctreePlacement): OctreeNode {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const next = this._chunk.getNext();\r\n    return next ? next.getOrCreateNode(this._chunk.getChildIndex(this._position, placement)) : null;\r\n  }\r\n  getParent(): OctreeNode {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const prev = this._chunk.getPrev();\r\n    return prev ? prev.getNode(this._chunk.getParentIndex(this._position)) : null;\r\n  }\r\n  getOrCreateParent(): OctreeNode {\r\n    console.assert(!!this._chunk, 'Invalid chunk');\r\n    const prev = this._chunk.getPrev();\r\n    return prev ? prev.getOrCreateNode(this._chunk.getParentIndex(this._position)) : null;\r\n  }\r\n  createChildren() {\r\n    this.getOrCreateChild(OctreePlacement.PPP);\r\n    this.getOrCreateChild(OctreePlacement.PPN);\r\n    this.getOrCreateChild(OctreePlacement.PNP);\r\n    this.getOrCreateChild(OctreePlacement.PNN);\r\n    this.getOrCreateChild(OctreePlacement.NPP);\r\n    this.getOrCreateChild(OctreePlacement.NPN);\r\n    this.getOrCreateChild(OctreePlacement.NNP);\r\n    this.getOrCreateChild(OctreePlacement.NNN);\r\n  }\r\n  tidy(): boolean {\r\n    this._references = 8;\r\n    for (let i = 0; i < 8; i++) {\r\n      const node = this.getChild(i);\r\n      if (!node || node.tidy()) {\r\n        --this._references;\r\n      }\r\n    }\r\n    if (this._nodes.length === 0 && this._references === 0) {\r\n      this._chunk.freeNodeByIndex(this._position);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  accept(v: Visitor) {\r\n    v.visit(this);\r\n  }\r\n  traverse(v: Visitor) {\r\n    if (v.visit(this)) {\r\n      for (let i = 0; i < 8; i++) {\r\n        const child = this.getChild(i);\r\n        if (child) {\r\n          child.traverse(v);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class OctreeNodeChunk {\r\n  /** @internal */\r\n  private _level: number;\r\n  /** @internal */\r\n  private _dimension: number;\r\n  /** @internal */\r\n  private _nodeSize: number;\r\n  /** @internal */\r\n  private _looseSize: number;\r\n  /** @internal */\r\n  private _prev: OctreeNodeChunk;\r\n  /** @internal */\r\n  private _next: OctreeNodeChunk;\r\n  /** @internal */\r\n  private _octree: Octree;\r\n  /** @internal */\r\n  private _nodeMap: Map<number, OctreeNode>;\r\n  constructor(octree: Octree) {\r\n    this._octree = octree;\r\n    this._level = 0;\r\n    this._dimension = 0;\r\n    this._nodeSize = 0;\r\n    this._looseSize = 0;\r\n    this._next = null;\r\n    this._prev = null;\r\n    this._nodeMap = new Map();\r\n  }\r\n  getNode(index: number): OctreeNode {\r\n    return this._nodeMap.get(index) || null;\r\n  }\r\n  getOrCreateNode(index: number): OctreeNode {\r\n    let node = this.getNode(index);\r\n    if (!node) {\r\n      node = new OctreeNode();\r\n      node.setChunk(this);\r\n      node.setPosition(index);\r\n      this._nodeMap.set(index, node);\r\n    }\r\n    return node;\r\n  }\r\n  getOrCreateNodeChain(index: number): OctreeNode {\r\n    const node = this.getOrCreateNode(index);\r\n    if (this._prev) {\r\n      this._prev.getOrCreateNodeChain(this.getParentIndex(index));\r\n    }\r\n    return node;\r\n  }\r\n  freeNodeByIndex(index: number) {\r\n    const node = this._nodeMap.get(index);\r\n    if (node) {\r\n      node.clearNodes();\r\n      this._nodeMap.delete(index);\r\n    }\r\n  }\r\n  freeNode(node: OctreeNode) {\r\n    if (node) {\r\n      console.assert(node.getChunk() === this, 'Invalid chunk');\r\n      this.freeNodeByIndex(node.getPosition());\r\n    }\r\n  }\r\n  clearNodes() {\r\n    for (const key of this._nodeMap.keys()) {\r\n      this._nodeMap.get(key).clearNodes();\r\n      this._nodeMap.delete(key);\r\n    }\r\n  }\r\n  getChildIndex(index: number, placement: OctreePlacement): number {\r\n    const dim = this._dimension;\r\n    let px = 2 * (index % dim);\r\n    let py = 2 * (Math.floor(index / dim) % dim);\r\n    let pz = 2 * Math.floor(Math.floor(index / dim) / dim);\r\n    switch (placement) {\r\n      case OctreePlacement.PPP:\r\n        ++px;\r\n        ++py;\r\n        ++pz;\r\n        break;\r\n      case OctreePlacement.PPN:\r\n        ++px;\r\n        ++py;\r\n        break;\r\n      case OctreePlacement.PNP:\r\n        ++px;\r\n        ++pz;\r\n        break;\r\n      case OctreePlacement.PNN:\r\n        ++px;\r\n        break;\r\n      case OctreePlacement.NPP:\r\n        ++py;\r\n        ++pz;\r\n        break;\r\n      case OctreePlacement.NPN:\r\n        ++py;\r\n        break;\r\n      case OctreePlacement.NNP:\r\n        ++pz;\r\n        break;\r\n      case OctreePlacement.NNN:\r\n        break;\r\n      default:\r\n        console.assert(false, 'getChildIndex: Got invalid index');\r\n        return 0;\r\n    }\r\n    const dimension2 = 2 * dim;\r\n    return pz * dimension2 * dimension2 + py * dimension2 + px;\r\n  }\r\n  getParentIndex(index: number): number {\r\n    const dim = this._dimension;\r\n    const px = index % dim >> 1;\r\n    const py = Math.floor(index / dim) % dim >> 1;\r\n    const pz = Math.floor(Math.floor(index / dim) / dim) >> 1;\r\n    const d = dim >> 1;\r\n    return px + py * d + pz * d * d;\r\n  }\r\n  getNodeSize(): number {\r\n    return this._nodeSize;\r\n  }\r\n  getNodeSizeLoosed(): number {\r\n    return this._looseSize;\r\n  }\r\n  getWorldSize(): number {\r\n    return this._octree.getRootSize();\r\n  }\r\n  getDimension(): number {\r\n    return this._dimension;\r\n  }\r\n  getLevel(): number {\r\n    return this._level;\r\n  }\r\n  empty(): boolean {\r\n    return this._nodeMap.size === 0;\r\n  }\r\n  getNext(): OctreeNodeChunk {\r\n    return this._next;\r\n  }\r\n  getPrev(): OctreeNodeChunk {\r\n    return this._prev;\r\n  }\r\n  getOctree(): Octree {\r\n    return this._octree;\r\n  }\r\n  setLevel(level: number) {\r\n    this._level = level;\r\n  }\r\n  setDimension(dimension: number) {\r\n    this._dimension = dimension;\r\n  }\r\n  setNodeSize(size: number) {\r\n    this._nodeSize = size;\r\n  }\r\n  setNodeSizeLoosed(size: number) {\r\n    this._looseSize = size;\r\n  }\r\n  setNext(chunk: OctreeNodeChunk) {\r\n    this._next = chunk;\r\n  }\r\n  setPrev(chunk: OctreeNodeChunk) {\r\n    this._prev = chunk;\r\n  }\r\n}\r\n\r\nexport class Octree {\r\n  /** @internal */\r\n  private _scene: Scene;\r\n  /** @internal */\r\n  private _chunks: OctreeNodeChunk[];\r\n  /** @internal */\r\n  private _rootSize: number;\r\n  /** @internal */\r\n  private _leafSize: number;\r\n  /** @internal */\r\n  private _rootNode: OctreeNode;\r\n  /** @internal */\r\n  private _nodeMap: WeakMap<GraphNode, OctreeNode>;\r\n  constructor(scene: Scene, rootSize = 4096, leafSize = 64) {\r\n    this._scene = scene;\r\n    this._chunks = [];\r\n    this._rootSize = 0;\r\n    this._leafSize = 0;\r\n    this._rootNode = null;\r\n    this._nodeMap = new WeakMap();\r\n    this.initialize(rootSize, leafSize);\r\n  }\r\n  initialize(rootSize: number, leafSize: number) {\r\n    console.assert(rootSize >= leafSize && leafSize > 0, 'Invalid rootSize or leafSize for octree');\r\n    this.finalize();\r\n    this._rootSize = rootSize;\r\n    this._leafSize = leafSize;\r\n    let n = 1;\r\n    for (; rootSize >= leafSize * 2; leafSize *= 2, ++n);\r\n    for (let i = 0; i < n; ++i, rootSize *= 0.5) {\r\n      const chunk = new OctreeNodeChunk(this);\r\n      chunk.setLevel(i);\r\n      chunk.setNodeSize(rootSize);\r\n      chunk.setNodeSizeLoosed(rootSize * 1.5);\r\n      chunk.setDimension(1 << i);\r\n      this._chunks.push(chunk);\r\n      if (i > 0) {\r\n        this._chunks[i - 1].setNext(chunk);\r\n        chunk.setPrev(this._chunks[i - 1]);\r\n      }\r\n    }\r\n  }\r\n  finalize() {\r\n    this._chunks = [];\r\n    this._rootSize = 0;\r\n    this._leafSize = 0;\r\n    this._rootNode = null;\r\n    this._nodeMap = new WeakMap();\r\n  }\r\n  getScene(): Scene {\r\n    return this._scene;\r\n  }\r\n  getRootSize(): number {\r\n    return this._rootSize;\r\n  }\r\n  getLeafSize(): number {\r\n    return this._leafSize;\r\n  }\r\n  locateNodeChain(candidate: OctreeNode, center: Vector3, radius: number) {\r\n    let level = this._chunks.length - 1;\r\n    while (level && this._chunks[level].getNodeSize() < 4 * radius) {\r\n      --level;\r\n    }\r\n    const dim = this._chunks[level].getDimension();\r\n    const inv_node_size = 1 / this._chunks[level].getNodeSize();\r\n    let px = Math.floor((center.x + this._rootSize * 0.5) * inv_node_size);\r\n    let py = Math.floor((center.y + this._rootSize * 0.5) * inv_node_size);\r\n    let pz = Math.floor((center.z + this._rootSize * 0.5) * inv_node_size);\r\n    if (px >= dim || py >= dim || pz >= dim) {\r\n      level = 0;\r\n      px = 0;\r\n      py = 0;\r\n      pz = 0;\r\n    }\r\n    const index = px + py * dim + pz * dim * dim;\r\n    if (\r\n      candidate &&\r\n      candidate.getChunk().getLevel() === level &&\r\n      candidate.getPosition() === index\r\n    ) {\r\n      return candidate;\r\n    }\r\n    return this._chunks[level].getOrCreateNodeChain(index);\r\n  }\r\n  getRootNode(): OctreeNode {\r\n    if (!this._rootNode) {\r\n      this._rootNode = this._chunks[0].getOrCreateNode(0);\r\n    }\r\n    return this._rootNode;\r\n  }\r\n  getNumChunks(): number {\r\n    return this._chunks.length;\r\n  }\r\n  getChunk(level: number): OctreeNodeChunk {\r\n    return this._chunks[level];\r\n  }\r\n  placeNode(node: SceneNode) {\r\n    if (node.isGraphNode()) {\r\n      const curNode = this._nodeMap.get(node) || null;\r\n      let locatedNode: OctreeNode = this.getRootNode();\r\n      if (node.computedClipMode === GraphNode.CLIP_ENABLED) {\r\n        const bbox = node.getWorldBoundingVolume()?.toAABB();\r\n        if (bbox && bbox.isValid()) {\r\n          const center = bbox.center;\r\n          const extents = bbox.extents;\r\n          const size = Math.max(Math.max(extents.x, extents.y), extents.z);\r\n          locatedNode = this.locateNodeChain(curNode, center, size) || this.getRootNode();\r\n        }\r\n      }\r\n      if (curNode !== locatedNode) {\r\n        curNode?.removeNode(node);\r\n        locatedNode?.addNode(node);\r\n        this._nodeMap.set(node, locatedNode);\r\n        curNode?.invalidateBox();\r\n        locatedNode?.invalidateBox();\r\n      }\r\n    }\r\n    for (const child of node.children) {\r\n      this.placeNode(child);\r\n    }\r\n  }\r\n  removeNode(node: SceneNode) {\r\n    if (node.isGraphNode()) {\r\n      const curNode = this._nodeMap.get(node) || null;\r\n      if (curNode) {\r\n        curNode.removeNode(node);\r\n        curNode.invalidateBox();\r\n        this._nodeMap.delete(node);\r\n      }\r\n    }\r\n    for (const child of node.children) {\r\n      this.removeNode(child);\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}