{"version":3,"file":"animation.js","sources":["../../../../libs/device/src/scene/animation.ts"],"sourcesContent":["import { Matrix4x4, Quaternion, Vector3 } from \"@sophon/base\";\nimport { AnimationTrack } from \"./animationtrack\";\nimport { InterpolationTarget, Interpolator } from \"./interpolator\";\nimport { BoundingBox } from \"./bounding_volume\";\nimport type { SceneNode } from \"./scene_node\";\nimport type { Skeleton } from \"./skeleton\";\nimport type { Mesh } from \"./mesh\";\nimport type { Model } from \"./model\";\n\nexport interface SkinnedBoundingBox {\n  boundingVertices: Vector3[];\n  boundingVertexBlendIndices: Float32Array;\n  boundingVertexJointWeights: Float32Array;\n  boundingBox: BoundingBox;\n}\n\nexport class AnimationClip {\n  protected _name: string;\n  protected _model: Model;\n  protected _repeat: number;\n  protected _repeatCounter: number;\n  protected _duration: number;\n  protected _isPlaying: boolean;\n  protected _lastUpdateFrame: number;\n  protected _currentPlayTime: number;\n  protected _tracks: Map<SceneNode, {\n    poseTranslation: Vector3,\n    poseRotation: Quaternion,\n    poseScaling: Vector3,\n    translationTrack?: AnimationTrack,\n    rotationTrack?: AnimationTrack,\n    scalingTrack?: AnimationTrack,\n    weightsTrack?: AnimationTrack,\n  }>;\n  protected _skeletons: Map<Skeleton, { mesh: Mesh, bounding: SkinnedBoundingBox, box: BoundingBox }[]>;\n  constructor(name: string, model: Model) {\n    this._name = name;\n    this._model = model;\n    this._tracks = new Map();\n    this._duration = 0;\n    this._repeat = 0;\n    this._repeatCounter = 0;\n    this._isPlaying = false;\n    this._currentPlayTime = 0;\n    this._lastUpdateFrame = 0;\n    this._skeletons = new Map();\n  }\n  get name(): string {\n    return this._name;\n  }\n  get tracks() {\n    return this._tracks;\n  }\n  get repeat(): number {\n    return this._repeat;\n  }\n  set repeat(n: number) {\n    this._repeat = Math.max(0, n) | 0;\n  }\n  get timeDuration(): number {\n    return this._duration;\n  }\n  addSkeleton(skeleton: Skeleton, meshList: Mesh[], boundingBoxInfo: SkinnedBoundingBox[]) {\n    let meshes = this._skeletons.get(skeleton);\n    if (!meshes) {\n      meshes = [];\n      this._skeletons.set(skeleton, meshes);\n    }\n    for (let i = 0; i < meshList.length; i++) {\n      meshes.push({ mesh: meshList[i], bounding: boundingBoxInfo[i], box: new BoundingBox });\n    }\n  }\n  addAnimationTrack(node: SceneNode, interpolator: Interpolator): AnimationTrack {\n    let trackInfo = this._tracks.get(node);\n    if (!trackInfo) {\n      trackInfo = {\n        poseTranslation: new Vector3(node.position),\n        poseRotation: new Quaternion(node.rotation),\n        poseScaling: new Vector3(node.scaling)\n      };\n      this._tracks.set(node, trackInfo);\n    }\n    const track = new AnimationTrack(interpolator);\n    switch (interpolator.target) {\n      case InterpolationTarget.TRANSLATION:\n        trackInfo.translationTrack = track;\n        break;\n      case InterpolationTarget.ROTATION:\n        trackInfo.rotationTrack = track;\n        break;\n      case InterpolationTarget.SCALING:\n        trackInfo.scalingTrack = track;\n        break;\n      case InterpolationTarget.WEIGHTS:\n        trackInfo.weightsTrack = track;\n        break;\n    }\n    this._duration = Math.max(this._duration, interpolator.maxTime);\n    return track;\n  }\n  isPlaying(): boolean {\n    return this._isPlaying;\n  }\n  update() {\n    const device = this._model.scene.device;\n    if (this._lastUpdateFrame === device.frameInfo.frameCounter) {\n      return;\n    }\n    this._lastUpdateFrame = device.frameInfo.frameCounter;\n    if (this._isPlaying) {\n      if (this._currentPlayTime >= this._duration) {\n        this._repeatCounter++;\n        if (this._repeat === 0 || this._repeatCounter < this._repeat) {\n          this._currentPlayTime = 0;\n        } else {\n          this.stop();\n          return;\n        }\n      }\n      this._lastUpdateFrame = device.frameInfo.frameCounter;\n      this._currentPlayTime += device.frameInfo.elapsedFrame * 0.001;\n      if (this._currentPlayTime > this._duration) {\n        this._currentPlayTime = this._duration;\n      }\n      this._tracks.forEach((trackInfo, node) => {\n        trackInfo.translationTrack?.interpolator.interpolate(this._currentPlayTime, this._duration, node.position.getArray());\n        trackInfo.rotationTrack?.interpolator.interpolate(this._currentPlayTime, this._duration, node.rotation.getArray());\n        trackInfo.scalingTrack?.interpolator.interpolate(this._currentPlayTime, this._duration, node.scaling.getArray());\n        node.notifyChanged(true, false);\n      });\n      this._skeletons.forEach((meshes, skeleton) => {\n        skeleton.computeJoints(device);\n        for (const mesh of meshes) {\n          skeleton.computeBoundingBox(mesh.bounding, mesh.mesh.invWorldMatrix);\n          mesh.mesh.setBoneMatrices(skeleton.jointTexture);\n          mesh.mesh.setInvBindMatrix(mesh.mesh.invWorldMatrix);\n          mesh.mesh.setAnimatedBoundingBox(mesh.bounding.boundingBox);\n        }\n      });\n    }\n  }\n  play() {\n    this._isPlaying = true;\n  }\n  stop() {\n    const device = this._model.scene.device;\n    this._isPlaying = false;\n    this._skeletons.forEach((meshes, skeleton) => {\n      skeleton.computeBindPose(device);\n      for (const mesh of meshes) {\n        const invWorldMatrix = Matrix4x4.multiply(mesh.mesh.invWorldMatrix, this._model.worldMatrix);\n        skeleton.computeBoundingBox(mesh.bounding, invWorldMatrix);\n        mesh.mesh.setBoneMatrices(skeleton.jointTexture);\n        mesh.mesh.setInvBindMatrix(invWorldMatrix);\n        mesh.mesh.setAnimatedBoundingBox(mesh.bounding.boundingBox);\n      }\n    });\n  }\n  rewind() {\n    this._currentPlayTime = 0;\n  }\n}\n"],"names":[],"mappings":"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"}