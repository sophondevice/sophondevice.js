{"version":3,"file":"material.js","sources":["../../../../libs/device/src/scene/material.ts"],"sourcesContent":["import { Matrix4x4, List, ListIterator } from '@sophon/base';\nimport { ShaderLib } from './materiallib/shaderlib';\nimport { TextureFilter } from '../device/base_types';\nimport type { Drawable, DrawContext } from './drawable';\nimport type { Geometry, BindGroup, GPUProgram, RenderStateSet, Device, ProgramBuilder, BindGroupLayout, TextureSampler } from '../device';\n\nexport type MaterialGCOptions = {\n  disabled?: boolean,\n  drawableCountThreshold?: number;\n  materialCountThreshold?: number;\n  inactiveTimeDuration?: number;\n  verbose?: boolean,\n}\n\ntype ProgramInfo = {\n  programs: GPUProgram[],\n  hash: string\n};\n\nclass InstanceBindGroupPool {\n  private _bindGroups: { bindGroup: BindGroup, freeSize: number }[];\n  private _frameStamp: number;\n  constructor() {\n    this._bindGroups = [];\n    this._frameStamp = -1;\n  }\n  apply(device: Device, hash: string, index: number, worldMatrices: Matrix4x4[]): number {\n    const maxSize = device.getShaderCaps().maxUniformBufferSize;\n    if (device.frameInfo.frameCounter !== this._frameStamp) {\n      this._frameStamp = device.frameInfo.frameCounter;\n      for (const bindGroup of this._bindGroups) {\n        bindGroup.freeSize = maxSize;\n      }\n    }\n    let bindGroupIndex = -1;\n    for (let i = 0; i < this._bindGroups.length; i++) {\n      if (this._bindGroups[i].freeSize >= worldMatrices.length * 64) {\n        bindGroupIndex = i;\n        break;\n      }\n    }\n    if (bindGroupIndex < 0) {\n      const program = Material.getProgramByHashIndex(hash, index);\n      const bindGroup = program?.bindGroupLayouts[3] ? device.createBindGroup(program.bindGroupLayouts[3]) : null;\n      this._bindGroups.push({ bindGroup: bindGroup, freeSize: maxSize });\n      bindGroupIndex = this._bindGroups.length - 1;\n    }\n    const bindGroup = this._bindGroups[bindGroupIndex];\n    const offset = (maxSize - bindGroup.freeSize) / 64;\n    for (const matrix of worldMatrices) {\n      bindGroup.bindGroup.setRawData('worldMatrix', maxSize - bindGroup.freeSize, matrix.getArray());\n      bindGroup.freeSize -= 64;\n    }\n    device.setBindGroup(3, bindGroup.bindGroup);\n    return offset;\n  }\n}\n\nexport class Material {\n  /** @internal */\n  private static _nextId = 0;\n  /** @internal */\n  protected static _programMap: {\n    [hash: string]: ProgramInfo\n  } = {};\n  /** @internal */\n  protected static _defaultBindGroupLayouts: { [env: string]: BindGroupLayout[] } = {};\n  /** @internal */\n  protected static _drawableLRU: List<Drawable> = new List<Drawable>();\n  /** @internal */\n  protected static _materialLRU: List<Material> = new List<Material>();\n  /** @internal */\n  protected static _gcOptions: MaterialGCOptions = {\n    disabled: false,\n    drawableCountThreshold: 500,\n    materialCountThreshold: 200,\n    inactiveTimeDuration: 30000,\n  };\n  /** @internal */\n  protected static _boneMatrixTextureSampler: TextureSampler = null;\n  /** @internal */\n  protected static _instanceBindGroupPool: InstanceBindGroupPool = new InstanceBindGroupPool();\n  /** @internal */\n  protected static _drawableBindGroupMap: WeakMap<Drawable, {\n    [hash: string]: {\n      bindGroup: BindGroup[],\n      xformTag: number[],\n      bindGroupTag: number[]\n    }\n  }> = new WeakMap();\n  /** @internal */\n  protected _device: Device;\n  /** @internal */\n  protected _hash: string;\n  /** @internal */\n  protected _renderStateSet: RenderStateSet;\n  /** @internal */\n  protected _bindGroupMap: {\n    [hash: string]: {\n      materialBindGroup: BindGroup[],\n      materialTag: number[],\n      bindGroupTag: number[],\n    }\n  };\n  /** @internal */\n  protected _optionTag: number;\n  /** @internal */\n  protected _supportSharedUniforms: boolean;\n  /** @internal */\n  protected _materialBindGroup: BindGroup;\n  /** @internal */\n  protected _lruIterator: ListIterator<Material>;\n  /** @internal */\n  protected _lastRenderTimeStamp: number;\n  /** @internal */\n  protected _id: number;\n  constructor(device: Device) {\n    this._id = ++Material._nextId;\n    this._device = device;\n    this._hash = null;\n    this._renderStateSet = device.createRenderStateSet();\n    this._bindGroupMap = {};\n    this._optionTag = 0;\n    this._supportSharedUniforms = device.getMiscCaps().supportSharedUniforms;\n    this._materialBindGroup = null;\n    this._lruIterator = null;\n    this._lastRenderTimeStamp = 0;\n  }\n  get id(): number {\n    return this._id;\n  }\n  getLRUIterator(): ListIterator<Material> {\n    return this._lruIterator;\n  }\n  setLRUIterator(iter: ListIterator<Material>): void {\n    this._lruIterator = iter;\n  }\n  setLastRenderTimeStamp(val: number) {\n    this._lastRenderTimeStamp = val;\n  }\n  getLastRenderTimeStamp(): number {\n    return this._lastRenderTimeStamp;\n  }\n  getHash(): string {\n    if (this._hash === null) {\n      this._hash = this.createHash();\n    }\n    return this._hash;\n  }\n  get stateSet(): RenderStateSet {\n    return this._renderStateSet;\n  }\n  set stateSet(stateset: RenderStateSet) {\n    this._renderStateSet = stateset;\n  }\n  get device(): Device {\n    return this._device;\n  }\n  isTransparent(): boolean {\n    return false;\n  }\n  supportLighting(): boolean {\n    return true;\n  }\n  draw(primitive: Geometry, ctx: DrawContext) {\n    if (this.beginDraw(ctx)) {\n      if (ctx.instanceData?.worldMatrices.length > 1) {\n        primitive.drawInstanced(ctx.instanceData.worldMatrices.length);\n      } else {\n        primitive.draw();\n      }\n      this.endDraw();\n    }\n  }\n  beginDraw(ctx: DrawContext): boolean {\n    const numInstances = ctx.instanceData?.worldMatrices?.length || 1;\n    const programInfo = this.getOrCreateProgram(ctx);\n    if (programInfo) {\n      const hash = programInfo.hash;\n      if (!programInfo.programs[ctx.materialFunc]) {\n        return null;\n      }\n      this._materialBindGroup = this.applyMaterialBindGroups(ctx, hash);\n      if (numInstances > 1) {\n        this.applyInstanceBindGroups(ctx, hash);\n      } else {\n        this.applyDrawableBindGroups(ctx, hash);\n      }\n      this._device.setRenderStates(this._renderStateSet);\n      this._device.setProgram(programInfo.programs[ctx.materialFunc]);\n      ctx.target.setLastRenderTimestamp(ctx.renderPass.renderTimeStamp);\n      Material.lruPutDrawable(ctx.target);\n      this.setLastRenderTimeStamp(ctx.renderPass.renderTimeStamp);\n      Material.lruPutMaterial(this);\n      return true;\n    }\n    return false;\n  }\n  endDraw(): void {\n    this._materialBindGroup = null;\n  }\n  getMaterialBindGroup(): BindGroup {\n    return this._materialBindGroup;\n  }\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext, needUpdate: boolean): void {\n    if (needUpdate) {\n      this._applyUniforms(bindGroup, ctx);\n    }\n  }\n  getOrCreateProgram(ctx: DrawContext): ProgramInfo {\n    const func = ctx.materialFunc;\n    const programMap = Material._programMap;\n    const hash = `${this.getHash()}:${!!ctx.target.getBoneMatrices()}:${Number(!!(ctx.instanceData?.worldMatrices.length > 1))}:${ctx.renderPassHash}`;\n    let programInfo = programMap[hash];\n    if (!programInfo || !programInfo.programs[func] || programInfo.programs[func].disposed) {\n      console.time(hash);\n      const program = this.createProgram(ctx, func);\n      console.timeEnd(hash);\n      if (!programInfo) {\n        programInfo = {\n          programs: [null, null, null],\n          hash\n        };\n        programMap[hash] = programInfo;\n      }\n      programInfo.programs[func] = program;\n    }\n    return programInfo || null;\n  }\n  dispose(): void {\n    this.clearBindGroupCache();\n  }\n  static initShader(pb: ProgramBuilder, ctx: DrawContext) {\n    ctx.renderPass.setGlobalBindings(pb.globalScope, ctx);\n    if (!ctx.instanceData || ctx.instanceData.worldMatrices.length === 1) {\n      pb.globalScope.worldMatrix = pb.mat4().uniform(1).tag(ShaderLib.USAGE_WORLD_MATRIX);\n    } else {\n      pb.globalScope.instanceBufferOffset = pb.uint().uniform(1);\n      pb.globalScope.worldMatrix = pb.defineStruct(null, 'std140', pb.mat4[ctx.renderPass.device.getShaderCaps().maxUniformBufferSize / 64]('matrices'))().uniform(3);\n      pb.reflection.tag(ShaderLib.USAGE_WORLD_MATRIX, () => pb.globalScope.worldMatrix.matrices.at(pb.add(pb.globalScope.instanceBufferOffset, pb.uint(pb.globalScope.$builtins.instanceIndex))));\n    }\n    if (ctx.target.getBoneMatrices()) {\n      // pb.globalScope.boneMatrices = pb.mat4[MAX_BONE_MATRIX_UNIFORM]().uniform(1).tag(ShaderLib.USAGE_BONE_MATRICIES);\n      pb.globalScope.boneMatrices = pb.tex2D().uniform(1).sampleType('unfilterable-float').tag(ShaderLib.USAGE_BONE_MATRICIES);\n      pb.globalScope.invBindMatrix = pb.mat4().uniform(1).tag(ShaderLib.USAGE_INV_BIND_MATRIX);\n      pb.globalScope.boneTextureSize = pb.int().uniform(1).tag(ShaderLib.USAGE_BONE_TEXTURE_SIZE);\n    }\n  }\n  static setGCOptions(opt: MaterialGCOptions) {\n    this._gcOptions = Object.assign({}, this._gcOptions, opt || {});\n  }\n  static getGCOptions(): MaterialGCOptions {\n    return this._gcOptions;\n  }\n  static garbageCollect(ts: number): number {\n    let n = 0;\n    ts -= this._gcOptions.inactiveTimeDuration;\n    while (this._drawableLRU.length > this._gcOptions.drawableCountThreshold) {\n      const iter = this._drawableLRU.begin();\n      if (iter.data.getLastRenderTimeStamp() < ts) {\n        const bindGroups = this._drawableBindGroupMap.get(iter.data);\n        if (bindGroups) {\n          for (const k in bindGroups) {\n            for (const bindGroup of bindGroups[k].bindGroup) {\n              if (bindGroup) {\n                this.bindGroupGarbageCollect(bindGroup);\n                n++;\n              }\n            }\n          }\n        }\n        this._drawableBindGroupMap.delete(iter.data);\n        iter.data.setLRUIterator(null);\n        this._drawableLRU.remove(iter);\n      } else {\n        break;\n      }\n    }\n    while (this._materialLRU.length > this._gcOptions.materialCountThreshold) {\n      const iter = this._materialLRU.begin();\n      const mat = iter.data as Material;\n      if (mat.getLastRenderTimeStamp() < ts && mat._bindGroupMap) {\n        n += mat.clearBindGroupCache();\n        mat.setLRUIterator(null);\n        this._materialLRU.remove(iter);\n      } else {\n        break;\n      }\n    }\n    if (n > 0 && this._gcOptions.verbose) {\n      console.log(`INFO: ${n} bind groups have been garbage collected`);\n    }\n    return n;\n  }\n  /** @internal */\n  optionChanged(changeHash: boolean) {\n    this._optionTag++;\n    if (changeHash) {\n      this._hash = null;\n    }\n  }\n  /** @internal */\n  static getProgramByHashIndex(hash: string, index: number) {\n    return this._programMap[hash].programs[index]\n  }\n  /** @internal */\n  private applyMaterialBindGroups(ctx: DrawContext, hash: string): BindGroup {\n    const index = ctx.materialFunc;\n    let bindGroupInfo = this._bindGroupMap[hash];\n    if (!bindGroupInfo) {\n      // bindGroups not created or have been garbage collected\n      const materialBindGroup = [0, 1, 2].map(k => {\n        const program = Material._programMap[hash].programs[k];\n        return program?.bindGroupLayouts[2] ? this._device.createBindGroup(program.bindGroupLayouts[2]) : null;\n      });\n      bindGroupInfo = this._bindGroupMap[hash] = {\n        materialBindGroup,\n        bindGroupTag: [0, 0, 0],\n        materialTag: [-1, -1, -1]\n      };\n    }\n    const bindGroup = bindGroupInfo.materialBindGroup[index];\n    if (bindGroup) {\n      this.applyUniforms(bindGroup, ctx, bindGroupInfo.materialTag[index] < this._optionTag || bindGroupInfo.bindGroupTag[index] !== bindGroup.cid);\n      bindGroupInfo.materialTag[index] = this._optionTag;\n      bindGroupInfo.bindGroupTag[index] = bindGroup.cid;\n      this._device.setBindGroup(2, bindGroup);\n    } else {\n      this._device.setBindGroup(2, null);\n    }\n    return bindGroup;\n  }\n  /** @internal */\n  private getDrawableBindGroup(ctx: DrawContext, hash: string): {\n    bindGroup: BindGroup[],\n    xformTag: number[],\n    bindGroupTag: number[]\n  } {\n    let drawableBindGroups = Material._drawableBindGroupMap.get(ctx.target);\n    if (!drawableBindGroups) {\n      drawableBindGroups = {};\n      Material._drawableBindGroupMap.set(ctx.target, drawableBindGroups);\n    }\n    let drawableBindGroup = drawableBindGroups[hash];\n    if (!drawableBindGroup) {\n      const bindGroup = [0, 1, 2].map(k => {\n        const program = Material._programMap[hash].programs[k];\n        return program?.bindGroupLayouts[1] ? this._device.createBindGroup(program.bindGroupLayouts[1]) : null\n      });\n      drawableBindGroup = drawableBindGroups[hash] = {\n        bindGroup,\n        bindGroupTag: [0, 0, 0],\n        xformTag: [-1, -1, -1],\n      };\n    }\n    return drawableBindGroup;\n  }\n  /** @internal */\n  private applyInstanceBindGroups(ctx: DrawContext, hash: string): void {\n    const index = ctx.materialFunc;\n    const offset = Material._instanceBindGroupPool.apply(this.device, hash, index, ctx.instanceData.worldMatrices);\n    const bindGroup = this.getDrawableBindGroup(ctx, hash).bindGroup?.[index];\n    if (bindGroup) {\n      bindGroup.setValue('instanceBufferOffset', offset);\n      this._device.setBindGroup(1, bindGroup);\n    } else {\n      this._device.setBindGroup(1, null);\n    }\n  }\n  /** @internal */\n  private applyDrawableBindGroups(ctx: DrawContext, hash: string): void {\n    const index = ctx.materialFunc;\n    const drawableBindGroup = this.getDrawableBindGroup(ctx, hash)\n    if (drawableBindGroup.bindGroup) {\n      const bindGroup = drawableBindGroup.bindGroup[index];\n      if (drawableBindGroup.xformTag[index] < ctx.target.getXForm().getTag() || drawableBindGroup.bindGroupTag[index] !== bindGroup.cid) {\n        bindGroup.setValue('worldMatrix', ctx.target.getXForm().worldMatrix);\n        drawableBindGroup.xformTag[index] = ctx.target.getXForm().getTag();\n        drawableBindGroup.bindGroupTag[index] = bindGroup.cid;\n      }\n      const boneMatrices = ctx.target.getBoneMatrices();\n      if (boneMatrices) {\n        if (!Material._boneMatrixTextureSampler) {\n          Material._boneMatrixTextureSampler = this.device.createSampler({\n            magFilter: TextureFilter.Nearest,\n            minFilter: TextureFilter.Nearest,\n            mipFilter: TextureFilter.None\n          });\n        }\n        bindGroup.setTexture('boneMatrices', boneMatrices, Material._boneMatrixTextureSampler);\n        bindGroup.setValue('boneTextureSize', boneMatrices.width);\n        bindGroup.setValue('invBindMatrix', ctx.target.getInvBindMatrix());\n      }\n      this._device.setBindGroup(1, bindGroup);\n    } else {\n      this._device.setBindGroup(1, null);\n    }\n  }\n  /** @internal */\n  createHash(): string {\n    return `${this.constructor.name}|${this._createHash()}`;\n  }\n  /** @internal */\n  clearBindGroupCache(): number {\n    let n = 0;\n    for (const k in this._bindGroupMap) {\n      for (const bindGroup of this._bindGroupMap[k].materialBindGroup) {\n        if (bindGroup) {\n          Material.bindGroupGarbageCollect(bindGroup);\n          n++;\n        }\n      }\n    }\n    this._bindGroupMap = {};\n    return n;\n  }\n  /** @internal */\n  static bindGroupGarbageCollect(bindGroup: BindGroup) {\n    const layout = bindGroup.getLayout();\n    for (const entry of layout.entries) {\n      if (entry.buffer) {\n        const buffer = bindGroup.getBuffer(entry.name);\n        if (buffer) {\n          buffer.dispose();\n          bindGroup.setBuffer(entry.name, null);\n        }\n      }\n    }\n  }\n  /** @internal */\n  private static lruPutDrawable(drawable: Drawable) {\n    const iter = drawable.getLRUIterator();\n    if (iter) {\n      this._drawableLRU.removeAndAppend(iter);\n    } else {\n      drawable.setLRUIterator(this._drawableLRU.append(drawable));\n    }\n  }\n  /** @internal */\n  private static lruPutMaterial(material: Material) {\n    const iter = material.getLRUIterator();\n    if (iter) {\n      this._materialLRU.removeAndAppend(iter);\n    } else {\n      material.setLRUIterator(this._materialLRU.append(material));\n    }\n  }\n  /** @internal */\n  protected createProgram(ctx: DrawContext, func: number): GPUProgram {\n    const pb = this._device.createProgramBuilder();\n    return this._createProgram(pb, ctx, func);\n  }\n  /** @internal */\n  protected _createProgram(pb: ProgramBuilder, ctx: DrawContext, func: number): GPUProgram {\n    return null;\n  }\n  /** @internal */\n  protected _applyUniforms(bindGroup: BindGroup, ctx: DrawContext) {\n  }\n  /** @internal */\n  protected _createHash(): string {\n    return '';\n  }\n}\n"],"names":[],"mappings":"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"}