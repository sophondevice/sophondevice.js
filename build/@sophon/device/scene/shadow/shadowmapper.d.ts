import { Vector4 } from "@sophon/base";
import { PBShaderExp, Texture2D, Texture2DArray, TextureCube, PBInsideFunctionScope, TextureSampler } from "../../device";
import { Camera } from "../camera";
import type { PunctualLight } from "../light";
import type { ShadowMapPass } from "../renderers";
import type { Scene } from "../scene";
export type ShadowMapType = Texture2D | TextureCube | Texture2DArray;
export type ShadowMode = 'none' | 'hard' | 'vsm' | 'esm' | 'pcf-pd' | 'pcf-opt';
export interface ShadowConfig {
    shadowMapSize: number;
    numCascades?: number;
    splitLambda?: number;
    depthBias?: number;
    normalBias?: number;
    renderBackfaceOnly?: boolean;
    nearClip?: number;
}
export declare class ShadowMapper {
    constructor(light: PunctualLight);
    get light(): PunctualLight;
    get shadowMapSize(): number;
    set shadowMapSize(num: number);
    get numShadowCascades(): number;
    set numShadowCascades(num: number);
    get renderBackfaceOnly(): boolean;
    set renderBackfaceOnly(b: boolean);
    get splitLambda(): number;
    set splitLambda(val: number);
    get depthBias(): number;
    set depthBias(val: number);
    get normalBias(): number;
    set normalBias(val: number);
    get nearClip(): number;
    set nearClip(val: number);
    get mode(): ShadowMode;
    set mode(mode: ShadowMode);
    get depthClampEnabled(): boolean;
    get cascadeDistances(): Vector4;
    get shadowCameraParams(): Vector4;
    get shadowMap(): Texture2D | TextureCube | Texture2DArray;
    get shadowMapSampler(): TextureSampler;
    get shaderHash(): string;
    get pdSampleCount(): number;
    set pdSampleCount(val: number);
    get pdSampleRadius(): number;
    set pdSampleRadius(val: number);
    get pcfKernelSize(): number;
    set pcfKernelSize(val: number);
    get vsmBlurKernelSize(): number;
    set vsmBlurKernelSize(val: number);
    get vsmBlurRadius(): number;
    set vsmBlurRadius(val: number);
    get vsmDarkness(): number;
    set vsmDarkness(val: number);
    get esmBlurKernelSize(): number;
    set esmBlurKernelSize(val: number);
    get esmBlurRadius(): number;
    set esmBlurRadius(val: number);
    get esmDepthScale(): number;
    set esmDepthScale(val: number);
    computeShadowMapDepth(scope: PBInsideFunctionScope): PBShaderExp;
    computeShadow(scope: PBInsideFunctionScope, shadowVertex: PBShaderExp, NdotL: PBShaderExp): PBShaderExp;
    computeShadowCSM(scope: PBInsideFunctionScope, shadowVertex: PBShaderExp, NdotL: PBShaderExp, split: PBShaderExp): PBShaderExp;
    computeShadowBias(scope: PBInsideFunctionScope, z: PBShaderExp, NdotL: PBShaderExp): PBShaderExp;
    computeShadowBiasCSM(scope: PBInsideFunctionScope, NdotL: PBShaderExp, split: PBShaderExp): PBShaderExp;
    invalidate(): void;
    dispose(): void;
    render(renderPass: ShadowMapPass, scene: Scene, camera: Camera): void;
}
