{"version":3,"file":"shape.js","sources":["../../../../libs/device/src/scene/shape.ts"],"sourcesContent":["import { Vector2, Vector3 } from '@sophon/base';\nimport { PrimitiveType } from '../device/base_types';\nimport { makeVertexBufferType } from '../device/gpuobject';\nimport { Primitive } from './primitive';\nimport { BoundingBox } from './bounding_volume';\nimport type { Device } from '../device';\n\nexport interface IShapeCreationOptions {\n  needNormal?: boolean;\n  needTangent?: boolean;\n  needUV?: boolean;\n}\n\nexport abstract class Shape<T extends IShapeCreationOptions = IShapeCreationOptions> extends Primitive {\n  /** @internal */\n  protected _options: T;\n  constructor(device: Device, options?: T) {\n    super(device);\n    this._options = this.createDefaultOptions();\n    this.create(options);\n  }\n  create(options?: T): boolean {\n    if (options) {\n      this._options = this.createDefaultOptions();\n      Object.assign(this._options, options);\n    }\n    this._create();\n    return this._vao !== null;\n  }\n  /** @internal */\n  protected createDefaultOptions(): T {\n    return {\n      needNormal: true,\n      needTangent: false,\n      needUV: true,\n    } as T;\n  }\n  /** @internal */\n  protected abstract _create(): void;\n}\n\nexport interface IPlaneCreationOptions extends IShapeCreationOptions {\n  size?: number;\n  sizeX?: number;\n  sizeY?: number;\n}\n\nexport class PlaneShape extends Shape<IPlaneCreationOptions> {\n  size: Vector2;\n  constructor(device: Device, options?: IPlaneCreationOptions) {\n    super(device, options);\n  }\n  /** @internal */\n  protected createDefaultOptions() {\n    const options = super.createDefaultOptions();\n    options.size = 1;\n    return options;\n  }\n  /** @internal */\n  protected _createArrays(\n    vertices: number[],\n    normals: number[],\n    uvs: number[],\n    indices: number[],\n    sizeX: number,\n    sizeY: number,\n  ) {\n    uvs?.push(0, 1, 0, 0, 1, 0, 1, 1);\n    vertices?.push(\n      0, 0, sizeY,\n      sizeX, 0, sizeY,\n      sizeX, 0, 0,\n      0, 0, 0);\n    indices?.push(0, 1, 2, 0, 2, 3);\n    normals?.push(0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0);\n    this.primitiveType = PrimitiveType.TriangleList;\n  }\n  /** @internal */\n  protected _create() {\n    const needNormal = this._options.needNormal;\n    const needUV = this._options.needUV;\n    const sizeX = Math.abs(this._options.sizeX || this._options.size) || 1;\n    const sizeY = Math.abs(this._options.sizeY || this._options.size) || 1;\n    const vertices: number[] = [];\n    const indices: number[] = [];\n    const normals: number[] = needNormal ? [] : null;\n    const uvs: number[] = needUV ? [] : null;\n    this._createArrays(vertices, normals, uvs, indices, sizeX, sizeY);\n    this.createAndSetVertexBuffer(makeVertexBufferType(vertices.length / 3, 'position_f32x3'), new Float32Array(vertices));\n    normals &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(normals.length / 3, 'normal_f32x3'), new Float32Array(normals));\n    uvs &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(uvs.length / 2, 'tex0_f32x2'), new Float32Array(uvs));\n    this.createAndSetIndexBuffer(new Uint16Array(indices));\n    this.setBoundingVolume(new BoundingBox(new Vector3(0, 0, 0), new Vector3(sizeX, 0, sizeY)));\n    this.indexCount = indices.length;\n  }\n}\n\nexport interface IBoxCreationOptions extends IShapeCreationOptions {\n  size?: number;\n  sizeX?: number;\n  sizeY?: number;\n  sizeZ?: number;\n  pivotX?: number;\n  pivotY?: number;\n  pivotZ?: number;\n}\n\nexport class BoxShape extends Shape<IBoxCreationOptions> {\n  constructor(device: Device, options?: IBoxCreationOptions) {\n    super(device, options);\n  }\n  /** @internal */\n  protected createDefaultOptions() {\n    const options = super.createDefaultOptions();\n    options.size = 1;\n    return options;\n  }\n  /** @internal */\n  protected _createArrays(\n    vertices: number[],\n    normals: number[],\n    uvs: number[],\n    indices: number[],\n    minx: number,\n    miny: number,\n    minz: number,\n    maxx: number,\n    maxy: number,\n    maxz: number\n  ) {\n    const needTangent = this._options.needTangent;\n    const needNormal = this._options.needNormal || needTangent;\n    const needUV = this._options.needUV;\n    const uv = needUV ? [0, 0, 0, 1, 1, 1, 1, 0] : null;\n    const topFacePos = [minx, maxy, minz, minx, maxy, maxz, maxx, maxy, maxz, maxx, maxy, minz];\n    const topFacenormal = needNormal ? [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0] : null;\n    const frontFacePos = [minx, maxy, maxz, minx, miny, maxz, maxx, miny, maxz, maxx, maxy, maxz];\n    const frontFaceNormal = needNormal ? [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1] : null;\n    const rightFacePos = [maxx, maxy, maxz, maxx, miny, maxz, maxx, miny, minz, maxx, maxy, minz];\n    const rightFaceNormal = needNormal ? [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0] : null;\n    const backFacePos = [maxx, maxy, minz, maxx, miny, minz, minx, miny, minz, minx, maxy, minz];\n    const backFaceNormal = needNormal ? [0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1] : null;\n    const leftFacePos = [minx, maxy, minz, minx, miny, minz, minx, miny, maxz, minx, maxy, maxz];\n    const leftFaceNormal = needNormal ? [-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0] : null;\n    const bottomFacePos = [minx, miny, maxz, minx, miny, minz, maxx, miny, minz, maxx, miny, maxz];\n    const bottomFaceNormal = needNormal ? [0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0] : null;\n    indices && indices.push(0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23);\n    vertices && vertices.push(...topFacePos, ...frontFacePos, ...rightFacePos, ...backFacePos, ...leftFacePos, ...bottomFacePos);\n    needNormal && normals && normals.push(...topFacenormal, ...frontFaceNormal, ...rightFaceNormal, ...backFaceNormal, ...leftFaceNormal, ...bottomFaceNormal);\n    needUV && uvs && uvs.push(...uv, ...uv, ...uv, ...uv, ...uv, ...uv);\n    this.primitiveType = PrimitiveType.TriangleList;\n  }\n  /** @internal */\n  protected _create() {\n    const needNormal = this._options.needNormal;\n    const needUV = this._options.needUV;\n    const sizeX = this._options.sizeX ?? this._options.size ?? 1;\n    const sizeY = this._options.sizeY ?? this._options.size ?? 1;\n    const sizeZ = this._options.sizeZ ?? this._options.size ?? 1;\n    const pivotX = this._options.pivotX ?? 0;\n    const pivotY = this._options.pivotY ?? 0;\n    const pivotZ = this._options.pivotZ ?? 0;\n    const minx = -pivotX * sizeX;\n    const maxx = minx + sizeX;\n    const miny = -pivotY * sizeY;\n    const maxy = miny + sizeY;\n    const minz = -pivotZ * sizeZ;\n    const maxz = minz + sizeZ;\n    const vertices: number[] = [];\n    const indices: number[] = [];\n    const normals: number[] = needNormal ? [] : null;\n    const uvs: number[] = needUV ? [] : null;\n    this._createArrays(vertices, normals, uvs, indices, minx, miny, minz, maxx, maxy, maxz);\n    this.createAndSetVertexBuffer(makeVertexBufferType(vertices.length / 3, 'position_f32x3'), new Float32Array(vertices));\n    normals &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(normals.length / 3, 'normal_f32x3'), new Float32Array(normals));\n    uvs &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(uvs.length / 2, 'tex0_f32x2'), new Float32Array(uvs));\n    this.createAndSetIndexBuffer(new Uint16Array(indices));\n    this.setBoundingVolume(\n      new BoundingBox(\n        new Vector3(minx, miny, minz),\n        new Vector3(maxx, maxy, maxz),\n      ),\n    );\n    this.indexCount = indices.length;\n  }\n}\n\nexport class BoxFrameShape extends Shape<IBoxCreationOptions> {\n  constructor(device: Device, options?: IBoxCreationOptions) {\n    super(device, options);\n  }\n  /** @internal */\n  protected createDefaultOptions() {\n    const options = super.createDefaultOptions();\n    options.size = 1;\n    options.needNormal = false;\n    options.needTangent = false;\n    options.needUV = false;\n    return options;\n  }\n  /** @internal */\n  protected _createArrays(\n    vertices: number[],\n    indices: number[],\n    minx: number,\n    miny: number,\n    minz: number,\n    maxx: number,\n    maxy: number,\n    maxz: number\n  ) {\n    const topFacePos = [minx, maxy, minz, minx, maxy, maxz, maxx, maxy, maxz, maxx, maxy, minz];\n    const bottomFacePos = [minx, miny, maxz, minx, miny, minz, maxx, miny, minz, maxx, miny, maxz];\n    indices && indices.push(0, 1, 1, 2, 2, 3, 3, 0, 0, 5, 1, 4, 2, 7, 3, 6, 6, 5, 5, 4, 4, 7, 7, 6);\n    vertices && vertices.push(...topFacePos, ...bottomFacePos);\n    this.primitiveType = PrimitiveType.LineList;\n  }\n  /** @internal */\n  protected _create() {\n    const sizeX = this._options.sizeX ?? this._options.size ?? 1;\n    const sizeY = this._options.sizeY ?? this._options.size ?? 1;\n    const sizeZ = this._options.sizeZ ?? this._options.size ?? 1;\n    const pivotX = this._options.pivotX ?? 0;\n    const pivotY = this._options.pivotY ?? 0;\n    const pivotZ = this._options.pivotZ ?? 0;\n    const minx = -pivotX * sizeX;\n    const maxx = minx + sizeX;\n    const miny = -pivotY * sizeY;\n    const maxy = miny + sizeY;\n    const minz = -pivotZ * sizeZ;\n    const maxz = minz + sizeZ;\n    const vertices: number[] = [];\n    const indices: number[] = [];\n    this._createArrays(vertices, indices, minx, miny, minz, maxx, maxy, maxz);\n    this.createAndSetVertexBuffer(makeVertexBufferType(vertices.length / 3, 'position_f32x3'), new Float32Array(vertices));\n    this.createAndSetIndexBuffer(new Uint16Array(indices));\n    this.setBoundingVolume(\n      new BoundingBox(\n        new Vector3(minx, miny, minz),\n        new Vector3(maxx, maxy, maxz),\n      ),\n    );\n    this.indexCount = indices.length;\n  }\n}\n\nexport interface ISphereCreationOptions extends IShapeCreationOptions {\n  radius?: number;\n  verticalDetail?: number;\n  horizonalDetail?: number;\n}\n\nexport class SphereShape extends Shape<ISphereCreationOptions> {\n  constructor(device: Device, options?: ISphereCreationOptions) {\n    super(device, options);\n  }\n  /** @internal */\n  protected createDefaultOptions() {\n    const options = super.createDefaultOptions();\n    options.radius = 1;\n    options.verticalDetail = 20;\n    options.horizonalDetail = 20;\n    return options;\n  }\n  /** @internal */\n  _create() {\n    function getVertex(v: number, h: number, r: number) {\n      const y = r * Math.cos(v);\n      const hRadius = r * Math.sin(v);\n      const x = hRadius * Math.sin(h);\n      const z = hRadius * Math.cos(h);\n      return [x, y, z];\n    }\n    const radius = this._options.radius ?? 1;\n    const verticalDetail = this._options.verticalDetail ?? 20;\n    const horizonalDetail = this._options.horizonalDetail ?? 20;\n    const vTheta = Math.PI / verticalDetail;\n    const hTheta = (Math.PI * 2) / horizonalDetail;\n    const vertices: number[] = [];\n    const normals: number[] = [];\n    const uv: number[] = [];\n    const indices: number[] = [];\n    for (let i = 0; i <= verticalDetail; i++) {\n      for (let j = 0; j <= horizonalDetail; j++) {\n        const v = getVertex(i * vTheta, j * hTheta, radius);\n        vertices.push(...v);\n        if (this._options.needUV) {\n          uv.push(j / horizonalDetail, i / verticalDetail);\n        }\n        if (this._options.needNormal) {\n          normals.push(v[0] / radius, v[1] / radius, v[2] / radius);\n        }\n      }\n    }\n    for (let i = 0; i < verticalDetail; i++) {\n      for (let j = 0; j <= horizonalDetail; j++) {\n        const startIndex = i * (horizonalDetail + 1);\n        indices.push(startIndex + j, startIndex + j + horizonalDetail + 1);\n      }\n      indices.push(indices[indices.length - 1]);\n      indices.push((i + 1) * (horizonalDetail + 1));\n    }\n    this.createAndSetVertexBuffer(makeVertexBufferType(vertices.length / 3, 'position_f32x3'), new Float32Array(vertices));\n    normals?.length > 0 &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(normals.length / 3, 'normal_f32x3'), new Float32Array(normals));\n    uv?.length > 0 &&\n      this.createAndSetVertexBuffer(makeVertexBufferType(uv.length / 2, 'tex0_f32x2'), new Float32Array(uv));\n\n    this.createAndSetIndexBuffer(new Uint32Array(indices));\n    this.setBoundingVolume(\n      new BoundingBox(new Vector3(-radius, -radius, -radius), new Vector3(radius, radius, radius)),\n    );\n    this.primitiveType = PrimitiveType.TriangleStrip;\n    this.indexCount = indices.length;\n  }\n}\n"],"names":[],"mappings":"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"}