{"version":3,"file":"shadowmap_pass.js","sources":["../../../../../libs/device/src/scene/renderers/shadowmap_pass.ts"],"sourcesContent":["import { Vector4, Frustum } from '@sophon/base';\r\nimport { RenderPass } from './renderpass';\r\nimport { RENDER_PASS_TYPE_SHADOWMAP } from '../values';\r\nimport { PunctualLight } from '../light';\r\nimport { ShaderLib } from '../materiallib';\r\nimport { Camera } from '../camera';\r\nimport { PBShaderExp, PBGlobalScope, BindGroup, RenderStateSet, FaceMode, TextureFormat, PBInsideFunctionScope } from '../../device';\r\nimport { CopyBlitter, GaussianBlurBlitter, BlitType } from '../blitter';\r\nimport * as values from '../values';\r\nimport type { Scene } from '../scene';\r\nimport type { RenderQueue } from '../render_queue';\r\nimport type { DrawContext } from '../drawable';\r\nimport type { RenderScheme } from './renderscheme';\r\n\r\nclass DebugBlitter extends CopyBlitter {\r\n  public packFloat: boolean;\r\n  constructor() {\r\n    super();\r\n    this.packFloat = false;\r\n  }\r\n  filter(scope: PBInsideFunctionScope, type: BlitType, srcTex: PBShaderExp, srcUV: PBShaderExp, srcLayer: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    const texel = this.readTexel(scope, type, srcTex, srcUV, srcLayer);\r\n    if (this.packFloat) {\r\n      const lib = new ShaderLib(pb);\r\n      return pb.vec4(lib.decodeNormalizedFloatFromRGBA(texel), 0, 0, 1);\r\n    } else {\r\n      return texel;\r\n    }\r\n  }\r\n  protected calcHash(): string {\r\n    return `${Number(this.packFloat)}`;\r\n  }\r\n}\r\n\r\nclass BlurBlitter extends GaussianBlurBlitter {\r\n  public packFloat: boolean;\r\n  readTexel(scope: PBInsideFunctionScope, type: BlitType, srcTex: PBShaderExp, srcUV: PBShaderExp, srcLayer: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    const texel = super.readTexel(scope, type, srcTex, srcUV, srcLayer);\r\n    if (this.packFloat) {\r\n      const lib = new ShaderLib(pb);\r\n      return pb.vec4(lib.decodeNormalizedFloatFromRGBA(texel), 0, 0, 1);\r\n    } else {\r\n      return texel;\r\n    }\r\n  }\r\n  writeTexel(scope: PBInsideFunctionScope, type: BlitType, srcUV: PBShaderExp, texel: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    const outTexel = super.writeTexel(scope, type, srcUV, texel);\r\n    if (this.packFloat) {\r\n      const lib = new ShaderLib(pb);\r\n      return lib.encodeNormalizedFloatToRGBA(outTexel.r);\r\n    } else {\r\n      return outTexel;\r\n    }\r\n  }\r\n  protected calcHash(): string {\r\n    return `${Number(this.packFloat)}`;\r\n  }\r\n}\r\n\r\nexport class ShadowMapPass extends RenderPass {\r\n  /** @internal */\r\n  protected _currentLight: PunctualLight;\r\n  /** @internal */\r\n  protected _splitLambda: number;\r\n  /** @internal */\r\n  protected _mainPass: RenderPass;\r\n  /** @internal */\r\n  protected _lightCameras: WeakMap<Scene, Camera[]>;\r\n  /** @internal */\r\n  protected _cullFrontFaceRenderStates: RenderStateSet;\r\n  /** @internal */\r\n  protected _blurFilterH: BlurBlitter;\r\n  /** @internal */\r\n  protected _blurFilterV: BlurBlitter;\r\n  /** @internal */\r\n  protected _debugBlitter: DebugBlitter;\r\n  constructor(renderScheme: RenderScheme, name: string) {\r\n    super(renderScheme, name);\r\n    this._currentLight = null;\r\n    this._splitLambda = 0.5;\r\n    this._cullFrontFaceRenderStates = renderScheme.device.createRenderStateSet();\r\n    this._cullFrontFaceRenderStates.useRasterizerState().setCullMode(FaceMode.FRONT);\r\n    this._mainPass = null;\r\n    this._lightCameras = new WeakMap();\r\n    this._blurFilterH = new BlurBlitter('horizonal', 5, 4, 1 / 1024);\r\n    this._blurFilterH.packFloat = renderScheme.getShadowMapFormat() === TextureFormat.RGBA8UNORM;\r\n    // this._blurFilterH.logSpace = true;\r\n    this._blurFilterV = new BlurBlitter('vertical', 5, 4, 1 / 1024);\r\n    this._blurFilterV.packFloat = renderScheme.getShadowMapFormat() === TextureFormat.RGBA8UNORM;\r\n    // this._blurFilterV.logSpace = true;\r\n    this._debugBlitter = new DebugBlitter();\r\n    this._debugBlitter.packFloat = renderScheme.getShadowMapFormat() === TextureFormat.RGBA8UNORM;\r\n    this.enableClear(true, true);\r\n  }\r\n  get light(): PunctualLight {\r\n    return this._currentLight;\r\n  }\r\n  get mainPass(): RenderPass {\r\n    return this._mainPass;\r\n  }\r\n  set mainPass(pass: RenderPass) {\r\n    this._mainPass = pass;\r\n  }\r\n  getRenderPassType(): number {\r\n    return RENDER_PASS_TYPE_SHADOWMAP;\r\n  }\r\n  /** @internal */\r\n  protected fetchCameraForScene(scene: Scene) {\r\n    const cameras = this._lightCameras.get(scene);\r\n    if (!cameras || cameras.length === 0) {\r\n      return new Camera(scene);\r\n    } else {\r\n      const camera = cameras.pop();\r\n      camera.position.set(0, 0, 0);\r\n      camera.rotation.identity();\r\n      camera.scaling.set(1, 1, 1);\r\n      return camera;\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected releaseCamera(camera: Camera) {\r\n    let cameras = this._lightCameras.get(camera.scene);\r\n    if (!cameras) {\r\n      cameras = [];\r\n      this._lightCameras.set(camera.scene, cameras);\r\n    }\r\n    camera.remove();\r\n    cameras.push(camera);\r\n  }\r\n  /** @internal */\r\n  calcSplitDistances(camera: Camera, numCascades: number): number[] {\r\n    const farPlane = camera.getFarPlane();\r\n    const nearPlane = camera.getNearPlane();\r\n    const result: number[] = [0, 0, 0, 0, 0];\r\n    for (let i = 0; i <= numCascades; ++i) {\r\n      const fIDM = i / numCascades;\r\n      const fLog = nearPlane * Math.pow((farPlane / nearPlane), fIDM);\r\n      const fUniform = nearPlane + (farPlane - nearPlane) * fIDM;\r\n      result[i] = fLog * this._splitLambda + fUniform * (1 - this._splitLambda);\r\n    }\r\n    return result;\r\n  }\r\n  /** @internal */\r\n  protected _getGlobalBindGroupHash(ctx: DrawContext) {\r\n    return this.light.shadow.shaderHash;\r\n  }\r\n  /** @internal */\r\n  setGlobalBindings(scope: PBGlobalScope, ctx: DrawContext) {\r\n    const pb = scope.$builder;\r\n    const structCamera = pb.defineStruct(\r\n      null,\r\n      'std140',\r\n      pb.vec3('position'),\r\n      pb.mat4('viewProjectionMatrix'),\r\n      pb.mat4('viewMatrix'),\r\n      pb.mat4('projectionMatrix'),\r\n      pb.vec4('params'),\r\n    );\r\n    const structLight = pb.defineStruct(\r\n      null,\r\n      'std140',\r\n      pb.vec4('positionRange'),\r\n      pb.vec4('directionCutoff'),\r\n      pb.mat4('viewMatrix'),\r\n      pb.vec4('depthBias'),\r\n      pb.int('lightType'),\r\n    );\r\n    const structGlobal = pb.defineStruct(\r\n      null,\r\n      'std140',\r\n      structCamera('camera'),\r\n      structLight('light'),\r\n    );\r\n    pb.globalScope.global = structGlobal().uniform(0).tag({\r\n      camera: {\r\n        position: ShaderLib.USAGE_CAMERA_POSITION,\r\n        viewProjectionMatrix: ShaderLib.USAGE_VIEW_PROJ_MATRIX,\r\n        viewMatrix: ShaderLib.USAGE_VIEW_MATRIX,\r\n        projectionMatrix: ShaderLib.USAGE_PROJECTION_MATRIX,\r\n        params: ShaderLib.USAGE_CAMERA_PARAMS,\r\n      }\r\n    });\r\n  }\r\n  /** @internal */\r\n  protected setLightUniforms(bindGroup: BindGroup, ctx: DrawContext, light: PunctualLight) {\r\n    if (light) {\r\n      bindGroup.setValue('global', {\r\n        light: {\r\n          positionRange: light.positionAndRange,\r\n          directionCutoff: light.directionAndCutoff,\r\n          viewMatrix: light.viewMatrix,\r\n          depthBias: light.shadow.depthBiasValues,\r\n          lightType: light.lightType\r\n        }\r\n      });\r\n    }\r\n    ctx.environment?.updateBindGroup(bindGroup);\r\n  }\r\n  /** @internal */\r\n  protected calcDepthBiasParams(shadowMapCamera: Camera, shadowMapSize: number, depthBias: number, normalBias: number, depthScale: number, result: Vector4): void {\r\n    const frustum = shadowMapCamera.frustum;\r\n    const sizeNear = Math.min(\r\n      Math.abs(frustum.getCorner(Frustum.CORNER_RIGHT_TOP_NEAR).x - frustum.getCorner(Frustum.CORNER_LEFT_TOP_NEAR).x),\r\n      Math.abs(frustum.getCorner(Frustum.CORNER_RIGHT_TOP_NEAR).y - frustum.getCorner(Frustum.CORNER_RIGHT_BOTTOM_NEAR).y));\r\n    const sizeFar = Math.min(\r\n      Math.abs(frustum.getCorner(Frustum.CORNER_RIGHT_TOP_FAR).x - frustum.getCorner(Frustum.CORNER_LEFT_TOP_FAR).x),\r\n      Math.abs(frustum.getCorner(Frustum.CORNER_RIGHT_TOP_FAR).y - frustum.getCorner(Frustum.CORNER_RIGHT_BOTTOM_FAR).y));\r\n    const scaleFactor = sizeNear / shadowMapSize / 2;\r\n    result.set(depthBias * scaleFactor, normalBias * scaleFactor, depthScale, sizeFar / sizeNear);\r\n  }\r\n  render(scene: Scene, camera: Camera) {\r\n    const savedCullCamera = this._cullCamera;\r\n    for (const light of scene.lightList) {\r\n      if (light.isPunctualLight() && light.castShadow) {\r\n        this._currentLight = light;\r\n        light.shadow.render(this, scene, camera);\r\n        /*\r\n        if (!light.shadowMapInfo.framebuffer) {\r\n          light.initShadowMap(this.renderScheme.getShadowMapFormat());\r\n        }\r\n        const fb = light.shadowMapInfo.framebuffer;\r\n        this._currentLight = light;\r\n        this._enableDepthClamp = false;\r\n        this.scissor = null;\r\n        this.viewport = null;\r\n        this.clearColor = light.shadowMapInfo.colorAttachment.isFloatFormat() ? new Vector4(1, 1, 1, 1) : new Vector4(0, 0, 0, 1);\r\n        if (light.shadowMapInfo.renderBackfacesOnly) {\r\n          scene.device.setRenderStatesOverridden(this._cullFrontFaceRenderStates);\r\n        }\r\n        if (light.isPointLight()) {\r\n          const shadowMapRenderCamera = this.fetchCameraForScene(scene);\r\n          light.createLightCamera(scene.boundingBox, camera, shadowMapRenderCamera);\r\n          this._cullCamera = shadowMapRenderCamera;\r\n          this.calcDepthBiasParams(shadowMapRenderCamera, light.shadowMapSize, light.shadowDepthBias, light.shadowNormalBias, light.shadowDepthScale, light.shadowMapInfo.depthBias);\r\n          this.renderToCubeTexture(scene, shadowMapRenderCamera, fb);\r\n          light.shadowMapInfo.shadowMatrices.set(Matrix4x4.transpose(shadowMapRenderCamera.viewMatrix).getArray());\r\n          this._cullCamera = null;\r\n          this.releaseCamera(shadowMapRenderCamera);\r\n        } else {\r\n          if (light.shadowMapInfo.numCascades > 1) {\r\n            const distances = this.calcSplitDistances(camera, light.shadowMapInfo.numCascades);\r\n            const cascadeCamera = this.fetchCameraForScene(scene);\r\n            const shadowMapRenderCamera = this.fetchCameraForScene(scene);\r\n            const shadowMapCullCamera = this.fetchCameraForScene(scene);\r\n            cascadeCamera.reparent(camera);\r\n            const numRows = light.shadowMapInfo.numCascades > 2 ? 2 : 1;\r\n            const numCols = light.shadowMapInfo.numCascades > 1 ? 2 : 1;\r\n            this._enableDepthClamp = this._renderScheme.device.getShaderCaps().supportFragmentDepth;\r\n            for (let split = 0; split < light.shadowMapInfo.numCascades; split++) {\r\n              cascadeCamera.projectionMatrix = Matrix4x4.perspective(camera.getFOV(), camera.getAspect(), distances[split], distances[split + 1]);\r\n              const cropMatrix = new Matrix4x4();\r\n              light.createLightCamera(scene.boundingBox, cascadeCamera, shadowMapRenderCamera, cropMatrix, this._enableDepthClamp);\r\n              light.createLightCamera(scene.boundingBox, cascadeCamera, shadowMapCullCamera, null, false);\r\n              if (light.shadowMapInfo.colorAttachment.isTexture2DArray()) {\r\n                shadowMapRenderCamera.projectionMatrix.multiplyLeft(cropMatrix);\r\n                fb.setTextureLayer(0, split);\r\n              } else {\r\n                const adjMatrix = new Matrix4x4();\r\n                const col = split % 2;\r\n                const row = split >> 1;\r\n                adjMatrix.setRow(0, new Vector4(1.5 - 0.5 * numCols, 0, 0, 0));\r\n                adjMatrix.setRow(1, new Vector4(0, 1.5 - 0.5 * numRows, 0, 0));\r\n                adjMatrix.setRow(2, new Vector4(0, 0, 1, 0));\r\n                adjMatrix.setRow(3, new Vector4(col - 0.5 * numCols + 0.5, row - 0.5 * numRows + 0.5, 0, 1));\r\n                shadowMapRenderCamera.projectionMatrix.multiplyLeft(cropMatrix).multiplyLeft(adjMatrix);\r\n                if (scene.device.getDeviceType() === 'webgpu') {\r\n                  this.scissor = [col * light.shadowMapSize, (numRows - 1 - row) * light.shadowMapSize, light.shadowMapSize, light.shadowMapSize];\r\n                } else {\r\n                  this.scissor = [col * light.shadowMapSize, row * light.shadowMapSize, light.shadowMapSize, light.shadowMapSize];\r\n                }\r\n              }\r\n              this.renderQueue = this.cullScene(scene, shadowMapCullCamera, false);\r\n              this.calcDepthBiasParams(shadowMapRenderCamera, light.shadowMapSize, light.shadowDepthBias, light.shadowNormalBias, light.shadowDepthScale, light.shadowMapInfo.depthBias);\r\n              this.renderToTexture(scene, shadowMapRenderCamera, fb);\r\n              this.renderQueue = null;\r\n              light.shadowMapInfo.shadowMatrices.set(Matrix4x4.transpose(shadowMapRenderCamera.viewProjectionMatrix).getArray(), split * 16);\r\n              light.shadowMapInfo.cascadeDistances.getArray()[split] = distances[split + 1];\r\n            }\r\n            this.releaseCamera(cascadeCamera);\r\n            this.releaseCamera(shadowMapRenderCamera);\r\n            this.releaseCamera(shadowMapCullCamera);\r\n          } else {\r\n            const shadowMapRenderCamera = this.fetchCameraForScene(scene);\r\n            light.createLightCamera(scene.boundingBox, camera, shadowMapRenderCamera, null, false);\r\n            this._cullCamera = shadowMapRenderCamera;\r\n            this.calcDepthBiasParams(shadowMapRenderCamera, light.shadowMapSize, light.shadowDepthBias, light.shadowNormalBias, light.shadowDepthScale, light.shadowMapInfo.depthBias);\r\n            this.renderToTexture(scene, shadowMapRenderCamera, fb);\r\n            light.shadowMapInfo.shadowMatrices.set(Matrix4x4.transpose(shadowMapRenderCamera.viewProjectionMatrix).getArray());\r\n            this._cullCamera = null;\r\n            this.releaseCamera(shadowMapRenderCamera);\r\n          }\r\n        }\r\n        this.postRenderShadowMap(light);\r\n        scene.device.setRenderStatesOverridden(null);\r\n        */\r\n      }\r\n    }\r\n    this._cullCamera = savedCullCamera;\r\n  }\r\n  /** @internal */\r\n  protected renderItems(camera: Camera, renderQueue: RenderQueue, lightList: PunctualLight[]) {\r\n    const ctx: DrawContext = {\r\n      camera,\r\n      target: null,\r\n      renderPass: this,\r\n      renderPassHash: null,\r\n      materialFunc: values.MATERIAL_FUNC_DEPTH_SHADOW,\r\n    };\r\n    const device = this._renderScheme.device;\r\n    const bindGroup = this.getGlobalBindGroup(ctx);\r\n    device.setBindGroup(0, bindGroup);\r\n    this.setLightUniforms(bindGroup, ctx, this._currentLight);\r\n    this.setCameraUniforms(bindGroup, ctx, this._verticalFlip !== this.isAutoFlip());\r\n    ctx.renderPassHash = this.getGlobalBindGroupHash(ctx);\r\n    for (const order of Object.keys(renderQueue.items).map(val => Number(val)).sort((a, b) => a - b)) {\r\n      const renderItems = renderQueue.items[order];\r\n      for (const item of renderItems.opaqueList) {\r\n        if (!item.drawable.isUnlit()) {\r\n          ctx.instanceData = item.instanceData;\r\n          ctx.target = item.drawable;\r\n          item.drawable.draw(ctx);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"names":["values.MATERIAL_FUNC_DEPTH_SHADOW"],"mappings":"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"}