import { Vector4, Matrix4x4 } from '@sophon/base';
import { CullVisitor } from '../visitors/cull_visitor';
import { RenderQueue } from '../render_queue';
import type { Scene } from '../scene';
import type { RenderScheme } from './renderscheme';
import type { Camera } from '../camera';
import type { Device } from '../../device/device';
import type { FrameBuffer } from '../../device/gpuobject';
export type GlobalLightStruct = {
    positionAndRange: Vector4;
    directionAndCutoff: Vector4;
    diffuseAndIntensity: Vector4;
    viewMatrix: Matrix4x4;
    viewProjMatrix: Matrix4x4;
    lightType: number;
    envLightStrength?: number;
};
export declare abstract class RenderPass {
    constructor(renderScheme: RenderScheme, name: string);
    get name(): string;
    get renderScheme(): RenderScheme;
    get device(): Device;
    get cullCamera(): Camera;
    set cullCamera(camera: Camera);
    get mainCamera(): Camera;
    get renderQueue(): RenderQueue;
    set renderQueue(list: RenderQueue);
    get clearColor(): Vector4;
    set clearColor(color: Vector4);
    get clearDepth(): number;
    set clearDepth(depth: number);
    get clearStencil(): number;
    set clearStencil(stencil: number);
    get viewport(): number[];
    set viewport(vp: number[]);
    get scissor(): number[];
    set scissor(scissor: number[]);
    get cullVisitor(): CullVisitor;
    set cullVisitor(visitor: CullVisitor);
    get verticalFlip(): boolean;
    set verticalFlip(b: boolean);
    get renderTimeStamp(): number;
    getRenderPassType(): number;
    isAutoFlip(): boolean;
    enableClear(color: boolean, depthStencil: boolean): void;
    render(scene: Scene, camera: Camera): void;
    renderToCubeTexture(scene: Scene, camera: Camera, frameBuffer: FrameBuffer): void;
    renderToTexture(scene: Scene, camera: Camera, frameBuffer: FrameBuffer): void;
    dispose(): void;
    cullScene(scene: Scene, cullCamera: Camera, force: boolean): RenderQueue;
}
