{"version":3,"file":"skeleton.js","sources":["../../../../libs/device/src/scene/skeleton.ts"],"sourcesContent":["import { Matrix4x4, Vector3, nextPowerOf2 } from \"@sophon/base\";\r\nimport { Texture2D } from \"../device/gpuobject\";\r\nimport { TextureFormat } from \"../device/base_types\";\r\nimport { SkinnedBoundingBox } from \"./animation\";\r\nimport type { SceneNode } from \"./scene_node\";\r\nimport type { Device } from '../device/device';\r\n\r\nconst tmpV0 = new Vector3();\r\nconst tmpV1 = new Vector3();\r\nconst tmpV2 = new Vector3();\r\nconst tmpV3 = new Vector3();\r\n\r\nexport class Skeleton {\r\n  protected _joints: SceneNode[];\r\n  protected _inverseBindMatrices: Matrix4x4[];\r\n  protected _bindPoseMatrices: Matrix4x4[];\r\n  protected _jointMatrices: Matrix4x4[];\r\n  protected _jointMatrixArray: Float32Array;\r\n  protected _jointTexture: Texture2D;\r\n  constructor(joints: SceneNode[], inverseBindMatrices: Matrix4x4[], bindPoseMatrices: Matrix4x4[]) {\r\n    this._joints = joints;\r\n    this._inverseBindMatrices = inverseBindMatrices;\r\n    this._bindPoseMatrices = bindPoseMatrices;\r\n    this._jointMatrixArray = null;\r\n    this._jointMatrices = null;\r\n    this._jointTexture = null;\r\n  }\r\n  get jointMatrices(): Matrix4x4[] {\r\n    return this._jointMatrices;\r\n  }\r\n  get jointTexture(): Texture2D {\r\n    return this._jointTexture;\r\n  }\r\n  updateJointMatrices(device: Device, jointTransforms?: Matrix4x4[]) {\r\n    if (!this._jointTexture) {\r\n      this._createJointTexture(device);\r\n    }\r\n    for (let i = 0; i < this._joints.length; i++) {\r\n      const mat = this._jointMatrices[i];\r\n      Matrix4x4.multiply(jointTransforms ? jointTransforms[i] : this._joints[i].worldMatrix, this._inverseBindMatrices[i], mat);\r\n    }\r\n  }\r\n  computeBindPose(device: Device) {\r\n    this.updateJointMatrices(device, this._bindPoseMatrices);\r\n    this._jointTexture.update(this._jointMatrixArray, 0, 0, this._jointTexture.width, this._jointTexture.height);\r\n  }\r\n  computeJoints(device: Device) {\r\n    this.updateJointMatrices(device);\r\n    this._jointTexture.update(this._jointMatrixArray, 0, 0, this._jointTexture.width, this._jointTexture.height);\r\n  }\r\n  computeBoundingBox(info: SkinnedBoundingBox, invWorldMatrix: Matrix4x4) {\r\n    info.boundingBox.beginExtend();\r\n    for (let i = 0; i < info.boundingVertices.length; i++) {\r\n      this._jointMatrices[info.boundingVertexBlendIndices[i * 4 + 0]].transformPointAffine(info.boundingVertices[i], tmpV0).scaleBy(info.boundingVertexJointWeights[i * 4 + 0]);\r\n      this._jointMatrices[info.boundingVertexBlendIndices[i * 4 + 1]].transformPointAffine(info.boundingVertices[i], tmpV1).scaleBy(info.boundingVertexJointWeights[i * 4 + 1]);\r\n      this._jointMatrices[info.boundingVertexBlendIndices[i * 4 + 2]].transformPointAffine(info.boundingVertices[i], tmpV2).scaleBy(info.boundingVertexJointWeights[i * 4 + 2]);\r\n      this._jointMatrices[info.boundingVertexBlendIndices[i * 4 + 3]].transformPointAffine(info.boundingVertices[i], tmpV3).scaleBy(info.boundingVertexJointWeights[i * 4 + 3]);\r\n      tmpV0.addBy(tmpV1).addBy(tmpV2).addBy(tmpV3);\r\n      invWorldMatrix.transformPointAffine(tmpV0, tmpV0);\r\n      info.boundingBox.extend(tmpV0);\r\n    }\r\n  }\r\n  /** @internal */\r\n  private _createJointTexture(device: Device) {\r\n    const textureWidth = nextPowerOf2(Math.max(4, Math.ceil(Math.sqrt(this._joints.length * 4))));\r\n    this._jointTexture = device.createTexture2D(TextureFormat.RGBA32F, textureWidth, textureWidth, {\r\n      colorSpace: 'linear',\r\n      noMipmap: true\r\n    });\r\n    this._jointMatrixArray = new Float32Array(textureWidth * textureWidth * 4);\r\n    this._jointMatrices = this._joints.map((val, index) => new Matrix4x4(this._jointMatrixArray.subarray(index * 16, index * 16 + 16)));\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}