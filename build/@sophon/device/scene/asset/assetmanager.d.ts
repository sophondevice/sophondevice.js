import { SharedModel } from './model';
import { Model } from '../model';
import type { Device } from '../../device';
import type { BaseTexture } from '../../device/gpuobject';
import type { Scene } from '../scene';
import type { AbstractTextureLoader, AbstractModelLoader } from './loaders/loader';
export declare class AssetManager {
    private _modelLoaders;
    constructor(device: Device);
    get urlResolver(): (url: string) => string;
    set urlResolver(resolver: (url: string) => string);
    get device(): Device;
    request(url: string, headers?: Record<string, string>, crossOrigin?: string): Promise<Response>;
    resolveURL(url: string): string;
    clearCache(): void;
    addTextureLoader(loader: AbstractTextureLoader): void;
    addModelLoader(loader: AbstractModelLoader): void;
    fetchTextData(url: string): Promise<string>;
    fetchBinaryData(url: string): Promise<ArrayBuffer>;
    fetchTexture<T extends BaseTexture>(url: string, mimeType?: string, srgb?: boolean, noMipmap?: boolean): Promise<T>;
    fetchModel(scene: Scene, url: string, mimeType?: string): Promise<SharedModel>;
    createModelNode(scene: Scene, url: string, mimeType?: string): Promise<Model>;
    loadTextData(url: string): Promise<string>;
    loadBinaryData(url: string): Promise<ArrayBuffer>;
    loadTexture(url: string, mimeType?: string, srgb?: boolean, noMipmap?: boolean, texture?: BaseTexture): Promise<BaseTexture>;
    doLoadTexture(loader: AbstractTextureLoader, url: string, mimeType: string, data: ArrayBuffer, srgb: boolean, noMipmap: boolean, texture?: BaseTexture): Promise<BaseTexture>;
    loadModel(url: string, mimeType?: string, name?: string): Promise<SharedModel>;
    fetchBuiltinTexture<T extends BaseTexture>(name: string): Promise<T>;
    private createSceneNode;
    static setBuiltinTextureLoader(name: string, loader: (device: Device) => Promise<BaseTexture>): void;
    private getBoundingInfo;
    private setAssetNodeToSceneNode;
}
