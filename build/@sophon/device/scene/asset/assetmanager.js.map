{"version":3,"file":"assetmanager.js","sources":["../../../../../libs/device/src/scene/asset/assetmanager.ts"],"sourcesContent":["import { Vector3, isPowerOf2, nextPowerOf2 } from '@sophon/base';\nimport { TextureFilter, TextureWrapping, TextureFormat } from '../../device/base_types'\nimport { AssetHierarchyNode, AssetSkeleton, AssetSubMeshData, SharedModel } from './model';\nimport { GLTFLoader } from './loaders/gltf/gltf_loader';\nimport { WebImageLoader } from './loaders/image/webimage_loader';\nimport { DDSLoader } from './loaders/dds/dds_loader';\nimport { SceneNode } from '../scene_node';\nimport { Mesh } from '../mesh';\nimport { Model } from '../model';\nimport { Skeleton } from '../skeleton';\nimport { SkinnedBoundingBox } from '../animation';\nimport { BoundingBox } from '../bounding_volume';\nimport { GammaBlitter } from '../blitter';\nimport { getSheenLutLoader } from './builtin';\nimport { GraphNode } from '../graph_node';\nimport { BUILTIN_ASSET_TEXTURE_SHEEN_LUT } from '../values';\nimport type { Device } from '../../device'\nimport type { BaseTexture, Texture2D, GPUObject } from '../../device/gpuobject';\nimport type { Scene } from '../scene';\nimport type { AbstractTextureLoader, AbstractModelLoader } from './loaders/loader';\n\nexport class AssetManager {\n  /** @internal */\n  static _builtinTextures: {\n    [name: string]: Promise<BaseTexture>\n  } = {};\n  /** @internal */\n  static _builtinTextureLoaders: {\n    [name: string]: (device: Device, texture?: BaseTexture) => Promise<BaseTexture>\n  } = {\n      [BUILTIN_ASSET_TEXTURE_SHEEN_LUT]: getSheenLutLoader(64)\n    };\n  /** @internal */\n  private _device: Device;\n  /** @internal */\n  private _urlResolver: (url: string) => string;\n  /** @internal */\n  private _textureLoaders: AbstractTextureLoader[];\n  /** @inernal */\n  private _modelLoaders: AbstractModelLoader[];\n  /** @internal */\n  private _textures: {\n    [url: string]: Promise<BaseTexture>\n  };\n  /** @internal */\n  private _textures_nomipmap: {\n    [url: string]: Promise<BaseTexture>\n  };\n  /** @internal */\n  private _textures_srgb: {\n    [url: string]: Promise<BaseTexture>,\n  };\n  /** @internal */\n  private _textures_srgb_nomipmap: {\n    [url: string]: Promise<BaseTexture>,\n  };\n  /** @internal */\n  private _models: {\n    [url: string]: Promise<SharedModel>\n  };\n  /** @internal */\n  private _binaryDatas: {\n    [url: string]: Promise<ArrayBuffer>\n  };\n  /** @internal */\n  private _textDatas: {\n    [url: string]: Promise<string>\n  };\n  /** @internal */\n  private static _tempElement: HTMLAnchorElement = null;\n  constructor(device: Device) {\n    this._device = device;\n    this._urlResolver = null;\n    this._textureLoaders = [new WebImageLoader(), new DDSLoader()];\n    this._modelLoaders = [new GLTFLoader()];\n    this._textures = {};\n    this._textures_nomipmap = {};\n    this._textures_srgb = {};\n    this._textures_srgb_nomipmap = {};\n    this._models = {};\n    this._binaryDatas = {};\n    this._textDatas = {};\n  }\n  get urlResolver(): (url: string) => string {\n    return this._urlResolver;\n  }\n  set urlResolver(resolver: (url: string) => string) {\n    this._urlResolver = resolver;\n  }\n  get device(): Device {\n    return this._device;\n  }\n  async request(url: string, headers: Record<string, string> = {}, crossOrigin = 'anonymous'): Promise<Response> {\n    url = this._urlResolver ? this._urlResolver(url) : this.resolveURL(url);\n    return url ? fetch(url, {\n      credentials: crossOrigin === 'anonymous' ? 'same-origin' : 'include',\n      headers: headers\n    }) : null;\n  }\n  resolveURL(url: string): string {\n    if (!AssetManager._tempElement) {\n      AssetManager._tempElement = document.createElement('a');\n    }\n    AssetManager._tempElement.href = url;\n    return AssetManager._tempElement.href;\n  }  \n  clearCache() {\n    this._textures = {};\n    this._textures_nomipmap = {};\n    this._textures_srgb = {};\n    this._textures_srgb_nomipmap = {};\n    this._models = {};\n    this._binaryDatas = {};\n    this._textDatas = {};\n  }\n  addTextureLoader(loader: AbstractTextureLoader) {\n    if (loader) {\n      this._textureLoaders.unshift(loader);\n    }\n  }\n  addModelLoader(loader: AbstractModelLoader) {\n    if (loader) {\n      this._modelLoaders.unshift(loader);\n    }\n  }\n  async fetchTextData(url: string): Promise<string> {\n    let P = this._textDatas[url];\n    if (!P) {\n      P = this.loadTextData(url);\n      this._textDatas[url] = P;\n    }\n    return P;\n  }\n  async fetchBinaryData(url: string): Promise<ArrayBuffer> {\n    let P = this._binaryDatas[url];\n    if (!P) {\n      P = this.loadBinaryData(url);\n      this._binaryDatas[url] = P;\n    }\n    return P;\n  }\n  async fetchTexture<T extends BaseTexture>(url: string, mimeType?: string, srgb?: boolean, noMipmap?: boolean): Promise<T> {\n    const textures = srgb ? noMipmap ? this._textures_srgb_nomipmap : this._textures_srgb : noMipmap ? this._textures_nomipmap : this._textures;\n    let P = textures[url];\n    if (!P) {\n      P = this.loadTexture(url, mimeType, srgb, noMipmap);\n      textures[url] = P;\n    }\n    return P as Promise<T>;\n  }\n  async fetchModel(scene: Scene, url: string, mimeType?: string): Promise<SharedModel> {\n    let P = this._models[url];\n    if (!P) {\n      P = this.loadModel(url, mimeType);\n      this._models[url] = P;\n    }\n    return P;\n  }\n  async createModelNode(scene: Scene, url: string, mimeType?: string): Promise<Model> {\n    const sharedModel = await this.fetchModel(scene, url, mimeType);\n    return this.createSceneNode(scene, sharedModel);\n  }\n  async loadTextData(url: string): Promise<string> {\n    const response = await this.request(url);\n    if (!response.ok) {\n      throw new Error(`Asset download failed: ${url}`);\n    }\n    return await response.text();\n  }\n  async loadBinaryData(url: string): Promise<ArrayBuffer> {\n    const response = await this.request(url);\n    if (!response.ok) {\n      throw new Error(`Asset download failed: ${url}`);\n    }\n    return await response.arrayBuffer();\n  }\n  async loadTexture(url: string, mimeType?: string, srgb?: boolean, noMipmap?: boolean, texture?: BaseTexture): Promise<BaseTexture> {\n    const response = await this.request(url);\n    if (!response.ok) {\n      throw new Error(`Asset download failed: ${url}`)\n    }\n    const data = await response.arrayBuffer();\n    let ext = '';\n    let filename = '';\n    const dataUriMatchResult = url.match(/^data:([^;]+)/);\n    if (dataUriMatchResult) {\n      mimeType = mimeType || dataUriMatchResult[1];\n    } else {\n      filename = new URL(url, new URL(location.href).origin).pathname.split('/').filter(val => !!val).slice(-1)[0];\n      const p = filename ? filename.lastIndexOf('.') : -1;\n      ext = p >= 0 ? filename.substring(p).toLowerCase() : null;\n      if (!mimeType) {\n        if (ext === '.jpg' || ext === '.jpeg') {\n          mimeType = 'image/jpg';\n        } else if (ext === '.png') {\n          mimeType = 'image/png';\n        }\n      }\n    }\n    for (const loader of this._textureLoaders) {\n      if ((!ext || !loader.supportExtension(ext)) && (!mimeType || !loader.supportMIMEType(mimeType))) {\n        continue;\n      }\n      const tex = await this.doLoadTexture(loader, filename, mimeType, data, !!srgb, !!noMipmap, texture);\n      tex.name = filename;\n      if (url.match(/^blob:/)) {\n        tex.restoreHandler = async (tex: GPUObject) => {\n          await this.doLoadTexture(loader, filename, mimeType, data, !!srgb, !!noMipmap, tex as BaseTexture);\n        };\n      } else {\n        tex.restoreHandler = async (tex: GPUObject) => {\n          await this.loadTexture(url, mimeType, srgb, noMipmap, tex as BaseTexture);\n        };\n      }\n      return tex;\n    }\n    throw new Error(`Can not find loader for asset ${url}`);\n  }\n  async doLoadTexture(loader: AbstractTextureLoader, url: string, mimeType: string, data: ArrayBuffer, srgb: boolean, noMipmap: boolean, texture?: BaseTexture): Promise<BaseTexture> {\n    if (this.device.getDeviceType() !== 'webgl') {\n      return await loader.load(this, url, mimeType, data, srgb, noMipmap, texture);\n    } else {\n      let tex = await loader.load(this, url, mimeType, data, srgb, noMipmap);\n      if (texture) {\n        const magFilter = tex.width !== texture.width || tex.height !== texture.height ? TextureFilter.Linear : TextureFilter.Nearest;\n        const minFilter = magFilter;\n        const mipFilter = TextureFilter.None;\n        const sampler = this.device.createSampler({\n          addressU: TextureWrapping.ClampToEdge,\n          addressV: TextureWrapping.ClampToEdge,\n          magFilter,\n          minFilter,\n          mipFilter\n        });\n        const blitter = new GammaBlitter(1);\n        blitter.blit(tex as any, texture as any, sampler);\n        tex = texture;\n      } else if (!noMipmap && (tex.isTexture2D() || tex.isTextureCube()) && (srgb || !isPowerOf2(tex.width) || !isPowerOf2(tex.height))) {\n        const newWidth = !noMipmap && !isPowerOf2(tex.width) ? nextPowerOf2(tex.width) : tex.width;\n        const newHeight = !noMipmap && !isPowerOf2(tex.height) ? nextPowerOf2(tex.height) : tex.height;\n        const magFilter = newWidth !== tex.width || newHeight !== tex.height ? TextureFilter.Linear : TextureFilter.Nearest;\n        const minFilter = magFilter;\n        const mipFilter = TextureFilter.None;\n        const sampler = this.device.createSampler({\n          addressU: TextureWrapping.ClampToEdge,\n          addressV: TextureWrapping.ClampToEdge,\n          magFilter,\n          minFilter,\n          mipFilter\n        });\n        const blitter = new GammaBlitter(1);\n        const newTexture = tex.isTexture2D()\n          ? this.device.createTexture2D(TextureFormat.RGBA8UNORM, newWidth, newHeight, { colorSpace: 'linear' })\n          : this.device.createCubeTexture(TextureFormat.RGBA8UNORM, newWidth, { colorSpace: 'linear' });\n\n        blitter.blit(tex as any, newTexture as any, sampler);\n        tex.dispose();\n        tex = newTexture;\n      }\n      return tex;\n    }\n  }\n  async loadModel(url: string, mimeType?: string, name?: string): Promise<SharedModel> {\n    const response = await this.request(url);\n    if (!response.ok) {\n      throw new Error(`Asset download failed: ${url}`)\n    }\n    const data = await response.blob();\n    const filename = new URL(url, new URL(location.href).origin).pathname.split('/').filter(val => !!val).slice(-1)[0];\n    const p = filename ? filename.lastIndexOf('.') : -1;\n    const ext = p >= 0 ? filename.substring(p) : null;\n    for (const loader of this._modelLoaders) {\n      if (!loader.supportExtension(ext) && !loader.supportMIMEType(mimeType || data.type)) {\n        continue;\n      }\n      const model = await loader.load(this, url, mimeType || data.type, data);\n      if (!model) {\n        throw new Error(`Load asset failed: ${url}`);\n      }\n      model.name = name || filename;\n      return model;\n    }\n    throw new Error(`Can not find loader for asset ${url}`);\n  }\n  async fetchBuiltinTexture<T extends BaseTexture>(name: string): Promise<T> {\n    let P = AssetManager._builtinTextures[name];\n    const loader = AssetManager._builtinTextureLoaders[name];\n    if (!P) {\n      if (!loader) {\n        throw new Error(`Unknown builtin texture name: ${name}`);\n      }\n      P = loader(this.device);\n      AssetManager._builtinTextures[name] = P;\n    }\n    const tex = await P;\n    tex.restoreHandler = async tex => {\n      await loader(this.device, tex as Texture2D);\n    }\n    return tex as T;\n  }\n  private createSceneNode(scene: Scene, model: SharedModel, sceneIndex?: number): Model {\n    const node = new Model(scene);\n    node.name = model.name;\n    for (let i = 0; i < model.scenes.length; i++) {\n      if (typeof sceneIndex === 'number' && sceneIndex >= 0 && i !== sceneIndex) {\n        continue;\n      } else if ((sceneIndex === undefined || sceneIndex === null) && model.activeScene >= 0 && i !== model.activeScene) {\n        continue;\n      }\n      const assetScene = model.scenes[i];\n      const skeletonMeshMap: Map<AssetSkeleton, { mesh: Mesh[], bounding: AssetSubMeshData[] }> = new Map();\n      const nodeMap: Map<AssetHierarchyNode, SceneNode> = new Map();\n      for (let k = 0; k < assetScene.rootNodes.length; k++) {\n        this.setAssetNodeToSceneNode(scene, node, model, assetScene.rootNodes[k], skeletonMeshMap, nodeMap);\n      }\n      for (const animationData of model.animations) {\n        const animation = node.addAnimation(animationData.name);\n        if (animation) {\n          for (const track of animationData.tracks) {\n            animation.addAnimationTrack(nodeMap.get(track.node), track.interpolator);\n          }\n          for (const sk of animationData.skeletons) {\n            const nodes = skeletonMeshMap.get(sk);\n            if (nodes) {\n              const skeleton = new Skeleton(sk.joints.map(val => nodeMap.get(val)), sk.inverseBindMatrices, sk.bindPoseMatrices);\n              skeleton.updateJointMatrices(scene.device);\n              animation.addSkeleton(skeleton, nodes.mesh, nodes.bounding.map(val => this.getBoundingInfo(skeleton, val)));\n            }\n          }\n        }\n        animation.stop();\n      }\n    }\n    return node;\n  }\n  static setBuiltinTextureLoader(name: string, loader: (device: Device) => Promise<BaseTexture>) {\n    if (loader) {\n      this._builtinTextureLoaders[name] = loader;\n    } else {\n      delete this._builtinTextureLoaders[name];\n    }\n  }\n  private getBoundingInfo(skeleton: Skeleton, meshData: AssetSubMeshData): SkinnedBoundingBox {\n    const indices = [0, 0, 0, 0, 0, 0];\n    let minx = Number.MAX_VALUE;\n    let maxx = -Number.MAX_VALUE;\n    let miny = Number.MAX_VALUE;\n    let maxy = -Number.MAX_VALUE;\n    let minz = Number.MAX_VALUE;\n    let maxz = -Number.MAX_VALUE;\n    const v = meshData.rawPositions;\n    const vert = new Vector3();\n    const tmpV0 = new Vector3();\n    const tmpV1 = new Vector3();\n    const tmpV2 = new Vector3();\n    const tmpV3 = new Vector3();\n    const numVertices = Math.floor(v.length / 3);\n    for (let i = 0; i < numVertices; i++) {\n      vert.set(v[i * 3], v[i * 3 + 1], v[i * 3 + 2]);\n      skeleton.jointMatrices[meshData.rawBlendIndices[i * 4 + 0]].transformPointAffine(vert, tmpV0).scaleBy(meshData.rawJointWeights[i * 4 + 0]);\n      skeleton.jointMatrices[meshData.rawBlendIndices[i * 4 + 1]].transformPointAffine(vert, tmpV1).scaleBy(meshData.rawJointWeights[i * 4 + 1]);\n      skeleton.jointMatrices[meshData.rawBlendIndices[i * 4 + 2]].transformPointAffine(vert, tmpV2).scaleBy(meshData.rawJointWeights[i * 4 + 2]);\n      skeleton.jointMatrices[meshData.rawBlendIndices[i * 4 + 3]].transformPointAffine(vert, tmpV3).scaleBy(meshData.rawJointWeights[i * 4 + 3]);\n      tmpV0.addBy(tmpV1).addBy(tmpV2).addBy(tmpV3);\n      if (tmpV0.x < minx) {\n        minx = tmpV0.x;\n        indices[0] = i;\n      }\n      if (tmpV0.x > maxx) {\n        maxx = tmpV0.x;\n        indices[1] = i;\n      }\n      if (tmpV0.y < miny) {\n        miny = tmpV0.y;\n        indices[2] = i;\n      }\n      if (tmpV0.y > maxy) {\n        maxy = tmpV0.y;\n        indices[3] = i;\n      }\n      if (tmpV0.z < minz) {\n        minz = tmpV0.z;\n        indices[4] = i;\n      }\n      if (tmpV0.z > maxz) {\n        maxz = tmpV0.z;\n        indices[5] = i;\n      }\n    }\n    const info: SkinnedBoundingBox = {\n      boundingVertexBlendIndices: new Float32Array(Array.from({ length: 6 * 4 }).map((val, index) => meshData.rawBlendIndices[indices[index >> 2] * 4 + index % 4])),\n      boundingVertexJointWeights: new Float32Array(Array.from({ length: 6 * 4 }).map((val, index) => meshData.rawJointWeights[indices[index >> 2] * 4 + index % 4])),\n      boundingVertices: Array.from({ length: 6 }).map((val, index) => new Vector3(meshData.rawPositions[indices[index] * 3], meshData.rawPositions[indices[index] * 3 + 1], meshData.rawPositions[indices[index] * 3 + 2])),\n      boundingBox: new BoundingBox,\n    };\n    return info;\n  }\n  private setAssetNodeToSceneNode(scene: Scene, parent: SceneNode, model: SharedModel, assetNode: AssetHierarchyNode, skeletonMeshMap: Map<AssetSkeleton, { mesh: Mesh[], bounding: AssetSubMeshData[] }>, nodeMap: Map<AssetHierarchyNode, SceneNode>) {\n    const node: SceneNode = new SceneNode(scene);\n    nodeMap.set(assetNode, node);\n    node.name = `${assetNode.name}`\n    node.position = assetNode.position;\n    node.rotation = assetNode.rotation;\n    node.scaling = assetNode.scaling;\n    if (assetNode.mesh) {\n      const meshData = assetNode.mesh;\n      const skeleton = assetNode.skeleton;\n      for (const subMesh of meshData.subMeshes) {\n        const meshNode = new Mesh(scene);\n        meshNode.renderOrder = GraphNode.ORDER_INHERITED;\n        meshNode.clipMode = GraphNode.CLIP_INHERITED;\n        meshNode.showState = GraphNode.SHOW_INHERITED;\n        meshNode.pickMode = GraphNode.PICK_INHERITED;\n        meshNode.primitive = subMesh.primitive;\n        meshNode.material = subMesh.material;\n        // meshNode.drawBoundingBox = true;\n        meshNode.reparent(node);\n        if (skeleton) {\n          if (!skeletonMeshMap.has(skeleton)) {\n            skeletonMeshMap.set(skeleton, { mesh: [meshNode], bounding: [subMesh] });\n          } else {\n            skeletonMeshMap.get(skeleton).mesh.push(meshNode);\n            skeletonMeshMap.get(skeleton).bounding.push(subMesh);\n          }\n        }\n      }\n    }\n    node.reparent(parent);\n    for (const child of assetNode.children) {\n      this.setAssetNodeToSceneNode(scene, node, model, child, skeletonMeshMap, nodeMap);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}