{"version":3,"file":"gltf_loader.js","sources":["../../../../../../../libs/device/src/scene/asset/loaders/gltf/gltf_loader.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Vector3, Vector4, Matrix4x4, Quaternion } from '@sophon/base';\nimport { TextureFilter, TextureWrapping, PrimitiveType } from '../../../../device/base_types';\nimport { FaceMode } from '../../../../device/render_states';\nimport {\n  VERTEX_ATTRIB_POSITION,\n  VERTEX_ATTRIB_NORMAL,\n  VERTEX_ATTRIB_TANGENT,\n  VERTEX_ATTRIB_TEXCOORD0,\n  VERTEX_ATTRIB_TEXCOORD1,\n  VERTEX_ATTRIB_TEXCOORD2,\n  VERTEX_ATTRIB_TEXCOORD3,\n  VERTEX_ATTRIB_TEXCOORD4,\n  VERTEX_ATTRIB_TEXCOORD5,\n  VERTEX_ATTRIB_TEXCOORD6,\n  VERTEX_ATTRIB_TEXCOORD7,\n  getVertexAttribName,\n  VERTEX_ATTRIB_DIFFUSE,\n  VERTEX_ATTRIB_BLEND_INDICES,\n  VERTEX_ATTRIB_BLEND_WEIGHT,\n  getVertexBufferAttribType\n} from '../../../../device/gpuobject';\nimport {\n  I8_BITMASK,\n  U8_BITMASK,\n  I16_BITMASK,\n  U16_BITMASK,\n  I32_BITMASK,\n  U32_BITMASK,\n  F32_BITMASK,\n  makePrimitiveType,\n} from '../../../../device/builder/types';\nimport { SharedModel, AssetHierarchyNode, AssetMeshData, AssetSkeleton, AssetScene, AssetAnimationData, AssetSubMeshData, AssetMaterial, AssetUnlitMaterial, AssetPBRMaterialMR, AssetPBRMaterialSG, AssetMaterialCommon, MaterialTextureInfo, AssetPBRMaterialCommon } from '../../model';\nimport { BoundingBox } from '../../../bounding_volume';\nimport { Primitive } from '../../../primitive';\nimport { StandardMaterial, UnlitMaterial, PBRMetallicRoughnessMaterial, PBRSpecularGlossinessMaterial } from '../../../materiallib';\nimport { ComponentType, GLTFAccessor } from './helpers';\nimport { Interpolator, InterpolationMode, InterpolationTarget } from '../../../interpolator';\nimport { AbstractModelLoader } from '../loader';\nimport { BUILTIN_ASSET_TEXTURE_SHEEN_LUT } from '../../../values';\nimport { PBStructTypeInfo, PBArrayTypeInfo, PBPrimitiveTypeInfo } from '../../../../device/builder/types';\nimport type { AssetManager } from '../../assetmanager';\nimport type { AnimationChannel, AnimationSampler, GlTf, Material, TextureInfo } from './gltf';\nimport type { TypedArray } from '../../../../misc';\nimport type { GPUDataBuffer, Texture2D, IndexBuffer, StructuredBuffer } from '../../../../device/gpuobject';\n\nexport interface GLTFContent extends GlTf {\n  _manager: AssetManager;\n  _loadedBuffers: ArrayBuffer[];\n  _accessors: GLTFAccessor[];\n  _bufferCache: { [name: string]: GPUDataBuffer };\n  _textureCache: { [name: string]: Texture2D };\n  _primitiveCache: { [hash: string]: Primitive };\n  _materialCache: { [hash: string]: StandardMaterial };\n  _accessorCache: { [index: number]: { array: TypedArray, typeMask: number, elementCount: number } };\n  _nodes: AssetHierarchyNode[];\n  _meshes: AssetMeshData[];\n}\n\nexport class GLTFLoader extends AbstractModelLoader {\n  supportExtension(ext: string): boolean {\n    return ext === '.gltf' || ext === '.glb';\n  }\n  supportMIMEType(mimeType: string): boolean {\n    return mimeType === 'model/gltf+json' || mimeType === 'model/gltf-binary';\n  }\n  async load(assetManager: AssetManager, url: string, mimeType: string, data: Blob) {\n    const buffer = await data.arrayBuffer();\n    if (this.isGLB(buffer)) {\n      return this.loadBinary(assetManager, url, buffer);\n    }\n    const gltf = await new Response(data).json() as GLTFContent;\n    gltf._manager = assetManager;\n    gltf._loadedBuffers = null;\n    return this.loadJson(url, gltf);\n  }\n  async loadBinary(assetManager: AssetManager, url: string, buffer: ArrayBuffer): Promise<SharedModel> {\n    const jsonChunkType = 0x4E4F534A;\n    const binaryChunkType = 0x004E4942;\n    let gltf: GLTFContent = null;\n    const buffers: ArrayBuffer[] = [];\n    const chunkInfos = this.getGLBChunkInfos(buffer);\n    for (const info of chunkInfos) {\n      if (info.type === jsonChunkType && !gltf) {\n        const jsonSlice = new Uint8Array(buffer, 20, info.length);\n        const stringBuffer = new TextDecoder('utf-8').decode(jsonSlice);\n        gltf = JSON.parse(stringBuffer);\n      } else if (info.type === binaryChunkType) {\n        buffers.push(buffer.slice(info.start, info.start + info.length));\n      }\n    }\n    if (gltf) {\n      gltf._manager = assetManager;\n      gltf._loadedBuffers = buffers;\n      return this.loadJson(url, gltf);\n    }\n    return null;\n  }\n  async loadJson(url: string, gltf: GLTFContent): Promise<SharedModel> {\n    console.log(`GLTF extensions used: ${gltf.extensionsUsed || []}`);\n    gltf._accessors = [];\n    gltf._bufferCache = {};\n    gltf._textureCache = {};\n    gltf._primitiveCache = {};\n    gltf._materialCache = {};\n    gltf._accessorCache = {};\n    gltf._nodes = [];\n    gltf._meshes = [];\n    // check asset property\n    const asset = gltf.asset;\n    if (asset) {\n      const gltfVersion = asset.version;\n      if (gltfVersion !== '2.0') {\n        console.error(`Invalid GLTF version: ${gltfVersion}`);\n        return null;\n      }\n    }\n    gltf._baseURI = url.substring(0, url.lastIndexOf('/') + 1);\n    if (!gltf._loadedBuffers) {\n      gltf._loadedBuffers = [];\n      const buffers = gltf.buffers;\n      if (buffers) {\n        for (const buffer of buffers) {\n          const uri = this._normalizeURI(gltf._baseURI, buffer.uri);\n          const buf = await gltf._manager.fetchBinaryData(uri);\n          // const buf = (await new FileLoader(null, 'arraybuffer').load(uri)) as ArrayBuffer;\n          if (buffer.byteLength !== buf.byteLength) {\n            console.error(`Invalid GLTF: buffer byte length error.`);\n            return null;\n          }\n          gltf._loadedBuffers.push(buf);\n        }\n      }\n    }\n    const accessors = gltf.accessors;\n    if (accessors) {\n      for (const accessor of gltf.accessors) {\n        gltf._accessors.push(new GLTFAccessor(accessor));\n      }\n    }\n    const scenes = gltf.scenes;\n    if (scenes) {\n      const sharedModel = new SharedModel();\n      await this._loadMeshes(gltf, sharedModel);\n      this._loadNodes(gltf, sharedModel);\n      this._loadSkins(gltf, sharedModel);\n      for (let i = 0; i < gltf.nodes?.length; i++) {\n        if (typeof gltf.nodes[i].skin === 'number' && gltf.nodes[i].skin >= 0) {\n          gltf._nodes[i].skeleton = sharedModel.skeletons[gltf.nodes[i].skin];\n        }\n      }\n      this._loadAnimations(gltf, sharedModel);\n      for (const scene of scenes) {\n        const assetScene = new AssetScene(scene.name);\n        for (const node of scene.nodes) {\n          assetScene.rootNodes.push(gltf._nodes[node]);\n        }\n        sharedModel.scenes.push(assetScene);\n      }\n      if (typeof gltf.scene === 'number') {\n        sharedModel.activeScene = gltf.scene;\n      }\n      return sharedModel;\n    }\n    return null;\n  }\n  /** @internal */\n  private _normalizeURI(baseURI: string, uri: string) {\n    const s = uri.toLowerCase();\n    if (s.startsWith('http://')\n      || s.startsWith('https://')\n      || s.startsWith('blob:')\n      || s.startsWith('data:')) {\n      // absolute path\n      return encodeURI(uri);\n    }\n    uri = uri.replace(/\\.\\//g, '');\n    uri = decodeURIComponent(uri);\n    if (uri[0] === '/') {\n      uri = uri.slice(1);\n    }\n    uri = uri.split('/').map(val => encodeURIComponent(val)).join('/');\n    return baseURI + uri;\n  }\n  /** @internal */\n  private _loadNodes(gltf: GLTFContent, model: SharedModel) {\n    if (gltf.nodes) {\n      for (let i = 0; i < gltf.nodes.length; i++) {\n        this._loadNode(gltf, i, null, model);\n      }\n      for (const node of gltf._nodes) {\n        if (!node.parent) {\n          node.computeTransforms(null);\n        }\n      }\n    }\n  }\n  /** @internal */\n  private _loadSkins(gltf: GLTFContent, model: SharedModel) {\n    if (gltf.skins) {\n      for (let i = 0; i < gltf.skins.length; i++) {\n        const skinInfo = gltf.skins[i];\n        const skeleton = new AssetSkeleton(skinInfo.name);\n        if (typeof skinInfo.skeleton === 'number') {\n          skeleton.pivot = gltf._nodes[skinInfo.skeleton];\n        }\n        const accessor = gltf._accessors[skinInfo.inverseBindMatrices];\n        if (!accessor || accessor.type !== 'MAT4' || accessor.componentType !== ComponentType.FLOAT) {\n          throw new Error('Invalid GLTF inverse bind matricies accessor');\n        }\n        const matrices = typeof skinInfo.inverseBindMatrices === 'number' ? accessor.getDeinterlacedView(gltf) as Float32Array : null;\n        skinInfo.joints.forEach((joint, index) => {\n          const m = index * 16;\n          skeleton.addJoint(gltf._nodes[joint], matrices ? new Matrix4x4(matrices.subarray(m, m + 16)) : Matrix4x4.identity());\n        });\n        model.addSkeleton(skeleton);\n      }\n    }\n  }\n  /** @internal */\n  private _loadAnimations(gltf: GLTFContent, model: SharedModel) {\n    if (gltf.animations) {\n      for (let i = 0; i < gltf.animations.length; i++) {\n        const animation = this._loadAnimation(gltf, i, model);\n        model.addAnimation(animation);\n      }\n    }\n  }\n  /** @internal */\n  private collectNodes(gltf: GLTFContent): Map<AssetHierarchyNode, {\n    translate: Vector3,\n    scale: Vector3,\n    rotation: Quaternion,\n    worldTransform: Matrix4x4\n  }> {\n    const collect: Map<AssetHierarchyNode, {\n      translate: Vector3,\n      scale: Vector3,\n      rotation: Quaternion,\n      worldTransform: Matrix4x4\n    }> = new Map();\n    for (const node of gltf._nodes) {\n      collect.set(node, {\n        translate: node.position || Vector3.zero(),\n        rotation: node.rotation || Quaternion.identity(),\n        scale: node.scaling || Vector3.one(),\n        worldTransform: null\n      });\n    }\n    return collect;\n  }\n  /** @internal */\n  private updateNodeTransform(nodeTransforms: Map<AssetHierarchyNode, {\n    translate: Vector3,\n    scale: Vector3,\n    rotation: Quaternion,\n    worldTransform: Matrix4x4\n  }>, node: AssetHierarchyNode) {\n    const transform = nodeTransforms.get(node);\n    if (!transform.worldTransform) {\n      transform.worldTransform = Matrix4x4.scaling(transform.scale).rotateLeft(transform.rotation).translateLeft(transform.translate);\n      if (node.parent) {\n        this.updateNodeTransform(nodeTransforms, node.parent);\n        transform.worldTransform.multiplyLeft(nodeTransforms.get(node.parent).worldTransform);\n      }\n    }\n  }\n  /** @internal */\n  private getAnimationInfo(gltf: GLTFContent, index: number): {\n    name: string;\n    channels: AnimationChannel[],\n    samplers: AnimationSampler[],\n    interpolators: Interpolator[],\n    maxTime: number,\n    nodes: Map<AssetHierarchyNode, {\n      translate: Vector3,\n      scale: Vector3,\n      rotation: Quaternion,\n      worldTransform: Matrix4x4\n    }>\n  } {\n    const animationInfo = gltf.animations[index];\n    const name = animationInfo.name || null;\n    const channels = animationInfo.channels;\n    const samplers = animationInfo.samplers;\n    const interpolators = [] as Interpolator[];\n    const nodes = this.collectNodes(gltf);\n    let maxTime = 0;\n    for (let i = 0; i < channels.length; i++) {\n      const channel = channels[i];\n      const sampler = samplers[channel.sampler];\n      const input = gltf._accessors[sampler.input].getNormalizedDeinterlacedView(gltf);\n      const output = gltf._accessors[sampler.output].getNormalizedDeinterlacedView(gltf);\n      const mode = sampler.interpolation === 'STEP'\n        ? InterpolationMode.STEP\n        : sampler.interpolation === 'CUBICSPLINE'\n          ? InterpolationMode.CUBICSPLINE\n          : InterpolationMode.LINEAR;\n      const target = channel.target.path === 'rotation'\n        ? InterpolationTarget.ROTATION\n        : channel.target.path === 'translation'\n          ? InterpolationTarget.TRANSLATION\n          : channel.target.path === 'scale'\n            ? InterpolationTarget.SCALING\n            : InterpolationTarget.WEIGHTS;\n      // TODO: morph target animation\n      interpolators.push(new Interpolator(mode, target, input, output, 0));\n      const max = input[input.length - 1];\n      if (max > maxTime) {\n        maxTime = max;\n      }\n    }\n    return { name, channels, samplers, interpolators, maxTime, nodes };\n  }\n  /** @internal */\n  private _loadAnimation(gltf: GLTFContent, index: number, model: SharedModel): AssetAnimationData {\n    const animationInfo = this.getAnimationInfo(gltf, index);\n    const animationData: AssetAnimationData = { name: animationInfo.name, tracks: [], skeletons: [], nodes: [] };\n    for (let i = 0; i < animationInfo.channels.length; i++) {\n      const targetNode = gltf._nodes[animationInfo.channels[i].target.node];\n      animationData.tracks.push({\n        node: targetNode,\n        interpolator: animationInfo.interpolators[i]\n      });\n      if (animationData.nodes.indexOf(targetNode) < 0) {\n        animationData.nodes.push(targetNode);\n      }\n      if (targetNode.skeletonAttached && animationData.skeletons.indexOf(targetNode.skeletonAttached) < 0) {\n        animationData.skeletons.push(targetNode.skeletonAttached);\n      }\n    }\n    return animationData;\n  }\n  /** @internal */\n  private _loadNode(gltf: GLTFContent, nodeIndex: number, parent: AssetHierarchyNode, model: SharedModel): AssetHierarchyNode {\n    let node: AssetHierarchyNode = gltf._nodes[nodeIndex];\n    if (node) {\n      if (parent) {\n        if (node.parent) {\n          throw new Error('invalid node hierarchy');\n        }\n        parent.addChild(node);\n      }\n      return node;\n    }\n    const nodeInfo = gltf.nodes?.[nodeIndex];\n    if (nodeInfo) {\n      node = model.addNode(parent, nodeIndex, nodeInfo.name);\n      if (typeof nodeInfo.mesh === 'number') {\n        node.mesh = gltf._meshes[nodeInfo.mesh];\n      }\n      if (!(typeof nodeInfo.skin === 'number') || nodeInfo.skin < 0) {\n        // GLTF spec: Only the joint transforms are applied to the skinned mesh; the transform of the skinned mesh node MUST be ignored.\n        if (nodeInfo.matrix) {\n          const matrix = new Matrix4x4(nodeInfo.matrix);\n          matrix.decompose(node.scaling, node.rotation, node.position);\n        } else {\n          if (nodeInfo.rotation) {\n            node.rotation.assign(nodeInfo.rotation);\n          }\n          if (nodeInfo.scale) {\n            node.scaling.assign(nodeInfo.scale);\n          }\n          if (nodeInfo.translation) {\n            node.position.assign(nodeInfo.translation);\n          }\n        }\n      }\n      gltf._nodes[nodeIndex] = node;\n      if (nodeInfo.children) {\n        for (const childIndex of nodeInfo.children) {\n          this._loadNode(gltf, childIndex, node, model);\n        }\n      }\n    } else {\n      throw new Error(`invalid GLTF node: ${nodeIndex}`);\n    }\n    return node;\n  }\n  /** @internal */\n  private async _loadMeshes(gltf: GLTFContent, model: SharedModel) {\n    if (gltf.meshes) {\n      for (let i = 0; i < gltf.meshes.length; i++) {\n        gltf._meshes[i] = await this._loadMesh(gltf, i);\n      }\n    }\n  }\n  /** @internal */\n  private async _loadMesh(gltf: GLTFContent, meshIndex: number): Promise<AssetMeshData> {\n    const meshInfo = gltf.meshes && gltf.meshes[meshIndex];\n    let mesh: AssetMeshData = null;\n    if (meshInfo) {\n      mesh = { subMeshes: [] };\n      const primitives = meshInfo.primitives;\n      const meshName = meshInfo.name || null;\n      if (primitives) {\n        for (const p of primitives) {\n          const subMeshData: AssetSubMeshData = {\n            primitive: null,\n            material: null,\n            rawPositions: null,\n            rawBlendIndices: null,\n            rawJointWeights: null,\n          };\n          const hash = `(${Object.getOwnPropertyNames(p.attributes).sort().map(k => `${k}:${p.attributes[k]}`).join(',')})-(${p.indices})-(${p.mode})`;\n          let primitive: Primitive = p.targets ? null : gltf._primitiveCache[hash];\n          if (!primitive) {\n            primitive = new Primitive(gltf._manager.device);\n            const attributes = p.attributes;\n            for (const attrib in attributes) {\n              this._loadVertexBuffer(gltf, attrib, attributes[attrib], primitive, subMeshData);\n            }\n            const indices = p.indices;\n            if (typeof indices === 'number') {\n              this._loadIndexBuffer(gltf, indices, primitive, subMeshData);\n            }\n            let primitiveType = p.mode;\n            if (typeof primitiveType !== 'number') {\n              primitiveType = 4;\n            }\n            primitive.primitiveType = this._primitiveType(primitiveType);\n            gltf._primitiveCache[hash] = primitive;\n          }\n          const hasVertexNormal = !!primitive.getVertexBuffer('normal');\n          const hasVertexColor = !!primitive.getVertexBuffer('diffuse');\n          const hasVertexTangent = !!primitive.getVertexBuffer('tangent');\n          const materialHash = `${p.material}.${Number(hasVertexNormal)}.${Number(hasVertexColor)}.${Number(hasVertexTangent)}`;\n          let material = gltf._materialCache[materialHash];\n          if (!material) {\n            const materialInfo = p.material !== undefined ? gltf.materials[p.material] : null;\n            material = await this._loadMaterial(gltf, materialInfo, hasVertexColor, hasVertexNormal, hasVertexTangent);\n            gltf._materialCache[materialHash] = material;\n          }\n          subMeshData.primitive = primitive;\n          subMeshData.material = material;\n          mesh.subMeshes.push(subMeshData);\n        }\n      }\n    }\n    return mesh;\n  }\n  private async _createMaterial(assetManager: AssetManager, assetMaterial: AssetMaterial): Promise<StandardMaterial> {\n    if (assetMaterial.type === 'unlit') {\n      const unlitAssetMaterial = assetMaterial as AssetUnlitMaterial;\n      const unlitMaterial = new UnlitMaterial(assetManager.device);\n      unlitMaterial.lightModel.albedo = unlitAssetMaterial.diffuse ?? Vector4.one();\n      if (unlitAssetMaterial.diffuseMap) {\n        unlitMaterial.lightModel.setAlbedoMap(unlitAssetMaterial.diffuseMap.texture, unlitAssetMaterial.diffuseMap.sampler, unlitAssetMaterial.diffuseMap.texCoord, unlitAssetMaterial.diffuseMap.transform);\n      }\n      unlitMaterial.vertexColor = unlitAssetMaterial.common.vertexColor;\n      if (assetMaterial.common.alphaMode === 'blend') {\n        unlitMaterial.alphaBlend = true;\n      } else if (assetMaterial.common.alphaMode === 'mask') {\n        unlitMaterial.alphaCutoff = assetMaterial.common.alphaCutoff;\n      }\n      if (assetMaterial.common.doubleSided) {\n        const rasterizerState = unlitMaterial.stateSet.useRasterizerState();\n        rasterizerState.setCullMode(FaceMode.NONE);\n      }\n      unlitMaterial.vertexNormal = !!assetMaterial.common.vertexNormal;\n      return unlitMaterial;\n    } else if (assetMaterial.type === 'pbrSpecularGlossiness') {\n      const assetPBRMaterial = assetMaterial as AssetPBRMaterialSG;\n      const pbrMaterial = new PBRSpecularGlossinessMaterial(assetManager.device);\n      pbrMaterial.lightModel.ior = assetPBRMaterial.ior;\n      pbrMaterial.lightModel.albedo = assetPBRMaterial.diffuse;\n      pbrMaterial.lightModel.specularFactor = new Vector4(assetPBRMaterial.specular.x, assetPBRMaterial.specular.y, assetPBRMaterial.specular.z, 1);\n      pbrMaterial.lightModel.glossinessFactor = assetPBRMaterial.glossness;\n      if (assetPBRMaterial.diffuseMap) {\n        pbrMaterial.lightModel.setAlbedoMap(assetPBRMaterial.diffuseMap.texture, assetPBRMaterial.diffuseMap.sampler, assetPBRMaterial.diffuseMap.texCoord, assetPBRMaterial.diffuseMap.transform);\n      }\n      if (assetPBRMaterial.common.normalMap) {\n        pbrMaterial.lightModel.setNormalMap(assetPBRMaterial.common.normalMap.texture, assetPBRMaterial.common.normalMap.sampler, assetPBRMaterial.common.normalMap.texCoord, assetPBRMaterial.common.normalMap.transform);\n      }\n      pbrMaterial.lightModel.normalScale = assetPBRMaterial.common.bumpScale;\n      if (assetPBRMaterial.common.emissiveMap) {\n        pbrMaterial.lightModel.setEmissiveMap(assetPBRMaterial.common.emissiveMap.texture, assetPBRMaterial.common.emissiveMap.sampler, assetPBRMaterial.common.emissiveMap.texCoord, assetPBRMaterial.common.emissiveMap.transform);\n      }\n      pbrMaterial.lightModel.emissiveColor = assetPBRMaterial.common.emissiveColor;\n      pbrMaterial.lightModel.emissiveStrength = assetPBRMaterial.common.emissiveStrength;\n      if (assetPBRMaterial.common.occlusionMap) {\n        pbrMaterial.lightModel.setOcclusionMap(assetPBRMaterial.common.occlusionMap.texture, assetPBRMaterial.common.occlusionMap.sampler, assetPBRMaterial.common.occlusionMap.texCoord, assetPBRMaterial.common.occlusionMap.transform);\n      }\n      pbrMaterial.lightModel.occlusionStrength = assetPBRMaterial.common.occlusionStrength;\n      if (assetPBRMaterial.specularGlossnessMap) {\n        pbrMaterial.lightModel.setSpecularMap(assetPBRMaterial.specularGlossnessMap.texture, assetPBRMaterial.specularGlossnessMap.sampler, assetPBRMaterial.specularGlossnessMap.texCoord, assetPBRMaterial.specularGlossnessMap.transform);\n      }\n      pbrMaterial.vertexTangent = assetPBRMaterial.common.useTangent;\n      pbrMaterial.vertexColor = assetPBRMaterial.common.vertexColor;\n      if (assetPBRMaterial.common.alphaMode === 'blend') {\n        pbrMaterial.alphaBlend = true;\n      } else if (assetPBRMaterial.common.alphaMode === 'mask') {\n        pbrMaterial.alphaCutoff = assetPBRMaterial.common.alphaCutoff;\n      }\n      if (assetPBRMaterial.common.doubleSided) {\n        const rasterizerState = pbrMaterial.stateSet.useRasterizerState();\n        rasterizerState.setCullMode(FaceMode.NONE);\n      }\n      pbrMaterial.vertexNormal = !!assetMaterial.common.vertexNormal;\n      return pbrMaterial;\n    } else if (assetMaterial.type === 'pbrMetallicRoughness') {\n      const assetPBRMaterial = assetMaterial as AssetPBRMaterialMR;\n      const pbrMaterial = new PBRMetallicRoughnessMaterial(assetManager.device);\n      pbrMaterial.lightModel.ior = assetPBRMaterial.ior;\n      pbrMaterial.lightModel.albedo = assetPBRMaterial.diffuse;\n      pbrMaterial.lightModel.metallic = assetPBRMaterial.metallic;\n      pbrMaterial.lightModel.roughness = assetPBRMaterial.roughness;\n      if (assetPBRMaterial.diffuseMap) {\n        pbrMaterial.lightModel.setAlbedoMap(assetPBRMaterial.diffuseMap.texture, assetPBRMaterial.diffuseMap.sampler, assetPBRMaterial.diffuseMap.texCoord, assetPBRMaterial.diffuseMap.transform);\n      }\n      if (assetPBRMaterial.common.normalMap) {\n        pbrMaterial.lightModel.setNormalMap(assetPBRMaterial.common.normalMap.texture, assetPBRMaterial.common.normalMap.sampler, assetPBRMaterial.common.normalMap.texCoord, assetPBRMaterial.common.normalMap.transform);\n      }\n      pbrMaterial.lightModel.normalScale = assetPBRMaterial.common.bumpScale;\n      if (assetPBRMaterial.common.emissiveMap) {\n        pbrMaterial.lightModel.setEmissiveMap(assetPBRMaterial.common.emissiveMap.texture, assetPBRMaterial.common.emissiveMap.sampler, assetPBRMaterial.common.emissiveMap.texCoord, assetPBRMaterial.common.emissiveMap.transform);\n      }\n      pbrMaterial.lightModel.emissiveColor = assetPBRMaterial.common.emissiveColor;\n      pbrMaterial.lightModel.emissiveStrength = assetPBRMaterial.common.emissiveStrength;\n      if (assetPBRMaterial.common.occlusionMap) {\n        pbrMaterial.lightModel.setOcclusionMap(assetPBRMaterial.common.occlusionMap.texture, assetPBRMaterial.common.occlusionMap.sampler, assetPBRMaterial.common.occlusionMap.texCoord, assetPBRMaterial.common.occlusionMap.transform);\n      }\n      pbrMaterial.lightModel.occlusionStrength = assetPBRMaterial.common.occlusionStrength;\n      if (assetPBRMaterial.metallicMap) {\n        pbrMaterial.lightModel.setMetallicMap(assetPBRMaterial.metallicMap.texture, assetPBRMaterial.metallicMap.sampler, assetPBRMaterial.metallicMap.texCoord, assetPBRMaterial.metallicMap.transform);\n      }\n      pbrMaterial.lightModel.metallicIndex = assetPBRMaterial.metallicIndex;\n      pbrMaterial.lightModel.roughnessIndex = assetPBRMaterial.roughnessIndex;\n      pbrMaterial.lightModel.specularFactor = assetPBRMaterial.specularFactor;\n      if (assetPBRMaterial.specularMap) {\n        pbrMaterial.lightModel.setSpecularMap(assetPBRMaterial.specularMap.texture, assetPBRMaterial.specularMap.sampler, assetPBRMaterial.specularMap.texCoord, assetPBRMaterial.specularMap.transform);\n      }\n      if (assetPBRMaterial.specularColorMap) {\n        pbrMaterial.lightModel.setSpecularColorMap(assetPBRMaterial.specularColorMap.texture, assetPBRMaterial.specularColorMap.sampler, assetPBRMaterial.specularColorMap.texCoord, assetPBRMaterial.specularColorMap.transform);\n      }\n      if (assetPBRMaterial.sheen) {\n        const sheen = assetPBRMaterial.sheen;\n        pbrMaterial.lightModel.useSheen = true;\n        pbrMaterial.lightModel.sheenColorFactor = sheen.sheenColorFactor;\n        pbrMaterial.lightModel.sheenRoughnessFactor = sheen.sheenRoughnessFactor;\n        pbrMaterial.lightModel.setSheenLut(await assetManager.fetchBuiltinTexture(BUILTIN_ASSET_TEXTURE_SHEEN_LUT));\n        if (sheen.sheenColorMap) {\n          pbrMaterial.lightModel.setSheenColorMap(sheen.sheenColorMap.texture, sheen.sheenColorMap.sampler, sheen.sheenColorMap.texCoord, sheen.sheenColorMap.transform);\n        }\n        if (sheen.sheenRoughnessMap) {\n          pbrMaterial.lightModel.setSheenRoughnessMap(sheen.sheenRoughnessMap.texture, sheen.sheenRoughnessMap.sampler, sheen.sheenRoughnessMap.texCoord, sheen.sheenRoughnessMap.transform)\n        }\n      }\n      if (assetPBRMaterial.clearcoat) {\n        const cc = assetPBRMaterial.clearcoat;\n        pbrMaterial.lightModel.useClearcoat = true;\n        pbrMaterial.lightModel.clearcoatIntensity = cc.clearCoatFactor;\n        pbrMaterial.lightModel.clearcoatRoughnessFactor = cc.clearCoatRoughnessFactor;\n        if (cc.clearCoatIntensityMap) {\n          pbrMaterial.lightModel.setClearcoatIntensityMap(cc.clearCoatIntensityMap.texture, cc.clearCoatIntensityMap.sampler, cc.clearCoatIntensityMap.texCoord, cc.clearCoatIntensityMap.transform);\n        }\n        if (cc.clearCoatRoughnessMap) {\n          pbrMaterial.lightModel.setClearcoatRoughnessMap(cc.clearCoatRoughnessMap.texture, cc.clearCoatRoughnessMap.sampler, cc.clearCoatRoughnessMap.texCoord, cc.clearCoatRoughnessMap.transform);\n        }\n        if (cc.clearCoatNormalMap) {\n          pbrMaterial.lightModel.setClearcoatNormalMap(cc.clearCoatNormalMap.texture, cc.clearCoatNormalMap.sampler, cc.clearCoatNormalMap.texCoord, cc.clearCoatNormalMap.transform);\n        }\n      }\n      pbrMaterial.vertexTangent = assetPBRMaterial.common.useTangent;\n      pbrMaterial.vertexColor = assetPBRMaterial.common.vertexColor;\n      if (assetPBRMaterial.common.alphaMode === 'blend') {\n        pbrMaterial.alphaBlend = true;\n      } else if (assetPBRMaterial.common.alphaMode === 'mask') {\n        pbrMaterial.alphaCutoff = assetPBRMaterial.common.alphaCutoff;\n      }\n      if (assetPBRMaterial.common.doubleSided) {\n        const rasterizerState = pbrMaterial.stateSet.useRasterizerState();\n        rasterizerState.setCullMode(FaceMode.NONE);\n      }\n      pbrMaterial.vertexNormal = !!assetMaterial.common.vertexNormal;\n      return pbrMaterial;\n    }\n  }\n  /** @internal */\n  private async _loadMaterial(gltf: GLTFContent, materialInfo: Material, vertexColor: boolean, vertexNormal: boolean, useTangent: boolean): Promise<StandardMaterial> {\n    let assetMaterial: AssetMaterial = null;\n    let pbrMetallicRoughness: AssetPBRMaterialMR = null;\n    let pbrSpecularGlossness: AssetPBRMaterialSG = null;\n    const pbrCommon: AssetMaterialCommon = {\n      useTangent,\n      vertexColor,\n      vertexNormal,\n      bumpScale: 1,\n      emissiveColor: Vector3.zero(),\n      emissiveStrength: 1,\n      occlusionStrength: 1,\n    };\n    switch (materialInfo?.alphaMode) {\n      case 'BLEND': {\n        pbrCommon.alphaMode = 'blend';\n        break;\n      }\n      case 'MASK': {\n        pbrCommon.alphaMode = 'mask';\n        pbrCommon.alphaCutoff = materialInfo.alphaCutoff ?? 0.5;\n        break;\n      }\n    }\n    if (materialInfo?.doubleSided) {\n      pbrCommon.doubleSided = true;\n    }\n    if (materialInfo?.pbrMetallicRoughness || materialInfo?.extensions?.KHR_materials_pbrSpecularGlossiness) {\n      pbrCommon.normalMap = materialInfo.normalTexture ? await this._loadTexture(gltf, materialInfo.normalTexture, false) : null;\n      pbrCommon.bumpScale = materialInfo.normalTexture?.scale ?? 1;\n      pbrCommon.occlusionMap = materialInfo.occlusionTexture ? await this._loadTexture(gltf, materialInfo.occlusionTexture, false) : null;\n      pbrCommon.occlusionStrength = materialInfo.occlusionTexture?.strength ?? 1;\n      pbrCommon.emissiveMap = materialInfo.emissiveTexture ? await this._loadTexture(gltf, materialInfo.emissiveTexture, false) : null;\n      pbrCommon.emissiveStrength = materialInfo?.extensions?.KHR_materials_emissive_strength?.emissiveStrength ?? 1;\n      pbrCommon.emissiveColor = materialInfo.emissiveFactor ? new Vector3(materialInfo.emissiveFactor) : Vector3.zero();\n    }\n    if (materialInfo?.pbrMetallicRoughness) {\n      pbrMetallicRoughness = {\n        type: 'pbrMetallicRoughness',\n        ior: 1.5,\n        common: pbrCommon,\n      };\n      pbrMetallicRoughness.diffuse = new Vector4(materialInfo.pbrMetallicRoughness.baseColorFactor ?? [1, 1, 1, 1]);\n      pbrMetallicRoughness.metallic = materialInfo.pbrMetallicRoughness.metallicFactor ?? 1;\n      pbrMetallicRoughness.roughness = materialInfo.pbrMetallicRoughness.roughnessFactor ?? 1;\n      pbrMetallicRoughness.diffuseMap = materialInfo.pbrMetallicRoughness.baseColorTexture ? await this._loadTexture(gltf, materialInfo.pbrMetallicRoughness.baseColorTexture, true) : null;\n      pbrMetallicRoughness.metallicMap = materialInfo.pbrMetallicRoughness.metallicRoughnessTexture ? await this._loadTexture(gltf, materialInfo.pbrMetallicRoughness.metallicRoughnessTexture, false) : null;\n      pbrMetallicRoughness.metallicIndex = 2;\n      pbrMetallicRoughness.roughnessIndex = 1;\n    }\n    if (materialInfo?.extensions?.KHR_materials_pbrSpecularGlossiness) {\n      const sg = materialInfo.extensions?.KHR_materials_pbrSpecularGlossiness;\n      pbrSpecularGlossness = {\n        type: 'pbrSpecularGlossiness',\n        ior: 1.5,\n        common: pbrCommon,\n      };\n      pbrSpecularGlossness.diffuse = new Vector4(sg.diffuseFactor ?? [1, 1, 1, 1]);\n      pbrSpecularGlossness.specular = new Vector3(sg.specularFactor ?? [1, 1, 1]);\n      pbrSpecularGlossness.glossness = sg.glossnessFactor ?? 1;\n      pbrSpecularGlossness.diffuseMap = sg.diffuseTexture ? await this._loadTexture(gltf, sg.diffuseTexture, true) : null;\n      pbrSpecularGlossness.specularGlossnessMap = sg.specularGlossinessTexture ? await this._loadTexture(gltf, sg.specularGlossinessTexture, true) : null;\n    }\n    assetMaterial = pbrSpecularGlossness || pbrMetallicRoughness;\n    if (!assetMaterial || materialInfo?.extensions?.KHR_materials_unlit) {\n      if (materialInfo?.extensions?.KHR_materials_unlit) {\n        assetMaterial = {\n          type: 'unlit',\n          common: pbrCommon,\n          diffuse: pbrMetallicRoughness?.diffuse ?? Vector4.one(),\n          diffuseMap: pbrMetallicRoughness?.diffuseMap ?? null,\n        } as AssetUnlitMaterial;\n      } else {\n        assetMaterial = {\n          type: 'pbrMetallicRoughness',\n          common: pbrCommon,\n          diffuse: Vector4.one(),\n          metallic: 1,\n          roughness: 1,\n          diffuseMap: null,\n          metallicMap: null,\n          metallicIndex: 2,\n          roughnessIndex: 1,\n        } as AssetPBRMaterialMR;\n      }\n    }\n    if (assetMaterial.type !== 'unlit' && materialInfo?.extensions?.KHR_materials_ior) {\n      (assetMaterial as AssetPBRMaterialCommon).ior = materialInfo.extensions.KHR_materials_ior.ior ?? 1.5;\n    }\n    if (assetMaterial.type === 'pbrMetallicRoughness') {\n      pbrMetallicRoughness = assetMaterial;\n      // KHR_materials_specular extension\n      pbrMetallicRoughness.specularFactor = new Vector4(new Vector3(materialInfo?.extensions?.KHR_materials_specular?.specularColorFactor ?? [1, 1, 1]), materialInfo?.extensions?.KHR_materials_specular?.specularFactor ?? 1);\n      pbrMetallicRoughness.specularMap = materialInfo?.extensions?.KHR_materials_specular?.specularTexture ? await this._loadTexture(gltf, materialInfo.extensions.KHR_materials_specular.specularTexture, false) : null;\n      pbrMetallicRoughness.specularColorMap = materialInfo?.extensions?.KHR_materials_specular?.specularColorTexture ? await this._loadTexture(gltf, materialInfo.extensions.KHR_materials_specular.specularColorTexture, true) : null;\n      // KHR_materials_sheen\n      const sheen = materialInfo?.extensions?.KHR_materials_sheen;\n      if (sheen) {\n        pbrMetallicRoughness.sheen = {\n          sheenColorFactor: new Vector3(sheen.sheenColorFactor ?? [0, 0, 0]),\n          sheenColorMap: sheen.sheenColorTexture ? await this._loadTexture(gltf, sheen.sheenColorTexture, true) : null,\n          sheenRoughnessFactor: sheen.sheenRoughnessFactor ?? 0,\n          sheenRoughnessMap: sheen.sheenRoughnessTexture ? await this._loadTexture(gltf, sheen.sheenRoughnessTexture, true) : null,\n        };\n      }\n      // KHR_materials_clearcoat\n      const cc = materialInfo?.extensions?.KHR_materials_clearcoat;\n      if (cc) {\n        pbrMetallicRoughness.clearcoat = {\n          clearCoatFactor: cc.clearcoatFactor ?? 0,\n          clearCoatIntensityMap: cc.clearcoatTexture ? await this._loadTexture(gltf, cc.clearcoatTexture, false) : null,\n          clearCoatRoughnessFactor: cc.clearcoatRoughnessFactor ?? 0,\n          clearCoatRoughnessMap: cc.clearcoatRoughnessTexture ? await this._loadTexture(gltf, cc.clearcoatRoughnessTexture, false) : null,\n          clearCoatNormalMap: cc.clearcoatNormalTexture ? await this._loadTexture(gltf, cc.clearcoatNormalTexture, false) : null\n        };\n      }\n    }\n    return await this._createMaterial(gltf._manager, assetMaterial);\n  }\n  /** @internal */\n  private async _loadTexture(gltf: GLTFContent, info: Partial<TextureInfo>, sRGB: boolean): Promise<MaterialTextureInfo> {\n    const mt: MaterialTextureInfo = {\n      texture: null,\n      sampler: null,\n      texCoord: info.texCoord ?? 0,\n      transform: null\n    };\n    const textureInfo = gltf.textures[info.index];\n    if (textureInfo) {\n      if (info.extensions?.KHR_texture_transform) {\n        const uvTransform = info.extensions.KHR_texture_transform;\n        if (uvTransform.texCoord !== undefined) {\n          mt.texCoord = uvTransform.texCoord;\n        }\n        const rotation = uvTransform.rotation !== undefined\n          ? Matrix4x4.rotationZ(-uvTransform.rotation)\n          : Matrix4x4.identity();\n        const scale = uvTransform.scale !== undefined\n          ? new Vector3(uvTransform.scale[0], uvTransform.scale[1], 1)\n          : Vector3.one();\n        const translation = uvTransform.offset !== undefined\n          ? new Vector3(uvTransform.offset[0], uvTransform.offset[1], 0)\n          : Vector3.zero();\n        mt.transform = Matrix4x4.scaling(scale).multiplyLeft(rotation).translateLeft(translation);\n      }\n      let wrapS: TextureWrapping = TextureWrapping.Repeat;\n      let wrapT: TextureWrapping = TextureWrapping.Repeat;\n      let magFilter: TextureFilter = TextureFilter.Linear;\n      let minFilter: TextureFilter = TextureFilter.Linear;\n      let mipFilter: TextureFilter = TextureFilter.Linear;\n      const samplerIndex: number = textureInfo.sampler;\n      const sampler = gltf.samplers && gltf.samplers[samplerIndex];\n      if (sampler) {\n        switch (sampler.wrapS) {\n          case 0x2901: // gl.REPEAT\n            wrapS = TextureWrapping.Repeat;\n            break;\n          case 0x8370: // gl.MIRRORED_REPEAT\n            wrapS = TextureWrapping.MirroredRepeat;\n            break;\n          case 0x812f: // gl.CLAMP_TO_EDGE\n            wrapS = TextureWrapping.ClampToEdge;\n            break;\n        }\n        switch (sampler.wrapT) {\n          case 0x2901: // gl.REPEAT\n            wrapT = TextureWrapping.Repeat;\n            break;\n          case 0x8370: // gl.MIRRORED_REPEAT\n            wrapT = TextureWrapping.MirroredRepeat;\n            break;\n          case 0x812f: // gl.CLAMP_TO_EDGE\n            wrapT = TextureWrapping.ClampToEdge;\n            break;\n        }\n        switch (sampler.magFilter) {\n          case 0x2600: // gl.NEAREST\n            magFilter = TextureFilter.Nearest;\n            break;\n          case 0x2601: // gl.LINEAR\n            magFilter = TextureFilter.Linear;\n            break;\n        }\n        switch (sampler.minFilter) {\n          case 0x2600: // gl.NEAREST\n            minFilter = TextureFilter.Nearest;\n            mipFilter = TextureFilter.None;\n            break;\n          case 0x2601: // gl.LINEAR\n            minFilter = TextureFilter.Linear;\n            mipFilter = TextureFilter.None;\n            break;\n          case 0x2700: // gl.NEAREST_MIPMAP_NEAREST\n            minFilter = TextureFilter.Nearest;\n            mipFilter = TextureFilter.Nearest;\n            break;\n          case 0x2701: // gl.LINEAR_MIPMAP_NEAREST\n            minFilter = TextureFilter.Linear;\n            mipFilter = TextureFilter.Nearest;\n            break;\n          case 0x2702: // gl.NEAREST_MIPMAP_LINEAR\n            minFilter = TextureFilter.Nearest;\n            mipFilter = TextureFilter.Linear;\n            break;\n          case 0x2703: // gl.LINEAR_MIPMAP_LINEAR\n            minFilter = TextureFilter.Linear;\n            mipFilter = TextureFilter.Linear;\n            break;\n        }\n      }\n      const imageIndex: number = textureInfo.source;\n      const hash = `${imageIndex}:${!!sRGB}:${wrapS}:${wrapT}:${minFilter}:${magFilter}:${mipFilter}`;\n      mt.texture = gltf._textureCache[hash];\n      if (!mt.texture) {\n        const image = gltf.images[imageIndex];\n        if (image) {\n          if (image.uri) {\n            const imageUrl = this._normalizeURI(gltf._baseURI, image.uri);\n            mt.texture = await gltf._manager.fetchTexture(imageUrl, null, sRGB);\n            mt.texture.name = imageUrl;\n          } else if (typeof image.bufferView === 'number' && image.mimeType) {\n            const bufferView = gltf.bufferViews && gltf.bufferViews[image.bufferView];\n            if (bufferView) {\n              const arrayBuffer = gltf._loadedBuffers && gltf._loadedBuffers[bufferView.buffer];\n              if (arrayBuffer) {\n                const view = new Uint8Array(\n                  arrayBuffer,\n                  bufferView.byteOffset || 0,\n                  bufferView.byteLength,\n                );\n                const mimeType = image.mimeType;\n                const blob = new Blob([view], { type: mimeType });\n                const sourceURI = URL.createObjectURL(blob);\n                mt.texture = await gltf._manager.fetchTexture(sourceURI, mimeType, sRGB);\n                URL.revokeObjectURL(sourceURI);\n              }\n            }\n          }\n        }\n        if (mt.texture) {\n          gltf._textureCache[hash] = mt.texture;\n        }\n      }\n      if (mt.texture) {\n        mt.sampler = gltf._manager.device.createSampler({\n          addressU: wrapS,\n          addressV: wrapT,\n          magFilter: magFilter,\n          minFilter: minFilter,\n          mipFilter: mipFilter,\n        });\n      }\n    }\n    return mt;\n  }\n  /** @internal */\n  private _primitiveType(type: number): PrimitiveType {\n    switch (type) {\n      case 0: // GL_POINTS\n        return PrimitiveType.PointList;\n      case 1: // GL_LINES\n        return PrimitiveType.LineList;\n      /* FIXME:\n      case 2: // GL_LINE_LOOP\n        return PrimitiveType.LineLoop;\n      */\n      case 3: // GL_LINE_STRIP\n        return PrimitiveType.LineStrip;\n      case 4: // GL_TRIANGLES\n        return PrimitiveType.TriangleList;\n      case 5: // GL_TRIANGLE_STRIP\n        return PrimitiveType.TriangleStrip;\n      case 6: // GL_TRIANGLE_FAN\n        return PrimitiveType.TriangleFan;\n      default:\n        return PrimitiveType.Unknown;\n    }\n  }\n  /** @internal */\n  private _loadIndexBuffer(gltf: GLTFContent, accessorIndex: number, primitive: Primitive, meshData: AssetSubMeshData) {\n    this._setBuffer(gltf, accessorIndex, primitive, -1, meshData);\n  }\n  /** @internal */\n  private _loadVertexBuffer(\n    gltf: GLTFContent,\n    attribName: string,\n    accessorIndex: number,\n    primitive: Primitive,\n    subMeshData: AssetSubMeshData\n  ) {\n    let semantic: number;\n    switch (attribName) {\n      case 'POSITION':\n        semantic = VERTEX_ATTRIB_POSITION;\n        break;\n      case 'NORMAL':\n        semantic = VERTEX_ATTRIB_NORMAL;\n        break;\n      case 'TANGENT':\n        semantic = VERTEX_ATTRIB_TANGENT;\n        break;\n      case 'TEXCOORD_0':\n        semantic = VERTEX_ATTRIB_TEXCOORD0;\n        break;\n      case 'TEXCOORD_1':\n        semantic = VERTEX_ATTRIB_TEXCOORD1;\n        break;\n      case 'TEXCOORD_2':\n        semantic = VERTEX_ATTRIB_TEXCOORD2;\n        break;\n      case 'TEXCOORD_3':\n        semantic = VERTEX_ATTRIB_TEXCOORD3;\n        break;\n      case 'TEXCOORD_4':\n        semantic = VERTEX_ATTRIB_TEXCOORD4;\n        break;\n      case 'TEXCOORD_5':\n        semantic = VERTEX_ATTRIB_TEXCOORD5;\n        break;\n      case 'TEXCOORD_6':\n        semantic = VERTEX_ATTRIB_TEXCOORD6;\n        break;\n      case 'TEXCOORD_7':\n        semantic = VERTEX_ATTRIB_TEXCOORD7;\n        break;\n      case 'COLOR_0':\n        semantic = VERTEX_ATTRIB_DIFFUSE;\n        break;\n      case 'JOINTS_0':\n        semantic = VERTEX_ATTRIB_BLEND_INDICES;\n        break;\n      case 'WEIGHTS_0':\n        semantic = VERTEX_ATTRIB_BLEND_WEIGHT;\n        break;\n      default:\n        return;\n    }\n    this._setBuffer(gltf, accessorIndex, primitive, semantic, subMeshData);\n  }\n  /** @internal */\n  private _setBuffer(gltf: GLTFContent, accessorIndex: number, primitive: Primitive, semantic: number, subMeshData: AssetSubMeshData) {\n    const accessor = gltf._accessors[accessorIndex];\n    const normalized = !!accessor.normalized;\n    const hash = `${accessorIndex}:${semantic >= 0}:${Number(normalized)}`;\n    let buffer = gltf._bufferCache[hash];\n    if (!buffer) {\n      let data = accessor.getTypedView(gltf);\n      let ctype: number;\n      let typeMask: number;\n      if (data instanceof Int8Array) {\n        ctype = ComponentType.BYTE;\n        typeMask = I8_BITMASK;\n      } else if (data instanceof Uint8Array) {\n        ctype = ComponentType.UBYTE;\n        typeMask = U8_BITMASK;\n      } else if (data instanceof Int16Array) {\n        ctype = ComponentType.SHORT;\n        typeMask = I16_BITMASK;\n      } else if (data instanceof Uint16Array) {\n        ctype = ComponentType.USHORT;\n        typeMask = U16_BITMASK;\n      } else if (data instanceof Int32Array) {\n        ctype = ComponentType.INT;\n        typeMask = I32_BITMASK;\n      } else if (data instanceof Uint32Array) {\n        ctype = ComponentType.UINT;\n        typeMask = U32_BITMASK;\n      } else if (data instanceof Float32Array) {\n        ctype = ComponentType.FLOAT;\n        typeMask = F32_BITMASK;\n      } else {\n        throw new Error('invalid buffer data type');\n      }\n      const componentCount = accessor.getComponentCount(accessor.type);\n      if (semantic >= 0 && ctype !== ComponentType.FLOAT) {\n        const floatData = new Float32Array(data.length);\n        floatData.set(data);\n        ctype = ComponentType.FLOAT;\n        typeMask = F32_BITMASK;\n        data = floatData;\n      }\n      if (semantic < 0) {\n        if (ctype !== ComponentType.UBYTE && ctype !== ComponentType.USHORT && ctype !== ComponentType.UINT) {\n          throw new Error(`Invalid index buffer component type: ${ctype}`);\n        }\n        if (ctype === ComponentType.UINT && !gltf._manager.device.getMiscCaps().support32BitIndex) {\n          throw new Error('Device does not support 32bit vertex index');\n        }\n        if (ctype === ComponentType.UBYTE) {\n          const uint16Data = new Uint16Array(data.length);\n          uint16Data.set(data);\n          ctype = ComponentType.USHORT;\n          typeMask = U16_BITMASK;\n          data = uint16Data;\n        }\n      }\n      if (semantic < 0) {\n        buffer = gltf._manager.device.createIndexBuffer(data as Uint16Array | Uint32Array, { managed: true });\n      } else {\n        const name = getVertexAttribName(semantic);\n        const bufferType = new PBStructTypeInfo(null, 'packed', [{\n          name: name,\n          type: new PBArrayTypeInfo(PBPrimitiveTypeInfo.getCachedTypeInfo(makePrimitiveType(typeMask, 1, componentCount, 0)), data.length / componentCount),\n        }]);\n        buffer = gltf._manager.device.createStructuredBuffer(bufferType, { usage: 'vertex', managed: true }, data);\n      }\n      gltf._bufferCache[hash] = buffer;\n    }\n    if (buffer) {\n      if (semantic < 0) {\n        primitive.setIndexBuffer(buffer as IndexBuffer);\n        primitive.indexCount = (buffer as IndexBuffer).length;\n      } else {\n        primitive.setVertexBuffer(buffer as StructuredBuffer);\n        if (semantic === VERTEX_ATTRIB_POSITION) {\n          if (!primitive.getIndexBuffer()) {\n            primitive.indexCount = Math.floor(buffer.byteLength / 12);\n          }\n          const data = accessor.getNormalizedDeinterlacedView(gltf);\n          subMeshData.rawPositions = data as Float32Array;\n          const min = accessor.min;\n          const max = accessor.max;\n          if (min && max) {\n            primitive.setBoundingVolume(new BoundingBox(new Vector3(min), new Vector3(max)));\n          } else {\n            const numComponents = getVertexBufferAttribType((buffer as StructuredBuffer).structure, semantic).cols;\n            const bbox = new BoundingBox();\n            bbox.beginExtend();\n            for (let i = 0; i < data.length; i++) {\n              const v = new Vector3(\n                data[i * numComponents],\n                data[i * numComponents + 1],\n                data[i * numComponents + 2],\n              );\n              bbox.extend(v);\n            }\n            if (bbox.isValid()) {\n              primitive.setBoundingVolume(bbox);\n            }\n          }\n        } else if (semantic === VERTEX_ATTRIB_BLEND_INDICES) {\n          subMeshData.rawBlendIndices = accessor.getNormalizedDeinterlacedView(gltf);\n        } else if (semantic === VERTEX_ATTRIB_BLEND_WEIGHT) {\n          subMeshData.rawJointWeights = accessor.getNormalizedDeinterlacedView(gltf);\n        }\n      }\n    }\n    return buffer;\n  }\n  /** @internal */\n  private isGLB(data: ArrayBuffer): boolean {\n    if (data.byteLength > 12) {\n      const p = new Uint32Array(data, 0, 3);\n      if (p[0] === 0x46546C67 && p[1] === 2 && p[2] === data.byteLength) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /** @internal */\n  private getGLBChunkInfo(data: ArrayBuffer, offset: number): { start: number, length: number, type: number } {\n    const header = new Uint32Array(data, offset, 2);\n    const start = offset + 8;\n    const length = header[0];\n    const type = header[1];\n    return { start, length, type };\n  }\n  /** @internal */\n  private getGLBChunkInfos(data: ArrayBuffer): { start: number, length: number, type: number }[] {\n    const infos: { start: number, length: number, type: number }[] = [];\n    let offset = 12;\n    while (offset < data.byteLength) {\n      const info = this.getGLBChunkInfo(data, offset);\n      infos.push(info);\n      offset += info.length + 8;\n    }\n    return infos;\n  }\n}\n"],"names":[],"mappings":"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"}