{"version":3,"file":"helpers.js","sources":["../../../../../../../libs/device/src/scene/asset/loaders/gltf/helpers.ts"],"sourcesContent":["import { Accessor, AccessorSparse } from \"./gltf\";\r\nimport { I8_BITMASK, U8_BITMASK, I16_BITMASK, U16_BITMASK, I32_BITMASK, U32_BITMASK, F32_BITMASK } from \"../../../../device/builder\";\r\nimport type { GLTFContent } from \"./gltf_loader\";\r\nimport type { TypedArray } from \"../../../../misc\";\r\n\r\nexport const enum ComponentType {\r\n  UNKNOWN = 0,\r\n  BYTE = 5120, // GL.BYTE\r\n  UBYTE = 5121, // GL.UNSIGNED_BYTE\r\n  SHORT = 5122, // GL.SHORT\r\n  USHORT = 5123, // GL.UNSIGNED_SHORT\r\n  INT = 5124, // GL.INT\r\n  UINT = 5125, // GL.UNSIGNED_INT\r\n  FLOAT = 5126, // GL.FLOAT\r\n};\r\n\r\nexport type GLTFComponentType = 'SCALAR' | 'VEC2' | 'VEC3' | 'VEC4' | 'MAT2' | 'MAT3' | 'MAT4';\r\n\r\nexport class GLTFAccessor {\r\n  bufferView: number;\r\n  byteOffset: number;\r\n  typeMask: number;\r\n  componentType: ComponentType;\r\n  normalized: boolean;\r\n  count: number;\r\n  type: GLTFComponentType;\r\n  max: number[];\r\n  min: number[];\r\n  sparse: AccessorSparse;\r\n  name: string;\r\n  private _typedView: TypedArray;\r\n  private _filteredView: TypedArray;\r\n  private _normalizedFilteredView: TypedArray;\r\n  private _normalizedTypedView: TypedArray;\r\n  constructor(accessorInfo: Accessor) {\r\n    this.bufferView = accessorInfo.bufferView;\r\n    this.byteOffset = accessorInfo.byteOffset ?? 0;\r\n    this.componentType = accessorInfo.componentType;\r\n    this.typeMask = this.getTypeMask(this.componentType);\r\n    this.normalized = !!accessorInfo.normalized;\r\n    this.count = accessorInfo.count;\r\n    this.type = accessorInfo.type;\r\n    this.max = accessorInfo.max;\r\n    this.min = accessorInfo.min;\r\n    this.sparse = accessorInfo.sparse;\r\n    this.name = accessorInfo.name;\r\n    this._typedView = null;\r\n    this._filteredView = null;\r\n    this._normalizedFilteredView = null;\r\n    this._normalizedTypedView = null;\r\n  }\r\n  getTypedView(gltf: GLTFContent) {\r\n    if (this._typedView) {\r\n      return this._typedView;\r\n    }\r\n\r\n    if (this.bufferView !== undefined) {\r\n      const bufferView = gltf.bufferViews[this.bufferView];\r\n      const buffer = gltf._loadedBuffers[bufferView.buffer];\r\n      const byteOffset = this.byteOffset + (bufferView.byteOffset ?? 0);\r\n\r\n      const componentSize = this.getComponentSize(this.componentType);\r\n      const componentCount = this.getComponentCount(this.type);\r\n\r\n      let arrayLength = 0;\r\n      if (bufferView.byteStride !== undefined && bufferView.byteStride !== 0) {\r\n        if (componentSize !== 0) {\r\n          arrayLength = bufferView.byteStride / componentSize * (this.count - 1) + componentCount;\r\n        }\r\n        else {\r\n          console.warn(\"Invalid component type in accessor '\" + (this.name ? this.name : \"\") + \"'\");\r\n        }\r\n      }\r\n      else {\r\n        arrayLength = this.count * componentCount;\r\n      }\r\n\r\n      if (arrayLength * componentSize > buffer.byteLength - byteOffset) {\r\n        arrayLength = (buffer.byteLength - byteOffset) / componentSize;\r\n        console.warn(\"Count in accessor '\" + (this.name ? this.name : \"\") + \"' is too large.\");\r\n      }\r\n\r\n      switch (this.componentType) {\r\n        case ComponentType.BYTE:\r\n          this._typedView = new Int8Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.UBYTE:\r\n          this._typedView = new Uint8Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.SHORT:\r\n          this._typedView = new Int16Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.USHORT:\r\n          this._typedView = new Uint16Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.INT:\r\n          this._typedView = new Int32Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.UINT:\r\n          this._typedView = new Uint32Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n        case ComponentType.FLOAT:\r\n          this._typedView = new Float32Array(buffer, byteOffset, arrayLength);\r\n          break;\r\n      }\r\n    }\r\n    else if (this.sparse !== undefined) {\r\n      this._typedView = this.createView();\r\n    }\r\n\r\n    if (!this._typedView) {\r\n      console.warn(\"Failed to convert buffer view to typed view!: \" + this.bufferView);\r\n    }\r\n    else if (this.sparse !== undefined) {\r\n      this.applySparse(gltf, this._typedView);\r\n    }\r\n\r\n    return this._typedView;\r\n  }\r\n\r\n  // getNormalizedTypedView provides an alternative view to the accessors data,\r\n  // where quantized data is already normalized. This is useful if the data is not passed\r\n  // to vertexAttribPointer but used immediately (like e.g. animations)\r\n  getNormalizedTypedView(gltf: GLTFContent) {\r\n    if (this._normalizedTypedView) {\r\n      return this._normalizedTypedView;\r\n    }\r\n\r\n    const typedView = this.getTypedView(gltf);\r\n    this._normalizedTypedView = this.normalized ? GLTFAccessor.dequantize(typedView, this.componentType) : typedView;\r\n    return this._normalizedTypedView;\r\n  }\r\n\r\n  // getDeinterlacedView provides a view to the accessors data in form of\r\n  // a TypedArray. In contrast to getTypedView, getDeinterlacedView deinterlaces\r\n  // data, i.e. stripping padding and unrelated components from the array. It then\r\n  // only contains the data of the accessor\r\n  getDeinterlacedView(gltf: GLTFContent) {\r\n    if (this._filteredView) {\r\n      return this._filteredView;\r\n    }\r\n\r\n    const componentSize = this.getComponentSize(this.componentType);\r\n    const componentCount = this.getComponentCount(this.type);\r\n    const arrayLength = this.count * componentCount;\r\n\r\n    let func = 'getFloat32';\r\n    switch (this.componentType) {\r\n      case ComponentType.BYTE:\r\n        this._filteredView = new Int8Array(arrayLength);\r\n        func = 'getInt8';\r\n        break;\r\n      case ComponentType.UBYTE:\r\n        this._filteredView = new Uint8Array(arrayLength);\r\n        func = 'getUint8';\r\n        break;\r\n      case ComponentType.SHORT:\r\n        this._filteredView = new Int16Array(arrayLength);\r\n        func = 'getInt16';\r\n        break;\r\n      case ComponentType.USHORT:\r\n        this._filteredView = new Uint16Array(arrayLength);\r\n        func = 'getUint16';\r\n        break;\r\n      case ComponentType.INT:\r\n        this._filteredView = new Int32Array(arrayLength);\r\n        func = 'getInt32';\r\n        break;\r\n      case ComponentType.UINT:\r\n        this._filteredView = new Uint32Array(arrayLength);\r\n        func = 'getUint32';\r\n        break;\r\n      case ComponentType.FLOAT:\r\n        this._filteredView = new Float32Array(arrayLength);\r\n        func = 'getFloat32';\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    if (this.bufferView !== undefined) {\r\n      const bufferView = gltf.bufferViews[this.bufferView];\r\n      const buffer = gltf._loadedBuffers[bufferView.buffer];\r\n      const byteOffset = this.byteOffset + (bufferView.byteOffset ?? 0);\r\n      const stride = (bufferView.byteStride !== undefined && bufferView.byteStride !== 0) ? bufferView.byteStride : componentCount * componentSize;\r\n      const dataView = new DataView(buffer, byteOffset, this.count * stride);\r\n      for (let i = 0; i < arrayLength; ++i) {\r\n        const offset = Math.floor(i / componentCount) * stride + (i % componentCount) * componentSize;\r\n        this._filteredView[i] = dataView[func](offset, true);\r\n      }\r\n    }\r\n    else if (this.sparse !== undefined) {\r\n      this._filteredView = this.createView();\r\n    }\r\n\r\n    if (this.sparse !== undefined) {\r\n      this.applySparse(gltf, this._filteredView);\r\n    }\r\n\r\n    return this._filteredView;\r\n  }\r\n\r\n  createView() {\r\n    const size = this.count * this.getComponentCount(this.type);\r\n    if (this.componentType == ComponentType.BYTE) return new Int8Array(size);\r\n    if (this.componentType == ComponentType.UBYTE) return new Uint8Array(size);\r\n    if (this.componentType == ComponentType.SHORT) return new Int16Array(size);\r\n    if (this.componentType == ComponentType.USHORT) return new Uint16Array(size);\r\n    if (this.componentType == ComponentType.INT) return new Int32Array(size);\r\n    if (this.componentType == ComponentType.UINT) return new Uint32Array(size);\r\n    if (this.componentType == ComponentType.FLOAT) return new Float32Array(size);\r\n    return undefined;\r\n  }\r\n\r\n  // getNormalizedDeinterlacedView provides an alternative view to the accessors data,\r\n  // where quantized data is already normalized. This is useful if the data is not passed\r\n  // to vertexAttribPointer but used immediately (like e.g. animations)\r\n  getNormalizedDeinterlacedView(gltf: GLTFContent) {\r\n    if (this._normalizedFilteredView) {\r\n      return this._normalizedFilteredView;\r\n    }\r\n\r\n    const filteredView = this.getDeinterlacedView(gltf);\r\n    this._normalizedFilteredView = this.normalized ? GLTFAccessor.dequantize(filteredView, this.componentType) : filteredView;\r\n    return this._normalizedFilteredView;\r\n  }\r\n\r\n  applySparse(gltf: GLTFContent, view: TypedArray) {\r\n    // Gather indices.\r\n\r\n    const indicesBufferView = gltf.bufferViews[this.sparse.indices.bufferView];\r\n    const indicesBuffer = gltf._loadedBuffers[indicesBufferView.buffer];\r\n    const indicesByteOffset = this.sparse.indices.byteOffset + (indicesBufferView.byteOffset ?? 0);\r\n\r\n    const indicesComponentSize = this.getComponentSize(this.sparse.indices.componentType);\r\n    let indicesComponentCount = 1;\r\n\r\n    if (indicesBufferView.byteStride !== undefined && indicesBufferView.byteStride !== 0) {\r\n      indicesComponentCount = indicesBufferView.byteStride / indicesComponentSize;\r\n    }\r\n\r\n    const indicesArrayLength = this.sparse.count * indicesComponentCount;\r\n\r\n    let indicesTypedView;\r\n    switch (this.sparse.indices.componentType) {\r\n      case ComponentType.UBYTE:\r\n        indicesTypedView = new Uint8Array(indicesBuffer, indicesByteOffset, indicesArrayLength);\r\n        break;\r\n      case ComponentType.USHORT:\r\n        indicesTypedView = new Uint16Array(indicesBuffer, indicesByteOffset, indicesArrayLength);\r\n        break;\r\n      case ComponentType.UINT:\r\n        indicesTypedView = new Uint32Array(indicesBuffer, indicesByteOffset, indicesArrayLength);\r\n        break;\r\n    }\r\n\r\n    // Gather values.\r\n\r\n    const valuesBufferView = gltf.bufferViews[this.sparse.values.bufferView];\r\n    const valuesBuffer = gltf._loadedBuffers[valuesBufferView.buffer];\r\n    const valuesByteOffset = this.sparse.values.byteOffset + (valuesBufferView.byteOffset ?? 0);\r\n\r\n    const valuesComponentSize = this.getComponentSize(this.componentType);\r\n    let valuesComponentCount = this.getComponentCount(this.type);\r\n\r\n    if (valuesBufferView.byteStride !== undefined && valuesBufferView.byteStride !== 0) {\r\n      valuesComponentCount = valuesBufferView.byteStride / valuesComponentSize;\r\n    }\r\n\r\n    const valuesArrayLength = this.sparse.count * valuesComponentCount;\r\n\r\n    let valuesTypedView: TypedArray;\r\n    switch (this.componentType) {\r\n      case ComponentType.BYTE:\r\n        valuesTypedView = new Int8Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.UBYTE:\r\n        valuesTypedView = new Uint8Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.SHORT:\r\n        valuesTypedView = new Int16Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.USHORT:\r\n        valuesTypedView = new Uint16Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.INT:\r\n        valuesTypedView = new Int32Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.UINT:\r\n        valuesTypedView = new Uint32Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n      case ComponentType.FLOAT:\r\n        valuesTypedView = new Float32Array(valuesBuffer, valuesByteOffset, valuesArrayLength);\r\n        break;\r\n    }\r\n\r\n    // Overwrite values.\r\n\r\n    for (let i = 0; i < this.sparse.count; ++i) {\r\n      for (let k = 0; k < valuesComponentCount; ++k) {\r\n        view[indicesTypedView[i] * valuesComponentCount + k] = valuesTypedView[i * valuesComponentCount + k];\r\n      }\r\n    }\r\n  }\r\n\r\n  // dequantize can be used to perform the normalization from WebGL2 vertexAttribPointer explicitly\r\n  static dequantize(typedArray: TypedArray, componentType: ComponentType) {\r\n    switch (componentType) {\r\n      case ComponentType.BYTE:\r\n        return new Float32Array(typedArray).map(c => Math.max(c / 127.0, -1.0));\r\n      case ComponentType.UBYTE:\r\n        return new Float32Array(typedArray).map(c => c / 255.0);\r\n      case ComponentType.SHORT:\r\n        return new Float32Array(typedArray).map(c => Math.max(c / 32767.0, -1.0));\r\n      case ComponentType.USHORT:\r\n        return new Float32Array(typedArray).map(c => c / 65535.0);\r\n      default:\r\n        return typedArray;\r\n    }\r\n  }\r\n\r\n  getComponentCount(type: GLTFComponentType) {\r\n    switch (type) {\r\n      case 'SCALAR': return 1;\r\n      case 'VEC2': return 2;\r\n      case 'VEC3': return 3;\r\n      case 'VEC4': return 4;\r\n      case 'MAT2': return 4;\r\n      case 'MAT3': return 9;\r\n      case 'MAT4': return 16;\r\n      default: return 0;\r\n    }\r\n  }\r\n\r\n  getTypeMask(componentType: ComponentType): number {\r\n    switch (componentType) {\r\n      case ComponentType.BYTE: return I8_BITMASK;\r\n      case ComponentType.UBYTE: return U8_BITMASK;\r\n      case ComponentType.SHORT: return I16_BITMASK;\r\n      case ComponentType.USHORT: return U16_BITMASK;\r\n      case ComponentType.INT: return I32_BITMASK;\r\n      case ComponentType.UINT: return U32_BITMASK;\r\n      case ComponentType.FLOAT: return F32_BITMASK;\r\n      default: return 0;\r\n    }\r\n  }\r\n\r\n  getComponentSize(componentType: ComponentType) {\r\n    switch (componentType) {\r\n      case ComponentType.BYTE:\r\n      case ComponentType.UBYTE:\r\n        return 1;\r\n      case ComponentType.SHORT:\r\n      case ComponentType.USHORT:\r\n        return 2;\r\n      case ComponentType.INT:\r\n      case ComponentType.UINT:\r\n      case ComponentType.FLOAT:\r\n        return 4;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}