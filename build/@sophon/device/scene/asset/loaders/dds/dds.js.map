{"version":3,"file":"dds.js","sources":["../../../../../../../libs/device/src/scene/asset/loaders/dds/dds.ts"],"sourcesContent":["import { TextureFormat } from '../../../../device/base_types';\nimport { TextureMipmapLevelData, TextureMipmapData } from '../../../../device/gpuobject';\nimport type { TypedArray } from '../../../../misc';\n\nconst DDSHeaderSize = 31; // in DWORD\nconst DDSHeaderSizeExtended = 31 + 5; // in DWORD\n\nconst DDS_MAGIC = 0x20534444; // magic\n\nconst DDSD_CAPS = 0x1; // required\nconst DDSD_HEIGHT = 0x2; // required\nconst DDSD_WIDTH = 0x4; // required\nconst DDSD_PITCH = 0x8; // optional\nconst DDSD_PIXELFORMAT = 0x1000; // required\nconst DDSD_MIPMAPCOUNT = 0x20000; // optional\nconst DDSD_LINEARSIZE = 0x80000; // optional\nconst DDSD_DEPTH = 0x800000; // optional\n\nconst DDPF_ALPHAPIXELS = 0x1;\nconst DDPF_ALPHA = 0x2;\nconst DDPF_PAL8 = 0x20;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\nconst DDPF_BUMPDUDV = 0x80000;\n\nconst DDSCAPS_COMPLEX = 0x8; // optional\nconst DDSCAPS_MIPMAP = 0x400000; // optional\nconst DDSCAPS_TEXTURE = 0x1000; // required\n\nconst DDSCAPS2_CUBEMAP = 0x200;\nconst DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;\nconst DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;\nconst DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;\nconst DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;\nconst DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;\nconst DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;\nconst DDS_CUBEMAP_ALLFACES =\n  DDSCAPS2_CUBEMAP |\n  DDSCAPS2_CUBEMAP_POSITIVEX |\n  DDSCAPS2_CUBEMAP_NEGATIVEX |\n  DDSCAPS2_CUBEMAP_POSITIVEY |\n  DDSCAPS2_CUBEMAP_NEGATIVEY |\n  DDSCAPS2_CUBEMAP_POSITIVEZ |\n  DDSCAPS2_CUBEMAP_NEGATIVEZ;\n\nconst DDSCAPS2_VOLUME = 0x200000;\n\nfunction getDimensionName(dimension: number) {\n  return DX10ResourceDimension[dimension] || String(dimension);\n}\n\nenum DX10ResourceDimension {\n  DDS_DIMENSION_TEXTURE1D = 2,\n  DDS_DIMENSION_TEXTURE2D = 3,\n  DDS_DIMENSION_TEXTURE3D = 4,\n}\n\nfunction getDXGIFormatName(fmt: number) {\n  return DXGIFormat[fmt] || String(fmt);\n}\n\nenum DXGIFormat {\n  DXGI_FORMAT_RGBA32F = 2,\n  DXGI_FORMAT_RGBA32UI = 3,\n  DXGI_FORMAT_RGBA32I = 4,\n  DXGI_FORMAT_RGB32F = 6,\n  DXGI_FORMAT_RGB32UI = 7,\n  DXGI_FORMAT_RGB32I = 8,\n  DXGI_FORMAT_RGBA16F = 10,\n  DXGI_FORMAT_RGBA16UI = 12,\n  DXGI_FORMAT_RGBA16I = 14,\n  DXGI_FORMAT_RG32F = 16,\n  DXGI_FORMAT_RG32UI = 17,\n  DXGI_FORMAT_RG32I = 18,\n  DXGI_FORMAT_RGBA8 = 28,\n  DXGI_FORMAT_RGBA8_SRGB = 29,\n  DXGI_FORMAT_RGBA8UI = 30,\n  DXGI_FORMAT_RGBA8I = 32,\n  DXGI_FORMAT_RG16F = 34,\n  DXGI_FORMAT_RG16UI = 36,\n  DXGI_FORMAT_RG16I = 38,\n  DXGI_FORMAT_R32F = 41,\n  DXGI_FORMAT_R32UI = 42,\n  DXGI_FORMAT_R32I = 43,\n  DXGI_FORMAT_R16F = 54,\n  DXGI_FORMAT_R16UI = 57,\n  DXGI_FORMAT_R16I = 59,\n  DXGI_FORMAT_BGR565 = 85,\n  DXGI_FORMAT_BGRA5551 = 86,\n  DXGI_FORMAT_BGRA8 = 87,\n  DXGI_FORMAT_BGRX8 = 88,\n  DXGI_FORMAT_BGRA8_SRGB = 91,\n  DXGI_FORMAT_BGRX8_SRGB = 93,\n}\n\nenum D3DFormat {\n  D3DFMT_RGB8 = 20,\n  D3DFMT_ARGB8 = 21,\n  D3DFMT_XRGB8 = 22,\n  D3DFMT_RGB565 = 23,\n  D3DFMT_XRGB1555 = 24,\n  D3DFMT_ARGB1555 = 25,\n  D3DFMT_ARGB4 = 26,\n  D3DFMT_A8 = 28,\n  D3DFMT_XRGB4 = 30,\n  D3DFMT_ABGR8 = 32,\n  D3DFMT_XBGR8 = 33,\n  D3DFMT_A8P8 = 40,\n  D3DFMT_P8 = 41,\n  D3DFMT_L8 = 50,\n  D3DFMT_A8L8 = 51,\n  D3DFMT_DXT1 = FourCCToInt32('DXT1'),\n  D3DFMT_DXT2 = FourCCToInt32('DXT2'),\n  D3DFMT_DXT3 = FourCCToInt32('DXT3'),\n  D3DFMT_DXT4 = FourCCToInt32('DXT4'),\n  D3DFMT_DXT5 = FourCCToInt32('DXT5'),\n  D3DFMT_R16F = 111,\n  D3DFMT_RG16F = 112,\n  D3DFMT_RGBA16F = 113,\n  D3DFMT_R32F = 114,\n  D3DFMT_RG32F = 115,\n  D3DFMT_RGBA32F = 116,\n}\n\nfunction FourCCToInt32(value: string) {\n  return (\n    value.charCodeAt(0) +\n    (value.charCodeAt(1) << 8) +\n    (value.charCodeAt(2) << 16) +\n    (value.charCodeAt(3) << 24)\n  );\n}\n\nfunction Int32ToFourCC(value: number) {\n  return String.fromCharCode(\n    value & 0xff,\n    (value >> 8) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 24) & 0xff,\n  );\n}\n\nfunction getPixelFormatDesc(header: DDSHeader) {\n  let desc = '';\n  const flags: string[] = [];\n  const pf = header.ddsPixelFormat;\n  if (pf.dwFlags & DDPF_ALPHAPIXELS) {\n    flags.push('AlphaPixels');\n  }\n  if (pf.dwFlags & DDPF_ALPHA) {\n    flags.push('Alpha');\n  }\n  if (pf.dwFlags & DDPF_FOURCC) {\n    flags.push('FourCC');\n  }\n  if (pf.dwFlags & DDPF_LUMINANCE) {\n    flags.push('Luminance');\n  }\n  if (pf.dwFlags & DDPF_RGB) {\n    flags.push('RGB');\n  }\n  if (pf.dwFlags & DDPF_YUV) {\n    flags.push('YUV');\n  }\n  if (pf.dwFlags & DDPF_PAL8) {\n    flags.push('Pal8');\n  }\n  if (pf.dwFlags & DDPF_BUMPDUDV) {\n    flags.push('BumpDuDv');\n  }\n  desc += `Flags: ${flags.join('|')}\\n`;\n  if (pf.dwFlags & DDPF_FOURCC) {\n    if (!header.ddsHeaderDX10) {\n      const fmt = D3DFormat[pf.dwFourCC] || String(pf.dwFourCC);\n      desc += `FourCC: ${fmt}`;\n    }\n  }\n  if (header.ddsHeaderDX10) {\n    desc += `DXGIFormat: ${getDXGIFormatName(header.ddsHeaderDX10.dxgiFormat)}\\n`;\n    desc += `Dimension: ${getDimensionName(header.ddsHeaderDX10.dimension)}\\n`;\n    desc += `ArraySize: ${header.ddsHeaderDX10.arraySize}\\n`;\n    desc += `DXGIMiscFlag: ${header.ddsHeaderDX10.miscFlag}\\n`;\n  }\n  if (pf.dwFlags & (DDPF_RGB | DDPF_ALPHAPIXELS | DDPF_ALPHA | DDPF_LUMINANCE)) {\n    desc += `RGBBitCount: ${pf.dwRGBBitCount}\\n`;\n    desc += `RBitMask: 0x${pf.dwRBitMask.toString(16)}\\n`;\n    desc += `GBitMask: 0x${pf.dwGBitMask.toString(16)}\\n`;\n    desc += `BBitMask: 0x${pf.dwBBitMask.toString(16)}\\n`;\n    desc += `ABitMask: 0x${pf.dwABitMask.toString(16)}\\n`;\n  }\n  return desc;\n}\n\ninterface DDSPixelFormat {\n  dwFlags: number;\n  dwFourCC?: number;\n  dwRGBBitCount?: number;\n  dwRBitMask?: number;\n  dwGBitMask?: number;\n  dwBBitMask?: number;\n  dwABitMask?: number;\n}\n\nfunction getDDSHeaderDesc(header: DDSHeader) {\n  let desc = '';\n  const flags: string[] = [];\n  if (header.dwFlags & DDSD_CAPS) {\n    flags.push('Caps');\n  }\n  if (header.dwFlags & DDSD_HEIGHT) {\n    flags.push('Height');\n  }\n  if (header.dwFlags & DDSD_WIDTH) {\n    flags.push('Width');\n  }\n  if (header.dwFlags & DDSD_PITCH) {\n    flags.push('Pitch');\n  }\n  if (header.dwFlags & DDSD_PIXELFORMAT) {\n    flags.push('PixelFormat');\n  }\n  if (header.dwFlags & DDSD_MIPMAPCOUNT) {\n    flags.push('MipmapCount');\n  }\n  if (header.dwFlags & DDSD_LINEARSIZE) {\n    flags.push('LinearSize');\n  }\n  if (header.dwFlags & DDSD_DEPTH) {\n    flags.push('Depth');\n  }\n  desc += `Flags: ${flags.join('|')}\\n`;\n  if (header.dwFlags & DDSD_WIDTH) {\n    desc += `Width: ${header.dwWidth}\\n`;\n  }\n  if (header.dwFlags & DDSD_HEIGHT) {\n    desc += `Height: ${header.dwHeight}\\n`;\n  }\n  if (header.dwFlags & DDSD_DEPTH) {\n    desc += `Depth: ${header.dwDepth}\\n`;\n  }\n  if (header.dwFlags & DDSD_PITCH) {\n    desc += `Pitch: ${header.dwPitchOrLinearSize}\\n`;\n  }\n  if (header.dwFlags & DDSD_LINEARSIZE) {\n    desc += `LinearSize: ${header.dwPitchOrLinearSize}\\n`;\n  }\n  if (header.dwFlags & DDSD_MIPMAPCOUNT) {\n    desc += `MipmapCount: ${header.dwMipmapCount}\\n`;\n  }\n  const caps: string[] = [];\n  if (header.dwCaps & DDSCAPS_COMPLEX) {\n    caps.push('Complex');\n  }\n  if (header.dwCaps & DDSCAPS_MIPMAP) {\n    caps.push('Mipmap');\n  }\n  if (header.dwCaps & DDSCAPS_TEXTURE) {\n    caps.push('Texture');\n  }\n  desc += `Caps: ${caps.join('|')}\\n`;\n  const caps2: string[] = [];\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP) {\n    caps2.push('CubeMap');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_POSITIVEX) {\n    caps2.push('CubeFacePX');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) {\n    caps2.push('CubeFaceNX');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_POSITIVEY) {\n    caps2.push('CubeFacePY');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) {\n    caps2.push('CubeFaceNY');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) {\n    caps2.push('CubeFacePZ');\n  }\n  if (header.dwCaps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ) {\n    caps2.push('CubeFaceNZ');\n  }\n  if (header.dwCaps2 & DDSCAPS2_VOLUME) {\n    caps2.push('Volume');\n  }\n  desc += `Caps2: ${caps2.join('|')}\\n`;\n  if (header.dwFlags & DDSD_PIXELFORMAT) {\n    desc += getPixelFormatDesc(header);\n  }\n  return desc;\n}\n\ninterface DDSHeader {\n  dwSize: number; // must be DDSHeaderSize * 4 = 124\n  dwFlags: number;\n  dwHeight: number;\n  dwWidth: number;\n  dwPitchOrLinearSize: number;\n  dwDepth: number;\n  dwMipmapCount: number;\n  ddsPixelFormat: DDSPixelFormat;\n  dwCaps: number;\n  dwCaps2: number;\n  dwCaps3: number;\n  dwCaps4: number;\n  ddsHeaderDX10: DDSHeaderDX10;\n  dataOffset: number;\n}\n\ninterface DDSHeaderDX10 {\n  dxgiFormat: DXGIFormat;\n  dimension: DX10ResourceDimension;\n  miscFlag: number;\n  arraySize: number;\n}\n\nexport function loadDDSHeader(dds: ArrayBuffer): DDSHeader {\n  const ddsHeader = {} as DDSHeader;\n  const header = new Uint32Array(dds, 0, DDSHeaderSize + 1);\n  const magic = header[0];\n  if (magic !== DDS_MAGIC) {\n    console.log('Invalid DDS magic');\n    return null;\n  }\n  ddsHeader.dwSize = header[1];\n  if (ddsHeader.dwSize !== 124) {\n    console.log('Invalid DDS header size');\n    return null;\n  }\n  ddsHeader.dataOffset = ddsHeader.dwSize + 4;\n  ddsHeader.dwFlags = header[2];\n  ddsHeader.dwHeight = header[3];\n  ddsHeader.dwWidth = header[4];\n  ddsHeader.dwPitchOrLinearSize = header[5];\n  ddsHeader.dwDepth = header[6];\n  ddsHeader.dwMipmapCount = header[7];\n  ddsHeader.ddsPixelFormat = {} as DDSPixelFormat;\n  ddsHeader.ddsPixelFormat.dwFlags = header[20];\n  ddsHeader.ddsPixelFormat.dwFourCC = header[21];\n  ddsHeader.ddsPixelFormat.dwRGBBitCount = header[22];\n  ddsHeader.ddsPixelFormat.dwRBitMask = header[23];\n  ddsHeader.ddsPixelFormat.dwGBitMask = header[24];\n  ddsHeader.ddsPixelFormat.dwBBitMask = header[25];\n  ddsHeader.ddsPixelFormat.dwABitMask = header[26];\n  ddsHeader.dwCaps = header[27];\n  ddsHeader.dwCaps2 = header[28];\n  ddsHeader.dwCaps3 = header[29];\n  ddsHeader.dwCaps4 = header[30];\n  if (Int32ToFourCC(ddsHeader.ddsPixelFormat.dwFourCC) === 'DX10') {\n    const headerEx = new Uint32Array(dds, 0, DDSHeaderSizeExtended + 1);\n    ddsHeader.ddsHeaderDX10 = {} as DDSHeaderDX10;\n    ddsHeader.ddsHeaderDX10.dxgiFormat = headerEx[32];\n    ddsHeader.ddsPixelFormat.dwFourCC = ddsHeader.ddsHeaderDX10.dxgiFormat;\n    ddsHeader.ddsHeaderDX10.dimension = headerEx[33];\n    ddsHeader.ddsHeaderDX10.miscFlag = headerEx[34];\n    ddsHeader.ddsHeaderDX10.arraySize = headerEx[35];\n    ddsHeader.dataOffset += 5 * 4;\n  }\n  return ddsHeader;\n}\n\ninterface DDSMetaData extends TextureMipmapData {\n  dataOffset: number;\n}\n\nconst enum DDSConvert {\n  RGB_SWIZZLE = 1 << 0,\n  ALPHA_ONE = 11 << 1,\n}\n\nconst legacyDDSMap: {\n  format: TextureFormat;\n  convertFlags: number;\n  pf: DDSPixelFormat;\n}[] = [\n  {\n    format: TextureFormat.DXT1,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: FourCCToInt32('DXT1'),\n    },\n  },\n  {\n    format: TextureFormat.DXT3,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: FourCCToInt32('DXT3'),\n    },\n  },\n  {\n    format: TextureFormat.DXT5,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: FourCCToInt32('DXT5'),\n    },\n  },\n  {\n    format: TextureFormat.BGRA8UNORM,\n    convertFlags: DDSConvert.RGB_SWIZZLE,\n    pf: {\n      dwFlags: DDPF_RGB | DDPF_ALPHAPIXELS,\n      dwRGBBitCount: 32,\n      dwRBitMask: 0x00ff0000,\n      dwGBitMask: 0x0000ff00,\n      dwBBitMask: 0x000000ff,\n      dwABitMask: 0xff000000,\n    },\n  },\n  {\n    format: TextureFormat.BGRA8UNORM,\n    convertFlags: DDSConvert.RGB_SWIZZLE | DDSConvert.ALPHA_ONE,\n    pf: {\n      dwFlags: DDPF_RGB,\n      dwRGBBitCount: 32,\n      dwRBitMask: 0x00ff0000,\n      dwGBitMask: 0x0000ff00,\n      dwBBitMask: 0x000000ff,\n    },\n  },\n  {\n    format: TextureFormat.RGBA8UNORM,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_RGB | DDPF_ALPHAPIXELS,\n      dwRGBBitCount: 32,\n      dwRBitMask: 0x000000ff,\n      dwGBitMask: 0x0000ff00,\n      dwBBitMask: 0x00ff0000,\n      dwABitMask: 0xff000000,\n    },\n  },\n  {\n    format: TextureFormat.RGBA8UNORM,\n    convertFlags: DDSConvert.ALPHA_ONE,\n    pf: {\n      dwFlags: DDPF_RGB,\n      dwRGBBitCount: 32,\n      dwRBitMask: 0x000000ff,\n      dwGBitMask: 0x0000ff00,\n      dwBBitMask: 0x00ff0000,\n    },\n  },\n  {\n    format: TextureFormat.R16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 111,\n    },\n  },\n  {\n    format: TextureFormat.R16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_R16F,\n    },\n  },\n  {\n    format: TextureFormat.RG16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 112,\n    },\n  },\n  {\n    format: TextureFormat.RG16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_RG16F,\n    },\n  },\n  {\n    format: TextureFormat.RGBA16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 113,\n    },\n  },\n  {\n    format: TextureFormat.RGBA16F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_RGBA16F,\n    },\n  },\n  {\n    format: TextureFormat.R32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 114,\n    },\n  },\n  {\n    format: TextureFormat.R32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_R32F,\n    },\n  },\n  {\n    format: TextureFormat.RG32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 115,\n    },\n  },\n  {\n    format: TextureFormat.RG32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_RG32F,\n    },\n  },\n  {\n    format: TextureFormat.RGBA32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: 116,\n    },\n  },\n  {\n    format: TextureFormat.RGBA32F,\n    convertFlags: 0,\n    pf: {\n      dwFlags: DDPF_FOURCC,\n      dwFourCC: DXGIFormat.DXGI_FORMAT_RGBA32F,\n    },\n  },\n];\n\nfunction getTextureFormat(pf: DDSPixelFormat) {\n  const flags = pf.dwFlags;\n  let index;\n  for (index = 0; index < legacyDDSMap.length; index++) {\n    const entry = legacyDDSMap[index];\n    if (flags & DDPF_FOURCC && entry.pf.dwFlags & DDPF_FOURCC) {\n      if (pf.dwFourCC === entry.pf.dwFourCC) {\n        break;\n      }\n    } else if (flags === entry.pf.dwFlags) {\n      if (flags & DDPF_ALPHA) {\n        if (pf.dwRGBBitCount === entry.pf.dwRGBBitCount && pf.dwABitMask === entry.pf.dwABitMask) {\n          break;\n        }\n      } else if (flags & DDPF_LUMINANCE) {\n        if (pf.dwRGBBitCount === entry.pf.dwRGBBitCount && pf.dwRBitMask === entry.pf.dwRBitMask) {\n          if (pf.dwABitMask === entry.pf.dwABitMask || !(flags & DDPF_ALPHAPIXELS)) {\n            break;\n          }\n        }\n      } else if (pf.dwRGBBitCount === entry.pf.dwRGBBitCount) {\n        if (\n          pf.dwRBitMask === entry.pf.dwRBitMask &&\n          pf.dwGBitMask === entry.pf.dwGBitMask &&\n          pf.dwBBitMask === entry.pf.dwBBitMask\n        ) {\n          if (pf.dwABitMask === entry.pf.dwABitMask || !(flags & DDPF_ALPHAPIXELS)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  if (index === legacyDDSMap.length) {\n    return null;\n  }\n  return legacyDDSMap[index].format;\n}\n\nfunction getMetaDataFromHeader(header: DDSHeader, metaData?: DDSMetaData): DDSMetaData {\n  metaData = metaData || ({} as DDSMetaData);\n  metaData.format = getTextureFormat(header.ddsPixelFormat);\n  if (metaData.format === null) {\n    return null;\n  }\n  metaData.isCompressed =\n    metaData.format === TextureFormat.DXT1 ||\n    metaData.format === TextureFormat.DXT3 ||\n    metaData.format === TextureFormat.DXT5;\n  metaData.dataOffset = header.ddsHeaderDX10 ? 37 * 4 : 32 * 4;\n  metaData.width = header.dwWidth;\n  metaData.height = header.dwHeight;\n  metaData.depth = 1;\n  metaData.mipLevels = header.dwMipmapCount || 1;\n  metaData.arraySize = header.ddsHeaderDX10 ? header.ddsHeaderDX10.arraySize : 1;\n  metaData.isCubemap = metaData.isVolume = false;\n  if (header.dwCaps2 & DDS_CUBEMAP_ALLFACES) {\n    metaData.isCubemap = true;\n    metaData.arraySize *= 6;\n  } else if (header.dwCaps2 & DDSCAPS2_VOLUME) {\n    metaData.isVolume = true;\n    metaData.depth = header.dwDepth;\n  }\n  return metaData;\n}\n\nfunction getMipmapData(\n  dds: ArrayBuffer,\n  width: number,\n  height: number,\n  format: TextureFormat,\n  dataOffset: number,\n): TypedArray {\n  switch (format) {\n    case TextureFormat.R16F:\n      return new Uint16Array(dds, dataOffset, width * height);\n    case TextureFormat.RG16F:\n      return new Uint16Array(dds, dataOffset, width * height * 2);\n    case TextureFormat.R32F:\n      return new Float32Array(dds, dataOffset, width * height);\n    case TextureFormat.RGBA8UNORM:\n    case TextureFormat.BGRA8UNORM:\n      return new Uint8Array(dds, dataOffset, width * height * 4);\n    case TextureFormat.RGBA16F:\n      return new Uint16Array(dds, dataOffset, width * height * 4);\n    case TextureFormat.RG32F:\n      return new Float32Array(dds, dataOffset, width * height * 2);\n    case TextureFormat.RGBA32F:\n      return new Float32Array(dds, dataOffset, width * height * 4);\n    case TextureFormat.DXT1:\n      return new Uint8Array(\n        dds,\n        dataOffset,\n        (((Math.max(4, width) / 4) * Math.max(4, height)) / 4) * 8,\n      );\n    case TextureFormat.DXT3:\n    case TextureFormat.DXT5:\n      return new Uint8Array(\n        dds,\n        dataOffset,\n        (((Math.max(4, width) / 4) * Math.max(4, height)) / 4) * 16,\n      );\n    default:\n      return null;\n  }\n}\n\nexport function getDDSMipLevelsInfo(dds: ArrayBuffer): DDSMetaData {\n  const ddsHeader = loadDDSHeader(dds);\n  if (!ddsHeader) {\n    return null;\n  }\n  const ddsLevelsInfo = {} as DDSMetaData;\n  getMetaDataFromHeader(ddsHeader, ddsLevelsInfo);\n  ddsLevelsInfo.mipDatas = [];\n  let dataOffset = ddsLevelsInfo.dataOffset;\n  for (let i = 0; i < ddsLevelsInfo.arraySize; i++) {\n    const mipDatas: TextureMipmapLevelData[] = [];\n    let width = ddsLevelsInfo.width;\n    let height = ddsLevelsInfo.height;\n    for (let mip = 0; mip < ddsLevelsInfo.mipLevels; mip++) {\n      const mipData = getMipmapData(dds, width, height, ddsLevelsInfo.format, dataOffset);\n      mipDatas.push({data: mipData, width: width, height: height});\n      dataOffset += mipData.byteLength;\n      width = Math.max(1, width >> 1);\n      height = Math.max(1, height >> 1);\n    }\n    ddsLevelsInfo.mipDatas.push(mipDatas);\n  }\n  return ddsLevelsInfo;\n}\n\n"],"names":[],"mappings":"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"}