{"version":3,"file":"aabbtree.js","sources":["../../../../libs/device/src/scene/aabbtree.ts"],"sourcesContent":["import { AABB } from \"@sophon/base\"\nimport { Vector3, Matrix4x4, Ray } from '@sophon/base';\nimport { PrimitiveType } from '../device/base_types';\nimport type { TypedArray } from '../misc';\n\ninterface PrimitivesInfo {\n  vertices: Vector3[];\n  indices: number[];\n  primitiveType: PrimitiveType;\n}\n\ninterface AABBTreeNode {\n  box: AABB;\n  triangles: number[];\n  axis: number;\n  left: number;\n  right: number;\n}\n\nconst tmpTriangle: [number, number, number] = [0, 0, 0];\n\nexport class AABBTree {\n  /** @internal */\n  private _primitivesInfo: PrimitivesInfo;\n  /** @internal */\n  private _nodes: AABBTreeNode[];\n  constructor(other?: AABBTree) {\n    this._primitivesInfo = null;\n    this._nodes = null;\n    if (other) {\n      this._primitivesInfo = other._primitivesInfo\n        ? {\n          vertices: other._primitivesInfo.vertices?.map((value) => new Vector3(value)),\n          indices: other._primitivesInfo.indices?.map((value) => value),\n          primitiveType: other._primitivesInfo.primitiveType,\n        }\n        : null;\n      this._nodes = other._nodes\n        ? other._nodes.map((value) => {\n          return {\n            box: new AABB(value.box),\n            triangles: value.triangles?.map((val) => val),\n            axis: value.axis,\n            left: value.left,\n            right: value.right,\n          };\n        })\n        : null;\n    }\n  }\n  buildFromPrimitives(\n    vertices: number[] | TypedArray,\n    indices: number[] | TypedArray,\n    primitiveType: PrimitiveType,\n  ) {\n    this._primitivesInfo = {\n      vertices: [],\n      indices: null,\n      primitiveType: primitiveType,\n    };\n    for (let i = 0; i < vertices.length; i += 3) {\n      this._primitivesInfo.vertices.push(\n        new Vector3(vertices[i] as number, vertices[i + 1] as number, vertices[i + 2] as number),\n      );\n    }\n    if (indices) {\n      this._primitivesInfo.indices = [];\n      for (const index of indices) {\n        this._primitivesInfo.indices.push(index as number);\n      }\n    }\n    this._buildSubNodes();\n  }\n  rayIntersectionTest(ray: Ray): boolean {\n    return this._nodes.length > 0 ? this._rayIntersectionTest(0, ray) : false;\n  }\n  rayIntersectionDistance(ray: Ray): number {\n    return this._nodes.length > 0 ? this._rayIntersectionDistance(0, ray) : null;\n  }\n  getTopLevelAABB(): AABB {\n    return this._nodes.length > 0 ? this._nodes[0].box : null;\n  }\n  transform(affineMatrix: Matrix4x4) {\n    if (affineMatrix && this._primitivesInfo && this._primitivesInfo.vertices) {\n      for (const vert of this._primitivesInfo.vertices) {\n        affineMatrix.transformPointAffine(vert, vert);\n      }\n      this._buildSubNodes();\n    }\n  }\n  verify() {\n    const numTris = this._verifyNode(0);\n    const n = this._getNumTriangles();\n    if (numTris !== n) {\n      throw new Error(\n        `AABB tree verification failed: triangle count mismatch, got ${numTris}, expect ${n}`,\n      );\n    }\n  }\n  /** @internal */\n  private _verifyNode(nodeIndex: number): number {\n    const node = this._nodes[nodeIndex];\n    if (!node) {\n      throw new Error(`AABB tree verification failed: invalid node index: ${nodeIndex}`);\n    }\n    let numTris = 0;\n    const extents = node.box.extents[node.axis];\n    const tmpTri: [number, number, number] = [0, 0, 0];\n    for (const tri of node.triangles) {\n      this._getTriangle(tri, tmpTri);\n      let max = Number.MIN_VALUE;\n      let min = Number.MAX_VALUE;\n      for (const v of tmpTri) {\n        const p = this._primitivesInfo.vertices[v];\n        if (!node.box.containsPoint(p)) {\n          throw new Error(`AABB tree verification failed: triangle not inside AABB`);\n        }\n        const t = p.getArray()[node.axis];\n        if (t < min) min = t;\n        if (t > max) max = t;\n        if (max - min <= extents) {\n          throw new Error(`AABB tree verification failed: extents test failed`);\n        }\n      }\n    }\n    numTris += node.triangles.length;\n    if (node.left >= 0) {\n      numTris += this._verifyNode(node.left);\n    }\n    if (node.right >= 0) {\n      numTris += this._verifyNode(node.right);\n    }\n    return numTris;\n  }\n  /** @internal */\n  private _buildNode(\n    nodeIndex: number,\n    triangles: number[],\n    triangleMin: [number, number, number][],\n    triangleMax: [number, number, number][],\n  ) {\n    const node = this._nodes[nodeIndex];\n    if (triangles.length === 1) {\n      node.triangles.push(triangles[0]);\n    } else {\n      const splitAxis = (node.axis = this._selectBestSplitAxis(\n        node.box.extents,\n        triangles,\n        triangleMin,\n        triangleMax,\n      ));\n      const sizeMax = node.box.extents.getArray()[splitAxis];\n      const sizeCenter = node.box.center.getArray()[splitAxis];\n      const sizeLeft = sizeCenter - node.box.extents.getArray()[splitAxis] * 0.5;\n      const leftTriangles: number[] = [];\n      const rightTriangles: number[] = [];\n      const leftbox = new AABB();\n      leftbox.beginExtend();\n      const rightbox = new AABB();\n      rightbox.beginExtend();\n      for (const tri of triangles) {\n        const min = triangleMin[tri];\n        const max = triangleMax[tri];\n        const size = max[splitAxis] - min[splitAxis];\n        if (size >= sizeMax) {\n          node.triangles.push(tri);\n        } else if (max[splitAxis] <= sizeCenter || min[splitAxis] <= sizeLeft) {\n          leftTriangles.push(tri);\n          leftbox.extend3(min[0], min[1], min[2]);\n          leftbox.extend3(max[0], max[1], max[2]);\n        } else {\n          rightTriangles.push(tri);\n          rightbox.extend3(min[0], min[1], min[2]);\n          rightbox.extend3(max[0], max[1], max[2]);\n        }\n      }\n      if (leftTriangles.length) {\n        this._nodes.push({\n          box: leftbox,\n          triangles: [],\n          axis: -1,\n          left: -1,\n          right: -1,\n        });\n        node.left = this._nodes.length - 1;\n        this._buildNode(this._nodes.length - 1, leftTriangles, triangleMin, triangleMax);\n      }\n      if (rightTriangles.length) {\n        this._nodes.push({\n          box: rightbox,\n          triangles: [],\n          axis: -1,\n          left: -1,\n          right: -1,\n        });\n        node.right = this._nodes.length - 1;\n        this._buildNode(this._nodes.length - 1, rightTriangles, triangleMin, triangleMax);\n      }\n    }\n  }\n  /** @internal */\n  private _selectBestSplitAxis(\n    extents: Vector3,\n    triangles: number[],\n    triangleMin: [number, number, number][],\n    triangleMax: [number, number, number][],\n  ): number {\n    const dx = extents.x,\n      dy = extents.y,\n      dz = extents.z;\n    let nx = 0,\n      ny = 0,\n      nz = 0;\n    for (const tri of triangles) {\n      const max = triangleMax[tri];\n      const min = triangleMin[tri];\n      if (max[0] - min[0] >= dx) nx++;\n      if (max[1] - min[1] >= dy) ny++;\n      if (max[2] - min[2] >= dz) nz++;\n    }\n    if (nx < ny) {\n      if (nx < nz) {\n        return 0;\n      } else {\n        return nx === nz ? (dx > dz ? 0 : 2) : 2;\n      }\n    } else if (nx == ny) {\n      if (nz < nx) {\n        return 2;\n      } else if (nz > nx) {\n        return dx > dy ? 0 : 1;\n      } else {\n        if (dx < dy) {\n          return dy > dz ? 1 : 2;\n        } else {\n          return dx > dz ? 0 : 2;\n        }\n      }\n    } else {\n      if (ny < nz) {\n        return 1;\n      } else {\n        return ny === nz ? (dy > dz ? 1 : 2) : 2;\n      }\n    }\n  }\n  /** @internal */\n  private _getNumTriangles() {\n    const numIndices = this._primitivesInfo.indices\n      ? this._primitivesInfo.indices.length\n      : this._primitivesInfo.vertices.length;\n    switch (this._primitivesInfo.primitiveType) {\n      case PrimitiveType.TriangleList:\n        return Math.floor(numIndices / 3);\n      case PrimitiveType.TriangleStrip:\n        return numIndices - 2;\n      case PrimitiveType.TriangleFan:\n        return numIndices - 2;\n      default:\n        return 0;\n    }\n  }\n  /** @internal */\n  private _rayIntersectionDistance(nodeIndex: number, ray: Ray): number {\n    const node = this._nodes[nodeIndex];\n    if (!ray.bboxIntersectionTest(node.box)) {\n      return null;\n    }\n    let minDist = Number.MAX_VALUE;\n    for (const tri of node.triangles) {\n      this._getTriangle(tri, tmpTriangle);\n      const v0 = this._primitivesInfo.vertices[tmpTriangle[0]];\n      const v1 = this._primitivesInfo.vertices[tmpTriangle[1]];\n      const v2 = this._primitivesInfo.vertices[tmpTriangle[2]];\n      const dist = ray.intersectionTestTriangle(v0, v1, v2, false);\n      if (dist !== null && dist >= 0 && dist < minDist) {\n        minDist = dist;\n      }\n    }\n    let a: number, b: number;\n    if (node.axis >= 0) {\n      if (ray._direction.getArray()[node.axis] < 0) {\n        a = node.right;\n        b = node.left;\n      } else {\n        a = node.left;\n        b = node.right;\n      }\n      if (a >= 0) {\n        const dist = this._rayIntersectionDistance(a, ray);\n        if (dist !== null && dist >= 0 && dist < minDist) {\n          minDist = dist;\n        }\n      }\n      if (b >= 0) {\n        const dist = this._rayIntersectionDistance(b, ray);\n        if (dist !== null && dist >= 0 && dist < minDist) {\n          minDist = dist;\n        }\n      }\n    }\n    return minDist === Number.MAX_VALUE ? null : minDist;\n  }\n  /** @internal */\n  private _rayIntersectionTest(nodeIndex: number, ray: Ray): boolean {\n    const node = this._nodes[nodeIndex];\n    if (!ray.bboxIntersectionTest(node.box)) {\n      return false;\n    }\n    for (const tri of node.triangles) {\n      this._getTriangle(tri, tmpTriangle);\n      const v0 = this._primitivesInfo.vertices[tmpTriangle[0]];\n      const v1 = this._primitivesInfo.vertices[tmpTriangle[1]];\n      const v2 = this._primitivesInfo.vertices[tmpTriangle[2]];\n      const dist = ray.intersectionTestTriangle(v0, v1, v2, false);\n      if (dist !== null && dist > 0) {\n        return true;\n      }\n    }\n    let a: number, b: number;\n    if (node.axis >= 0) {\n      if (ray._direction.getArray()[node.axis] < 0) {\n        a = node.right;\n        b = node.left;\n      } else {\n        a = node.left;\n        b = node.right;\n      }\n      if (a >= 0 && this._rayIntersectionTest(a, ray)) {\n        return true;\n      }\n      if (b >= 0 && this._rayIntersectionTest(b, ray)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /** @internal */\n  private _getTriangle(n: number, out: [number, number, number]): [number, number, number] {\n    const indices = this._primitivesInfo.indices;\n    let v0: number, v1: number, v2: number;\n    out = out || [0, 0, 0];\n    switch (this._primitivesInfo.primitiveType) {\n      case PrimitiveType.TriangleList:\n        v0 = n * 3;\n        v1 = v0 + 1;\n        v2 = v0 + 2;\n        break;\n      case PrimitiveType.TriangleStrip: {\n        const r = n % 2;\n        v0 = n + r;\n        v1 = n - r + 1;\n        v2 = n + 2;\n        break;\n      }\n      case PrimitiveType.TriangleFan:\n        v0 = 0;\n        v1 = n + 1;\n        v2 = n + 2;\n        break;\n      default:\n        return null;\n    }\n    out[0] = indices ? indices[v0] : v0;\n    out[1] = indices ? indices[v1] : v1;\n    out[2] = indices ? indices[v2] : v2;\n    return out;\n  }\n  /** @internal */\n  _buildSubNodes() {\n    const triangleMin: [number, number, number][] = [];\n    const triangleMax: [number, number, number][] = [];\n    const triangles: number[] = [];\n    const numTriangles = this._getNumTriangles();\n    const rootNode = {\n      box: new AABB(),\n      triangles: [],\n      axis: -1,\n      left: -1,\n      right: -1,\n    };\n    rootNode.box.beginExtend();\n    for (let i = 0; i < numTriangles; i++) {\n      triangles.push(i);\n      this._getTriangle(i, tmpTriangle);\n      const v0 = this._primitivesInfo.vertices[tmpTriangle[0]];\n      const v1 = this._primitivesInfo.vertices[tmpTriangle[1]];\n      const v2 = this._primitivesInfo.vertices[tmpTriangle[2]];\n      const min: [number, number, number] = [\n        Math.min(Math.min(v0.x, v1.x), v2.x),\n        Math.min(Math.min(v0.y, v1.y), v2.y),\n        Math.min(Math.min(v0.z, v1.z), v2.z),\n      ];\n      rootNode.box.extend3(min[0], min[1], min[2]);\n      triangleMin.push(min);\n      const max: [number, number, number] = [\n        Math.max(Math.max(v0.x, v1.x), v2.x),\n        Math.max(Math.max(v0.y, v1.y), v2.y),\n        Math.max(Math.max(v0.z, v1.z), v2.z),\n      ];\n      rootNode.box.extend3(max[0], max[1], max[2]);\n      triangleMax.push(max);\n    }\n    if (rootNode.box.isValid()) {\n      this._nodes = [rootNode];\n      this._buildNode(0, triangles, triangleMin, triangleMax);\n    } else {\n      this._nodes = [];\n    }\n  }\n}\n"],"names":[],"mappings":"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"}