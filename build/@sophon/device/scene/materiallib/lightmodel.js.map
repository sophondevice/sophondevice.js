{"version":3,"file":"lightmodel.js","sources":["../../../../../libs/device/src/scene/materiallib/lightmodel.ts"],"sourcesContent":["import { Matrix4x4, Vector3, Vector4 } from \"@sophon/base\";\r\nimport { ShaderType } from \"../../device/base_types\";\r\nimport { PBInsideFunctionScope, PBShaderExp, PBGlobalScope, PBStructTypeInfo, typeF32Vec3, typeF32, typeF32Vec4, typeMat3 } from \"../../device/builder\";\r\nimport { EnvironmentLighting, EnvConstantAmbient, EnvIBL } from \"./envlight\";\r\nimport { ShaderLib } from \"./shaderlib\";\r\nimport { MATERIAL_FUNC_NORMAL } from \"../values\";\r\nimport type { DrawContext } from \"../drawable\";\r\nimport type { BindGroup, Texture2D, BaseTexture, TextureSampler } from '../../device/gpuobject';\r\ntype TexCoordChannel = {\r\n  srcLocation: number;\r\n  transform: Matrix4x4;\r\n};\r\n\r\ntype TextureOptions = {\r\n  texture: BaseTexture;\r\n  texCoordIndex: number;\r\n  sampler: TextureSampler;\r\n}\r\n\r\nconst identTexTransform = Matrix4x4.identity();\r\nconst TEX_NAME_ALBEDO = 'albedo';\r\nconst TEX_NAME_NORMAL = 'normal';\r\nconst TEX_NAME_EMISSIVE = 'emissive';\r\nconst TEX_NAME_OCCLUSION = 'occlusion';\r\nconst TEX_NAME_SPECULAR = 'specular';\r\nconst TEX_NAME_SPECULAR_COLOR = 'specularColor';\r\nconst TEX_NAME_METALLIC = 'metallic';\r\nconst TEX_NAME_SHEEN_COLOR = 'sheenColor';\r\nconst TEX_NAME_SHEEN_ROUGHNESS = 'sheenRoughness';\r\nconst TEX_NAME_SHEEN_LUT = 'sheenLut';\r\nconst TEX_NAME_CLEARCOAT_INTENSITY = 'clearcoatIntensity';\r\nconst TEX_NAME_CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\r\nconst TEX_NAME_CLEARCOAT_NORMAL = 'clearcoatNormal';\r\n\r\nexport abstract class LightModel {\r\n  /** @internal */\r\n  protected static readonly uniformAlbedoColor = 'libLM_USAGE_albedoColor';\r\n  /** @internal */\r\n  protected static readonly uniformNormalScale = 'libLM_USAGE_normalScale';\r\n  /** @internal */\r\n  protected static readonly uniformEmissiveFactor = 'libLM_USAGE_emissiveFactor';\r\n  /** @internal */\r\n  private static readonly funcNameCalcAlbedo = 'libLM_calcAlbedo';\r\n  /** @internal */\r\n  protected _albedo: Vector4;\r\n  /** @internal */\r\n  protected _normalScale: number;\r\n  /** @internal */\r\n  protected _emissiveFactor: Vector4;\r\n  /** @internal */\r\n  protected _hash: string;\r\n  /** @internal */\r\n  protected _hashVersion: number;\r\n  /** @internal */\r\n  protected _uniformVersion: number;\r\n  /** @internal */\r\n  protected _bindGroupTagList: WeakMap<BindGroup, [number, number]>;\r\n  /** @internal */\r\n  protected _texCoordChannels: TexCoordChannel[];\r\n  /** @internal */\r\n  protected _textureOptions: { [name: string]: TextureOptions };\r\n  /** @internal */\r\n  protected _surfaceDataType: PBStructTypeInfo;\r\n  constructor() {\r\n    this._albedo = Vector4.one();\r\n    this._normalScale = 1;\r\n    this._emissiveFactor = new Vector4(0, 0, 0, 1);\r\n    this._hash = null;\r\n    this._hashVersion = 0;\r\n    this._uniformVersion = 0;\r\n    this._bindGroupTagList = new WeakMap();\r\n    this._texCoordChannels = [];\r\n    this._textureOptions = {};\r\n    this._surfaceDataType = null;\r\n  }\r\n  getSurfaceDataType(env: EnvironmentLighting): PBStructTypeInfo {\r\n    return this.createSurfaceDataType(env);\r\n    /*\r\n    if (!this._surfaceDataType) {\r\n      this._surfaceDataType = this.createSurfaceDataType(env);\r\n    }\r\n    return this._surfaceDataType;\r\n    */\r\n  }\r\n  get albedo(): Vector4 {\r\n    return this._albedo;\r\n  }\r\n  set albedo(val: Vector4) {\r\n    if (!val.equalsTo(this._albedo)) {\r\n      this._albedo.assign(val.getArray());\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get albedoMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_ALBEDO]?.texture as Texture2D ?? null;\r\n  }\r\n  get albedoSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_ALBEDO]?.sampler ?? null;\r\n  }\r\n  get albedoMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_ALBEDO]?.texCoordIndex ?? null;\r\n  }\r\n  setAlbedoMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_ALBEDO, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get normalMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_NORMAL]?.texture as Texture2D ?? null;\r\n  }\r\n  get normalSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_NORMAL]?.sampler ?? null;\r\n  }\r\n  get normalMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_NORMAL]?.texCoordIndex ?? null;\r\n  }\r\n  setNormalMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_NORMAL, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get normalScale(): number {\r\n    return this._normalScale;\r\n  }\r\n  set normalScale(val: number) {\r\n    if (val !== this._normalScale) {\r\n      this._normalScale = val;\r\n      if (this.normalMap) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get emissiveMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_EMISSIVE]?.texture as Texture2D ?? null;\r\n  }\r\n  get emissiveSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_EMISSIVE]?.sampler ?? null;\r\n  }\r\n  get emissiveMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_EMISSIVE]?.texCoordIndex ?? null;\r\n  }\r\n  setEmissiveMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_EMISSIVE, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get emissiveColor(): Vector3 {\r\n    return this._emissiveFactor.xyz();\r\n  }\r\n  set emissiveColor(val: Vector3) {\r\n    if (val.x !== this._emissiveFactor.x || val.y !== this._emissiveFactor.y || val.z !== this._emissiveFactor.z) {\r\n      this._emissiveFactor.x = val.x;\r\n      this._emissiveFactor.y = val.y;\r\n      this._emissiveFactor.z = val.z;\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get emissiveStrength(): number {\r\n    return this._emissiveFactor.w;\r\n  }\r\n  set emissiveStrength(val: number) {\r\n    if (this._emissiveFactor.w !== val) {\r\n      this._emissiveFactor.w = val;\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  setTextureOptions(name: string, tex: BaseTexture, sampler: TextureSampler, texCoord: number, texTransform: Matrix4x4) {\r\n    tex = tex ?? null;\r\n    let info = this._textureOptions[name];\r\n    if (!tex) {\r\n      if (info) {\r\n        delete this._textureOptions[name];\r\n        this.optionChanged(true);\r\n      }\r\n      return;\r\n    }\r\n    if (!info) {\r\n      info = {\r\n        texture: null,\r\n        texCoordIndex: null,\r\n        sampler: null\r\n      };\r\n      this._textureOptions[name] = info;\r\n    }\r\n    sampler = sampler ?? null;\r\n    texTransform = texTransform || identTexTransform;\r\n    let uniformChanged = false;\r\n    let hashChanged = false;\r\n    if (info.texture !== tex) {\r\n      hashChanged ||= (!info.texture || !tex);\r\n      info.texture = tex;\r\n    }\r\n    if (info.sampler !== sampler) {\r\n      uniformChanged ||= !!info.texture;\r\n      info.sampler = sampler;\r\n    }\r\n    const index = this.addTexCoordChannel(texCoord, texTransform);\r\n    if (index !== info.texCoordIndex) {\r\n      info.texCoordIndex = index;\r\n      uniformChanged ||= !!info.texture;\r\n    }\r\n    if (uniformChanged || hashChanged) {\r\n      this.optionChanged(hashChanged);\r\n    }\r\n  }\r\n  calculateHash(): string {\r\n    const texChannelHash = this._texCoordChannels.map(val => val.srcLocation).join('');\r\n    const albedoHash = this.albedoMap ? this.albedoMapTexCoord + 1 : 0;\r\n    const normalHash = this.normalMap ? this.normalMapTexCoord + 1 : 0;\r\n    const emissiveHash = this.emissiveMap ? this.emissiveMapTexCoord + 1 : 0;\r\n    return `${texChannelHash}_${albedoHash}_${normalHash}_${emissiveHash}`;\r\n  }\r\n  setupUniforms(scope: PBGlobalScope, ctx: DrawContext) {\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      const pb = scope.$builder;\r\n      const that = this;\r\n      if (pb.shaderType === ShaderType.Vertex) {\r\n        for (let i = 0; i < that._texCoordChannels.length; i++) {\r\n          scope[`lm_texTransform${i}`] = pb.mat4().uniform(2);\r\n        }\r\n      } else {\r\n        scope.lm_albedo = pb.vec4().uniform(2).tag(LightModel.uniformAlbedoColor);\r\n        if (this.normalMap) {\r\n          scope.lm_normalScale = pb.float().uniform(2).tag(LightModel.uniformNormalScale);\r\n        }\r\n        scope.lm_emissiveFactor = pb.vec4().uniform(2).tag(LightModel.uniformEmissiveFactor);\r\n        this.setupTextureUniforms(scope);\r\n      }\r\n    }\r\n  }\r\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext) {\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      for (let i = 0; i < this._texCoordChannels.length; i++) {\r\n        bindGroup.setValue(`lm_texTransform${i}`, this._texCoordChannels[i].transform);\r\n      }\r\n      bindGroup.setValue('lm_albedo', this._albedo);\r\n      if (this.normalMap) {\r\n        bindGroup.setValue('lm_normalScale', this._normalScale);\r\n      }\r\n      bindGroup.setValue('lm_emissiveFactor', this._emissiveFactor);\r\n      this.applyTextureUniforms(bindGroup);\r\n    }\r\n  }\r\n  getSurfaceData(scope: PBInsideFunctionScope, envLight: EnvironmentLighting, worldPos: PBShaderExp, worldNormal?: PBShaderExp, worldTangent?: PBShaderExp, worldBinormal?: PBShaderExp): PBShaderExp {\r\n    const funcNameGetSurfaceData = 'lib_getSurfaceData';\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    const args = [worldPos.xyz];\r\n    if (!pb.getFunction(funcNameGetSurfaceData)) {\r\n      const params = [pb.vec3('worldPos')];\r\n      if (worldNormal) {\r\n        params.push(pb.vec3('worldNormal'));\r\n        args.push(worldNormal);\r\n        if (worldTangent) {\r\n          params.push(pb.vec3('worldTangent'), pb.vec3('worldBinormal'));\r\n          args.push(worldTangent, worldBinormal);\r\n        }\r\n      }\r\n      pb.globalScope.$function(funcNameGetSurfaceData, params, function () {\r\n        this.$l.surfaceData = pb.defineStructByType(that.getSurfaceDataType(envLight))();\r\n        this.$l.normalInfo = that.calculateNormal(this, this.worldPos, worldNormal ? this.worldNormal : null, worldTangent ? this.worldTangent : null, worldTangent ? this.worldBinormal : null);\r\n        this.surfaceData.TBN = this.normalInfo.TBN;\r\n        this.surfaceData.normal = this.normalInfo.normal;\r\n        this.surfaceData.viewVec = pb.normalize(pb.sub(pb.queryGlobal(ShaderLib.USAGE_CAMERA_POSITION), this.worldPos));\r\n        this.surfaceData.NdotV = pb.clamp(pb.dot(this.surfaceData.normal, this.surfaceData.viewVec), 0.0001, 1);\r\n        this.surfaceData.diffuse = that.calculateAlbedo(this)\r\n        this.surfaceData.accumDiffuse = pb.vec3(0);\r\n        this.surfaceData.accumSpecular = pb.vec3(0);\r\n        this.surfaceData.accumEmissive = that.calculateEmissive(this);\r\n        this.surfaceData.accumColor = pb.vec3(0);\r\n        that.fillSurfaceData(this, envLight, this.surfaceData);\r\n        this.$return(this.surfaceData);\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameGetSurfaceData](...args);\r\n  }\r\n  getTextureUniformName(key: string) {\r\n    return `lm_${key}_Map`;\r\n  }\r\n  calculateTexCoord(scope: PBInsideFunctionScope, index: number): PBShaderExp {\r\n    return scope.$builder.mul(scope[`lm_texTransform${index}`], scope.$builder.vec4(scope.$inputs[`texcoord${this._texCoordChannels[index].srcLocation}`], 0, 1)).xy;\r\n  }\r\n  calculateEmissive(scope: PBInsideFunctionScope): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    const emissiveMap = scope[this.getTextureUniformName(TEX_NAME_EMISSIVE)];\r\n    const emissiveFactor = pb.queryGlobal(LightModel.uniformEmissiveFactor);\r\n    if (emissiveFactor) {\r\n      const emissiveColor = pb.mul(emissiveFactor.rgb, emissiveFactor.a);\r\n      if (emissiveMap) {\r\n        const emissiveTexCoord = scope.$inputs[`texcoord${this.emissiveMapTexCoord}`];\r\n        return pb.mul(pb.textureSample(emissiveMap, emissiveTexCoord).rgb, emissiveColor).rgb;\r\n      } else {\r\n        return emissiveColor;\r\n      }\r\n    } else {\r\n      return pb.vec3(0);\r\n    }\r\n  }\r\n  calculateAlbedo(scope: PBInsideFunctionScope): PBShaderExp {\r\n    const that = this;\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(LightModel.funcNameCalcAlbedo)) {\r\n      pb.globalScope.$function(LightModel.funcNameCalcAlbedo, [], function () {\r\n        const diffuseMap = this[that.getTextureUniformName(TEX_NAME_ALBEDO)];\r\n        const texCoord = diffuseMap && this.$inputs[`texcoord${that.albedoMapTexCoord}`];\r\n        const vertexColor = pb.queryGlobal(ShaderLib.USAGE_VERTEX_COLOR);\r\n        let val = pb.queryGlobal(LightModel.uniformAlbedoColor);\r\n        if (diffuseMap && texCoord) {\r\n          const tex = pb.textureSample(\r\n            diffuseMap,\r\n            texCoord,\r\n          );\r\n          val = pb.mul(val, tex);\r\n        }\r\n        if (vertexColor) {\r\n          val = pb.mul(val, vertexColor);\r\n        }\r\n        this.$return(val);\r\n      });\r\n    }\r\n    return pb.globalScope[LightModel.funcNameCalcAlbedo]();\r\n  }\r\n  calculateNormal(scope: PBInsideFunctionScope, worldPosition: PBShaderExp, worldNormal?: PBShaderExp, worldTangent?: PBShaderExp, worldBinormal?: PBShaderExp): PBShaderExp {\r\n    return this.calculatePixelNormal(scope, this.calculateTBN(scope, worldPosition, worldNormal, worldTangent, worldBinormal));\r\n  }\r\n  abstract supportLighting(): boolean;\r\n  abstract envBRDF(envLight: EnvironmentLighting, scope: PBInsideFunctionScope, surfaceData: PBShaderExp): void;\r\n  abstract directBRDF(scope: PBInsideFunctionScope, surfaceData: PBShaderExp, lightDir: PBShaderExp, attenuation: PBShaderExp): void;\r\n  finalComposite(scope: PBInsideFunctionScope, surfaceData: PBShaderExp): PBShaderExp {\r\n    const funcNameFinalComposite = 'lib_finalComposite';\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    if (!pb.getFunction(funcNameFinalComposite)) {\r\n      pb.globalScope.$function(funcNameFinalComposite, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n        this.surfaceData.accumColor = pb.add(this.surfaceData.accumDiffuse, this.surfaceData.accumSpecular, this.surfaceData.accumEmissive);\r\n        that.compositeSurfaceData(this, this.surfaceData);\r\n        this.$return(this.surfaceData.accumColor);\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameFinalComposite](surfaceData);\r\n  }\r\n  /** @internal */\r\n  getHash(): string {\r\n    if (!this._hash) {\r\n      this._hash = `${this.constructor.name}_${this.calculateHash()}`;\r\n    }\r\n    return this._hash;\r\n  }\r\n  /** @internal */\r\n  protected compositeSurfaceData(scope: PBInsideFunctionScope, surfaceData: PBShaderExp) {\r\n    // to be overriden\r\n  }\r\n  /** @internal */\r\n  protected createSurfaceDataType(env: EnvironmentLighting): PBStructTypeInfo {\r\n    return new PBStructTypeInfo('', 'default', [{\r\n      name: 'diffuse',\r\n      type: typeF32Vec4\r\n    }, {\r\n      name: 'normal',\r\n      type: typeF32Vec3\r\n    }, {\r\n      name: 'viewVec',\r\n      type: typeF32Vec3\r\n    }, {\r\n      name: 'NdotV',\r\n      type: typeF32\r\n    }, {\r\n      name: 'TBN',\r\n      type: typeMat3\r\n    }, {\r\n      name: 'accumDiffuse',\r\n      type: typeF32Vec3\r\n    }, {\r\n      name: 'accumSpecular',\r\n      type: typeF32Vec3\r\n    }, {\r\n      name: 'accumEmissive',\r\n      type: typeF32Vec3\r\n    }, {\r\n      name: 'accumColor',\r\n      type: typeF32Vec3\r\n    }]);\r\n  }\r\n  /** @internal */\r\n  protected isTextureUsed(name: string): boolean {\r\n    return !!this._textureOptions[name]?.texture;\r\n  }\r\n  /** @internal */\r\n  protected fillSurfaceData(scope: PBInsideFunctionScope, envLight: EnvironmentLighting, surfaceData: PBShaderExp) {\r\n    // to be overriden\r\n  }\r\n  /** @internal */\r\n  protected applyTextureUniforms(bindGroup: BindGroup) {\r\n    for (const k in this._textureOptions) {\r\n      if (this.isTextureUsed(k)) {\r\n        const uniformName = this.getTextureUniformName(k);\r\n        const info = this._textureOptions[k];\r\n        bindGroup.setTexture(uniformName, info.texture, info.sampler);\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected setupTextureUniforms(scope: PBGlobalScope) {\r\n    const pb = scope.$builder;\r\n    for (const k in this._textureOptions) {\r\n      if (this.isTextureUsed(k)) {\r\n        const uniformName = this.getTextureUniformName(k);\r\n        const texture = this._textureOptions[k].texture;\r\n        let exp: PBShaderExp;\r\n        if (texture.isTexture2D()) {\r\n          exp = pb.tex2D().uniform(2);\r\n        } else if (texture.isTextureCube()) {\r\n          exp = pb.texCube().uniform(2);\r\n        } else if (texture.isTexture3D()) {\r\n          exp = pb.tex3D().uniform(2);\r\n        } else if (texture.isTexture2DArray()) {\r\n          exp = pb.tex2DArray().uniform(2);\r\n        } else if (texture.isTextureVideo()) {\r\n          exp = pb.texExternal().uniform(2);\r\n        } else {\r\n          throw new Error('Unsupported light model texture type');\r\n        }\r\n        if (!texture.isFilterable()) {\r\n          exp.sampleType('unfilterable-float');\r\n        }\r\n        scope[uniformName] = exp;\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected addTexCoordChannel(srcLocation: number, transform?: Matrix4x4): number {\r\n    transform = transform || Matrix4x4.identity();\r\n    let index = this._texCoordChannels.findIndex(val => val.srcLocation === srcLocation && val.transform.equalsTo(transform));\r\n    if (index < 0) {\r\n      index = this._texCoordChannels.length;\r\n      this._texCoordChannels.push({\r\n        srcLocation,\r\n        transform: new Matrix4x4(transform)\r\n      });\r\n    }\r\n    return index;\r\n  }\r\n  /** @internal */\r\n  protected calculatePixelNormal(scope: PBInsideFunctionScope, TBN: PBShaderExp): PBShaderExp {\r\n    const funcNameCalculatePixelNormal = 'lib_calculatePixelNormal';\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    if (!pb.getFunction(funcNameCalculatePixelNormal)) {\r\n      pb.globalScope.$function(funcNameCalculatePixelNormal, [pb.mat3('TBN')], function () {\r\n        if (that.normalMap) {\r\n          this.$l.normalScale = pb.queryGlobal(ShaderLib.USAGE_NORMAL_SCALE) || pb.float(1);\r\n          this.$l.normalTex = pb.sub(pb.mul(pb.textureSample(this[that.getTextureUniformName(TEX_NAME_NORMAL)], this.$inputs[`texcoord${that.normalMapTexCoord}`]).rgb, 2), pb.vec3(1));\r\n          this.$l.normalTex = pb.mul(this.normalTex, pb.vec3(this.normalScale, this.normalScale, 1));\r\n          this.$l.pixelNormal = pb.normalize(pb.mul(this.TBN, this.normalTex));\r\n        } else {\r\n          this.$l.pixelNormal = this.TBN[2];\r\n        }\r\n        this.$return(pb.defineStruct('', 'default', pb.mat3('TBN'), pb.vec3('normal'))(this.TBN, this.pixelNormal));\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameCalculatePixelNormal](TBN);\r\n  }\r\n  /** @internal */\r\n  protected calculateTBN(scope: PBInsideFunctionScope, worldPosition: PBShaderExp, worldNormal?: PBShaderExp, worldTangent?: PBShaderExp, worldBinormal?: PBShaderExp): PBShaderExp {\r\n    const funcNameCalculateTBN = 'lib_calculateTBN';\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    if (!pb.getFunction(funcNameCalculateTBN)) {\r\n      const params = [pb.vec3('posW')];\r\n      if (worldNormal) {\r\n        params.push(pb.vec3('normalW'));\r\n      }\r\n      if (worldTangent) {\r\n        params.push(pb.vec3('tangentW'));\r\n        params.push(pb.vec3('binormalW'));\r\n      }\r\n      pb.globalScope.$function(funcNameCalculateTBN, params, function () {\r\n        this.$l.UV = that.normalMap\r\n          ? scope.$inputs[`texcoord${that.normalMapTexCoord}`]\r\n          : that.albedoMap\r\n            ? scope.$inputs[`texcoord${that.albedoMapTexCoord}`]\r\n            : pb.vec2(0);\r\n        this.$l.uv_dx = pb.dpdx(pb.vec3(this.UV, 0));\r\n        this.$l.uv_dy = pb.dpdy(pb.vec3(this.UV, 0));\r\n        this.$if(pb.lessThanEqual(pb.add(pb.length(this.uv_dx), pb.length(this.uv_dy)), 0.000001), function () {\r\n          this.uv_dx = pb.vec3(1, 0, 0);\r\n          this.uv_dy = pb.vec3(0, 1, 0);\r\n        });\r\n        this.$l.t_ = pb.div(pb.sub(pb.mul(pb.dpdx(this.posW), this.uv_dy.y), pb.mul(pb.dpdy(this.posW), this.uv_dx.y)), pb.sub(pb.mul(this.uv_dx.x, this.uv_dy.y), pb.mul(this.uv_dx.y, this.uv_dy.x)));\r\n        this.$l.n = pb.vec3();\r\n        this.$l.t = pb.vec3();\r\n        this.$l.b = pb.vec3();\r\n        this.$l.ng = pb.vec3();\r\n        if (worldNormal) {\r\n          if (worldTangent) {\r\n            this.t = pb.normalize(this.tangentW);\r\n            this.b = pb.normalize(this.binormalW);\r\n            this.ng = pb.normalize(this.normalW);\r\n          } else {\r\n            this.ng = pb.normalize(this.normalW);\r\n            this.t = pb.normalize(pb.sub(this.t_, pb.mul(this.ng, pb.dot(this.ng, this.t_))));\r\n            this.b = pb.cross(this.ng, this.t);\r\n          }\r\n        } else {\r\n          this.ng = pb.normalize(pb.cross(pb.dpdx(this.posW), pb.dpdy(this.posW)));\r\n          this.t = pb.normalize(pb.sub(this.t_, pb.mul(this.ng, pb.dot(this.ng, this.t_))));\r\n          this.b = pb.cross(this.ng, this.t);\r\n        }\r\n        this.$if(pb.not(this.$builtins.frontFacing), function () {\r\n          this.t = pb.mul(this.t, -1);\r\n          this.b = pb.mul(this.b, -1);\r\n          this.ng = pb.mul(this.ng, -1);\r\n        });\r\n        this.$return(pb.mat3(this.t, this.b, this.ng));\r\n      });\r\n    }\r\n    const params = [worldPosition];\r\n    if (worldNormal) {\r\n      params.push(worldNormal);\r\n    }\r\n    if (worldTangent) {\r\n      params.push(worldTangent);\r\n      params.push(worldBinormal);\r\n    }\r\n    return pb.globalScope[funcNameCalculateTBN](...params);\r\n  }\r\n  /** @internal */\r\n  protected optionChanged(changeHash: boolean) {\r\n    this._uniformVersion++;\r\n    if (changeHash) {\r\n      this._hash = null;\r\n      this._surfaceDataType = null;\r\n      this._hashVersion++;\r\n    }\r\n  }\r\n  /** @internal */\r\n  isTexCoordIndexUsed(texCoordIndex: number): boolean {\r\n    return typeof this._texCoordChannels[texCoordIndex]?.srcLocation === 'number';\r\n  }\r\n  /** @internal */\r\n  isTexCoordSrcLocationUsed(loc: number): boolean {\r\n    return this._texCoordChannels.findIndex(val => val.srcLocation === loc) >= 0;\r\n  }\r\n  /** @internal */\r\n  getTexCoordSrcLocation(texCoordIndex: number) {\r\n    return this._texCoordChannels[texCoordIndex].srcLocation;\r\n  }\r\n  isNormalUsed(): boolean {\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  applyUniformsIfOutdated(bindGroup: BindGroup, ctx: DrawContext) {\r\n    const tags = this._bindGroupTagList.get(bindGroup);\r\n    if (!tags || tags[0] !== this._uniformVersion || tags[1] !== bindGroup.cid) {\r\n      if (tags) {\r\n        tags[0] = this._uniformVersion;\r\n        tags[1] = bindGroup.cid;\r\n      } else {\r\n        this._bindGroupTagList.set(bindGroup, [this._uniformVersion, bindGroup.cid]);\r\n      }\r\n      this.applyUniforms(bindGroup, ctx);\r\n    }\r\n  }\r\n}\r\n\r\nexport class UnlitLightModel extends LightModel {\r\n  /** @internal */\r\n  private static readonly funcNameBRDFUnlit = 'libLM_brdfUnlit';\r\n  supportLighting(): boolean {\r\n    return false;\r\n  }\r\n  envBRDF(envLight: EnvironmentLighting, scope: PBInsideFunctionScope, surfaceData: PBShaderExp): void {\r\n  }\r\n  directBRDF(scope: PBInsideFunctionScope, surfaceData: PBShaderExp, lightDir: PBShaderExp, attenuation: PBShaderExp): void {\r\n  }\r\n  isNormalUsed(): boolean {\r\n    return false;\r\n  }\r\n  protected compositeSurfaceData(scope: PBInsideFunctionScope, surfaceData: PBShaderExp) {\r\n    surfaceData.accumColor = this.calculateAlbedo(scope);\r\n  }\r\n}\r\n\r\nexport class LambertLightModel extends LightModel {\r\n  protected static readonly funcNameBRDFEnvConstantAmbient = 'lib_lambertLM_envConstantAmbient';\r\n  protected static readonly funcNameBRDFEnvIBL = 'lib_lambertLM_envIBL';\r\n  protected static readonly funcNameBRDFDirect = 'lib_lambertLM_direct';\r\n  supportLighting(): boolean {\r\n    return true;\r\n  }\r\n  envBRDF(envLight: EnvironmentLighting, scope: PBInsideFunctionScope, surfaceData: PBShaderExp): void {\r\n    const pb = scope.$builder;\r\n    if (envLight.isConstant()) {\r\n      if (!pb.getFunction(LambertLightModel.funcNameBRDFEnvConstantAmbient)) {\r\n        pb.globalScope.$function(LambertLightModel.funcNameBRDFEnvConstantAmbient, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n          this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.mul(pb.queryGlobal(EnvConstantAmbient.USAGE_CONSTANT_AMBIENT_LIGHTING).rgb, this.surfaceData.diffuse.rgb));\r\n        });\r\n      }\r\n      pb.globalScope[LambertLightModel.funcNameBRDFEnvConstantAmbient](surfaceData);\r\n    } else if (envLight.isIBL()) {\r\n      if (!pb.getFunction(LambertLightModel.funcNameBRDFEnvIBL)) {\r\n        pb.globalScope.$function(LambertLightModel.funcNameBRDFEnvIBL, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n          this.$l.irradiance = pb.mul(pb.textureSample(pb.queryGlobal(EnvIBL.USAGE_IBL_IRRADIANCE_MAP), this.surfaceData.normal).rgb, this.surfaceData.diffuse.rgb);\r\n          this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.mul(this.irradiance, pb.queryGlobal(ShaderLib.USAGE_ENV_LIGHT_STRENGTH)));\r\n        });\r\n      }\r\n      pb.globalScope[LambertLightModel.funcNameBRDFEnvIBL](surfaceData);\r\n    }\r\n  }\r\n  directBRDF(scope: PBInsideFunctionScope, surfaceData: PBShaderExp, lightDir: PBShaderExp, attenuation: PBShaderExp): void {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(LambertLightModel.funcNameBRDFDirect)) {\r\n      pb.globalScope.$function(LambertLightModel.funcNameBRDFDirect, [pb.struct(surfaceData.getTypeName(), 'surfaceData'), pb.vec3('attenuation')], function () {\r\n        this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.mul(this.surfaceData.diffuse.rgb, this.attenuation));\r\n      });\r\n    }\r\n    pb.globalScope[LambertLightModel.funcNameBRDFDirect](surfaceData, attenuation);\r\n  }\r\n}\r\n\r\nexport abstract class PBRLightModelBase extends LightModel {\r\n  /** @internal */\r\n  private static readonly funcNameFresnelSchlick = 'lib_PBRLM_fresnelSchlick';\r\n  /** @internal */\r\n  private static readonly funcNameDistributionGGX = 'lib_PBRLM_distributionGGX';\r\n  /** @internal */\r\n  private static readonly funcNameVisGGX = 'lib_PBRLM_visGGX';\r\n  /** @internal */\r\n  private static readonly funcNameCalcPBRLight = 'lib_PBRLM_calcPBRLight';\r\n  /** @internal */\r\n  private static readonly funcNameIllumEnvLight = 'lib_PBRLM_illumEnvLight_pbr';\r\n  /** @internal */\r\n  private static readonly funcNameFresnelSchlickRoughness = 'lib_PBRLM_fresnelSchlickRoughness';\r\n  /** @internal */\r\n  private static readonly funcNameEnvDFGLazarov = 'lib_PBRLM_envDFGLazarov';\r\n  /** @internal */\r\n  private static readonly funcNameBRDFEnvConstantAmbient = 'PBRLM_envConstantAmbient';\r\n  /** @internal */\r\n  private static readonly uniformF0 = 'PBRLM_f0';\r\n  /** @internal */\r\n  private static readonly uniformOcclusionStrength = 'PBRLM_occlusionStrength';\r\n  /** @internal */\r\n  protected static readonly uniformSheenFactor = 'lib_PBRLM_sheenFactor';\r\n  /** @internal */\r\n  protected static readonly uniformClearcoatFactor = 'lib_PBRLM_clearcoatFactor';\r\n  /** @internal */\r\n  protected static readonly uniformClearcoatNormalScale = 'lib_PBRLM_clearcoatNormalScale';\r\n  /** @internal */\r\n  protected _f0: Vector4;\r\n  /** @internal */\r\n  protected _occlusionStrength: number;\r\n  /** @internal */\r\n  protected _sheen: boolean;\r\n  /** @internal */\r\n  protected _sheenFactor: Vector4;\r\n  /** @internal */\r\n  protected _clearcoat: boolean;\r\n  /** @internal */\r\n  protected _clearcoatFactor: Vector4;\r\n  constructor() {\r\n    super();\r\n    this._f0 = new Vector4(0.04, 0.04, 0.04, 1.5);\r\n    this._sheen = false;\r\n    this._sheenFactor = Vector4.zero();\r\n    this._clearcoat = false;\r\n    this._clearcoatFactor = new Vector4(0, 0, 1, 0);\r\n    this._occlusionStrength = 1;\r\n  }\r\n  get ior(): number {\r\n    return this._f0.w;\r\n  }\r\n  set ior(val: number) {\r\n    if (val !== this._f0.w) {\r\n      let k = (val - 1) / (val + 1);\r\n      k *= k;\r\n      this._f0.set(k, k, k, val);\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get occlusionStrength(): number {\r\n    return this._occlusionStrength;\r\n  }\r\n  set occlusionStrength(val: number) {\r\n    if (this._occlusionStrength !== val) {\r\n      this._occlusionStrength = val;\r\n      if (this.occlusionMap) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get occlusionMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_OCCLUSION]?.texture as Texture2D ?? null;\r\n  }\r\n  get occlusionSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_OCCLUSION]?.sampler ?? null;\r\n  }\r\n  get occlusionMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_OCCLUSION]?.texCoordIndex ?? null;\r\n  }\r\n  setOcclusionMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_OCCLUSION, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get useSheen(): boolean {\r\n    return this._sheen;\r\n  }\r\n  set useSheen(val: boolean) {\r\n    if (this._sheen !== !!val) {\r\n      this._sheen = !!val;\r\n      this.optionChanged(true);\r\n    }\r\n  }\r\n  get sheenColorFactor(): Vector3 {\r\n    return this._sheenFactor.xyz();\r\n  }\r\n  set sheenColorFactor(val: Vector3) {\r\n    if (val.x !== this._sheenFactor.x || val.y !== this._sheenFactor.y || val.z !== this._sheenFactor.z) {\r\n      this._sheenFactor.x = val.x;\r\n      this._sheenFactor.y = val.y;\r\n      this._sheenFactor.z = val.z;\r\n      if (this._sheen) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get sheenRoughnessFactor(): number {\r\n    return this._sheenFactor.w;\r\n  }\r\n  set sheenRoughnessFactor(val: number) {\r\n    if (val !== this._sheenFactor.w) {\r\n      this._sheenFactor.w = val;\r\n      if (this._sheen) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get sheenLut(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SHEEN_LUT]?.texture as Texture2D ?? null;\r\n  }\r\n  setSheenLut(tex: Texture2D) {\r\n    this.setTextureOptions(TEX_NAME_SHEEN_LUT, tex, null, 0, null);\r\n  }\r\n  get sheenColorMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SHEEN_COLOR]?.texture as Texture2D ?? null;\r\n  }\r\n  get sheenColorSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_SHEEN_COLOR]?.sampler ?? null;\r\n  }\r\n  get sheenColorMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_SHEEN_COLOR]?.texCoordIndex ?? null;\r\n  }\r\n  setSheenColorMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_SHEEN_COLOR, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get sheenRoughnessMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SHEEN_ROUGHNESS]?.texture as Texture2D ?? null;\r\n  }\r\n  get sheenRoughnessSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_SHEEN_ROUGHNESS]?.sampler ?? null;\r\n  }\r\n  get sheenRoughnessMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_SHEEN_ROUGHNESS]?.texCoordIndex ?? null;\r\n  }\r\n  setSheenRoughnessMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_SHEEN_ROUGHNESS, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get useClearcoat(): boolean {\r\n    return this._clearcoat;\r\n  }\r\n  set useClearcoat(val: boolean) {\r\n    if (this._clearcoat !== !!val) {\r\n      this._clearcoat = !!val;\r\n      this.optionChanged(true);\r\n    }\r\n  }\r\n  get clearcoatIntensity(): number {\r\n    return this._clearcoatFactor.x;\r\n  }\r\n  set clearcoatIntensity(val: number) {\r\n    if (val !== this._clearcoatFactor.x) {\r\n      this._clearcoatFactor.x = val;\r\n      if (this._clearcoat) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get clearcoatRoughnessFactor(): number {\r\n    return this._clearcoatFactor.y;\r\n  }\r\n  set clearcoatRoughnessFactor(val: number) {\r\n    if (val !== this._clearcoatFactor.y) {\r\n      this._clearcoatFactor.y = val;\r\n      if (this._clearcoat) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get clearcoatNormalScale(): number {\r\n    return this._clearcoatFactor.z;\r\n  }\r\n  set clearcoatNormalScale(val: number) {\r\n    if (val !== this._clearcoatFactor.z) {\r\n      this._clearcoatFactor.z = val;\r\n      if (this._clearcoat) {\r\n        this.optionChanged(false);\r\n      }\r\n    }\r\n  }\r\n  get clearcoatIntensityMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_INTENSITY]?.texture as Texture2D ?? null;\r\n  }\r\n  get clearcoatIntensitySampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_INTENSITY]?.sampler ?? null;\r\n  }\r\n  get clearcoatIntensityMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_INTENSITY]?.texCoordIndex ?? null;\r\n  }\r\n  setClearcoatIntensityMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_CLEARCOAT_INTENSITY, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get clearcoatRoughnessMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_ROUGHNESS]?.texture as Texture2D ?? null;\r\n  }\r\n  get clearcoatRoughnessSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_ROUGHNESS]?.sampler ?? null;\r\n  }\r\n  get clearcoatRoughnessMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_ROUGHNESS]?.texCoordIndex ?? null;\r\n  }\r\n  setClearcoatRoughnessMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_CLEARCOAT_ROUGHNESS, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get clearcoatNormalMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_NORMAL]?.texture as Texture2D ?? null;\r\n  }\r\n  get clearcoatNormalSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_NORMAL]?.sampler ?? null;\r\n  }\r\n  get clearcoatNormalMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_CLEARCOAT_NORMAL]?.texCoordIndex ?? null;\r\n  }\r\n  setClearcoatNormalMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_CLEARCOAT_NORMAL, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext) {\r\n    super.applyUniforms(bindGroup, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      bindGroup.setValue('lm_f0', this._f0);\r\n      if (this.occlusionMap) {\r\n        bindGroup.setValue('lm_occlusionStrength', this._occlusionStrength);\r\n      }\r\n      if (this._sheen) {\r\n        bindGroup.setValue('lm_sheenFactor', this._sheenFactor);\r\n      }\r\n      if (this._clearcoat) {\r\n        bindGroup.setValue('lm_clearcoatFactor', this._clearcoatFactor);\r\n      }\r\n    }\r\n  }\r\n  calculateHash(): string {\r\n    const occlusionHash = this.occlusionMap ? this.occlusionMapTexCoord + 1 : 0;\r\n    const ccIntensityHash = this.clearcoatIntensityMap ? this.clearcoatIntensityMapTexCoord + 1 : 0;\r\n    const ccRoughnessHash = this.clearcoatRoughnessMap ? this.clearcoatRoughnessMapTexCoord + 1 : 0;\r\n    const ccNormalHash = this.clearcoatNormalMap ? this.clearcoatNormalMapTexCoord + 1 : 0;\r\n    const ccHash = this.useClearcoat ? `(${ccIntensityHash}-${ccRoughnessHash}-${ccNormalHash})` : '';\r\n    const sheenColorHash = this.sheenColorMap ? this.sheenColorMapTexCoord + 1 : 0;\r\n    const sheenRoughnessHash = this.sheenRoughnessMap ? this.sheenRoughnessMapTexCoord + 1 : 0;\r\n    const sheenHash = this.useSheen ? `(${sheenColorHash}-${sheenRoughnessHash})` : '';\r\n    return `${super.calculateHash()}_${occlusionHash}_${sheenHash}_${ccHash}`;\r\n  }\r\n  setupUniforms(scope: PBGlobalScope, ctx: DrawContext): void {\r\n    super.setupUniforms(scope, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      if (scope.$builder.shaderType === ShaderType.Fragment) {\r\n        scope.lm_f0 = scope.$builder.vec4().uniform(2).tag(PBRLightModelBase.uniformF0);\r\n        if (this.occlusionMap) {\r\n          scope.lm_occlusionStrength = scope.$builder.float().uniform(2).tag(PBRLightModelBase.uniformOcclusionStrength);\r\n        }\r\n        if (this._sheen) {\r\n          scope.lm_sheenFactor = scope.$builder.vec4().uniform(2).tag(PBRLightModelBase.uniformSheenFactor);\r\n        }\r\n        if (this._clearcoat) {\r\n          scope.lm_clearcoatFactor = scope.$builder.vec4().uniform(2).tag(PBRLightModelBase.uniformClearcoatFactor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected createSurfaceDataType(env: EnvironmentLighting): PBStructTypeInfo {\r\n    const type = super.createSurfaceDataType(env);\r\n    const props = [{\r\n      name: 'f0',\r\n      type: typeF32Vec4,\r\n    }, {\r\n      name: 'f90',\r\n      type: typeF32Vec3,\r\n    }, {\r\n      name: 'occlusion',\r\n      type: typeF32Vec4,\r\n    }];\r\n    if (this._sheen) {\r\n      props.push({\r\n        name: 'sheenColor',\r\n        type: typeF32Vec3,\r\n      }, {\r\n        name: 'sheenRoughness',\r\n        type: typeF32,\r\n      }, {\r\n        name: 'sheenAlbedoScaling',\r\n        type: typeF32,\r\n      }, {\r\n        name: 'sheenContrib',\r\n        type: typeF32Vec3,\r\n      });\r\n    }\r\n    if (this._clearcoat) {\r\n      props.push({\r\n        name: 'clearcoatFactor',\r\n        type: typeF32Vec4,\r\n      }, {\r\n        name: 'clearcoatNormal',\r\n        type: typeF32Vec3,\r\n      }, {\r\n        name: 'clearcoatNdotV',\r\n        type: typeF32,\r\n      }, {\r\n        name: 'clearcoatFresnel',\r\n        type: typeF32Vec3,\r\n      }, {\r\n        name: 'clearcoatContrib',\r\n        type: typeF32Vec3,\r\n      });\r\n    }\r\n    if (env?.isIBL()) {\r\n      props.push({\r\n        name: 'irradiance',\r\n        type: typeF32Vec3,\r\n      }, {\r\n        name: 'radiance',\r\n        type: typeF32Vec3,\r\n      });\r\n      if (this._sheen) {\r\n        props.push({\r\n          name: 'radianceSheen',\r\n          type: typeF32Vec3\r\n        });\r\n      }\r\n      if (this._clearcoat) {\r\n        props.push({\r\n          name: 'radianceClearcoat',\r\n          type: typeF32Vec3\r\n        });\r\n      }\r\n    }\r\n    return props.length > 0 ? type.extends('', props) : type;\r\n  }\r\n  /** @internal */\r\n  protected fillSurfaceData(scope: PBInsideFunctionScope, envLight: EnvironmentLighting, surfaceData: PBShaderExp) {\r\n    super.fillSurfaceData(scope, envLight, surfaceData);\r\n    const funcNameFillSurfaceDataPBRCommon = 'lib_fillSurfaceDataPBRCommon';\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    if (!pb.getFunction(funcNameFillSurfaceDataPBRCommon)) {\r\n      pb.globalScope.$function(funcNameFillSurfaceDataPBRCommon, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n        this.surfaceData.f0 = pb.queryGlobal(PBRLightModelBase.uniformF0);\r\n        this.surfaceData.f90 = pb.vec3(1);\r\n        const strength = pb.queryGlobal(ShaderLib.USAGE_ENV_LIGHT_STRENGTH);\r\n        if (that.occlusionMap) {\r\n          const occlusionStrength = pb.queryGlobal(PBRLightModelBase.uniformOcclusionStrength);\r\n          const texCoord = this.$inputs[`texcoord${that.occlusionMapTexCoord ?? that.albedoMapTexCoord}`];\r\n          this.surfaceData.occlusion = pb.textureSample(this[that.getTextureUniformName(TEX_NAME_OCCLUSION)], texCoord);\r\n          this.surfaceData.occlusion.r = pb.mul(pb.add(pb.mul(occlusionStrength, pb.sub(this.surfaceData.occlusion.r, 1)), 1), strength);\r\n        } else {\r\n          this.surfaceData.occlusion = pb.vec4(strength);\r\n        }\r\n        if (that.useClearcoat) {\r\n          this.surfaceData.clearcoatFactor = pb.queryGlobal(PBRLightModelBase.uniformClearcoatFactor);\r\n          if (that.clearcoatNormalMap) {\r\n            const clearcoatNormalMap = this[that.getTextureUniformName(TEX_NAME_CLEARCOAT_NORMAL)];\r\n            const texCoord = this.$inputs[`texcoord${that.clearcoatNormalMapTexCoord ?? that.albedoMapTexCoord}`];\r\n            this.$l.ccNormal = pb.sub(pb.mul(pb.textureSample(clearcoatNormalMap, texCoord).rgb, 2), pb.vec3(1));\r\n            this.ccNormal = pb.mul(this.ccNormal, pb.vec3(this.surfaceData.clearcoatFactor.z, this.surfaceData.clearcoatFactor.z, 1));\r\n            this.surfaceData.clearcoatNormal = pb.normalize(pb.mul(this.surfaceData.TBN, this.ccNormal));\r\n            this.surfaceData.clearcoatNdotV = pb.clamp(pb.dot(this.surfaceData.clearcoatNormal, this.surfaceData.viewVec), 0.0001, 1);\r\n          } else {\r\n            this.surfaceData.clearcoatNormal = this.surfaceData.TBN[2];\r\n            this.surfaceData.clearcoatNdotV = this.surfaceData.NdotV;\r\n          }\r\n          if (that.clearcoatIntensityMap) {\r\n            const clearcoatIntensityMap = this[that.getTextureUniformName(TEX_NAME_CLEARCOAT_INTENSITY)];\r\n            const texCoord = this.$inputs[`texcoord${that.clearcoatIntensityMapTexCoord ?? that.albedoMapTexCoord}`];\r\n            this.surfaceData.clearcoatFactor.x = pb.mul(this.surfaceData.clearcoatFactor.x, pb.textureSample(clearcoatIntensityMap, texCoord).r);\r\n          }\r\n          if (that.clearcoatRoughnessMap) {\r\n            const clearcoatRoughnessMap = this[that.getTextureUniformName(TEX_NAME_CLEARCOAT_ROUGHNESS)];\r\n            const texCoord = this.$inputs[`texcoord${that.clearcoatRoughnessMapTexCoord ?? that.albedoMapTexCoord}`];\r\n            this.surfaceData.clearcoatFactor.y = pb.mul(this.surfaceData.clearcoatFactor.y, pb.textureSample(clearcoatRoughnessMap, texCoord).g);\r\n          }\r\n          this.surfaceData.clearcoatFactor.y = pb.clamp(this.surfaceData.clearcoatFactor.y, 0, 1);\r\n          this.surfaceData.clearcoatContrib = pb.vec3(0);\r\n          // clearcoatFresnel/radianceClearcoat will be set after f0 and f90 are set\r\n        }\r\n        if (that._sheen) {\r\n          this.$l.sheenColor = pb.queryGlobal(PBRLightModelBase.uniformSheenFactor).rgb;\r\n          this.$l.sheenRoughness = pb.queryGlobal(PBRLightModelBase.uniformSheenFactor).a;\r\n          if (that.sheenColorMap) {\r\n            const sheenColorMap = this[that.getTextureUniformName(TEX_NAME_SHEEN_COLOR)];\r\n            const texCoord = this.$inputs[`texcoord${that.sheenColorMapTexCoord ?? that.albedoMapTexCoord}`];\r\n            this.$l.sheenColor = pb.mul(this.$l.sheenColor, pb.textureSample(sheenColorMap, texCoord).rgb);\r\n          }\r\n          if (that.sheenRoughnessMap) {\r\n            const sheenRoughnessMap = this[that.getTextureUniformName(TEX_NAME_SHEEN_ROUGHNESS)];\r\n            const texCoord = this.$inputs[`texcoord${that.sheenRoughnessMapTexCoord ?? that.albedoMapTexCoord}`];\r\n            this.$l.sheenRoughness = pb.mul(this.$l.sheenRoughness, pb.textureSample(sheenRoughnessMap, texCoord).a);\r\n          }\r\n          if (that.sheenLut) {\r\n            const sheenLut = this[that.getTextureUniformName(TEX_NAME_SHEEN_LUT)];\r\n            this.$l.sheenDFG = pb.textureSample(sheenLut, pb.vec2(this.surfaceData.NdotV, this.sheenRoughness)).b;\r\n          } else {\r\n            this.$l.sheenDFG = 0.157;\r\n          }\r\n          this.surfaceData.sheenAlbedoScaling = pb.sub(1, pb.mul(pb.max(pb.max(this.sheenColor.r, this.sheenColor.g), this.sheenColor.b), this.sheenDFG));\r\n          this.surfaceData.sheenColor = this.sheenColor;\r\n          this.surfaceData.sheenRoughness = this.sheenRoughness;\r\n          this.surfaceData.sheenContrib = pb.vec3(0);\r\n          if (envLight?.isIBL()) {\r\n            this.surfaceData.radianceSheen = pb.mul(this.sheenColor, this.sheenDFG);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    pb.globalScope[funcNameFillSurfaceDataPBRCommon](surfaceData);\r\n  }\r\n  /** @internal */\r\n  protected fresnelSchlickRoughness(scope: PBInsideFunctionScope, NdotV: PBShaderExp, F0: PBShaderExp, roughness: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameFresnelSchlickRoughness)) {\r\n      pb.globalScope.$function(\r\n        PBRLightModelBase.funcNameFresnelSchlickRoughness, [pb.float('NdotV'), pb.vec3('f0'), pb.float('roughness')], function () {\r\n          this.$return(\r\n            pb.add(\r\n              this.f0,\r\n              pb.mul(\r\n                pb.sub(pb.max(pb.vec3(pb.sub(1, this.roughness)), this.f0), this.f0),\r\n                pb.pow(pb.sub(1, this.NdotV), 5),\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      );\r\n    }\r\n    return pb.globalScope[PBRLightModelBase.funcNameFresnelSchlickRoughness](NdotV, F0, roughness);\r\n  }\r\n  /** @internal */\r\n  protected envDFGLazarov(scope: PBInsideFunctionScope, specularColor: PBShaderExp, gloss: PBShaderExp, NdotV: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameEnvDFGLazarov)) {\r\n      pb.globalScope.$function(PBRLightModelBase.funcNameEnvDFGLazarov, [pb.vec3('specularColor'), pb.float('gloss'), pb.float('NdotV')], function () {\r\n        this.$l.p0 = pb.vec4(0.5745, 1.548, -0.02397, 1.301);\r\n        this.$l.p1 = pb.vec4(0.5753, -0.2511, -0.02066, 0.4755);\r\n        this.$l.t = pb.add(pb.mul(this.p0, this.gloss), this.p1);\r\n        this.$l.bias = pb.clamp(pb.add(pb.mul(this.t.x, pb.min(this.t.y, pb.exp2(pb.mul(-7.672, this.NdotV)))), this.t.z), 0, 1);\r\n        this.$l.delta = pb.clamp(this.t.w, 0, 1);\r\n        this.$l.scale = pb.sub(this.delta, this.bias);\r\n        this.bias = pb.mul(this.bias, pb.clamp(pb.mul(50, this.specularColor.y), 0, 1));\r\n        this.$return(pb.add(pb.mul(this.specularColor, this.scale), pb.vec3(this.bias)));\r\n      });\r\n    }\r\n    return pb.globalScope[PBRLightModelBase.funcNameEnvDFGLazarov](specularColor, gloss, NdotV);\r\n  }\r\n  /** @internal */\r\n  protected envDFGUE4(scope: PBInsideFunctionScope, roughness: PBShaderExp, NdotV: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    const funcNameEnvDFGUE4 = 'lib_envDFGUE4';\r\n    if (!pb.getFunction(funcNameEnvDFGUE4)) {\r\n      pb.globalScope.$function(funcNameEnvDFGUE4, [pb.float('roughness'), pb.float('NdotV')], function () {\r\n        this.$l.c0 = pb.vec4(-1, -0.0275, -0.572, 0.022);\r\n        this.$l.c1 = pb.vec4(1, 0.0425, 1.04, -0.04);\r\n        this.$l.r = pb.add(pb.mul(this.c0, this.roughness), this.c1);\r\n        this.$l.a004 = pb.add(pb.mul(pb.min(pb.mul(this.r.x, this.r.x), pb.exp2(pb.mul(this.NdotV, -9.28))), this.r.x), this.r.y);\r\n        this.$return(pb.add(pb.mul(pb.vec2(-1.04, 1.04), this.a004), this.r.zw));\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameEnvDFGUE4](roughness, NdotV);\r\n  }\r\n  /** @internal */\r\n  protected illumEnvLight(scope: PBInsideFunctionScope, surfaceData: PBShaderExp) {\r\n    const pb = scope.$builder;\r\n    const that = this;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameIllumEnvLight)) {\r\n      pb.globalScope.$function(PBRLightModelBase.funcNameIllumEnvLight, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n        this.$l.f0 = this.surfaceData.f0.rgb;\r\n        this.$l.F = that.fresnelSchlickRoughness(this, this.surfaceData.NdotV, this.f0, this.surfaceData.roughness);\r\n        this.$l.fab = that.envDFGUE4(this, this.surfaceData.roughness, this.surfaceData.NdotV);\r\n        this.$l.fr = pb.sub(pb.max(pb.vec3(pb.sub(1, this.surfaceData.roughness)), this.f0), this.f0);\r\n        this.$l.kS = pb.add(this.f0, pb.mul(this.fr, pb.pow(pb.sub(1, this.surfaceData.NdotV), 5)));\r\n        this.$l.t = pb.mul(this.kS, this.fab.x);\r\n        this.$l.spec = pb.mul(this.surfaceData.radiance, pb.add(this.t, pb.vec3(this.fab.y)), this.surfaceData.specularWeight);\r\n        if (that._clearcoat) {\r\n          this.$l.ccF = that.fresnelSchlickRoughness(this, this.surfaceData.clearcoatNdotV, this.f0, this.surfaceData.clearcoatFactor.y);\r\n          this.$l.ccfab = that.envDFGUE4(this, this.surfaceData.clearcoatFactor.y, this.surfaceData.clearcoatNdotV);\r\n          this.$l.ccfr = pb.sub(pb.max(pb.vec3(pb.sub(1, this.surfaceData.clearcoatFactor.y)), this.f0), this.f0);\r\n          this.$l.cckS = pb.add(this.f0, pb.mul(this.ccfr, pb.pow(pb.sub(1, this.surfaceData.clearcoatNdotV), 5)));\r\n          this.$l.cct = pb.mul(this.cckS, this.ccfab.x);\r\n          this.$l.ccspec = pb.mul(this.surfaceData.radianceClearcoat, pb.add(this.cct, pb.vec3(this.ccfab.y)));\r\n          this.surfaceData.clearcoatContrib = pb.add(this.surfaceData.clearcoatContrib, pb.mul(this.ccspec, this.surfaceData.occlusion.r));\r\n        }\r\n        this.$l.FssEss = pb.add(pb.mul(this.t, this.surfaceData.specularWeight), this.fab.y);\r\n        this.$l.Ems = pb.sub(1, pb.add(this.fab.x, this.fab.y));\r\n        this.$l.Favg = pb.mul(pb.add(this.f0, pb.div(pb.sub(pb.vec3(1), this.f0), 21)), this.surfaceData.specularWeight);\r\n        this.$l.FmsEms = pb.mul(this.Ems, this.FssEss, pb.div(this.Favg, pb.sub(pb.vec3(1), pb.mul(this.Favg, this.Ems))));\r\n        this.$l.kD = pb.mul(this.surfaceData.diffuse.rgb, pb.add(pb.sub(pb.vec3(1), this.FssEss), this.FmsEms));\r\n        this.diff = pb.mul(pb.add(this.FmsEms, this.kD), this.surfaceData.irradiance);\r\n        this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.mul(this.diff, this.surfaceData.occlusion.r));\r\n        this.surfaceData.accumSpecular = pb.add(this.surfaceData.accumSpecular, pb.mul(this.spec, this.surfaceData.occlusion.r));\r\n        if (that._sheen) {\r\n          this.surfaceData.sheenContrib = pb.add(this.surfaceData.sheenContrib, pb.mul(this.surfaceData.radianceSheen, this.surfaceData.occlusion.r));\r\n        }\r\n      });\r\n    }\r\n    pb.globalScope[PBRLightModelBase.funcNameIllumEnvLight](surfaceData);\r\n  }\r\n  supportLighting(): boolean {\r\n    return true;\r\n  }\r\n  envBRDF(envLight: EnvironmentLighting, scope: PBInsideFunctionScope, surfaceData: PBShaderExp): void {\r\n    if (envLight.isConstant()) {\r\n      const pb = scope.$builder;\r\n      if (!pb.getFunction(PBRLightModelBase.funcNameBRDFEnvConstantAmbient)) {\r\n        pb.globalScope.$function(PBRLightModelBase.funcNameBRDFEnvConstantAmbient, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n          this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.queryGlobal(EnvConstantAmbient.USAGE_CONSTANT_AMBIENT_LIGHTING).rgb);\r\n        });\r\n      }\r\n      pb.globalScope[PBRLightModelBase.funcNameBRDFEnvConstantAmbient](surfaceData);\r\n    } else if (envLight.isIBL()) {\r\n      this.illumEnvLight(scope, surfaceData);\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected fresnelSchlick(scope: PBInsideFunctionScope, VdotH: PBShaderExp, f0: PBShaderExp, f90: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameFresnelSchlick)) {\r\n      pb.globalScope.$function(PBRLightModelBase.funcNameFresnelSchlick, [pb.float('VdotH'), pb.vec3('F0'), pb.vec3('F90')], function () {\r\n        this.$return(pb.add(this.F0, pb.mul(pb.sub(this.F90, this.F0), pb.pow(pb.clamp(pb.sub(1, this.VdotH), 0, 1), 5))));\r\n      });\r\n    }\r\n    return pb.globalScope[PBRLightModelBase.funcNameFresnelSchlick](VdotH, f0, f90);\r\n  }\r\n  /** @internal */\r\n  protected distributionGGX(scope: PBInsideFunctionScope, NdotH: PBShaderExp, alphaRoughness: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameDistributionGGX)) {\r\n      pb.globalScope.$function(\r\n        PBRLightModelBase.funcNameDistributionGGX,\r\n        [pb.float('NdotH'), pb.float('roughness')],\r\n        function () {\r\n          this.$l.a2 = pb.mul(this.roughness, this.roughness);\r\n          this.$l.NdotH2 = pb.mul(this.NdotH, this.NdotH);\r\n          this.$l.num = this.a2;\r\n          this.$l.denom = pb.add(pb.mul(this.NdotH2, pb.sub(this.a2, 1)), 1);\r\n          this.denom = pb.mul(pb.mul(3.14159265, this.denom), this.denom);\r\n          this.$return(pb.div(this.num, this.denom));\r\n        },\r\n      );\r\n    }\r\n    return pb.globalScope[PBRLightModelBase.funcNameDistributionGGX](NdotH, alphaRoughness);\r\n  }\r\n  /** @internal */\r\n  protected visGGX(scope: PBInsideFunctionScope, NdotV: PBShaderExp, NdotL: PBShaderExp, alphaRoughness: PBShaderExp): PBShaderExp {\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameVisGGX)) {\r\n      pb.globalScope.$function(\r\n        PBRLightModelBase.funcNameVisGGX,\r\n        [pb.float('NdotV'), pb.float('NdotL'), pb.float('roughness')],\r\n        function () {\r\n          this.$l.a2 = pb.mul(this.roughness, this.roughness);\r\n          this.$l.ggxV = pb.mul(this.NdotL, pb.sqrt(pb.add(pb.mul(this.NdotV, this.NdotV, pb.sub(1, this.a2)), this.a2)));\r\n          this.$l.ggxL = pb.mul(this.NdotV, pb.sqrt(pb.add(pb.mul(this.NdotL, this.NdotL, pb.sub(1, this.a2)), this.a2)));\r\n          this.$l.ggx = pb.add(this.ggxV, this.ggxL);\r\n          this.$if(pb.greaterThan(this.ggx, 0), function () {\r\n            this.$return(pb.div(0.5, this.ggx));\r\n          }).$else(function () {\r\n            this.$return(pb.float(0));\r\n          });\r\n        },\r\n      );\r\n    }\r\n    return pb.globalScope[PBRLightModelBase.funcNameVisGGX](NdotV, NdotL, alphaRoughness);\r\n  }\r\n  directBRDF(scope: PBInsideFunctionScope, surfaceData: PBShaderExp, lightDir: PBShaderExp, attenuation: PBShaderExp): void {\r\n    const that = this;\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(PBRLightModelBase.funcNameCalcPBRLight)) {\r\n      pb.globalScope.$function(\r\n        PBRLightModelBase.funcNameCalcPBRLight, [pb.struct(surfaceData.getTypeName(), 'surfaceData'), pb.vec3('lightDir'), pb.vec3('attenuation')], function () {\r\n          this.$l.L = pb.neg(this.lightDir);\r\n          this.$l.halfVec = pb.normalize(pb.sub(this.surfaceData.viewVec, this.lightDir));\r\n          this.$l.NdotH = pb.clamp(pb.dot(this.surfaceData.normal, this.halfVec), 0, 1);\r\n          this.$l.NdotL = pb.clamp(pb.dot(this.surfaceData.normal, this.L), 0, 1);\r\n          this.$l.VdotH = pb.clamp(pb.dot(this.surfaceData.viewVec, this.halfVec), 0, 1);\r\n          this.$l.alphaRoughness = pb.mul(this.surfaceData.roughness, this.surfaceData.roughness);\r\n          this.$l.D = that.distributionGGX(this, this.NdotH, this.alphaRoughness);\r\n          this.$l.f0 = this.surfaceData.f0.rgb;\r\n          this.$l.F = that.fresnelSchlick(this, this.VdotH, this.f0, this.surfaceData.f90);\r\n          this.$l.V = that.visGGX(this, this.surfaceData.NdotV, this.NdotL, this.alphaRoughness);\r\n          this.surfaceData.accumSpecular = pb.add(this.surfaceData.accumSpecular, pb.mul(this.D, this.V, this.F, this.surfaceData.specularWeight, this.attenuation));\r\n          this.surfaceData.accumDiffuse = pb.add(this.surfaceData.accumDiffuse, pb.mul(pb.sub(pb.vec3(1), pb.mul(this.F, this.surfaceData.specularWeight)), pb.div(this.surfaceData.diffuse.rgb, Math.PI), this.attenuation));\r\n          if (that._sheen) {\r\n            this.surfaceData.sheenContrib = pb.add(this.surfaceData.sheenContrib, pb.mul(that.sheenDirect(this, this.surfaceData, this.NdotL, this.NdotH), this.attenuation));\r\n          }\r\n          if (that._clearcoat) {\r\n            this.$l.ccRoughness = pb.mul(this.surfaceData.clearcoatFactor.y, this.surfaceData.clearcoatFactor.y);\r\n            this.$l.ccNdotH = pb.clamp(pb.dot(this.surfaceData.clearcoatNormal, this.halfVec), 0, 1);\r\n            this.$l.ccNdotL = pb.clamp(pb.dot(this.surfaceData.clearcoatNormal, this.L), 0, 1);\r\n            this.$l.ccD = that.distributionGGX(this, this.ccNdotH, this.ccRoughness);\r\n            this.$l.ccV = that.visGGX(this, this.surfaceData.clearcoatNdotV, this.ccNdotL, this.ccRoughness);\r\n            this.surfaceData.clearcoatContrib = pb.add(this.surfaceData.clearcoatContrib, pb.mul(this.ccD, this.ccV, this.F, this.attenuation));\r\n          }\r\n        },\r\n      );\r\n    }\r\n    pb.globalScope[PBRLightModelBase.funcNameCalcPBRLight](surfaceData, lightDir, attenuation);\r\n  }\r\n  /** @internal */\r\n  protected compositeSurfaceData(scope: PBInsideFunctionScope, surfaceData: PBShaderExp) {\r\n    // to be overriden\r\n    super.compositeSurfaceData(scope, surfaceData);\r\n    const pb = scope.$builder;\r\n    if (this._sheen) {\r\n      surfaceData.accumColor = pb.add(pb.mul(surfaceData.accumColor, surfaceData.sheenAlbedoScaling), surfaceData.sheenContrib);\r\n    }\r\n    if (this._clearcoat) {\r\n      surfaceData.accumColor = pb.add(pb.mul(surfaceData.accumColor, pb.sub(pb.vec3(1), pb.mul(surfaceData.clearcoatFresnel, surfaceData.clearcoatFactor.x))), pb.mul(surfaceData.clearcoatContrib, surfaceData.clearcoatFactor.x))\r\n      // surfaceData.accumColor = pb.add(pb.mul(surfaceData.clearcoatNormal, 0.5), pb.vec3(0.5));\r\n      // surfaceData.accumColor = pb.vec3(surfaceData.clearcoatFresnel);\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected D_Charlie(scope: PBInsideFunctionScope, NdotH: PBShaderExp, sheenRoughness: PBShaderExp): PBShaderExp {\r\n    const funcNameDCharlie = 'lib_DCharlie';\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(funcNameDCharlie)) {\r\n      pb.globalScope.$function(funcNameDCharlie, [pb.float('NdotH'), pb.float('sheenRoughness')], function () {\r\n        this.$l.alphaG = pb.mul(this.sheenRoughness, this.sheenRoughness);\r\n        this.$l.invR = pb.div(1, this.alphaG);\r\n        this.$l.cos2h = pb.mul(this.NdotH, this.NdotH);\r\n        this.$l.sin2h = pb.sub(1, this.cos2h);\r\n        this.$return(pb.div(pb.mul(pb.add(this.invR, 2), pb.pow(this.sin2h, pb.mul(this.invR, 0.5))), 2 * Math.PI));\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameDCharlie](NdotH, sheenRoughness);\r\n  }\r\n  /** @internal */\r\n  protected V_Ashikhmin(scope: PBInsideFunctionScope, NdotL: PBShaderExp, NdotV: PBShaderExp): PBShaderExp {\r\n    const funcNameVAshikhmin = 'lib_VAshikhmin';\r\n    const pb = scope.$builder;\r\n    if (!pb.getFunction(funcNameVAshikhmin)) {\r\n      pb.globalScope.$function(funcNameVAshikhmin, [pb.float('NdotL'), pb.float('NdotV')], function () {\r\n        this.$return(pb.div(1, pb.mul(pb.sub(pb.add(this.NdotL, this.NdotV), pb.mul(this.NdotL, this.NdotV)), 4)));\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameVAshikhmin](NdotL, NdotV);\r\n  }\r\n  /** @internal */\r\n  protected sheenDirect(scope: PBInsideFunctionScope, surfaceData: PBShaderExp, NdotL: PBShaderExp, NdotH: PBShaderExp) {\r\n    const D = this.D_Charlie(scope, NdotH, surfaceData.sheenRoughness);\r\n    const V = this.V_Ashikhmin(scope, NdotL, surfaceData.NdotV);\r\n    return scope.$builder.mul(surfaceData.sheenColor, D, V);\r\n  }\r\n}\r\n\r\nexport class PBRLightModelSG extends PBRLightModelBase {\r\n  protected static readonly uniformSpecularFactor = 'lib_PBRSG_specularFactor';\r\n  protected static readonly uniformGlossinessFactor = 'lib_PBRSG_glossinessFactor';\r\n  /** @internal */\r\n  protected _specularFactor: Vector4;\r\n  /** @internal */\r\n  protected _glossinessFactor: number;\r\n  constructor() {\r\n    super();\r\n    this._specularFactor = Vector4.one();\r\n    this._glossinessFactor = 1;\r\n  }\r\n  get specularFactor(): Vector4 {\r\n    return this._specularFactor;\r\n  }\r\n  set specularFactor(val: Vector4) {\r\n    if (val && !this._specularFactor.equalsTo(val)) {\r\n      this._specularFactor.assign(val.getArray());\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get glossinessFactor(): number {\r\n    return this._glossinessFactor;\r\n  }\r\n  set glossinessFactor(val: number) {\r\n    if (val !== this._glossinessFactor) {\r\n      this._glossinessFactor = val;\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get specularMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.texture as Texture2D ?? null;;\r\n  }\r\n  get specularMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.texCoordIndex ?? null;\r\n  }\r\n  get specularSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.sampler ?? null;\r\n  }\r\n  setSpecularMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_SPECULAR, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext) {\r\n    super.applyUniforms(bindGroup, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      bindGroup.setValue('lm_specularFactor', this._specularFactor);\r\n      bindGroup.setValue('lm_glossinessFactor', this._glossinessFactor);\r\n    }\r\n  }\r\n  calculateHash(): string {\r\n    return `${super.calculateHash()}_${this.specularMap ? `${this.specularMapTexCoord + 1}` : 0}`;\r\n  }\r\n  setupUniforms(scope: PBGlobalScope, ctx: DrawContext): void {\r\n    super.setupUniforms(scope, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL && scope.$builder.shaderType === ShaderType.Fragment) {\r\n      scope.lm_specularFactor = scope.$builder.vec4().uniform(2).tag(PBRLightModelSG.uniformSpecularFactor);\r\n      scope.lm_glossinessFactor = scope.$builder.float().uniform(2).tag(PBRLightModelSG.uniformGlossinessFactor);\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected fillSurfaceData(scope: PBInsideFunctionScope, envLight: EnvironmentLighting, surfaceData: PBShaderExp) {\r\n    const funcNameFillSurfaceDataSG = 'lib_fillSurfaceDataSG';\r\n    const that = this;\r\n    const pb = scope.$builder;\r\n    super.fillSurfaceData(scope, envLight, surfaceData);\r\n    // surface data contains F0, metallic, roughness\r\n    if (!pb.getFunction(funcNameFillSurfaceDataSG)) {\r\n      pb.globalScope.$function(funcNameFillSurfaceDataSG, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n        this.surfaceData.f0 = pb.vec4(pb.queryGlobal(PBRLightModelSG.uniformSpecularFactor).rgb, this.surfaceData.f0.a);\r\n        this.surfaceData.roughness = pb.queryGlobal(PBRLightModelSG.uniformGlossinessFactor);\r\n        if (that.specularMap) {\r\n          const texCoord = this.$inputs[`texcoord${that.specularMapTexCoord ?? that.albedoMapTexCoord}`];\r\n          this.$l.t = pb.textureSample(this[that.getTextureUniformName(TEX_NAME_SPECULAR)], texCoord);\r\n          this.surfaceData.roughness = pb.mul(this.surfaceData.roughness, this.t.a);\r\n          this.surfaceData.f0 = pb.mul(this.surfaceData.f0, pb.vec4(this.t.rgb, 1));\r\n        }\r\n        this.surfaceData.roughness = pb.sub(1, this.surfaceData.roughness);\r\n        this.surfaceData.metallic = pb.max(pb.max(this.surfaceData.f0.r, this.surfaceData.f0.g), this.surfaceData.f0.b);\r\n        this.surfaceData.diffuse = pb.vec4(pb.mul(this.surfaceData.diffuse.rgb, pb.sub(1, this.surfaceData.metallic)), this.surfaceData.diffuse.a);\r\n        this.surfaceData.specularWeight = pb.float(1);\r\n        if (that._clearcoat) {\r\n          this.surfaceData.clearcoatFresnel = that.fresnelSchlick(this, this.surfaceData.clearcoatNdotV, this.surfaceData.f0.rgb, this.surfaceData.f90);\r\n        }\r\n        if (envLight?.isIBL()) {\r\n          this.surfaceData.irradiance = pb.textureSample(pb.queryGlobal(EnvIBL.USAGE_IBL_IRRADIANCE_MAP), this.surfaceData.normal).rgb;\r\n          this.$l.refl = pb.reflect(pb.neg(this.surfaceData.viewVec), this.surfaceData.normal);\r\n          this.$l.maxLod = pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP_MAX_LOD);\r\n          this.surfaceData.radiance = pb.device?.getShaderCaps().supportShaderTextureLod\r\n            ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl, pb.mul(this.surfaceData.roughness, this.maxLod)).rgb\r\n            : pb.textureSample(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl).rgb;\r\n          if (that.useSheen) {\r\n            const r = pb.device?.getShaderCaps().supportShaderTextureLod\r\n              ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl, pb.mul(this.surfaceData.sheenRoughness, this.maxLod)).rgb\r\n              : this.surfaceData.radiance;\r\n            this.surfaceData.radianceSheen = pb.mul(this.surfaceData.radianceSheen, r);\r\n          }\r\n          if (that.useClearcoat) {\r\n            this.$l.ccRefl = pb.reflect(pb.neg(this.surfaceData.viewVec), this.surfaceData.clearcoatNormal);\r\n            this.surfaceData.radianceClearcoat = pb.device?.getShaderCaps().supportShaderTextureLod\r\n              ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.ccRefl, pb.mul(this.surfaceData.clearcoatFactor.y, this.maxLod)).rgb\r\n              : this.surfaceData.radiance;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    pb.globalScope[funcNameFillSurfaceDataSG](surfaceData);\r\n  }\r\n  /** @internal */\r\n  protected createSurfaceDataType(env: EnvironmentLighting): PBStructTypeInfo {\r\n    return super.createSurfaceDataType(env).extends('', [{\r\n      name: 'metallic',\r\n      type: typeF32\r\n    }, {\r\n      name: 'roughness',\r\n      type: typeF32\r\n    }, {\r\n      name: 'specularWeight',\r\n      type: typeF32\r\n    }]);\r\n  }\r\n}\r\n\r\nexport class PBRLightModelMR extends PBRLightModelBase {\r\n  protected static readonly uniformMetallic = 'lib_PBRLM_metallic';\r\n  protected static readonly uniformRoughness = 'lib_PBRLM_roughness';\r\n  protected static readonly uniformSpecularFactor = 'lib_PBRLM_specularFactor';\r\n  /** @internal */\r\n  protected _metallic: number;\r\n  /** @internal */\r\n  protected _roughness: number;\r\n  /** @internal */\r\n  protected _metallicIndex: number;\r\n  /** @internal */\r\n  protected _roughnessIndex: number;\r\n  /** @internal */\r\n  protected _specularFactor: Vector4;\r\n  constructor() {\r\n    super();\r\n    this._metallic = 1;\r\n    this._roughness = 1;\r\n    this._metallicIndex = 2;\r\n    this._roughnessIndex = 1;\r\n    this._specularFactor = Vector4.one();\r\n  }\r\n  get metallic(): number {\r\n    return this._metallic;\r\n  }\r\n  set metallic(val: number) {\r\n    if (val !== this._metallic) {\r\n      this._metallic = val;\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get roughness(): number {\r\n    return this._roughness;\r\n  }\r\n  set roughness(val: number) {\r\n    if (val !== this._roughness) {\r\n      this._roughness = val;\r\n      this.optionChanged(false);\r\n    }\r\n  }\r\n  get metallicIndex(): number {\r\n    return this._metallicIndex;\r\n  }\r\n  set metallicIndex(val: number) {\r\n    if (this._metallicIndex !== val) {\r\n      this._metallicIndex = val;\r\n      this.optionChanged(true);\r\n    }\r\n  }\r\n  get roughnessIndex(): number {\r\n    return this._roughnessIndex;\r\n  }\r\n  set roughnessIndex(val: number) {\r\n    if (this._roughnessIndex !== val) {\r\n      this._roughnessIndex = val;\r\n      this.optionChanged(true);\r\n    }\r\n  }\r\n  get metallicMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_METALLIC]?.texture as Texture2D ?? null;\r\n  }\r\n  get metallicSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_METALLIC]?.sampler ?? null;\r\n  }\r\n  get metallicMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_METALLIC]?.texCoordIndex ?? null;\r\n  }\r\n  setMetallicMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_METALLIC, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get specularFactor(): Vector4 {\r\n    return this._specularFactor;\r\n  }\r\n  set specularFactor(val: Vector4) {\r\n    if (!val.equalsTo(this._specularFactor)) {\r\n      this._specularFactor.assign(val.getArray());\r\n      this.optionChanged(true);\r\n    }\r\n  }\r\n  get specularMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.texture as Texture2D ?? null;\r\n  }\r\n  get specularSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.sampler ?? null;\r\n  }\r\n  get specularMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_SPECULAR]?.texCoordIndex ?? null;\r\n  }\r\n  setSpecularMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_SPECULAR, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  get specularColorMap(): Texture2D {\r\n    return this._textureOptions[TEX_NAME_SPECULAR_COLOR]?.texture as Texture2D ?? null;\r\n  }\r\n  get specularColorSampler(): TextureSampler {\r\n    return this._textureOptions[TEX_NAME_SPECULAR_COLOR]?.sampler ?? null;\r\n  }\r\n  get specularColorMapTexCoord(): number {\r\n    return this._textureOptions[TEX_NAME_SPECULAR_COLOR]?.texCoordIndex ?? null;\r\n  }\r\n  setSpecularColorMap(tex: Texture2D, sampler: TextureSampler, texCoordIndex: number, texTransform?: Matrix4x4) {\r\n    this.setTextureOptions(TEX_NAME_SPECULAR_COLOR, tex, sampler, texCoordIndex, texTransform);\r\n  }\r\n  applyUniforms(bindGroup: BindGroup, ctx: DrawContext) {\r\n    super.applyUniforms(bindGroup, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL) {\r\n      bindGroup.setValue('lm_pbrMetallic', this._metallic);\r\n      bindGroup.setValue('lm_pbrRoughness', this._roughness);\r\n      bindGroup.setValue('lm_pbrSpecularFactor', this._specularFactor);\r\n    }\r\n  }\r\n  calculateHash(): string {\r\n    const metallicMapHash = this.metallicMap ? `${this.metallicMapTexCoord + 1}_${this._metallicIndex}_${this._roughnessIndex}` : '0';\r\n    const specularMapHash = this.specularMap ? `${this.specularMapTexCoord + 1}` : '0';\r\n    const specularColorMapHash = this.specularColorMap ? `${this.specularColorMapTexCoord + 1}` : '0';\r\n    return `${super.calculateHash()}_${metallicMapHash}_${specularMapHash}_${specularColorMapHash}`;\r\n  }\r\n  setupUniforms(scope: PBGlobalScope, ctx: DrawContext): void {\r\n    super.setupUniforms(scope, ctx);\r\n    if (ctx.materialFunc === MATERIAL_FUNC_NORMAL && scope.$builder.shaderType === ShaderType.Fragment) {\r\n      scope.lm_pbrMetallic = scope.$builder.float().uniform(2).tag(PBRLightModelMR.uniformMetallic);\r\n      scope.lm_pbrRoughness = scope.$builder.float().uniform(2).tag(PBRLightModelMR.uniformRoughness);\r\n      scope.lm_pbrSpecularFactor = scope.$builder.vec4().uniform(2).tag(PBRLightModelMR.uniformSpecularFactor);\r\n    }\r\n  }\r\n  /** @internal */\r\n  protected fillSurfaceData(scope: PBInsideFunctionScope, envLight: EnvironmentLighting, surfaceData: PBShaderExp): PBShaderExp {\r\n    const funcNameFillSurfaceDataMR = 'lib_fillSurfaceDataMR';\r\n    const that = this;\r\n    const pb = scope.$builder;\r\n    super.fillSurfaceData(scope, envLight, surfaceData);\r\n    // surface data contains F0, metallic, roughness\r\n    if (!pb.getFunction(funcNameFillSurfaceDataMR)) {\r\n      pb.globalScope.$function(funcNameFillSurfaceDataMR, [pb.struct(surfaceData.getTypeName(), 'surfaceData')], function () {\r\n        const metallicMap = that.metallicMap ? this[that.getTextureUniformName(TEX_NAME_METALLIC)] : null;\r\n        const specularMap = that.specularMap ? this[that.getTextureUniformName(TEX_NAME_SPECULAR)] : null;\r\n        const specularColorMap = that.specularColorMap ? this[that.getTextureUniformName(TEX_NAME_SPECULAR_COLOR)] : null;\r\n        const metallicFactor = pb.queryGlobal(PBRLightModelMR.uniformMetallic);\r\n        const roughnessFactor = pb.queryGlobal(PBRLightModelMR.uniformRoughness);\r\n        if (metallicMap) {\r\n          const texCoord = this.$inputs[`texcoord${that.metallicMapTexCoord ?? that.albedoMapTexCoord}`];\r\n          this.$l.t = pb.textureSample(metallicMap, texCoord);\r\n          const metallic = this.t['xyzw'[that._metallicIndex] || 'z'];\r\n          const roughness = this.t['xyzw'[that._roughnessIndex] || 'y'];\r\n          this.surfaceData.metallic = metallicFactor ? pb.mul(metallic, metallicFactor) : metallic;\r\n          this.surfaceData.roughness = roughnessFactor ? pb.mul(roughness, roughnessFactor) : roughness;\r\n        } else {\r\n          this.surfaceData.metallic = metallicFactor;\r\n          this.surfaceData.roughness = roughnessFactor;\r\n        }\r\n        const specularFactor = pb.queryGlobal(PBRLightModelMR.uniformSpecularFactor);\r\n        this.$l.specularColorFactor = specularFactor.rgb;\r\n        this.surfaceData.specularWeight = specularFactor.a;\r\n        if (specularColorMap) {\r\n          const texCoord = this.$inputs[`texcoord${that.specularColorMapTexCoord ?? that.albedoMapTexCoord}`];\r\n          this.specularColorFactor = pb.mul(this.specularColorFactor, pb.textureSample(specularColorMap, texCoord).rgb);\r\n        }\r\n        if (specularMap) {\r\n          const texCoord = this.$inputs[`texcoord${that.specularMapTexCoord ?? that.albedoMapTexCoord}`];\r\n          this.surfaceData.specularWeight = pb.mul(this.surfaceData.specularWeight, pb.textureSample(specularMap, texCoord).a);\r\n        }\r\n        this.surfaceData.f0 = pb.vec4(pb.mix(pb.min(pb.mul(this.surfaceData.f0.rgb, this.specularColorFactor), pb.vec3(1)), this.surfaceData.diffuse.rgb, this.surfaceData.metallic), this.surfaceData.f0.a);\r\n        this.surfaceData.diffuse = pb.vec4(pb.mix(this.surfaceData.diffuse.rgb, pb.vec3(0), this.surfaceData.metallic), this.surfaceData.diffuse.a);\r\n        if (that._clearcoat) {\r\n          this.surfaceData.clearcoatFresnel = that.fresnelSchlick(this, this.surfaceData.clearcoatNdotV, this.surfaceData.f0.rgb, this.surfaceData.f90);\r\n        }\r\n        if (envLight?.isIBL()) {\r\n          this.surfaceData.irradiance = pb.textureSample(pb.queryGlobal(EnvIBL.USAGE_IBL_IRRADIANCE_MAP), this.surfaceData.normal).rgb;\r\n          this.$l.refl = pb.reflect(pb.neg(this.surfaceData.viewVec), this.surfaceData.normal);\r\n          this.$l.maxLod = pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP_MAX_LOD);\r\n          this.surfaceData.radiance = pb.device?.getShaderCaps().supportShaderTextureLod\r\n            ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl, pb.mul(this.surfaceData.roughness, this.maxLod)).rgb\r\n            : pb.textureSample(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl).rgb;\r\n          if (that.useSheen) {\r\n            const r = pb.device?.getShaderCaps().supportShaderTextureLod\r\n              ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.refl, pb.mul(this.surfaceData.sheenRoughness, this.maxLod)).rgb\r\n              : this.surfaceData.radiance;\r\n            this.surfaceData.radianceSheen = pb.mul(this.surfaceData.radianceSheen, r);\r\n          }\r\n          if (that.useClearcoat) {\r\n            this.$l.ccRefl = pb.reflect(pb.neg(this.surfaceData.viewVec), this.surfaceData.clearcoatNormal);\r\n            this.surfaceData.radianceClearcoat = pb.device?.getShaderCaps().supportShaderTextureLod\r\n              ? pb.textureSampleLevel(pb.queryGlobal(EnvIBL.USAGE_IBL_RADIANCE_MAP), this.ccRefl, pb.mul(this.surfaceData.clearcoatFactor.y, this.maxLod)).rgb\r\n              : this.surfaceData.radiance;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return pb.globalScope[funcNameFillSurfaceDataMR](surfaceData);\r\n  }\r\n  /** @internal */\r\n  protected createSurfaceDataType(env: EnvironmentLighting): PBStructTypeInfo {\r\n    return super.createSurfaceDataType(env).extends('', [{\r\n      name: 'metallic',\r\n      type: typeF32\r\n    }, {\r\n      name: 'roughness',\r\n      type: typeF32\r\n    }, {\r\n      name: 'specularWeight',\r\n      type: typeF32\r\n    }]);\r\n  }\r\n  /** @internal */\r\n  protected isTextureUsed(name: string): boolean {\r\n    if (!this._sheen && (name === TEX_NAME_SHEEN_COLOR || name === TEX_NAME_SHEEN_ROUGHNESS)) {\r\n      return false;\r\n    }\r\n    return super.isTextureUsed(name);\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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"}