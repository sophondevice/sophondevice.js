import { Matrix4x4 } from '@sophon/base';
import { Material } from '../material';
import type { LightModel } from './lightmodel';
import type { DrawContext } from '../drawable';
import type { Device } from '../../device/device';
import type { BindGroup, GPUProgram } from '../../device/gpuobject';
import type { ProgramBuilder } from '../../device/builder';
export declare class StandardMaterial<T extends LightModel = LightModel> extends Material {
    private _vertexColor;
    private _hasNormal;
    private _useTangent;
    private _alphaBlend;
    private _alphaCutoff;
    private _opacity;
    private _texCoordTransforms;
    private _texCoordTransformHash;
    private _lightModel;
    constructor(device: Device);
    get lightModel(): T;
    set lightModel(lm: T);
    get vertexColor(): boolean;
    set vertexColor(val: boolean);
    get vertexTangent(): boolean;
    set vertexTangent(val: boolean);
    get vertexNormal(): boolean;
    set vertexNormal(val: boolean);
    get alphaBlend(): boolean;
    set alphaBlend(val: boolean);
    get alphaCutoff(): number;
    set alphaCutoff(val: number);
    get opacity(): number;
    set opacity(val: number);
    getTexCoordTransform(index: number): Matrix4x4;
    setTexCoordTransform(index: number, matrix: Matrix4x4): void;
    removeTexCoordTransform(index: number): void;
    clearTexCoordTransforms(): void;
    isTransparent(): boolean;
    supportLighting(): boolean;
    applyUniforms(bindGroup: BindGroup, ctx: DrawContext, needUpdate: boolean): void;
    protected _applyUniforms(bindGroup: BindGroup, ctx: DrawContext): void;
    protected _createHash(): string;
    protected _createProgram(pb: ProgramBuilder, ctx: DrawContext, func: number): GPUProgram;
}
