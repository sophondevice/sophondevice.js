{"version":3,"file":"atlas_manager.js","sources":["../../../libs/dom/src/atlas_manager.ts"],"sourcesContent":["import { MaxRectsPacker } from './maxrects-packer';\nimport type { GUIRenderer } from './renderer';\nimport type { BaseTexture, Texture2D } from '@sophon/device';\n\nexport interface IAtlasInfo {\n  atlasIndex: number;\n  width: number;\n  height: number;\n  uMin: number;\n  vMin: number;\n  uMax: number;\n  vMax: number;\n}\n\nexport class AtlasManager {\n  /** @internal */\n  protected static readonly ATLAS_WIDTH = 1024;\n  /** @internal */\n  protected static readonly ATLAS_HEIGHT = 1024;\n  /** @internal */\n  protected _renderer: GUIRenderer;\n  /** @internal */\n  protected _packer: MaxRectsPacker;\n  /** @internal */\n  protected _cachePadding: number;\n  /** @internal */\n  protected _cacheWidth: number;\n  /** @internal */\n  protected _cacheHeight: number;\n  /** @internal */\n  protected _linearSpace: boolean;\n  /** @internal */\n  protected _atlasList: Texture2D[];\n  /** @internal */\n  protected _atlasInfoMap: { [hash: string]: IAtlasInfo };\n  /** @internal */\n  protected _atlasRestoreHandler: (tex: BaseTexture) => Promise<void>;\n  constructor(\n    renderer: GUIRenderer,\n    cacheWidth?: number,\n    cacheHeight?: number,\n    cachePadding?: number,\n    linearSpace?: boolean,\n  ) {\n    this._renderer = renderer;\n    this._cacheWidth =\n      typeof cacheWidth === 'number'\n        ? cacheWidth || AtlasManager.ATLAS_WIDTH\n        : AtlasManager.ATLAS_WIDTH;\n    this._cacheHeight =\n      typeof cacheHeight === 'number'\n        ? cacheHeight || AtlasManager.ATLAS_HEIGHT\n        : AtlasManager.ATLAS_HEIGHT;\n    this._cachePadding = typeof cachePadding === 'number' ? cachePadding : 0;\n    this._linearSpace = Boolean(linearSpace);\n    this._packer = new MaxRectsPacker(this._cacheWidth, this._cacheHeight, this._cachePadding, {\n      smart: true,\n      pot: false,\n      square: false,\n      allowRotation: false,\n      border: 1,\n      tag: false,\n    });\n    this._atlasList = [];\n    this._atlasInfoMap = {};\n    this._atlasRestoreHandler = null;\n  }\n  get atlasTextureRestoreHandler(): (tex: BaseTexture) => Promise<void> {\n    return this._atlasRestoreHandler;\n  }\n  set atlasTextureRestoreHandler(f: (tex: BaseTexture) => Promise<void>) {\n    this._atlasRestoreHandler = f;\n  }\n  getAtlasTexture(index: number): Texture2D {\n    return this._atlasList[index];\n  }\n  getAtlasInfo(key: string): IAtlasInfo {\n    return this._atlasInfoMap[key] || null;\n  }\n  isEmpty(): boolean {\n    return this._atlasList.length === 0;\n  }\n  clear() {\n    this._packer = new MaxRectsPacker(this._cacheWidth, this._cacheHeight, this._cachePadding, {\n      smart: true,\n      pot: false,\n      square: false,\n      allowRotation: false,\n      border: 1,\n      tag: false,\n    });\n    for (const tex of this._atlasList) {\n      const t = tex;\n      this._renderer.disposeTexture(t);\n    }\n    this._atlasList = [];\n    this._atlasInfoMap = {};\n  }\n  pushCanvas(\n    key: string,\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n  ) {\n    /*\n    const imgdata = ctx.getImageData(x, y, w, h);\n    return this.pushBitmap(key, imgdata);\n    */\n    const rc = this._packer.add(w, h, null);\n    if (rc) {\n      this._updateAtlasTextureCanvas(\n        this._packer.bins.length - 1,\n        ctx,\n        rc.x,\n        rc.y,\n        rc.width,\n        rc.height,\n        x,\n        y,\n      );\n      const info: IAtlasInfo = {\n        atlasIndex: this._packer.bins.length - 1,\n        uMin: rc.x / (this._cacheWidth + this._cachePadding),\n        vMin: rc.y / (this._cacheHeight + this._cachePadding),\n        uMax: (rc.x + rc.width) / (this._cacheWidth + this._cachePadding),\n        vMax: (rc.y + rc.height) / (this._cacheHeight + this._cachePadding),\n        width: rc.width,\n        height: rc.height,\n      };\n      this._atlasInfoMap[key] = info;\n      return info;\n    }\n  }\n  pushBitmap(key: string, bitmap: ImageData): IAtlasInfo {\n    const rc = this._packer.add(bitmap.width, bitmap.height, null);\n    if (rc) {\n      this._updateAtlasTexture(\n        this._packer.bins.length - 1,\n        bitmap,\n        rc.x,\n        rc.y,\n      );\n      const info: IAtlasInfo = {\n        atlasIndex: this._packer.bins.length - 1,\n        uMin: rc.x / (this._cacheWidth + this._cachePadding),\n        vMin: rc.y / (this._cacheHeight + this._cachePadding),\n        uMax: (rc.x + rc.width) / (this._cacheWidth + this._cachePadding),\n        vMax: (rc.y + rc.height) / (this._cacheHeight + this._cachePadding),\n        width: rc.width,\n        height: rc.height,\n      };\n      this._atlasInfoMap[key] = info;\n      return info;\n    }\n    return null;\n  }\n  /** @internal */\n  protected _createAtlasTexture(): Texture2D {\n    const zeroColor = { r: 0, g: 0, b: 0, a: 0 };\n    const tex = this._renderer.createTexture(this._cacheWidth + this._cachePadding, this._cacheHeight + this._cachePadding, zeroColor, this._linearSpace);\n    tex.restoreHandler = async tex => {\n      this._renderer.clearTexture(tex as Texture2D, zeroColor);\n      this._atlasRestoreHandler && await this._atlasRestoreHandler(tex as BaseTexture);\n    };\n    return tex;\n  }\n  /** @internal */\n  private _updateAtlasTextureCanvas(\n    atlasIndex: number,\n    bitmap: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    xOffset: number,\n    yOffset: number,\n  ) {\n    let textureAtlas: Texture2D = null;\n    if (atlasIndex === this._atlasList.length) {\n      textureAtlas = this._createAtlasTexture();\n      this._atlasList.push(textureAtlas);\n    } else {\n      textureAtlas = this._atlasList[atlasIndex];\n    }\n    this._renderer.updateTextureWithCanvas(textureAtlas, bitmap, xOffset, yOffset, w, h, x, y);\n  }\n  /** @internal */\n  private _updateAtlasTexture(\n    atlasIndex: number,\n    bitmap: ImageData,\n    x: number,\n    y: number,\n  ) {\n    let textureAtlas: Texture2D = null;\n    if (atlasIndex === this._atlasList.length) {\n      textureAtlas = this._createAtlasTexture();\n      this._atlasList.push(textureAtlas);\n    } else {\n      textureAtlas = this._atlasList[atlasIndex];\n    }\n    this._renderer.updateTextureWithImage(textureAtlas, bitmap, x, y);\n  }\n}\n"],"names":[],"mappings":"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"}