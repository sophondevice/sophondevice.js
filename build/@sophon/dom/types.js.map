{"version":3,"file":"types.js","sources":["../../../libs/dom/src/types.ts"],"sourcesContent":["import { REventPath, REventPathBuilder, REventTarget } from '@sophon/base';\n\nexport interface RCoord {\n  x: number;\n  y: number;\n}\n\nexport interface RColor {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/*\nexport type REventHandler = (evt: REvent)=>void;\nexport interface REventHandlerObject {\n    handleEvent: REventHandler;\n}\nexport type REventListener = REventHandler|REventHandlerObject;\n\nexport class REvent {\n    private static readonly FLAG_STOP_PROPAGATION = (1<<0);\n    private static readonly FLAG_STOP_IMMEDIATE_PROPAGATION = (1<<1);\n    private static readonly FLAG_CANCELED = (1<<2);\n    private static readonly FLAG_DISPATCHED = (1<<3);\n    private _type: string;\n    private _flags: number;\n    private _bubbles: boolean;\n    private _cancelable: boolean;\n    private _target: unknown;\n    private _currentTarget: unknown;\n    private _timestamp: number;\n    constructor (type: string, initOptions?: { bubbles?: boolean, cancelable?: boolean }) {\n        this._type = type;\n        this._flags = 0;\n        this._bubbles = !!initOptions?.bubbles;\n        this._cancelable = !!initOptions?.cancelable;\n        this._target = null;\n        this._currentTarget = null;\n        this._timestamp = Date.now ();\n    }\n    get type (): string {\n        return this._type;\n    }\n    get bubbles (): boolean {\n        return this._bubbles;\n    }\n    get cancelable (): boolean {\n        return this._cancelable;\n    }\n    get cancelBubble (): boolean {\n        return !!(this._flags & REvent.FLAG_STOP_PROPAGATION);\n    }\n    get cancelImmediate (): boolean {\n        return !!(this._flags & REvent.FLAG_STOP_IMMEDIATE_PROPAGATION);\n    }\n    set cancelBubble (val: boolean) {\n        val && this.stopPropagation ();\n    }\n    get defaultPrevented (): boolean {\n        return !!(this._flags & REvent.FLAG_CANCELED);\n    }\n    get target (): unknown {\n        return this._target;\n    }\n    get currentTarget (): unknown {\n        return this._currentTarget;\n    }\n    get timestamp (): number {\n        return this._timestamp;\n    }\n    preventDefault () {\n        this._flags |= REvent.FLAG_CANCELED;\n    }\n    stopPropagation () {\n        this._flags |= REvent.FLAG_STOP_PROPAGATION;\n    }\n    stopImmediatePropagation () {\n        this._flags |= REvent.FLAG_STOP_PROPAGATION;\n        this._flags |= REvent.FLAG_STOP_IMMEDIATE_PROPAGATION;\n    }\n    reset () {\n        this._flags = 0;\n        this._target = null;\n        this._currentTarget = null;\n        this._timestamp = Date.now ();\n    }\n    /// @internal\n    _prepareDispatch (target: unknown) {\n        if (this._flags & REvent.FLAG_DISPATCHED) {\n            throw new Error ('Failed to dispatch event: invalid event state');\n        }\n        this._target = target;\n        this._flags |= REvent.FLAG_DISPATCHED;\n    }\n    /// @internal\n    _invokeListener (listener: REventListener, thisObject: unknown) {\n        this._currentTarget = thisObject;\n        const handler: REventHandler = typeof listener === 'function' ? listener : listener.handleEvent;\n        handler.call (thisObject, this);\n        this._currentTarget = null;\n    }\n}\n\nexport interface REventTarget {\n    addEventListener (type: string, callback: REventListener): void;\n    removeEventListener (type: string, callback: REventListener): void;\n    dispatchEvent (evt: REvent): boolean;\n}\n\nfunction guiBubblePolicy (obj: REventTarget): REventTarget {\n    const el = obj as any;\n    return el.parentNode || el.gui || null;\n}\n\nexport function eventtarget (bubblePolicy?: (obj:REventTarget)=>REventTarget) {\n    return function (ctor: any) {\n        bubblePolicy = bubblePolicy || guiBubblePolicy;\n        ctor.prototype.addEventListener = function (type: string, callback: REventListener) {\n            const listeners: { [type: string]: REventListener[] } = this.__listeners || {};\n            this.__listeners = listeners;\n            if (!(type in listeners)) {\n                listeners[type] = [];\n            }\n            listeners[type].push (callback);\n        };\n        ctor.prototype.removeEventListener = function (type: string, callback: REventListener) {\n            const listeners: { [type: string]: REventListener[] } = this.__listeners || {};\n            if (type in listeners) {\n                const stack = listeners[type] as REventListener[];\n                const index = stack.indexOf (callback);\n                if (index >= 0) {\n                    stack.splice (index, 1);\n                }\n            }\n        };\n        ctor.prototype.dispatchEvent = function (evt: REvent) {\n            evt._prepareDispatch (this);\n            let obj = this;\n            while (obj) {\n                const listeners: { [type: string]: REventListener[] } = obj.__listeners || {};\n                if (evt.type in listeners) {\n                    const stack = listeners[evt.type].slice();\n                    for (let i = 0, l = stack.length; i < l; i++) {\n                        evt._invokeListener (stack[i], obj);\n                        if (evt.cancelImmediate) {\n                            break;\n                        }\n                    }\n                }\n                if (evt.bubbles && !evt.cancelBubble) {\n                    obj = bubblePolicy (obj);\n                } else {\n                    break;\n                }\n            }\n            return !evt.defaultPrevented;\n        }\n    }\n}\n*/\n\nclass GUIEventPath implements REventPath {\n  path: REventTarget[];\n  constructor() {\n    this.path = [];\n  }\n  toArray(): REventTarget[] {\n    return this.path;\n  }\n}\n\nexport class GUIEventPathBuilder implements REventPathBuilder {\n  build(node: REventTarget): REventPath {\n    const path = new GUIEventPath();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let el: any = node;\n    while (el) {\n      path.path.push(el);\n      el = el.parentNode || el.gui || null;\n    }\n    return path;\n  }\n}\n\n"],"names":[],"mappings":";AAmKA,MAAM,YAAY,CAAA;AAChB,IAAA,IAAI,CAAiB;AACrB,IAAA,WAAA,GAAA;AACE,QAAA,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;KAChB;IACD,OAAO,GAAA;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;AACF,CAAA;MAEY,mBAAmB,CAAA;AAC9B,IAAA,KAAK,CAAC,IAAkB,EAAA;AACtB,QAAA,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAEhC,IAAI,EAAE,GAAQ,IAAI,CAAC;AACnB,QAAA,OAAO,EAAE,EAAE;AACT,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnB,EAAE,GAAG,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC;AACtC,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACb;AACF;;;;"}