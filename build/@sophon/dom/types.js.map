{"version":3,"file":"types.js","sources":["../../../libs/dom/src/types.ts"],"sourcesContent":["import { REventPath, REventPathBuilder, REventTarget } from '@sophon/base';\r\n\r\nexport interface RCoord {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface RColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\n/*\r\nexport type REventHandler = (evt: REvent)=>void;\r\nexport interface REventHandlerObject {\r\n    handleEvent: REventHandler;\r\n}\r\nexport type REventListener = REventHandler|REventHandlerObject;\r\n\r\nexport class REvent {\r\n    private static readonly FLAG_STOP_PROPAGATION = (1<<0);\r\n    private static readonly FLAG_STOP_IMMEDIATE_PROPAGATION = (1<<1);\r\n    private static readonly FLAG_CANCELED = (1<<2);\r\n    private static readonly FLAG_DISPATCHED = (1<<3);\r\n    private _type: string;\r\n    private _flags: number;\r\n    private _bubbles: boolean;\r\n    private _cancelable: boolean;\r\n    private _target: unknown;\r\n    private _currentTarget: unknown;\r\n    private _timestamp: number;\r\n    constructor (type: string, initOptions?: { bubbles?: boolean, cancelable?: boolean }) {\r\n        this._type = type;\r\n        this._flags = 0;\r\n        this._bubbles = !!initOptions?.bubbles;\r\n        this._cancelable = !!initOptions?.cancelable;\r\n        this._target = null;\r\n        this._currentTarget = null;\r\n        this._timestamp = Date.now ();\r\n    }\r\n    get type (): string {\r\n        return this._type;\r\n    }\r\n    get bubbles (): boolean {\r\n        return this._bubbles;\r\n    }\r\n    get cancelable (): boolean {\r\n        return this._cancelable;\r\n    }\r\n    get cancelBubble (): boolean {\r\n        return !!(this._flags & REvent.FLAG_STOP_PROPAGATION);\r\n    }\r\n    get cancelImmediate (): boolean {\r\n        return !!(this._flags & REvent.FLAG_STOP_IMMEDIATE_PROPAGATION);\r\n    }\r\n    set cancelBubble (val: boolean) {\r\n        val && this.stopPropagation ();\r\n    }\r\n    get defaultPrevented (): boolean {\r\n        return !!(this._flags & REvent.FLAG_CANCELED);\r\n    }\r\n    get target (): unknown {\r\n        return this._target;\r\n    }\r\n    get currentTarget (): unknown {\r\n        return this._currentTarget;\r\n    }\r\n    get timestamp (): number {\r\n        return this._timestamp;\r\n    }\r\n    preventDefault () {\r\n        this._flags |= REvent.FLAG_CANCELED;\r\n    }\r\n    stopPropagation () {\r\n        this._flags |= REvent.FLAG_STOP_PROPAGATION;\r\n    }\r\n    stopImmediatePropagation () {\r\n        this._flags |= REvent.FLAG_STOP_PROPAGATION;\r\n        this._flags |= REvent.FLAG_STOP_IMMEDIATE_PROPAGATION;\r\n    }\r\n    reset () {\r\n        this._flags = 0;\r\n        this._target = null;\r\n        this._currentTarget = null;\r\n        this._timestamp = Date.now ();\r\n    }\r\n    /// @internal\r\n    _prepareDispatch (target: unknown) {\r\n        if (this._flags & REvent.FLAG_DISPATCHED) {\r\n            throw new Error ('Failed to dispatch event: invalid event state');\r\n        }\r\n        this._target = target;\r\n        this._flags |= REvent.FLAG_DISPATCHED;\r\n    }\r\n    /// @internal\r\n    _invokeListener (listener: REventListener, thisObject: unknown) {\r\n        this._currentTarget = thisObject;\r\n        const handler: REventHandler = typeof listener === 'function' ? listener : listener.handleEvent;\r\n        handler.call (thisObject, this);\r\n        this._currentTarget = null;\r\n    }\r\n}\r\n\r\nexport interface REventTarget {\r\n    addEventListener (type: string, callback: REventListener): void;\r\n    removeEventListener (type: string, callback: REventListener): void;\r\n    dispatchEvent (evt: REvent): boolean;\r\n}\r\n\r\nfunction guiBubblePolicy (obj: REventTarget): REventTarget {\r\n    const el = obj as any;\r\n    return el.parentNode || el.gui || null;\r\n}\r\n\r\nexport function eventtarget (bubblePolicy?: (obj:REventTarget)=>REventTarget) {\r\n    return function (ctor: any) {\r\n        bubblePolicy = bubblePolicy || guiBubblePolicy;\r\n        ctor.prototype.addEventListener = function (type: string, callback: REventListener) {\r\n            const listeners: { [type: string]: REventListener[] } = this.__listeners || {};\r\n            this.__listeners = listeners;\r\n            if (!(type in listeners)) {\r\n                listeners[type] = [];\r\n            }\r\n            listeners[type].push (callback);\r\n        };\r\n        ctor.prototype.removeEventListener = function (type: string, callback: REventListener) {\r\n            const listeners: { [type: string]: REventListener[] } = this.__listeners || {};\r\n            if (type in listeners) {\r\n                const stack = listeners[type] as REventListener[];\r\n                const index = stack.indexOf (callback);\r\n                if (index >= 0) {\r\n                    stack.splice (index, 1);\r\n                }\r\n            }\r\n        };\r\n        ctor.prototype.dispatchEvent = function (evt: REvent) {\r\n            evt._prepareDispatch (this);\r\n            let obj = this;\r\n            while (obj) {\r\n                const listeners: { [type: string]: REventListener[] } = obj.__listeners || {};\r\n                if (evt.type in listeners) {\r\n                    const stack = listeners[evt.type].slice();\r\n                    for (let i = 0, l = stack.length; i < l; i++) {\r\n                        evt._invokeListener (stack[i], obj);\r\n                        if (evt.cancelImmediate) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (evt.bubbles && !evt.cancelBubble) {\r\n                    obj = bubblePolicy (obj);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            return !evt.defaultPrevented;\r\n        }\r\n    }\r\n}\r\n*/\r\n\r\nclass GUIEventPath implements REventPath {\r\n  path: REventTarget[];\r\n  constructor() {\r\n    this.path = [];\r\n  }\r\n  toArray(): REventTarget[] {\r\n    return this.path;\r\n  }\r\n}\r\n\r\nexport class GUIEventPathBuilder implements REventPathBuilder {\r\n  build(node: REventTarget): REventPath {\r\n    const path = new GUIEventPath();\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let el: any = node;\r\n    while (el) {\r\n      path.path.push(el);\r\n      el = el.parentNode || el.gui || null;\r\n    }\r\n    return path;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";AAmKA,MAAM,YAAY,CAAA;AAChB,IAAA,IAAI,CAAiB;AACrB,IAAA,WAAA,GAAA;AACE,QAAA,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;KAChB;IACD,OAAO,GAAA;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;AACF,CAAA;MAEY,mBAAmB,CAAA;AAC9B,IAAA,KAAK,CAAC,IAAkB,EAAA;AACtB,QAAA,MAAM,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAEhC,IAAI,EAAE,GAAQ,IAAI,CAAC;AACnB,QAAA,OAAO,EAAE,EAAE;AACT,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnB,EAAE,GAAG,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC;AACtC,SAAA;AACD,QAAA,OAAO,IAAI,CAAC;KACb;AACF;;;;"}