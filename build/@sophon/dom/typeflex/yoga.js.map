{"version":3,"file":"yoga.js","sources":["../../../../libs/dom/src/typeflex/yoga.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  YGUnit,\r\n  YGEdge,\r\n  YGNodeType,\r\n  YGFlexDirection,\r\n  YGAlign,\r\n  YGMeasureMode,\r\n  YGLogLevel,\r\n  YGDirection,\r\n  YGJustify,\r\n  YGPositionType,\r\n  YGWrap,\r\n  YGOverflow,\r\n  YGDisplay,\r\n  YGDimension,\r\n  YGPrintOptions,\r\n  YGExperimentalFeature,\r\n  YGMeasureModeCount,\r\n} from './enums';\r\n\r\nimport {YGNode} from './ygnode';\r\nimport {YGConfig} from './ygconfig';\r\nimport {YGLayout} from './yglayout';\r\nimport {YGStyle} from './ygstyle';\r\nimport {YGFloatOptional} from './ygfloatoptional';\r\nimport {YGValue} from './ygvalue';\r\n\r\nimport {\r\n  YGFloatSanitize,\r\n  YGUnwrapFloatOptional,\r\n  YGFlexDirectionIsColumn,\r\n  YGResolveValue,\r\n  YGFlexDirectionIsRow,\r\n  YGFloatMax,\r\n  YGResolveFlexDirection,\r\n  YGFloatOptionalMax,\r\n  YGFlexDirectionCross,\r\n  YGFloatMin,\r\n  YGCollectFlexItemsRowValues,\r\n  YGFloatsEqual,\r\n} from './utils';\r\n\r\nimport {\r\n  kDefaultFlexGrow,\r\n  kWebDefaultFlexShrink,\r\n  kDefaultFlexShrink,\r\n  pos,\r\n  trailing,\r\n  leading,\r\n  dim,\r\n  YGCachedMeasurement,\r\n  YG_MAX_CACHED_RESULT_COUNT,\r\n} from './internal';\r\n\r\nexport class YGSize {\r\n  public width: number;\r\n  public height: number;\r\n}\r\n\r\nexport const YGUndefined: number = undefined;\r\nexport const YGValueUndefined: () => YGValue = function () {\r\n  return new YGValue(YGUndefined, YGUnit.Undefined);\r\n};\r\nexport const YGValueAuto: () => YGValue = function () {\r\n  return new YGValue(YGUndefined, YGUnit.Auto);\r\n};\r\nexport const YGValueZero: () => YGValue = function() {\r\n  return new YGValue(0, YGUnit.Point);\r\n};\r\n\r\nexport interface YGPrintFunc {\r\n  (node: YGNode): void;\r\n}\r\nexport interface YGMeasureFunc {\r\n  (\r\n    node: YGNode,\r\n    width: number,\r\n    widthMode: YGMeasureMode,\r\n    height: number,\r\n    heightMode: YGMeasureMode,\r\n  ): YGSize;\r\n}\r\nexport interface YGBaselineFunc {\r\n  (node: YGNode, width: number, height: number): number;\r\n}\r\nexport interface YGDirtiedFunc {\r\n  (node: YGNode): void;\r\n}\r\nexport interface YGLogger {\r\n  (config: YGConfig, node: YGNode, level: YGLogLevel, format: string, ...args: any[]): void;\r\n}\r\nexport interface YGCloneNodeFunc {\r\n  (oldNode: YGNode, owner: YGNode, childIndex: number): YGNode;\r\n}\r\n\r\nfunction formatToString(format: string, args: any[]) {\r\n  let ret: string = format;\r\n\r\n  for (const arg of args[0][0]) {\r\n    ret = ret.replace(/%[d|s|f]/, arg);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction YGDefaultLog(\r\n  config: YGConfig,\r\n  node: YGNode,\r\n  level: YGLogLevel,\r\n  format: string,\r\n  ...args: any[]\r\n): void {\r\n  switch (level) {\r\n  case YGLogLevel.Error:\r\n  case YGLogLevel.Fatal:\r\n    return console.error(formatToString(format, args));\r\n  case YGLogLevel.Warn:\r\n  case YGLogLevel.Info:\r\n  case YGLogLevel.Debug:\r\n  case YGLogLevel.Verbose:\r\n  default:\r\n    return console.log(formatToString(format, args));\r\n  }\r\n}\r\n\r\nexport function YGFloatIsUndefined(value: number) {\r\n  if (value === undefined || isNaN(value)) {\r\n    return true;\r\n  }\r\n  return false;\r\n  // return value >= 10E8 || value <= -10E8;\r\n}\r\n\r\nexport function YGComputedEdgeValue(\r\n  edges: Array<YGValue>,\r\n  edge: YGEdge,\r\n  defaultValue: YGValue,\r\n): YGValue {\r\n  if (edges[edge].unit != YGUnit.Undefined) {\r\n    return edges[edge];\r\n  }\r\n\r\n  if (\r\n    (edge == YGEdge.Top || edge == YGEdge.Bottom) &&\r\n    edges[YGEdge.Vertical].unit != YGUnit.Undefined\r\n  ) {\r\n    return edges[YGEdge.Vertical];\r\n  }\r\n\r\n  if (\r\n    (edge == YGEdge.Left || edge == YGEdge.Right || edge == YGEdge.Start || edge == YGEdge.End) &&\r\n    edges[YGEdge.Horizontal].unit != YGUnit.Undefined\r\n  ) {\r\n    return edges[YGEdge.Horizontal];\r\n  }\r\n\r\n  if (edges[YGEdge.All].unit != YGUnit.Undefined) {\r\n    return edges[YGEdge.All];\r\n  }\r\n\r\n  if (edge == YGEdge.Start || edge == YGEdge.End) {\r\n    return YGValueUndefined();\r\n  }\r\n\r\n  return defaultValue;\r\n}\r\n\r\nexport function YGNodeGetContext(node: YGNode): any {\r\n  return node.getContext();\r\n}\r\n\r\nexport function YGNodeSetContext(node: YGNode, context: any): void {\r\n  return node.setContext(context);\r\n}\r\n\r\nexport function YGNodeGetMeasureFunc(node: YGNode): YGMeasureFunc {\r\n  return node.getMeasure();\r\n}\r\n\r\nexport function YGNodeSetMeasureFunc(node: YGNode, measureFunc: YGMeasureFunc): void {\r\n  node.setMeasureFunc(measureFunc);\r\n}\r\n\r\nexport function YGNodeGetBaselineFunc(node: YGNode): YGBaselineFunc {\r\n  return node.getBaseline();\r\n}\r\n\r\nexport function YGNodeSetBaselineFunc(node: YGNode, baselineFunc: YGBaselineFunc): void {\r\n  node.setBaseLineFunc(baselineFunc);\r\n}\r\n\r\nexport function YGNodeGetDirtiedFunc(node: YGNode): YGDirtiedFunc {\r\n  return node.getDirtied();\r\n}\r\n\r\nexport function YGNodeSetDirtiedFunc(node: YGNode, dirtiedFunc: YGDirtiedFunc) {\r\n  node.setDirtiedFunc(dirtiedFunc);\r\n}\r\n\r\nexport function YGNodeGetPrintFunc(node: YGNode): YGPrintFunc {\r\n  return node.getPrintFunc();\r\n}\r\n\r\nexport function YGNodeSetPrintFunc(node: YGNode, printFunc: YGPrintFunc): void {\r\n  node.setPrintFunc(printFunc);\r\n}\r\n\r\nexport function YGNodeGetHasNewLayout(node: YGNode): boolean {\r\n  return node.getHasNewLayout();\r\n}\r\n\r\nexport function YGNodeSetHasNewLayout(node: YGNode, hasNewLayout: boolean): void {\r\n  node.setHasNewLayout(hasNewLayout);\r\n}\r\n\r\nexport function YGNodeGetNodeType(node: YGNode): YGNodeType {\r\n  return node.getNodeType();\r\n}\r\n\r\nexport function YGNodeSetNodeType(node: YGNode, nodeType: YGNodeType): void {\r\n  node.setNodeType(nodeType);\r\n}\r\n\r\nexport function YGNodeIsDirty(node: YGNode): boolean {\r\n  return node.isDirty();\r\n}\r\n\r\nexport function YGNodeLayoutGetDidUseLegacyFlag(node: YGNode): boolean {\r\n  return node.didUseLegacyFlag();\r\n}\r\n\r\nexport function YGNodeMarkDirtyAndPropogateToDescendants(node: YGNode): void {\r\n  node.markDirtyAndPropogateDownwards();\r\n}\r\n\r\nlet gNodeInstanceCount = 0;\r\nlet gConfigInstanceCount = 0;\r\n\r\nexport function YGNodeNewWithConfig(config: YGConfig): YGNode {\r\n  const node: YGNode = new YGNode();\r\n  gNodeInstanceCount++;\r\n\r\n  if (config.useWebDefaults) {\r\n    node.setStyleFlexDirection(YGFlexDirection.Row);\r\n    node.setStyleAlignContent(YGAlign.Stretch);\r\n  }\r\n\r\n  node.setConfig(config);\r\n  return node;\r\n}\r\n\r\nexport function YGConfigGetDefault(): YGConfig {\r\n  return YGConfigNew();\r\n}\r\n\r\nexport function YGNodeNew(): YGNode {\r\n  return YGNodeNewWithConfig(YGConfigGetDefault());\r\n}\r\n\r\nexport function YGNodeClone(oldNode: YGNode) {\r\n  console.log('clone?');\r\n  const node: YGNode = new YGNode(oldNode);\r\n  gNodeInstanceCount++;\r\n  node.setOwner(null);\r\n  return node;\r\n}\r\n\r\nexport function YGConfigClone(oldConfig: YGConfig) {\r\n  const config: YGConfig = new YGConfig(oldConfig.logger);\r\n  gConfigInstanceCount++;\r\n  return config;\r\n}\r\n\r\nexport function YGNodeDeepClone(oldNode: YGNode): YGNode {\r\n  const node: YGNode = YGNodeClone(oldNode);\r\n  const vec: Array<YGNode> = new Array(oldNode.getChildren().length);\r\n\r\n  let childNode: YGNode = null;\r\n  for (let i = 0; i < oldNode.getChildren().length; ++i) {\r\n    const item: YGNode = oldNode.getChild(i);\r\n    childNode = YGNodeDeepClone(item);\r\n    childNode.setOwner(node);\r\n    vec.push(childNode);\r\n  }\r\n\r\n  node.setChildren(vec);\r\n\r\n  if (oldNode.getConfig() != null) {\r\n    node.setConfig(YGConfigClone(oldNode.getConfig()));\r\n  }\r\n\r\n  return node;\r\n}\r\n\r\nexport function YGNodeFree(node: YGNode): void {\r\n  const owner: YGNode = node.getOwner();\r\n\r\n  if (owner != null) {\r\n    owner.removeChild(node);\r\n    node.setOwner(null);\r\n  }\r\n\r\n  const childCount: number = YGNodeGetChildCount(node);\r\n  for (let i = 0; i < childCount; i++) {\r\n    const child: YGNode = YGNodeGetChild(node, i);\r\n    child.setOwner(null);\r\n  }\r\n\r\n  node.clearChildren();\r\n  gNodeInstanceCount--;\r\n}\r\n\r\nexport function YGConfigFreeRecursive(root: YGNode): void {\r\n  if (root.getConfig() != null) {\r\n    gConfigInstanceCount--;\r\n    root.setConfig(null);\r\n  }\r\n\r\n  for (let i = 0; i < root.getChildrenCount(); ++i) {\r\n    YGConfigFreeRecursive(root.getChild(i));\r\n  }\r\n}\r\n\r\nexport function YGNodeFreeRecursive(root: YGNode): void {\r\n  while (YGNodeGetChildCount(root) > 0) {\r\n    const child: YGNode = YGNodeGetChild(root, 0);\r\n    if (child.getOwner() != root) {\r\n      break;\r\n    }\r\n\r\n    YGNodeRemoveChild(root, child);\r\n    YGNodeFreeRecursive(child);\r\n  }\r\n  YGNodeFree(root);\r\n}\r\n\r\nexport function YGNodeReset(node: YGNode): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    YGNodeGetChildCount(node) == 0,\r\n    'Cannot reset a node which still has children attached',\r\n  );\r\n  YGAssertWithNode(node, node.getOwner() == null, 'Cannot reset a node still attached to a owner');\r\n\r\n  node.clearChildren();\r\n  const config: YGConfig = node.getConfig();\r\n\r\n  node.fromNode(new YGNode());\r\n\r\n  if (config.useWebDefaults) {\r\n    node.setStyleFlexDirection(YGFlexDirection.Row);\r\n    node.setStyleAlignContent(YGAlign.Stretch);\r\n  }\r\n\r\n  node.setConfig(config);\r\n}\r\n\r\nexport function YGNodeGetInstanceCount(): number {\r\n  return gNodeInstanceCount;\r\n}\r\n\r\nexport function YGConfigGetInstanceCount(): number {\r\n  return gConfigInstanceCount;\r\n}\r\n\r\nexport function YGConfigNew(): YGConfig {\r\n  const config: YGConfig = new YGConfig(YGDefaultLog);\r\n  gConfigInstanceCount++;\r\n  return config;\r\n}\r\n\r\nexport function YGConfigFree(config: YGConfig): void {\r\n  gConfigInstanceCount--;\r\n}\r\n\r\nexport function YGConfigCopy(dest: YGConfig, src: YGConfig) {\r\n  (<any>Object).assign(dest, src);\r\n}\r\n\r\nexport function YGNodeInsertChild(node: YGNode, child: YGNode, index: number): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    child.getOwner() == null,\r\n    'Child already has a owner, it must be removed first.',\r\n  );\r\n  YGAssertWithNode(\r\n    node,\r\n    node.getMeasure() == null,\r\n    'Cannot add child: Nodes with measure functions cannot have children.',\r\n  );\r\n  node.cloneChildrenIfNeeded();\r\n  node.insertChildIndex(child, index);\r\n  const owner: YGNode = child.getOwner() ? null : node;\r\n  child.setOwner(owner);\r\n  node.markDirtyAndPropogate();\r\n}\r\n\r\nexport function YGNodeInsertSharedChild(node: YGNode, child: YGNode, index: number): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    node.getMeasure() == null,\r\n    'Cannot add child: Nodes with measure functions cannot have children.',\r\n  );\r\n  node.insertChildIndex(child, index);\r\n  child.setOwner(null);\r\n  node.markDirtyAndPropogate();\r\n}\r\n\r\nexport function YGNodeRemoveChild(owner: YGNode, excludedChild: YGNode): void {\r\n  const childCount: number = YGNodeGetChildCount(owner);\r\n\r\n  if (childCount == 0) {\r\n    return;\r\n  }\r\n\r\n  const firstChild: YGNode = YGNodeGetChild(owner, 0);\r\n  if (firstChild.getOwner() == owner) {\r\n    if (owner.removeChild(excludedChild)) {\r\n      excludedChild.setLayout(new YGLayout());\r\n      excludedChild.setOwner(null);\r\n      owner.markDirtyAndPropogate();\r\n    }\r\n    return;\r\n  }\r\n\r\n  const cloneNodeCallback: YGCloneNodeFunc = owner.getConfig().cloneNodeCallback;\r\n  let nextInsertIndex = 0;\r\n\r\n  for (let i = 0; i < childCount; i++) {\r\n    const oldChild: YGNode = owner.getChild(i);\r\n    if (excludedChild == oldChild) {\r\n      owner.markDirtyAndPropogate();\r\n      continue;\r\n    }\r\n\r\n    let newChild: YGNode = null;\r\n    if (cloneNodeCallback) {\r\n      newChild = cloneNodeCallback(oldChild, owner, nextInsertIndex);\r\n    }\r\n\r\n    if (newChild == null) {\r\n      newChild = YGNodeClone(oldChild);\r\n    }\r\n\r\n    owner.replaceChildIndex(newChild, nextInsertIndex);\r\n    newChild.setOwner(owner);\r\n\r\n    nextInsertIndex++;\r\n  }\r\n\r\n  while (nextInsertIndex < childCount) {\r\n    owner.removeChildIndex(nextInsertIndex);\r\n    nextInsertIndex++;\r\n  }\r\n}\r\n\r\nexport function YGNodeRemoveAllChildren(owner: YGNode): void {\r\n  const childCount = YGNodeGetChildCount(owner);\r\n  if (childCount == 0) {\r\n    return;\r\n  }\r\n\r\n  const firstChild: YGNode = YGNodeGetChild(owner, 0);\r\n  if (firstChild.getOwner() == owner) {\r\n    for (let i = 0; i < childCount; i++) {\r\n      const oldChild: YGNode = YGNodeGetChild(owner, i);\r\n      oldChild.setLayout(new YGLayout()); // new YGNode().getLayout()\r\n      oldChild.setOwner(null);\r\n    }\r\n\r\n    owner.clearChildren();\r\n    owner.markDirtyAndPropogate();\r\n    return;\r\n  }\r\n\r\n  owner.setChildren([]);\r\n  owner.markDirtyAndPropogate();\r\n}\r\n\r\nexport function YGNodeSetChildrenInternal(owner: YGNode, children: Array<YGNode>): void {\r\n  if (!owner) {\r\n    return;\r\n  }\r\n\r\n  const ownerChildren: Array<YGNode> = owner.getChildren();\r\n  if (children.length == 0) {\r\n    if (ownerChildren.length > 0) {\r\n      for (let i = 0; i < ownerChildren.length; i++) {\r\n        const child: YGNode = ownerChildren[i];\r\n        child.setLayout(new YGLayout());\r\n        child.setOwner(null);\r\n      }\r\n\r\n      owner.setChildren([]);\r\n      owner.markDirtyAndPropogate();\r\n    }\r\n  } else {\r\n    if (ownerChildren.length > 0) {\r\n      for (let i = 0; i < ownerChildren.length; i++) {\r\n        const oldChild: YGNode = ownerChildren[i];\r\n        if (children.indexOf(oldChild) < 0) {\r\n          oldChild.setLayout(new YGLayout());\r\n          oldChild.setOwner(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    owner.setChildren(children);\r\n    for (let i = 0; i < children.length; i++) {\r\n      children[i].setOwner(owner);\r\n    }\r\n\r\n    owner.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\n/*function YGNodeSetChildren(owner: YGNode, c: Array<YGNode>, count: number) {\r\n    YGVector children = { c, c + count };\r\n    YGNodeSetChildrenInternal(owner, children);\r\n}*/\r\n\r\nexport function YGNodeSetChildren(owner: YGNode, children: Array<YGNode>): void {\r\n  YGNodeSetChildrenInternal(owner, children);\r\n}\r\n\r\nexport function YGNodeGetChild(node: YGNode, index: number): YGNode {\r\n  const children = node.getChildren();\r\n  if (index < children.length) {\r\n    return children[index];\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function YGNodeGetChildCount(node: YGNode): number {\r\n  return node.getChildrenCount();\r\n}\r\n\r\nexport function YGNodeGetOwner(node: YGNode): YGNode {\r\n  return node.getOwner();\r\n}\r\n\r\nexport function YGNodeGetParent(node: YGNode): YGNode {\r\n  return node.getOwner();\r\n}\r\n\r\nexport function YGNodeMarkDirty(node: YGNode): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    node.getMeasure() != null,\r\n    'Only leaf nodes with custom measure functions should manually mark themselves as dirty',\r\n  );\r\n  node.markDirtyAndPropogate();\r\n}\r\n\r\nexport function YGNodeCopyStyle(dstNode: YGNode, srcNode: YGNode): void {\r\n  if (!dstNode.getStyle().isEqual(srcNode.getStyle())) {\r\n    dstNode.setStyle(srcNode.getStyle());\r\n    dstNode.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetFlexGrow(node: YGNode): number {\r\n  return node.getStyle().flexGrow.isUndefined()\r\n    ? kDefaultFlexGrow\r\n    : node.getStyle().flexGrow.getValue();\r\n}\r\n\r\nexport function YGNodeStyleGetFlexShrink(node: YGNode): number {\r\n  return node.getStyle().flexShrink.isUndefined()\r\n    ? node.getConfig().useWebDefaults\r\n      ? kWebDefaultFlexShrink\r\n      : kDefaultFlexShrink\r\n    : node.getStyle().flexShrink.getValue();\r\n}\r\n\r\n// MACROS START\r\n\r\nexport function YGNodeStyleSetDirection(node: YGNode, direction: YGDirection): void {\r\n  if (node.getStyle().direction != direction) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.direction = direction;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetDirection(node: YGNode): YGDirection {\r\n  return node.getStyle().direction;\r\n}\r\n\r\nexport function YGNodeStyleSetFlexDirection(node: YGNode, flexDirection: YGFlexDirection): void {\r\n  if (node.getStyle().flexDirection != flexDirection) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.flexDirection = flexDirection;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetFlexDirection(node: YGNode): YGFlexDirection {\r\n  return node.getStyle().flexDirection;\r\n}\r\n\r\nexport function YGNodeStyleSetJustifyContent(node: YGNode, justifyContent: YGJustify): void {\r\n  if (node.getStyle().justifyContent != justifyContent) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.justifyContent = justifyContent;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetJustifyContent(node: YGNode): YGJustify {\r\n  return node.getStyle().justifyContent;\r\n}\r\n\r\nexport function YGNodeStyleSetAlignContent(node: YGNode, alignContent: YGAlign): void {\r\n  if (node.getStyle().alignContent != alignContent) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.alignContent = alignContent;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetAlignContent(node: YGNode): YGAlign {\r\n  return node.getStyle().alignContent;\r\n}\r\n\r\nexport function YGNodeStyleSetAlignItems(node: YGNode, alignItems: YGAlign): void {\r\n  if (node.getStyle().alignItems != alignItems) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.alignItems = alignItems;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetAlignItems(node: YGNode): YGAlign {\r\n  return node.getStyle().alignItems;\r\n}\r\n\r\nexport function YGNodeStyleSetAlignSelf(node: YGNode, alignSelf: YGAlign): void {\r\n  if (node.getStyle().alignSelf != alignSelf) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.alignSelf = alignSelf;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetAlignSelf(node: YGNode): YGAlign {\r\n  return node.getStyle().alignSelf;\r\n}\r\n\r\nexport function YGNodeStyleSetPositionType(node: YGNode, positionType: YGPositionType): void {\r\n  if (node.getStyle().positionType != positionType) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.positionType = positionType;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetPositionType(node: YGNode): YGPositionType {\r\n  return node.getStyle().positionType;\r\n}\r\n\r\nexport function YGNodeStyleSetFlexWrap(node: YGNode, flexWrap: YGWrap): void {\r\n  if (node.getStyle().flexWrap != flexWrap) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.flexWrap = flexWrap;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetFlexWrap(node: YGNode): YGWrap {\r\n  return node.getStyle().flexWrap;\r\n}\r\n\r\nexport function YGNodeStyleSetOverflow(node: YGNode, overflow: YGOverflow): void {\r\n  if (node.getStyle().overflow != overflow) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.overflow = overflow;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetOverflow(node: YGNode): YGOverflow {\r\n  return node.getStyle().overflow;\r\n}\r\n\r\nexport function YGNodeStyleSetDisplay(node: YGNode, display: YGDisplay): void {\r\n  if (node.getStyle().display != display) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.display = display;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetDisplay(node: YGNode): YGDisplay {\r\n  return node.getStyle().display;\r\n}\r\n\r\nexport function YGNodeStyleSetPosition(node: YGNode, edge: YGEdge, position: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(position),\r\n    YGFloatIsUndefined(position) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().position[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().position[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.position[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetPositionPercent(node: YGNode, edge: YGEdge, position: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(position),\r\n    YGFloatIsUndefined(position) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().position[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().position[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.position[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetPosition(node: YGNode, edge: YGEdge): YGValue {\r\n  const value: YGValue = node.getStyle().position[edge];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nexport function YGNodeStyleSetMargin(node: YGNode, edge: YGEdge, margin: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(margin),\r\n    YGFloatIsUndefined(margin) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().margin[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().margin[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.margin[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetMarginPercent(node: YGNode, edge: YGEdge, margin: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(margin),\r\n    YGFloatIsUndefined(margin) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().margin[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().margin[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.margin[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetMargin(node: YGNode, edge: YGEdge): YGValue {\r\n  const value: YGValue = node.getStyle().margin[edge];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nexport function YGNodeStyleSetPadding(node: YGNode, edge: YGEdge, padding: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(padding),\r\n    YGFloatIsUndefined(padding) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().padding[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().padding[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.padding[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetPaddingPercent(node: YGNode, edge: YGEdge, padding: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(padding),\r\n    YGFloatIsUndefined(padding) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().padding[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().padding[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.padding[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetPadding(node: YGNode, edge: YGEdge): YGValue {\r\n  const value: YGValue = node.getStyle().padding[edge];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nexport function YGNodeStyleSetMarginAuto(node: YGNode, edge: YGEdge): void {\r\n  if (node.getStyle().margin[edge].unit != YGUnit.Auto) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.margin[edge].value = 0;\r\n    style.margin[edge].unit = YGUnit.Auto;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\nexport function YGNodeStyleSetWidth(node: YGNode, width: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(width),\r\n    YGFloatIsUndefined(width) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().dimensions[YGDimension.Width].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().dimensions[YGDimension.Width].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Width] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetWidthPercent(node: YGNode, width: number): void {\r\n  if (\r\n    node.getStyle().dimensions[YGDimension.Width].value != YGFloatSanitize(width) ||\r\n    node.getStyle().dimensions[YGDimension.Width].unit != YGUnit.Percent\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Width].value = YGFloatSanitize(width);\r\n    style.dimensions[YGDimension.Width].unit = YGFloatIsUndefined(width)\r\n      ? YGUnit.Auto\r\n      : YGUnit.Percent;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetWidthAuto(node: YGNode): void {\r\n  if (node.getStyle().dimensions[YGDimension.Width].unit != YGUnit.Auto) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Width].value = 0;\r\n    style.dimensions[YGDimension.Width].unit = YGUnit.Auto;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetWidth(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().dimensions[YGDimension.Width];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeStyleSetHeight(node: YGNode, height: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(height),\r\n    YGFloatIsUndefined(height) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().dimensions[YGDimension.Height].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().dimensions[YGDimension.Height].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Height] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetHeightPercent(node: YGNode, height: number): void {\r\n  if (\r\n    node.getStyle().dimensions[YGDimension.Height].value != YGFloatSanitize(height) ||\r\n    node.getStyle().dimensions[YGDimension.Height].unit != YGUnit.Percent\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Height].value = YGFloatSanitize(height);\r\n    style.dimensions[YGDimension.Height].unit = YGFloatIsUndefined(height)\r\n      ? YGUnit.Auto\r\n      : YGUnit.Percent;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetHeightAuto(node: YGNode): void {\r\n  if (node.getStyle().dimensions[YGDimension.Height].unit != YGUnit.Auto) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.dimensions[YGDimension.Height].value = 0;\r\n    style.dimensions[YGDimension.Height].unit = YGUnit.Auto;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetHeight(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().dimensions[YGDimension.Height];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeStyleSetMinWidth(node: YGNode, minWidth: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(minWidth),\r\n    YGFloatIsUndefined(minWidth) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().minDimensions[YGDimension.Width].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().minDimensions[YGDimension.Width].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.minDimensions[YGDimension.Width] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetMinWidthPercent(node: YGNode, minWidth: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(minWidth),\r\n    YGFloatIsUndefined(minWidth) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().minDimensions[YGDimension.Width].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().minDimensions[YGDimension.Width].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.minDimensions[YGDimension.Width] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetMinWidth(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().minDimensions[YGDimension.Width];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeStyleSetMinHeight(node: YGNode, minHeight: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(minHeight),\r\n    YGFloatIsUndefined(minHeight) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().minDimensions[YGDimension.Height].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().minDimensions[YGDimension.Height].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.minDimensions[YGDimension.Height] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetMinHeightPercent(node: YGNode, minHeight: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(minHeight),\r\n    YGFloatIsUndefined(minHeight) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().minDimensions[YGDimension.Height].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().minDimensions[YGDimension.Height].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.minDimensions[YGDimension.Height] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetMinHeight(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().minDimensions[YGDimension.Height];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeStyleSetMaxWidth(node: YGNode, maxWidth: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(maxWidth),\r\n    YGFloatIsUndefined(maxWidth) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().maxDimensions[YGDimension.Width].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().maxDimensions[YGDimension.Width].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.maxDimensions[YGDimension.Width] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetMaxWidthPercent(node: YGNode, maxWidth: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(maxWidth),\r\n    YGFloatIsUndefined(maxWidth) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().maxDimensions[YGDimension.Width].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().maxDimensions[YGDimension.Width].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.maxDimensions[YGDimension.Width] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetMaxWidth(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().maxDimensions[YGDimension.Width];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeStyleSetMaxHeight(node: YGNode, maxHeight: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(maxHeight),\r\n    YGFloatIsUndefined(maxHeight) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().maxDimensions[YGDimension.Height].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().maxDimensions[YGDimension.Height].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.maxDimensions[YGDimension.Height] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetMaxHeightPercent(node: YGNode, maxHeight: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(maxHeight),\r\n    YGFloatIsUndefined(maxHeight) ? YGUnit.Undefined : YGUnit.Percent,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().maxDimensions[YGDimension.Height].value != value.value &&\r\n      value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().maxDimensions[YGDimension.Height].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.maxDimensions[YGDimension.Height] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetMaxHeight(node: YGNode): YGValue {\r\n  const value: YGValue = node.getStyle().maxDimensions[YGDimension.Height];\r\n  if (value.unit == YGUnit.Undefined || value.unit == YGUnit.Auto) {\r\n    value.value = YGUndefined;\r\n  }\r\n  return value;\r\n}\r\nexport function YGNodeLayoutGetLeft(node: YGNode): number {\r\n  return node.getLayout().position[YGEdge.Left];\r\n}\r\nexport function YGNodeLayoutGetTop(node: YGNode): number {\r\n  return node.getLayout().position[YGEdge.Top];\r\n}\r\nexport function YGNodeLayoutGetRight(node: YGNode): number {\r\n  return node.getLayout().position[YGEdge.Right];\r\n}\r\nexport function YGNodeLayoutGetBottom(node: YGNode): number {\r\n  return node.getLayout().position[YGEdge.Bottom];\r\n}\r\nexport function YGNodeLayoutGetWidth(node: YGNode): number {\r\n  return node.getLayout().dimensions[YGDimension.Width];\r\n}\r\nexport function YGNodeLayoutGetHeight(node: YGNode): number {\r\n  return node.getLayout().dimensions[YGDimension.Height];\r\n}\r\nexport function YGNodeLayoutGetDirection(node: YGNode): YGDirection {\r\n  return node.getLayout().direction;\r\n}\r\nexport function YGNodeLayoutGetHadOverflow(node: YGNode): boolean {\r\n  return node.getLayout().hadOverflow;\r\n}\r\nexport function YGNodeLayoutGetMargin(node: YGNode, edge: YGEdge): number {\r\n  YGAssertWithNode(\r\n    node,\r\n    edge <= YGEdge.End,\r\n    'Cannot get layout properties of multi-edge shorthands',\r\n  );\r\n\r\n  if (edge == YGEdge.Left) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().margin[YGEdge.End];\r\n    } else {\r\n      return node.getLayout().margin[YGEdge.Start];\r\n    }\r\n  }\r\n\r\n  if (edge == YGEdge.Right) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().margin[YGEdge.Start];\r\n    } else {\r\n      return node.getLayout().margin[YGEdge.End];\r\n    }\r\n  }\r\n\r\n  return node.getLayout().margin[edge as number];\r\n}\r\nexport function YGNodeLayoutGetBorder(node: YGNode, edge: YGEdge): number {\r\n  YGAssertWithNode(\r\n    node,\r\n    edge <= YGEdge.End,\r\n    'Cannot get layout properties of multi-edge shorthands',\r\n  );\r\n\r\n  if (edge == YGEdge.Left) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().border[YGEdge.End];\r\n    } else {\r\n      return node.getLayout().border[YGEdge.Start];\r\n    }\r\n  }\r\n\r\n  if (edge == YGEdge.Right) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().border[YGEdge.Start];\r\n    } else {\r\n      return node.getLayout().border[YGEdge.End];\r\n    }\r\n  }\r\n\r\n  return node.getLayout().border[edge as number];\r\n}\r\nexport function YGNodeLayoutGetPadding(node: YGNode, edge: YGEdge): number {\r\n  YGAssertWithNode(\r\n    node,\r\n    edge <= YGEdge.End,\r\n    'Cannot get layout properties of multi-edge shorthands',\r\n  );\r\n\r\n  if (edge == YGEdge.Left) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().padding[YGEdge.End];\r\n    } else {\r\n      return node.getLayout().padding[YGEdge.Start];\r\n    }\r\n  }\r\n\r\n  if (edge == YGEdge.Right) {\r\n    if (node.getLayout().direction == YGDirection.RTL) {\r\n      return node.getLayout().padding[YGEdge.Start];\r\n    } else {\r\n      return node.getLayout().padding[YGEdge.End];\r\n    }\r\n  }\r\n\r\n  return node.getLayout().padding[edge as number];\r\n}\r\n\r\n// MACROS END\r\n\r\nexport function YGNodeStyleSetFlex(node: YGNode, flex: number): void {\r\n  if (node.getStyle().flex.isDiffValue(flex)) {\r\n    const style: YGStyle = node.getStyle();\r\n    if (YGFloatIsUndefined(flex)) {\r\n      style.flex = new YGFloatOptional();\r\n    } else {\r\n      style.flex = new YGFloatOptional(flex);\r\n    }\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetFlex(node: YGNode): number {\r\n  return node.getStyle().flex.isUndefined() ? YGUndefined : node.getStyle().flex.getValue();\r\n}\r\n\r\nexport function YGNodeStyleSetFlexGrow(node: YGNode, flexGrow: number): void {\r\n  if (node.getStyle().flexGrow.isDiffValue(flexGrow)) {\r\n    const style: YGStyle = node.getStyle();\r\n    if (YGFloatIsUndefined(flexGrow)) {\r\n      style.flexGrow = new YGFloatOptional();\r\n    } else {\r\n      style.flexGrow = new YGFloatOptional(flexGrow);\r\n    }\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetFlexShrink(node: YGNode, flexShrink: number): void {\r\n  if (node.getStyle().flexShrink.isDiffValue(flexShrink)) {\r\n    const style: YGStyle = node.getStyle();\r\n    if (YGFloatIsUndefined(flexShrink)) {\r\n      style.flexShrink = new YGFloatOptional();\r\n    } else {\r\n      style.flexShrink = new YGFloatOptional(flexShrink);\r\n    }\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetFlexBasis(node: YGNode): YGValue {\r\n  const flexBasis: YGValue = node.getStyle().flexBasis;\r\n  if (flexBasis.unit == YGUnit.Undefined || flexBasis.unit == YGUnit.Auto) {\r\n    flexBasis.value = YGUndefined;\r\n  }\r\n  return flexBasis;\r\n}\r\n\r\nexport function YGNodeStyleSetFlexBasis(node: YGNode, flexBasis: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(flexBasis),\r\n    YGFloatIsUndefined(flexBasis) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().flexBasis.value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().flexBasis.unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.flexBasis = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetFlexBasisPercent(node: YGNode, flexBasisPercent: number): void {\r\n  if (\r\n    node.getStyle().flexBasis.value != flexBasisPercent ||\r\n    node.getStyle().flexBasis.unit != YGUnit.Percent\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.flexBasis.value = YGFloatSanitize(flexBasisPercent);\r\n    style.flexBasis.unit = YGFloatIsUndefined(flexBasisPercent) ? YGUnit.Auto : YGUnit.Percent;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetFlexBasisAuto(node: YGNode): void {\r\n  if (node.getStyle().flexBasis.unit != YGUnit.Auto) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.flexBasis.value = 0;\r\n    style.flexBasis.unit = YGUnit.Auto;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleSetBorder(node: YGNode, edge: YGEdge, border: number): void {\r\n  const value: YGValue = new YGValue(\r\n    YGFloatSanitize(border),\r\n    YGFloatIsUndefined(border) ? YGUnit.Undefined : YGUnit.Point,\r\n  );\r\n\r\n  if (\r\n    (node.getStyle().border[edge].value != value.value && value.unit != YGUnit.Undefined) ||\r\n    node.getStyle().border[edge].unit != value.unit\r\n  ) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.border[edge] = value;\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeStyleGetBorder(node: YGNode, edge: YGEdge): number {\r\n  if (\r\n    node.getStyle().border[edge].unit == YGUnit.Undefined ||\r\n    node.getStyle().border[edge].unit == YGUnit.Auto\r\n  ) {\r\n    return YGUndefined;\r\n  }\r\n\r\n  return node.getStyle().border[edge].value;\r\n}\r\n\r\nexport function YGNodeStyleGetAspectRatio(node: YGNode): number {\r\n  const op: YGFloatOptional = node.getStyle().aspectRatio;\r\n  return op.isUndefined() ? YGUndefined : op.getValue();\r\n}\r\n\r\nexport function YGNodeStyleSetAspectRatio(node: YGNode, aspectRatio: number): void {\r\n  if (node.getStyle().aspectRatio.isDiffValue(aspectRatio)) {\r\n    const style: YGStyle = node.getStyle();\r\n    style.aspectRatio = new YGFloatOptional(aspectRatio);\r\n    node.setStyle(style);\r\n    node.markDirtyAndPropogate();\r\n  }\r\n}\r\n\r\nexport function YGNodeLayoutGetDidLegacyStretchFlagAffectLayout(node: YGNode): boolean {\r\n  return node.getLayout().doesLegacyStretchFlagAffectsLayout;\r\n}\r\n\r\nlet gCurrentGenerationCount = 0;\r\n\r\nexport function YGNodePrintInternal(node: YGNode, options: YGPrintOptions): void {\r\n  //const str: string = YGNodeToString(str, node, options, 0);\r\n  //YGLog(node, YGLogLevel.Debug, str);\r\n}\r\n\r\nexport function YGNodePrint(node: YGNode, options: YGPrintOptions): void {\r\n  YGNodePrintInternal(node, options);\r\n}\r\n\r\nexport function YGNodePaddingAndBorderForAxis(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  widthSize: number,\r\n): number {\r\n  return YGUnwrapFloatOptional(\r\n    node\r\n      .getLeadingPaddingAndBorder(axis, widthSize)\r\n      .add(node.getTrailingPaddingAndBorder(axis, widthSize)),\r\n  );\r\n}\r\n\r\nexport function YGNodeAlignItem(node: YGNode, child: YGNode): YGAlign {\r\n  const align: YGAlign =\r\n    child.getStyle().alignSelf == YGAlign.Auto\r\n      ? node.getStyle().alignItems\r\n      : child.getStyle().alignSelf;\r\n  if (align == YGAlign.Baseline && YGFlexDirectionIsColumn(node.getStyle().flexDirection)) {\r\n    return YGAlign.FlexStart;\r\n  }\r\n  return align;\r\n}\r\n\r\nexport function YGBaseline(node: YGNode): number {\r\n  if (node.getBaseline() != null) {\r\n    const baseline: number = node.getBaseline()(\r\n      node,\r\n      node.getLayout().measuredDimensions[YGDimension.Width],\r\n      node.getLayout().measuredDimensions[YGDimension.Height],\r\n    );\r\n    YGAssertWithNode(\r\n      node,\r\n      !YGFloatIsUndefined(baseline),\r\n      'Expect custom baseline function to not return NaN',\r\n    );\r\n    return baseline;\r\n  }\r\n\r\n  let baselineChild: YGNode = null;\r\n  const childCount = YGNodeGetChildCount(node);\r\n  for (let i = 0; i < childCount; i++) {\r\n    const child: YGNode = YGNodeGetChild(node, i);\r\n    if (child.getLineIndex() > 0) {\r\n      break;\r\n    }\r\n\r\n    if (child.getStyle().positionType == YGPositionType.Absolute) {\r\n      continue;\r\n    }\r\n\r\n    if (YGNodeAlignItem(node, child) == YGAlign.Baseline) {\r\n      baselineChild = child;\r\n      break;\r\n    }\r\n\r\n    if (baselineChild == null) {\r\n      baselineChild = child;\r\n    }\r\n  }\r\n\r\n  if (baselineChild == null) {\r\n    return node.getLayout().measuredDimensions[YGDimension.Height];\r\n  }\r\n\r\n  const baseline: number = YGBaseline(baselineChild);\r\n  return baseline + baselineChild.getLayout().position[YGEdge.Top];\r\n}\r\n\r\nexport function YGIsBaselineLayout(node: YGNode): boolean {\r\n  if (YGFlexDirectionIsColumn(node.getStyle().flexDirection)) {\r\n    return false;\r\n  }\r\n\r\n  if (node.getStyle().alignItems == YGAlign.Baseline) {\r\n    return true;\r\n  }\r\n\r\n  const childCount: number = YGNodeGetChildCount(node);\r\n  for (let i = 0; i < childCount; i++) {\r\n    const child: YGNode = YGNodeGetChild(node, i);\r\n    if (\r\n      child.getStyle().positionType == YGPositionType.Relative &&\r\n      child.getStyle().alignSelf == YGAlign.Baseline\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function YGNodeDimWithMargin(node: YGNode, axis: YGFlexDirection, widthSize: number) {\r\n  return (\r\n    node.getLayout().measuredDimensions[dim[axis]] +\r\n    YGUnwrapFloatOptional(\r\n      node.getLeadingMargin(axis, widthSize).add(node.getTrailingMargin(axis, widthSize)),\r\n    )\r\n  );\r\n}\r\n\r\nexport function YGNodeIsStyleDimDefined(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  ownerSize: number,\r\n): boolean {\r\n  const isUndefined: boolean = YGFloatIsUndefined(node.getResolvedDimension(dim[axis]).value);\r\n  return !(\r\n    node.getResolvedDimension(dim[axis]).unit == YGUnit.Auto ||\r\n    node.getResolvedDimension(dim[axis]).unit == YGUnit.Undefined ||\r\n    (node.getResolvedDimension(dim[axis]).unit == YGUnit.Point &&\r\n      !isUndefined &&\r\n      node.getResolvedDimension(dim[axis]).value < 0.0) ||\r\n    (node.getResolvedDimension(dim[axis]).unit == YGUnit.Percent &&\r\n      !isUndefined &&\r\n      (node.getResolvedDimension(dim[axis]).value < 0.0 || YGFloatIsUndefined(ownerSize)))\r\n  );\r\n}\r\n\r\nexport function YGNodeIsLayoutDimDefined(node: YGNode, axis: YGFlexDirection): boolean {\r\n  const value: number = node.getLayout().measuredDimensions[dim[axis]];\r\n  return !YGFloatIsUndefined(value) && value >= 0.0;\r\n}\r\n\r\nexport function YGNodeBoundAxisWithinMinAndMax(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  value: number,\r\n  axisSize: number,\r\n): YGFloatOptional {\r\n  let min: YGFloatOptional;\r\n  let max: YGFloatOptional;\r\n\r\n  if (YGFlexDirectionIsColumn(axis)) {\r\n    min = YGResolveValue(node.getStyle().minDimensions[YGDimension.Height], axisSize);\r\n    max = YGResolveValue(node.getStyle().maxDimensions[YGDimension.Height], axisSize);\r\n  } else if (YGFlexDirectionIsRow(axis)) {\r\n    min = YGResolveValue(node.getStyle().minDimensions[YGDimension.Width], axisSize);\r\n    max = YGResolveValue(node.getStyle().maxDimensions[YGDimension.Width], axisSize);\r\n  }\r\n\r\n  if (!max.isUndefined() && max.getValue() >= 0 && value > max.getValue()) {\r\n    return max;\r\n  }\r\n\r\n  if (!min.isUndefined() && min.getValue() >= 0 && value < min.getValue()) {\r\n    return min;\r\n  }\r\n\r\n  return new YGFloatOptional(value);\r\n}\r\n\r\nexport function YGNodeBoundAxis(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  value: number,\r\n  axisSize: number,\r\n  widthSize: number,\r\n) {\r\n  return YGFloatMax(\r\n    YGUnwrapFloatOptional(YGNodeBoundAxisWithinMinAndMax(node, axis, value, axisSize)),\r\n    YGNodePaddingAndBorderForAxis(node, axis, widthSize),\r\n  );\r\n}\r\n\r\nexport function YGNodeSetChildTrailingPosition(node: YGNode, child: YGNode, axis: YGFlexDirection) {\r\n  const size: number = child.getLayout().measuredDimensions[dim[axis]];\r\n  child.setLayoutPosition(\r\n    node.getLayout().measuredDimensions[dim[axis]] -\r\n      size -\r\n      child.getLayout().position[pos[axis] as number],\r\n    trailing[axis],\r\n  );\r\n}\r\n\r\nexport function YGConstrainMaxSizeForMode(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  ownerAxisSize: number,\r\n  ownerWidth: number,\r\n  mode: {value: YGMeasureMode},\r\n  size: {value: number},\r\n): void {\r\n  const maxSize: YGFloatOptional = YGResolveValue(\r\n    node.getStyle().maxDimensions[dim[axis]],\r\n    ownerAxisSize,\r\n  ).add(node.getMarginForAxis(axis, ownerWidth));\r\n\r\n  switch (mode.value) {\r\n  case YGMeasureMode.Exactly:\r\n  case YGMeasureMode.AtMost:\r\n    size.value =\r\n        maxSize.isUndefined() || size.value < maxSize.getValue() ? size.value : maxSize.getValue();\r\n    break;\r\n  case YGMeasureMode.Undefined:\r\n    if (!maxSize.isUndefined()) {\r\n      mode.value = YGMeasureMode.AtMost;\r\n      size.value = maxSize.getValue();\r\n    }\r\n    break;\r\n  }\r\n}\r\n\r\nexport function YGNodeComputeFlexBasisForChild(\r\n  node: YGNode,\r\n  child: YGNode,\r\n  width: number,\r\n  widthMode: YGMeasureMode,\r\n  height: number,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n  heightMode: YGMeasureMode,\r\n  direction: YGDirection,\r\n  config: YGConfig,\r\n): void {\r\n  const mainAxis: YGFlexDirection = YGResolveFlexDirection(\r\n    node.getStyle().flexDirection,\r\n    direction,\r\n  );\r\n  const isMainAxisRow: boolean = YGFlexDirectionIsRow(mainAxis);\r\n  const mainAxisSize: number = isMainAxisRow ? width : height;\r\n  const mainAxisownerSize: number = isMainAxisRow ? ownerWidth : ownerHeight;\r\n\r\n  let childWidth: number;\r\n  let childHeight: number;\r\n  let childWidthMeasureMode: YGMeasureMode;\r\n  let childHeightMeasureMode: YGMeasureMode;\r\n\r\n  const resolvedFlexBasis: YGFloatOptional = YGResolveValue(\r\n    child.resolveFlexBasisPtr(),\r\n    mainAxisownerSize,\r\n  );\r\n  const isRowStyleDimDefined: boolean = YGNodeIsStyleDimDefined(\r\n    child,\r\n    YGFlexDirection.Row,\r\n    ownerWidth,\r\n  );\r\n  const isColumnStyleDimDefined: boolean = YGNodeIsStyleDimDefined(\r\n    child,\r\n    YGFlexDirection.Column,\r\n    ownerHeight,\r\n  );\r\n\r\n  if (!resolvedFlexBasis.isUndefined() && !YGFloatIsUndefined(mainAxisSize)) {\r\n    if (\r\n      child.getLayout().computedFlexBasis.isUndefined() ||\r\n      (YGConfigIsExperimentalFeatureEnabled(\r\n        child.getConfig(),\r\n        YGExperimentalFeature.WebFlexBasis,\r\n      ) &&\r\n        child.getLayout().computedFlexBasisGeneration != gCurrentGenerationCount)\r\n    ) {\r\n      const paddingAndBorder: YGFloatOptional = new YGFloatOptional(\r\n        YGNodePaddingAndBorderForAxis(child, mainAxis, ownerWidth),\r\n      );\r\n      child.setLayoutComputedFlexBasis(YGFloatOptionalMax(resolvedFlexBasis, paddingAndBorder));\r\n    }\r\n  } else if (isMainAxisRow && isRowStyleDimDefined) {\r\n    const paddingAndBorder: YGFloatOptional = new YGFloatOptional(\r\n      YGNodePaddingAndBorderForAxis(child, YGFlexDirection.Row, ownerWidth),\r\n    );\r\n    child.setLayoutComputedFlexBasis(\r\n      YGFloatOptionalMax(\r\n        YGResolveValue(child.getResolvedDimension(YGDimension.Width), ownerWidth),\r\n        paddingAndBorder,\r\n      ),\r\n    );\r\n  } else if (!isMainAxisRow && isColumnStyleDimDefined) {\r\n    const paddingAndBorder: YGFloatOptional = new YGFloatOptional(\r\n      YGNodePaddingAndBorderForAxis(child, YGFlexDirection.Column, ownerWidth),\r\n    );\r\n    child.setLayoutComputedFlexBasis(\r\n      YGFloatOptionalMax(\r\n        YGResolveValue(child.getResolvedDimension(YGDimension.Height), ownerHeight),\r\n        paddingAndBorder,\r\n      ),\r\n    );\r\n  } else {\r\n    childWidth = YGUndefined;\r\n    childHeight = YGUndefined;\r\n    childWidthMeasureMode = YGMeasureMode.Undefined;\r\n    childHeightMeasureMode = YGMeasureMode.Undefined;\r\n\r\n    const marginRow: number = YGUnwrapFloatOptional(\r\n      child.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n    );\r\n    const marginColumn: number = YGUnwrapFloatOptional(\r\n      child.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n    );\r\n\r\n    if (isRowStyleDimDefined) {\r\n      childWidth =\r\n        YGUnwrapFloatOptional(\r\n          YGResolveValue(child.getResolvedDimension(YGDimension.Width), ownerWidth),\r\n        ) + marginRow;\r\n      childWidthMeasureMode = YGMeasureMode.Exactly;\r\n    }\r\n    if (isColumnStyleDimDefined) {\r\n      childHeight =\r\n        YGUnwrapFloatOptional(\r\n          YGResolveValue(child.getResolvedDimension(YGDimension.Height), ownerHeight),\r\n        ) + marginColumn;\r\n      childHeightMeasureMode = YGMeasureMode.Exactly;\r\n    }\r\n    if (\r\n      (!isMainAxisRow && node.getStyle().overflow == YGOverflow.Scroll) ||\r\n      node.getStyle().overflow != YGOverflow.Scroll\r\n    ) {\r\n      if (YGFloatIsUndefined(childWidth) && !YGFloatIsUndefined(width)) {\r\n        childWidth = width;\r\n        childWidthMeasureMode = YGMeasureMode.AtMost;\r\n      }\r\n    }\r\n\r\n    if (\r\n      (isMainAxisRow && node.getStyle().overflow == YGOverflow.Scroll) ||\r\n      node.getStyle().overflow != YGOverflow.Scroll\r\n    ) {\r\n      if (YGFloatIsUndefined(childHeight) && !YGFloatIsUndefined(height)) {\r\n        childHeight = height;\r\n        childHeightMeasureMode = YGMeasureMode.AtMost;\r\n      }\r\n    }\r\n\r\n    if (!child.getStyle().aspectRatio.isUndefined()) {\r\n      if (!isMainAxisRow && childWidthMeasureMode == YGMeasureMode.Exactly) {\r\n        childHeight =\r\n          marginColumn + (childWidth - marginRow) / child.getStyle().aspectRatio.getValue();\r\n        childHeightMeasureMode = YGMeasureMode.Exactly;\r\n      } else if (isMainAxisRow && childHeightMeasureMode == YGMeasureMode.Exactly) {\r\n        childWidth =\r\n          marginRow + (childHeight - marginColumn) * child.getStyle().aspectRatio.getValue();\r\n        childWidthMeasureMode = YGMeasureMode.Exactly;\r\n      }\r\n    }\r\n\r\n    const hasExactWidth: boolean = !YGFloatIsUndefined(width) && widthMode == YGMeasureMode.Exactly;\r\n    const childWidthStretch: boolean =\r\n      YGNodeAlignItem(node, child) == YGAlign.Stretch &&\r\n      childWidthMeasureMode != YGMeasureMode.Exactly;\r\n    if (!isMainAxisRow && !isRowStyleDimDefined && hasExactWidth && childWidthStretch) {\r\n      childWidth = width;\r\n      childWidthMeasureMode = YGMeasureMode.Exactly;\r\n      if (!child.getStyle().aspectRatio.isUndefined()) {\r\n        childHeight = (childWidth - marginRow) / child.getStyle().aspectRatio.getValue();\r\n        childHeightMeasureMode = YGMeasureMode.Exactly;\r\n      }\r\n    }\r\n\r\n    const hasExactHeight: boolean =\r\n      !YGFloatIsUndefined(height) && heightMode == YGMeasureMode.Exactly;\r\n    const childHeightStretch: boolean =\r\n      YGNodeAlignItem(node, child) == YGAlign.Stretch &&\r\n      childHeightMeasureMode != YGMeasureMode.Exactly;\r\n\r\n    if (isMainAxisRow && !isColumnStyleDimDefined && hasExactHeight && childHeightStretch) {\r\n      childHeight = height;\r\n      childHeightMeasureMode = YGMeasureMode.Exactly;\r\n\r\n      if (!child.getStyle().aspectRatio.isUndefined()) {\r\n        childWidth = (childHeight - marginColumn) * child.getStyle().aspectRatio.getValue();\r\n        childWidthMeasureMode = YGMeasureMode.Exactly;\r\n      }\r\n    }\r\n\r\n    const childWidthMeasureModeRef = {value: childWidthMeasureMode};\r\n    const childWidthRef = {value: childWidth};\r\n    const childHeightMeasureModeRef = {value: childHeightMeasureMode};\r\n    const childHeightRef = {value: childHeight};\r\n\r\n    YGConstrainMaxSizeForMode(\r\n      child,\r\n      YGFlexDirection.Row,\r\n      ownerWidth,\r\n      ownerWidth,\r\n      childWidthMeasureModeRef,\r\n      childWidthRef,\r\n    );\r\n    YGConstrainMaxSizeForMode(\r\n      child,\r\n      YGFlexDirection.Column,\r\n      ownerHeight,\r\n      ownerWidth,\r\n      childHeightMeasureModeRef,\r\n      childHeightRef,\r\n    );\r\n\r\n    YGLayoutNodeInternal(\r\n      child,\r\n      childWidthRef.value,\r\n      childHeightRef.value,\r\n      direction,\r\n      childWidthMeasureModeRef.value,\r\n      childHeightMeasureModeRef.value,\r\n      ownerWidth,\r\n      ownerHeight,\r\n      false,\r\n      'measure',\r\n      config,\r\n    );\r\n\r\n    child.setLayoutComputedFlexBasis(\r\n      new YGFloatOptional(\r\n        YGFloatMax(\r\n          child.getLayout().measuredDimensions[dim[mainAxis]],\r\n          YGNodePaddingAndBorderForAxis(child, mainAxis, ownerWidth),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n  child.setLayoutComputedFlexBasisGeneration(gCurrentGenerationCount);\r\n}\r\n\r\nexport function YGNodeAbsoluteLayoutChild(\r\n  node: YGNode,\r\n  child: YGNode,\r\n  width: number,\r\n  widthMode: YGMeasureMode,\r\n  height: number,\r\n  direction: YGDirection,\r\n  config: YGConfig,\r\n): void {\r\n  const mainAxis: YGFlexDirection = YGResolveFlexDirection(\r\n    node.getStyle().flexDirection,\r\n    direction,\r\n  );\r\n  const crossAxis: YGFlexDirection = YGFlexDirectionCross(mainAxis, direction);\r\n  const isMainAxisRow: boolean = YGFlexDirectionIsRow(mainAxis);\r\n\r\n  let childWidth: number = YGUndefined;\r\n  let childHeight: number = YGUndefined;\r\n  let childWidthMeasureMode: YGMeasureMode = YGMeasureMode.Undefined;\r\n  let childHeightMeasureMode: YGMeasureMode = YGMeasureMode.Undefined;\r\n\r\n  const marginRow: number = YGUnwrapFloatOptional(\r\n    child.getMarginForAxis(YGFlexDirection.Row, width),\r\n  );\r\n  const marginColumn: number = YGUnwrapFloatOptional(\r\n    child.getMarginForAxis(YGFlexDirection.Column, width),\r\n  );\r\n\r\n  if (YGNodeIsStyleDimDefined(child, YGFlexDirection.Row, width)) {\r\n    childWidth =\r\n      YGUnwrapFloatOptional(YGResolveValue(child.getResolvedDimension(YGDimension.Width), width)) +\r\n      marginRow;\r\n  } else {\r\n    if (\r\n      child.isLeadingPositionDefined(YGFlexDirection.Row) &&\r\n      child.isTrailingPosDefined(YGFlexDirection.Row)\r\n    ) {\r\n      childWidth =\r\n        node.getLayout().measuredDimensions[YGDimension.Width] -\r\n        (node.getLeadingBorder(YGFlexDirection.Row) + node.getTrailingBorder(YGFlexDirection.Row)) -\r\n        YGUnwrapFloatOptional(\r\n          child\r\n            .getLeadingPosition(YGFlexDirection.Row, width)\r\n            .add(child.getTrailingPosition(YGFlexDirection.Row, width)),\r\n        );\r\n      childWidth = YGNodeBoundAxis(child, YGFlexDirection.Row, childWidth, width, width);\r\n    }\r\n  }\r\n\r\n  if (YGNodeIsStyleDimDefined(child, YGFlexDirection.Column, height)) {\r\n    childHeight =\r\n      YGUnwrapFloatOptional(\r\n        YGResolveValue(child.getResolvedDimension(YGDimension.Height), height),\r\n      ) + marginColumn;\r\n  } else {\r\n    if (\r\n      child.isLeadingPositionDefined(YGFlexDirection.Column) &&\r\n      child.isTrailingPosDefined(YGFlexDirection.Column)\r\n    ) {\r\n      childHeight =\r\n        node.getLayout().measuredDimensions[YGDimension.Height] -\r\n        (node.getLeadingBorder(YGFlexDirection.Column) +\r\n          node.getTrailingBorder(YGFlexDirection.Column)) -\r\n        YGUnwrapFloatOptional(\r\n          child\r\n            .getLeadingPosition(YGFlexDirection.Column, height)\r\n            .add(child.getTrailingPosition(YGFlexDirection.Column, height)),\r\n        );\r\n      childHeight = YGNodeBoundAxis(child, YGFlexDirection.Column, childHeight, height, width);\r\n    }\r\n  }\r\n\r\n  if (\r\n    YGFloatIsUndefined(childWidth)\r\n      ? !YGFloatIsUndefined(childHeight)\r\n      : YGFloatIsUndefined(childHeight)\r\n  ) {\r\n    // if( foo ? !bar : bar ) { XOR ^ REMOVED\r\n    if (!child.getStyle().aspectRatio.isUndefined()) {\r\n      if (YGFloatIsUndefined(childWidth)) {\r\n        childWidth =\r\n          marginRow + (childHeight - marginColumn) * child.getStyle().aspectRatio.getValue();\r\n      } else if (YGFloatIsUndefined(childHeight)) {\r\n        childHeight =\r\n          marginColumn + (childWidth - marginRow) / child.getStyle().aspectRatio.getValue();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (YGFloatIsUndefined(childWidth) || YGFloatIsUndefined(childHeight)) {\r\n    childWidthMeasureMode = YGFloatIsUndefined(childWidth)\r\n      ? YGMeasureMode.Undefined\r\n      : YGMeasureMode.Exactly;\r\n    childHeightMeasureMode = YGFloatIsUndefined(childHeight)\r\n      ? YGMeasureMode.Undefined\r\n      : YGMeasureMode.Exactly;\r\n\r\n    if (\r\n      !isMainAxisRow &&\r\n      YGFloatIsUndefined(childWidth) &&\r\n      widthMode != YGMeasureMode.Undefined &&\r\n      !YGFloatIsUndefined(width) &&\r\n      width > 0\r\n    ) {\r\n      childWidth = width;\r\n      childWidthMeasureMode = YGMeasureMode.AtMost;\r\n    }\r\n\r\n    YGLayoutNodeInternal(\r\n      child,\r\n      childWidth,\r\n      childHeight,\r\n      direction,\r\n      childWidthMeasureMode,\r\n      childHeightMeasureMode,\r\n      childWidth,\r\n      childHeight,\r\n      false,\r\n      'abs-measure',\r\n      config,\r\n    );\r\n\r\n    childWidth =\r\n      child.getLayout().measuredDimensions[YGDimension.Width] +\r\n      YGUnwrapFloatOptional(child.getMarginForAxis(YGFlexDirection.Row, width));\r\n    childHeight =\r\n      child.getLayout().measuredDimensions[YGDimension.Height] +\r\n      YGUnwrapFloatOptional(child.getMarginForAxis(YGFlexDirection.Column, width));\r\n  }\r\n\r\n  YGLayoutNodeInternal(\r\n    child,\r\n    childWidth,\r\n    childHeight,\r\n    direction,\r\n    YGMeasureMode.Exactly,\r\n    YGMeasureMode.Exactly,\r\n    childWidth,\r\n    childHeight,\r\n    true,\r\n    'abs-layout',\r\n    config,\r\n  );\r\n\r\n  if (child.isTrailingPosDefined(mainAxis) && !child.isLeadingPositionDefined(mainAxis)) {\r\n    child.setLayoutPosition(\r\n      node.getLayout().measuredDimensions[dim[mainAxis]] -\r\n        child.getLayout().measuredDimensions[dim[mainAxis]] -\r\n        node.getTrailingBorder(mainAxis) -\r\n        YGUnwrapFloatOptional(child.getTrailingMargin(mainAxis, width)) -\r\n        YGUnwrapFloatOptional(child.getTrailingPosition(mainAxis, isMainAxisRow ? width : height)),\r\n      leading[mainAxis],\r\n    );\r\n  } else if (\r\n    !child.isLeadingPositionDefined(mainAxis) &&\r\n    node.getStyle().justifyContent == YGJustify.Center\r\n  ) {\r\n    child.setLayoutPosition(\r\n      (node.getLayout().measuredDimensions[dim[mainAxis]] -\r\n        child.getLayout().measuredDimensions[dim[mainAxis]]) /\r\n        2.0,\r\n      leading[mainAxis],\r\n    );\r\n  } else if (\r\n    !child.isLeadingPositionDefined(mainAxis) &&\r\n    node.getStyle().justifyContent == YGJustify.FlexEnd\r\n  ) {\r\n    child.setLayoutPosition(\r\n      node.getLayout().measuredDimensions[dim[mainAxis]] -\r\n        child.getLayout().measuredDimensions[dim[mainAxis]],\r\n      leading[mainAxis],\r\n    );\r\n  }\r\n\r\n  if (child.isTrailingPosDefined(crossAxis) && !child.isLeadingPositionDefined(crossAxis)) {\r\n    child.setLayoutPosition(\r\n      node.getLayout().measuredDimensions[dim[crossAxis]] -\r\n        child.getLayout().measuredDimensions[dim[crossAxis]] -\r\n        node.getTrailingBorder(crossAxis) -\r\n        YGUnwrapFloatOptional(child.getTrailingMargin(crossAxis, width)) -\r\n        YGUnwrapFloatOptional(child.getTrailingPosition(crossAxis, isMainAxisRow ? height : width)),\r\n      leading[crossAxis],\r\n    );\r\n  } else if (\r\n    !child.isLeadingPositionDefined(crossAxis) &&\r\n    YGNodeAlignItem(node, child) == YGAlign.Center\r\n  ) {\r\n    child.setLayoutPosition(\r\n      (node.getLayout().measuredDimensions[dim[crossAxis]] -\r\n        child.getLayout().measuredDimensions[dim[crossAxis]]) /\r\n        2.0,\r\n      leading[crossAxis],\r\n    );\r\n  } else if (\r\n    !child.isLeadingPositionDefined(crossAxis) &&\r\n    (YGNodeAlignItem(node, child) == YGAlign.FlexEnd\r\n      ? !(node.getStyle().flexWrap == YGWrap.WrapReverse)\r\n      : node.getStyle().flexWrap == YGWrap.WrapReverse)\r\n  ) {\r\n    // XOR\r\n    child.setLayoutPosition(\r\n      node.getLayout().measuredDimensions[dim[crossAxis]] -\r\n        child.getLayout().measuredDimensions[dim[crossAxis]],\r\n      leading[crossAxis],\r\n    );\r\n  }\r\n}\r\n\r\nexport function YGNodeWithMeasureFuncSetMeasuredDimensions(\r\n  node: YGNode,\r\n  availableWidth: number,\r\n  availableHeight: number,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    node.getMeasure() != null,\r\n    'Expected node to have custom measure function',\r\n  );\r\n\r\n  const paddingAndBorderAxisRow: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    YGFlexDirection.Row,\r\n    availableWidth,\r\n  );\r\n  const paddingAndBorderAxisColumn: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    YGFlexDirection.Column,\r\n    availableWidth,\r\n  );\r\n  const marginAxisRow: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Row, availableWidth),\r\n  );\r\n  const marginAxisColumn: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Column, availableWidth),\r\n  );\r\n  const innerWidth: number = YGFloatIsUndefined(availableWidth)\r\n    ? availableWidth\r\n    : YGFloatMax(0, availableWidth - marginAxisRow - paddingAndBorderAxisRow);\r\n  const innerHeight: number = YGFloatIsUndefined(availableHeight)\r\n    ? availableHeight\r\n    : YGFloatMax(0, availableHeight - marginAxisColumn - paddingAndBorderAxisColumn);\r\n\r\n  if (widthMeasureMode == YGMeasureMode.Exactly && heightMeasureMode == YGMeasureMode.Exactly) {\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Row,\r\n        availableWidth - marginAxisRow,\r\n        ownerWidth,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Width,\r\n    );\r\n\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Column,\r\n        availableHeight - marginAxisColumn,\r\n        ownerHeight,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Height,\r\n    );\r\n  } else {\r\n    const measuredSize: YGSize = node.getMeasure()(\r\n      node,\r\n      innerWidth,\r\n      widthMeasureMode,\r\n      innerHeight,\r\n      heightMeasureMode,\r\n    );\r\n\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Row,\r\n        widthMeasureMode == YGMeasureMode.Undefined || widthMeasureMode == YGMeasureMode.AtMost\r\n          ? measuredSize.width + paddingAndBorderAxisRow\r\n          : availableWidth - marginAxisRow,\r\n        ownerWidth,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Width,\r\n    );\r\n\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Column,\r\n        heightMeasureMode == YGMeasureMode.Undefined || heightMeasureMode == YGMeasureMode.AtMost\r\n          ? measuredSize.height + paddingAndBorderAxisColumn\r\n          : availableHeight - marginAxisColumn,\r\n        ownerHeight,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Height,\r\n    );\r\n  }\r\n}\r\n\r\nexport function YGNodeEmptyContainerSetMeasuredDimensions(\r\n  node: YGNode,\r\n  availableWidth: number,\r\n  availableHeight: number,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n): void {\r\n  const paddingAndBorderAxisRow: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    YGFlexDirection.Row,\r\n    ownerWidth,\r\n  );\r\n  const paddingAndBorderAxisColumn: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    YGFlexDirection.Column,\r\n    ownerWidth,\r\n  );\r\n  const marginAxisRow: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n  );\r\n  const marginAxisColumn: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n  );\r\n\r\n  node.setLayoutMeasuredDimension(\r\n    YGNodeBoundAxis(\r\n      node,\r\n      YGFlexDirection.Row,\r\n      widthMeasureMode == YGMeasureMode.Undefined || widthMeasureMode == YGMeasureMode.AtMost\r\n        ? paddingAndBorderAxisRow\r\n        : availableWidth - marginAxisRow,\r\n      ownerWidth,\r\n      ownerWidth,\r\n    ),\r\n    YGDimension.Width,\r\n  );\r\n\r\n  node.setLayoutMeasuredDimension(\r\n    YGNodeBoundAxis(\r\n      node,\r\n      YGFlexDirection.Column,\r\n      heightMeasureMode == YGMeasureMode.Undefined || heightMeasureMode == YGMeasureMode.AtMost\r\n        ? paddingAndBorderAxisColumn\r\n        : availableHeight - marginAxisColumn,\r\n      ownerHeight,\r\n      ownerWidth,\r\n    ),\r\n    YGDimension.Height,\r\n  );\r\n}\r\n\r\nexport function YGNodeFixedSizeSetMeasuredDimensions(\r\n  node: YGNode,\r\n  availableWidth: number,\r\n  availableHeight: number,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n) {\r\n  if (\r\n    (!YGFloatIsUndefined(availableWidth) &&\r\n      widthMeasureMode == YGMeasureMode.AtMost &&\r\n      availableWidth <= 0) ||\r\n    (!YGFloatIsUndefined(availableHeight) &&\r\n      heightMeasureMode == YGMeasureMode.AtMost &&\r\n      availableHeight <= 0) ||\r\n    (widthMeasureMode == YGMeasureMode.Exactly && heightMeasureMode == YGMeasureMode.Exactly)\r\n  ) {\r\n    const marginAxisColumn: number = YGUnwrapFloatOptional(\r\n      node.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n    );\r\n    const marginAxisRow: number = YGUnwrapFloatOptional(\r\n      node.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n    );\r\n\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Row,\r\n        YGFloatIsUndefined(availableWidth) ||\r\n          (widthMeasureMode == YGMeasureMode.AtMost && availableWidth < 0)\r\n          ? 0\r\n          : availableWidth - marginAxisRow,\r\n        ownerWidth,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Width,\r\n    );\r\n\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        YGFlexDirection.Column,\r\n        YGFloatIsUndefined(availableHeight) ||\r\n          (heightMeasureMode == YGMeasureMode.AtMost && availableHeight < 0)\r\n          ? 0\r\n          : availableHeight - marginAxisColumn,\r\n        ownerHeight,\r\n        ownerWidth,\r\n      ),\r\n      YGDimension.Height,\r\n    );\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function YGZeroOutLayoutRecursivly(node: YGNode): void {\r\n  node.getLayout().clean();\r\n  node.setHasNewLayout(true);\r\n  node.cloneChildrenIfNeeded();\r\n\r\n  const childCount: number = YGNodeGetChildCount(node);\r\n  for (let i = 0; i < childCount; i++) {\r\n    const child: YGNode = node.getChild(i);\r\n    YGZeroOutLayoutRecursivly(child);\r\n  }\r\n}\r\n\r\nexport function YGNodeCalculateAvailableInnerDim(\r\n  node: YGNode,\r\n  axis: YGFlexDirection,\r\n  availableDim: number,\r\n  ownerDim: number,\r\n): number {\r\n  const direction: YGFlexDirection = YGFlexDirectionIsRow(axis)\r\n    ? YGFlexDirection.Row\r\n    : YGFlexDirection.Column;\r\n  const dimension: YGDimension = YGFlexDirectionIsRow(axis)\r\n    ? YGDimension.Width\r\n    : YGDimension.Height;\r\n  const margin: number = YGUnwrapFloatOptional(node.getMarginForAxis(direction, ownerDim));\r\n  const paddingAndBorder: number = YGNodePaddingAndBorderForAxis(node, direction, ownerDim);\r\n\r\n  let availableInnerDim: number = availableDim - margin - paddingAndBorder;\r\n  if (!YGFloatIsUndefined(availableInnerDim)) {\r\n    const minDimensionOptional: YGFloatOptional = YGResolveValue(\r\n      node.getStyle().minDimensions[dimension],\r\n      ownerDim,\r\n    );\r\n    const minInnerDim: number = minDimensionOptional.isUndefined()\r\n      ? 0.0\r\n      : minDimensionOptional.getValue() - paddingAndBorder;\r\n\r\n    const maxDimensionOptional: YGFloatOptional = YGResolveValue(\r\n      node.getStyle().maxDimensions[dimension],\r\n      ownerDim,\r\n    );\r\n\r\n    const maxInnerDim: number = maxDimensionOptional.isUndefined()\r\n      ? Number.MAX_VALUE\r\n      : maxDimensionOptional.getValue() - paddingAndBorder;\r\n    availableInnerDim = YGFloatMax(YGFloatMin(availableInnerDim, maxInnerDim), minInnerDim);\r\n  }\r\n\r\n  return availableInnerDim;\r\n}\r\n\r\nexport function YGNodeComputeFlexBasisForChildren(\r\n  node: YGNode,\r\n  availableInnerWidth: number,\r\n  availableInnerHeight: number,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  direction: YGDirection,\r\n  mainAxis: YGFlexDirection,\r\n  config: YGConfig,\r\n  performLayout: boolean,\r\n  totalOuterFlexBasisRef: {value: number},\r\n) {\r\n  let singleFlexChild: YGNode = null;\r\n  const children: Array<YGNode> = node.getChildren();\r\n  const measureModeMainDim: YGMeasureMode = YGFlexDirectionIsRow(mainAxis)\r\n    ? widthMeasureMode\r\n    : heightMeasureMode;\r\n\r\n  if (measureModeMainDim == YGMeasureMode.Exactly) {\r\n    for (let i = 0; i < children.length; ++i) {\r\n      const child: YGNode = children[i];\r\n      if (child.isNodeFlexible()) {\r\n        if (\r\n          singleFlexChild != null ||\r\n          YGFloatsEqual(child.resolveFlexGrow(), 0.0) ||\r\n          YGFloatsEqual(child.resolveFlexShrink(), 0.0)\r\n        ) {\r\n          singleFlexChild = null;\r\n          break;\r\n        } else {\r\n          singleFlexChild = child;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < children.length; ++i) {\r\n    const child: YGNode = children[i];\r\n    child.resolveDimension();\r\n    if (child.getStyle().display == YGDisplay.None) {\r\n      YGZeroOutLayoutRecursivly(child);\r\n      child.setHasNewLayout(true);\r\n      child.setDirty(false);\r\n      continue;\r\n    }\r\n    if (performLayout) {\r\n      const childDirection: YGDirection = child.resolveDirection(direction);\r\n      const mainDim: number = YGFlexDirectionIsRow(mainAxis)\r\n        ? availableInnerWidth\r\n        : availableInnerHeight;\r\n      const crossDim: number = YGFlexDirectionIsRow(mainAxis)\r\n        ? availableInnerHeight\r\n        : availableInnerWidth;\r\n      child.setPosition(childDirection, mainDim, crossDim, availableInnerWidth);\r\n    }\r\n\r\n    if (child.getStyle().positionType == YGPositionType.Absolute) {\r\n      continue;\r\n    }\r\n    if (child == singleFlexChild) {\r\n      child.setLayoutComputedFlexBasisGeneration(gCurrentGenerationCount);\r\n      child.setLayoutComputedFlexBasis(new YGFloatOptional(0));\r\n    } else {\r\n      YGNodeComputeFlexBasisForChild(\r\n        node,\r\n        child,\r\n        availableInnerWidth,\r\n        widthMeasureMode,\r\n        availableInnerHeight,\r\n        availableInnerWidth,\r\n        availableInnerHeight,\r\n        heightMeasureMode,\r\n        direction,\r\n        config,\r\n      );\r\n    }\r\n\r\n    totalOuterFlexBasisRef.value += YGUnwrapFloatOptional(\r\n      child\r\n        .getLayout()\r\n        .computedFlexBasis.add(child.getMarginForAxis(mainAxis, availableInnerWidth)),\r\n    );\r\n  }\r\n}\r\n\r\nexport function YGCalculateCollectFlexItemsRowValues(\r\n  node: YGNode,\r\n  ownerDirection: YGDirection,\r\n  mainAxisownerSize: number,\r\n  availableInnerWidth: number,\r\n  availableInnerMainDim: number,\r\n  startOfLineIndex: number,\r\n  lineCount: number,\r\n): YGCollectFlexItemsRowValues {\r\n  const flexAlgoRowMeasurement: YGCollectFlexItemsRowValues = new YGCollectFlexItemsRowValues();\r\n  //flexAlgoRowMeasurement.relativeChildren = new Array(node.getChildren().length);\r\n\r\n  let sizeConsumedOnCurrentLineIncludingMinConstraint = 0;\r\n  const mainAxis: YGFlexDirection = YGResolveFlexDirection(\r\n    node.getStyle().flexDirection,\r\n    node.resolveDirection(ownerDirection),\r\n  );\r\n  const isNodeFlexWrap: boolean = node.getStyle().flexWrap != YGWrap.NoWrap;\r\n  let endOfLineIndex = startOfLineIndex;\r\n  for (; endOfLineIndex < node.getChildrenCount(); endOfLineIndex++) {\r\n    const child: YGNode = node.getChild(endOfLineIndex);\r\n    if (\r\n      child.getStyle().display == YGDisplay.None ||\r\n      child.getStyle().positionType == YGPositionType.Absolute\r\n    ) {\r\n      continue;\r\n    }\r\n    child.setLineIndex(lineCount);\r\n\r\n    const childMarginMainAxis: number = YGUnwrapFloatOptional(\r\n      child.getMarginForAxis(mainAxis, availableInnerWidth),\r\n    );\r\n\r\n    const flexBasisWithMinAndMaxConstraints: number = YGUnwrapFloatOptional(\r\n      YGNodeBoundAxisWithinMinAndMax(\r\n        child,\r\n        mainAxis,\r\n        YGUnwrapFloatOptional(child.getLayout().computedFlexBasis),\r\n        mainAxisownerSize,\r\n      ),\r\n    );\r\n\r\n    if (\r\n      sizeConsumedOnCurrentLineIncludingMinConstraint +\r\n        flexBasisWithMinAndMaxConstraints +\r\n        childMarginMainAxis >\r\n        availableInnerMainDim &&\r\n      isNodeFlexWrap &&\r\n      flexAlgoRowMeasurement.itemsOnLine > 0\r\n    ) {\r\n      break;\r\n    }\r\n\r\n    sizeConsumedOnCurrentLineIncludingMinConstraint +=\r\n      flexBasisWithMinAndMaxConstraints + childMarginMainAxis;\r\n    flexAlgoRowMeasurement.sizeConsumedOnCurrentLine +=\r\n      flexBasisWithMinAndMaxConstraints + childMarginMainAxis;\r\n    flexAlgoRowMeasurement.itemsOnLine++;\r\n\r\n    if (child.isNodeFlexible()) {\r\n      flexAlgoRowMeasurement.totalFlexGrowFactors += child.resolveFlexGrow();\r\n      flexAlgoRowMeasurement.totalFlexShrinkScaledFactors +=\r\n        -child.resolveFlexShrink() * YGUnwrapFloatOptional(child.getLayout().computedFlexBasis);\r\n    }\r\n\r\n    flexAlgoRowMeasurement.relativeChildren.push(child);\r\n  }\r\n\r\n  if (\r\n    flexAlgoRowMeasurement.totalFlexGrowFactors > 0 &&\r\n    flexAlgoRowMeasurement.totalFlexGrowFactors < 1\r\n  ) {\r\n    flexAlgoRowMeasurement.totalFlexGrowFactors = 1;\r\n  }\r\n\r\n  if (\r\n    flexAlgoRowMeasurement.totalFlexShrinkScaledFactors > 0 &&\r\n    flexAlgoRowMeasurement.totalFlexShrinkScaledFactors < 1\r\n  ) {\r\n    flexAlgoRowMeasurement.totalFlexShrinkScaledFactors = 1;\r\n  }\r\n\r\n  flexAlgoRowMeasurement.endOfLineIndex = endOfLineIndex;\r\n  return flexAlgoRowMeasurement;\r\n}\r\n\r\nexport function YGDistributeFreeSpaceSecondPass(\r\n  collectedFlexItemsValues: YGCollectFlexItemsRowValues,\r\n  node: YGNode,\r\n  mainAxis: YGFlexDirection,\r\n  crossAxis: YGFlexDirection,\r\n  mainAxisownerSize: number,\r\n  availableInnerMainDim: number,\r\n  availableInnerCrossDim: number,\r\n  availableInnerWidth: number,\r\n  availableInnerHeight: number,\r\n  flexBasisOverflows: boolean,\r\n  measureModeCrossDim: YGMeasureMode,\r\n  performLayout: boolean,\r\n  config: YGConfig,\r\n): number {\r\n  let childFlexBasis = 0;\r\n  let flexShrinkScaledFactor = 0;\r\n  let flexGrowFactor = 0;\r\n  let deltaFreeSpace = 0;\r\n  const isMainAxisRow: boolean = YGFlexDirectionIsRow(mainAxis);\r\n  const isNodeFlexWrap: boolean = node.getStyle().flexWrap != YGWrap.NoWrap;\r\n\r\n  for (let i = 0; i < collectedFlexItemsValues.relativeChildren.length; ++i) {\r\n    const currentRelativeChild: YGNode = collectedFlexItemsValues.relativeChildren[i];\r\n    childFlexBasis = YGUnwrapFloatOptional(\r\n      YGNodeBoundAxisWithinMinAndMax(\r\n        currentRelativeChild,\r\n        mainAxis,\r\n        YGUnwrapFloatOptional(currentRelativeChild.getLayout().computedFlexBasis),\r\n        mainAxisownerSize,\r\n      ),\r\n    );\r\n    let updatedMainSize: number = childFlexBasis;\r\n\r\n    if (\r\n      !YGFloatIsUndefined(collectedFlexItemsValues.remainingFreeSpace) &&\r\n      collectedFlexItemsValues.remainingFreeSpace < 0\r\n    ) {\r\n      flexShrinkScaledFactor = -currentRelativeChild.resolveFlexShrink() * childFlexBasis;\r\n\r\n      if (flexShrinkScaledFactor != 0) {\r\n        let childSize: number;\r\n\r\n        if (\r\n          !YGFloatIsUndefined(collectedFlexItemsValues.totalFlexShrinkScaledFactors) &&\r\n          collectedFlexItemsValues.totalFlexShrinkScaledFactors == 0\r\n        ) {\r\n          childSize = childFlexBasis + flexShrinkScaledFactor;\r\n        } else {\r\n          childSize =\r\n            childFlexBasis +\r\n            (collectedFlexItemsValues.remainingFreeSpace /\r\n              collectedFlexItemsValues.totalFlexShrinkScaledFactors) *\r\n              flexShrinkScaledFactor;\r\n        }\r\n\r\n        updatedMainSize = YGNodeBoundAxis(\r\n          currentRelativeChild,\r\n          mainAxis,\r\n          childSize,\r\n          availableInnerMainDim,\r\n          availableInnerWidth,\r\n        );\r\n      }\r\n    } else if (\r\n      !YGFloatIsUndefined(collectedFlexItemsValues.remainingFreeSpace) &&\r\n      collectedFlexItemsValues.remainingFreeSpace > 0\r\n    ) {\r\n      flexGrowFactor = currentRelativeChild.resolveFlexGrow();\r\n      if (!YGFloatIsUndefined(flexGrowFactor) && flexGrowFactor != 0) {\r\n        updatedMainSize = YGNodeBoundAxis(\r\n          currentRelativeChild,\r\n          mainAxis,\r\n          childFlexBasis +\r\n            (collectedFlexItemsValues.remainingFreeSpace /\r\n              collectedFlexItemsValues.totalFlexGrowFactors) *\r\n              flexGrowFactor,\r\n          availableInnerMainDim,\r\n          availableInnerWidth,\r\n        );\r\n      }\r\n    }\r\n\r\n    deltaFreeSpace += updatedMainSize - childFlexBasis;\r\n\r\n    const marginMain: number = YGUnwrapFloatOptional(\r\n      currentRelativeChild.getMarginForAxis(mainAxis, availableInnerWidth),\r\n    );\r\n    const marginCross: number = YGUnwrapFloatOptional(\r\n      currentRelativeChild.getMarginForAxis(crossAxis, availableInnerWidth),\r\n    );\r\n\r\n    let childCrossSize: number;\r\n    let childMainSize: number = updatedMainSize + marginMain;\r\n    let childCrossMeasureMode: YGMeasureMode;\r\n    let childMainMeasureMode: YGMeasureMode = YGMeasureMode.Exactly;\r\n\r\n    if (!currentRelativeChild.getStyle().aspectRatio.isUndefined()) {\r\n      childCrossSize = isMainAxisRow\r\n        ? (childMainSize - marginMain) / currentRelativeChild.getStyle().aspectRatio.getValue()\r\n        : (childMainSize - marginMain) * currentRelativeChild.getStyle().aspectRatio.getValue();\r\n      childCrossMeasureMode = YGMeasureMode.Exactly;\r\n\r\n      childCrossSize += marginCross;\r\n    } else if (\r\n      !YGFloatIsUndefined(availableInnerCrossDim) &&\r\n      !YGNodeIsStyleDimDefined(currentRelativeChild, crossAxis, availableInnerCrossDim) &&\r\n      measureModeCrossDim == YGMeasureMode.Exactly &&\r\n      !(isNodeFlexWrap && flexBasisOverflows) &&\r\n      YGNodeAlignItem(node, currentRelativeChild) == YGAlign.Stretch &&\r\n      currentRelativeChild.marginLeadingValue(crossAxis).unit != YGUnit.Auto &&\r\n      currentRelativeChild.marginTrailingValue(crossAxis).unit != YGUnit.Auto\r\n    ) {\r\n      childCrossSize = availableInnerCrossDim;\r\n      childCrossMeasureMode = YGMeasureMode.Exactly;\r\n    } else if (!YGNodeIsStyleDimDefined(currentRelativeChild, crossAxis, availableInnerCrossDim)) {\r\n      childCrossSize = availableInnerCrossDim;\r\n      childCrossMeasureMode = YGFloatIsUndefined(childCrossSize)\r\n        ? YGMeasureMode.Undefined\r\n        : YGMeasureMode.AtMost;\r\n    } else {\r\n      childCrossSize =\r\n        YGUnwrapFloatOptional(\r\n          YGResolveValue(\r\n            currentRelativeChild.getResolvedDimension(dim[crossAxis]),\r\n            availableInnerCrossDim,\r\n          ),\r\n        ) + marginCross;\r\n      const isLoosePercentageMeasurement: boolean =\r\n        currentRelativeChild.getResolvedDimension(dim[crossAxis]).unit == YGUnit.Percent &&\r\n        measureModeCrossDim != YGMeasureMode.Exactly;\r\n      childCrossMeasureMode =\r\n        YGFloatIsUndefined(childCrossSize) || isLoosePercentageMeasurement\r\n          ? YGMeasureMode.Undefined\r\n          : YGMeasureMode.Exactly;\r\n    }\r\n\r\n    const childMainMeasureModeRef = {value: childMainMeasureMode};\r\n    const childMainSizeRef = {value: childMainSize};\r\n    const childCrossMeasureModeRef = {value: childCrossMeasureMode};\r\n    const childCrossSizeRef = {value: childCrossSize};\r\n\r\n    YGConstrainMaxSizeForMode(\r\n      currentRelativeChild,\r\n      mainAxis,\r\n      availableInnerMainDim,\r\n      availableInnerWidth,\r\n      childMainMeasureModeRef,\r\n      childMainSizeRef,\r\n    );\r\n\r\n    YGConstrainMaxSizeForMode(\r\n      currentRelativeChild,\r\n      crossAxis,\r\n      availableInnerCrossDim,\r\n      availableInnerWidth,\r\n      childCrossMeasureModeRef,\r\n      childCrossSizeRef,\r\n    );\r\n\r\n    childMainMeasureMode = childMainMeasureModeRef.value;\r\n    childMainSize = childMainSizeRef.value;\r\n    childCrossMeasureMode = childCrossMeasureModeRef.value;\r\n    childCrossSize = childCrossSizeRef.value;\r\n\r\n    const requiresStretchLayout: boolean =\r\n      !YGNodeIsStyleDimDefined(currentRelativeChild, crossAxis, availableInnerCrossDim) &&\r\n      YGNodeAlignItem(node, currentRelativeChild) == YGAlign.Stretch &&\r\n      currentRelativeChild.marginLeadingValue(crossAxis).unit != YGUnit.Auto &&\r\n      currentRelativeChild.marginTrailingValue(crossAxis).unit != YGUnit.Auto;\r\n\r\n    const childWidth: number = isMainAxisRow ? childMainSize : childCrossSize;\r\n    const childHeight: number = !isMainAxisRow ? childMainSize : childCrossSize;\r\n\r\n    const childWidthMeasureMode: YGMeasureMode = isMainAxisRow\r\n      ? childMainMeasureMode\r\n      : childCrossMeasureMode;\r\n    const childHeightMeasureMode: YGMeasureMode = !isMainAxisRow\r\n      ? childMainMeasureMode\r\n      : childCrossMeasureMode;\r\n\r\n    YGLayoutNodeInternal(\r\n      currentRelativeChild,\r\n      childWidth,\r\n      childHeight,\r\n      node.getLayout().direction,\r\n      childWidthMeasureMode,\r\n      childHeightMeasureMode,\r\n      availableInnerWidth,\r\n      availableInnerHeight,\r\n      performLayout && !requiresStretchLayout,\r\n      'flex',\r\n      config,\r\n    );\r\n\r\n    node.setLayoutHadOverflow(\r\n      node.getLayout().hadOverflow || currentRelativeChild.getLayout().hadOverflow,\r\n    );\r\n  }\r\n\r\n  return deltaFreeSpace;\r\n}\r\n\r\nexport function YGDistributeFreeSpaceFirstPass(\r\n  collectedFlexItemsValues: YGCollectFlexItemsRowValues,\r\n  mainAxis: YGFlexDirection,\r\n  mainAxisownerSize: number,\r\n  availableInnerMainDim: number,\r\n  availableInnerWidth: number,\r\n): void {\r\n  let flexShrinkScaledFactor = 0;\r\n  let flexGrowFactor = 0;\r\n  let baseMainSize = 0;\r\n  let boundMainSize = 0;\r\n  let deltaFreeSpace = 0;\r\n\r\n  for (let i = 0; i < collectedFlexItemsValues.relativeChildren.length; ++i) {\r\n    const currentRelativeChild: YGNode = collectedFlexItemsValues.relativeChildren[i];\r\n    const childFlexBasis: number = YGUnwrapFloatOptional(\r\n      YGNodeBoundAxisWithinMinAndMax(\r\n        currentRelativeChild,\r\n        mainAxis,\r\n        YGUnwrapFloatOptional(currentRelativeChild.getLayout().computedFlexBasis),\r\n        mainAxisownerSize,\r\n      ),\r\n    );\r\n\r\n    if (collectedFlexItemsValues.remainingFreeSpace < 0) {\r\n      flexShrinkScaledFactor = -currentRelativeChild.resolveFlexShrink() * childFlexBasis;\r\n      if (!YGFloatIsUndefined(flexShrinkScaledFactor) && flexShrinkScaledFactor != 0) {\r\n        baseMainSize =\r\n          childFlexBasis +\r\n          (collectedFlexItemsValues.remainingFreeSpace /\r\n            collectedFlexItemsValues.totalFlexShrinkScaledFactors) *\r\n            flexShrinkScaledFactor;\r\n        boundMainSize = YGNodeBoundAxis(\r\n          currentRelativeChild,\r\n          mainAxis,\r\n          baseMainSize,\r\n          availableInnerMainDim,\r\n          availableInnerWidth,\r\n        );\r\n        if (\r\n          !YGFloatIsUndefined(baseMainSize) &&\r\n          !YGFloatIsUndefined(boundMainSize) &&\r\n          baseMainSize != boundMainSize\r\n        ) {\r\n          deltaFreeSpace += boundMainSize - childFlexBasis;\r\n          collectedFlexItemsValues.totalFlexShrinkScaledFactors -= flexShrinkScaledFactor;\r\n        }\r\n      }\r\n    } else if (\r\n      !YGFloatIsUndefined(collectedFlexItemsValues.remainingFreeSpace) &&\r\n      collectedFlexItemsValues.remainingFreeSpace > 0\r\n    ) {\r\n      flexGrowFactor = currentRelativeChild.resolveFlexGrow();\r\n      if (!YGFloatIsUndefined(flexGrowFactor) && flexGrowFactor != 0) {\r\n        baseMainSize =\r\n          childFlexBasis +\r\n          (collectedFlexItemsValues.remainingFreeSpace /\r\n            collectedFlexItemsValues.totalFlexGrowFactors) *\r\n            flexGrowFactor;\r\n        boundMainSize = YGNodeBoundAxis(\r\n          currentRelativeChild,\r\n          mainAxis,\r\n          baseMainSize,\r\n          availableInnerMainDim,\r\n          availableInnerWidth,\r\n        );\r\n\r\n        if (\r\n          !YGFloatIsUndefined(baseMainSize) &&\r\n          !YGFloatIsUndefined(boundMainSize) &&\r\n          baseMainSize != boundMainSize\r\n        ) {\r\n          deltaFreeSpace += boundMainSize - childFlexBasis;\r\n          collectedFlexItemsValues.totalFlexGrowFactors -= flexGrowFactor;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  collectedFlexItemsValues.remainingFreeSpace -= deltaFreeSpace;\r\n}\r\n\r\nexport function YGResolveFlexibleLength(\r\n  node: YGNode,\r\n  collectedFlexItemsValues: YGCollectFlexItemsRowValues,\r\n  mainAxis: YGFlexDirection,\r\n  crossAxis: YGFlexDirection,\r\n  mainAxisownerSize: number,\r\n  availableInnerMainDim: number,\r\n  availableInnerCrossDim: number,\r\n  availableInnerWidth: number,\r\n  availableInnerHeight: number,\r\n  flexBasisOverflows: boolean,\r\n  measureModeCrossDim: YGMeasureMode,\r\n  performLayout: boolean,\r\n  config: YGConfig,\r\n): void {\r\n  const originalFreeSpace: number = collectedFlexItemsValues.remainingFreeSpace;\r\n\r\n  YGDistributeFreeSpaceFirstPass(\r\n    collectedFlexItemsValues,\r\n    mainAxis,\r\n    mainAxisownerSize,\r\n    availableInnerMainDim,\r\n    availableInnerWidth,\r\n  );\r\n\r\n  const distributedFreeSpace: number = YGDistributeFreeSpaceSecondPass(\r\n    collectedFlexItemsValues,\r\n    node,\r\n    mainAxis,\r\n    crossAxis,\r\n    mainAxisownerSize,\r\n    availableInnerMainDim,\r\n    availableInnerCrossDim,\r\n    availableInnerWidth,\r\n    availableInnerHeight,\r\n    flexBasisOverflows,\r\n    measureModeCrossDim,\r\n    performLayout,\r\n    config,\r\n  );\r\n\r\n  collectedFlexItemsValues.remainingFreeSpace = originalFreeSpace - distributedFreeSpace;\r\n}\r\n\r\nexport function YGJustifyMainAxis(\r\n  node: YGNode,\r\n  collectedFlexItemsValues: YGCollectFlexItemsRowValues,\r\n  startOfLineIndex: number,\r\n  mainAxis: YGFlexDirection,\r\n  crossAxis: YGFlexDirection,\r\n  measureModeMainDim: YGMeasureMode,\r\n  measureModeCrossDim: YGMeasureMode,\r\n  mainAxisownerSize: number,\r\n  ownerWidth: number,\r\n  availableInnerMainDim: number,\r\n  availableInnerCrossDim: number,\r\n  availableInnerWidth: number,\r\n  performLayout: boolean,\r\n): void {\r\n  const style: YGStyle = node.getStyle();\r\n  if (\r\n    measureModeMainDim == YGMeasureMode.AtMost &&\r\n    collectedFlexItemsValues.remainingFreeSpace > 0\r\n  ) {\r\n    if (\r\n      style.minDimensions[dim[mainAxis]].unit != YGUnit.Undefined &&\r\n      !YGResolveValue(style.minDimensions[dim[mainAxis]], mainAxisownerSize).isUndefined()\r\n    ) {\r\n      collectedFlexItemsValues.remainingFreeSpace = YGFloatMax(\r\n        0,\r\n        YGUnwrapFloatOptional(\r\n          YGResolveValue(style.minDimensions[dim[mainAxis]], mainAxisownerSize),\r\n        ) -\r\n          (availableInnerMainDim - collectedFlexItemsValues.remainingFreeSpace),\r\n      );\r\n    } else {\r\n      collectedFlexItemsValues.remainingFreeSpace = 0;\r\n    }\r\n  }\r\n\r\n  let numberOfAutoMarginsOnCurrentLine = 0;\r\n  for (let i: number = startOfLineIndex; i < collectedFlexItemsValues.endOfLineIndex; i++) {\r\n    const child: YGNode = node.getChild(i);\r\n    if (child.getStyle().positionType == YGPositionType.Relative) {\r\n      if (child.marginLeadingValue(mainAxis).unit == YGUnit.Auto) {\r\n        numberOfAutoMarginsOnCurrentLine++;\r\n      }\r\n      if (child.marginTrailingValue(mainAxis).unit == YGUnit.Auto) {\r\n        numberOfAutoMarginsOnCurrentLine++;\r\n      }\r\n    }\r\n  }\r\n  let leadingMainDim = 0;\r\n  let betweenMainDim = 0;\r\n  const justifyContent: YGJustify = node.getStyle().justifyContent;\r\n\r\n  if (numberOfAutoMarginsOnCurrentLine == 0) {\r\n    switch (justifyContent) {\r\n    case YGJustify.Center:\r\n      leadingMainDim = collectedFlexItemsValues.remainingFreeSpace / 2;\r\n      break;\r\n    case YGJustify.FlexEnd:\r\n      leadingMainDim = collectedFlexItemsValues.remainingFreeSpace;\r\n      break;\r\n    case YGJustify.SpaceBetween:\r\n      if (collectedFlexItemsValues.itemsOnLine > 1) {\r\n        betweenMainDim =\r\n            YGFloatMax(collectedFlexItemsValues.remainingFreeSpace, 0) /\r\n            (collectedFlexItemsValues.itemsOnLine - 1);\r\n      } else {\r\n        betweenMainDim = 0;\r\n      }\r\n      break;\r\n    case YGJustify.SpaceEvenly:\r\n      betweenMainDim =\r\n          collectedFlexItemsValues.remainingFreeSpace / (collectedFlexItemsValues.itemsOnLine + 1);\r\n      leadingMainDim = betweenMainDim;\r\n      break;\r\n    case YGJustify.SpaceAround:\r\n      betweenMainDim =\r\n          collectedFlexItemsValues.remainingFreeSpace / collectedFlexItemsValues.itemsOnLine;\r\n      leadingMainDim = betweenMainDim / 2;\r\n      break;\r\n    case YGJustify.FlexStart:\r\n      break;\r\n    }\r\n  }\r\n\r\n  const leadingPaddingAndBorderMain: number = YGUnwrapFloatOptional(\r\n    node.getLeadingPaddingAndBorder(mainAxis, ownerWidth),\r\n  );\r\n  collectedFlexItemsValues.mainDim = leadingPaddingAndBorderMain + leadingMainDim;\r\n  collectedFlexItemsValues.crossDim = 0;\r\n\r\n  for (let i: number = startOfLineIndex; i < collectedFlexItemsValues.endOfLineIndex; i++) {\r\n    const child: YGNode = node.getChild(i);\r\n    const childStyle: YGStyle = child.getStyle();\r\n    const childLayout: YGLayout = child.getLayout();\r\n    if (childStyle.display == YGDisplay.None) {\r\n      continue;\r\n    }\r\n    if (\r\n      childStyle.positionType == YGPositionType.Absolute &&\r\n      child.isLeadingPositionDefined(mainAxis)\r\n    ) {\r\n      if (performLayout) {\r\n        child.setLayoutPosition(\r\n          YGUnwrapFloatOptional(child.getLeadingPosition(mainAxis, availableInnerMainDim)) +\r\n            node.getLeadingBorder(mainAxis) +\r\n            YGUnwrapFloatOptional(child.getLeadingMargin(mainAxis, availableInnerWidth)),\r\n          pos[mainAxis],\r\n        );\r\n      }\r\n    } else {\r\n      if (childStyle.positionType == YGPositionType.Relative) {\r\n        if (child.marginLeadingValue(mainAxis).unit == YGUnit.Auto) {\r\n          collectedFlexItemsValues.mainDim +=\r\n            collectedFlexItemsValues.remainingFreeSpace / numberOfAutoMarginsOnCurrentLine;\r\n        }\r\n\r\n        if (performLayout) {\r\n          child.setLayoutPosition(\r\n            childLayout.position[pos[mainAxis] as number] + collectedFlexItemsValues.mainDim,\r\n            pos[mainAxis],\r\n          );\r\n        }\r\n\r\n        if (child.marginTrailingValue(mainAxis).unit == YGUnit.Auto) {\r\n          collectedFlexItemsValues.mainDim +=\r\n            collectedFlexItemsValues.remainingFreeSpace / numberOfAutoMarginsOnCurrentLine;\r\n        }\r\n        const canSkipFlex: boolean = !performLayout && measureModeCrossDim == YGMeasureMode.Exactly;\r\n        if (canSkipFlex) {\r\n          collectedFlexItemsValues.mainDim +=\r\n            betweenMainDim +\r\n            YGUnwrapFloatOptional(child.getMarginForAxis(mainAxis, availableInnerWidth)) +\r\n            YGUnwrapFloatOptional(childLayout.computedFlexBasis);\r\n          collectedFlexItemsValues.crossDim = availableInnerCrossDim;\r\n        } else {\r\n          collectedFlexItemsValues.mainDim +=\r\n            betweenMainDim + YGNodeDimWithMargin(child, mainAxis, availableInnerWidth);\r\n          collectedFlexItemsValues.crossDim = YGFloatMax(\r\n            collectedFlexItemsValues.crossDim,\r\n            YGNodeDimWithMargin(child, crossAxis, availableInnerWidth),\r\n          );\r\n        }\r\n      } else if (performLayout) {\r\n        child.setLayoutPosition(\r\n          childLayout.position[pos[mainAxis] as number] +\r\n            node.getLeadingBorder(mainAxis) +\r\n            leadingMainDim,\r\n          pos[mainAxis],\r\n        );\r\n      }\r\n    }\r\n  }\r\n  collectedFlexItemsValues.mainDim += YGUnwrapFloatOptional(\r\n    node.getTrailingPaddingAndBorder(mainAxis, ownerWidth),\r\n  );\r\n}\r\n\r\nexport function YGNodelayoutImpl(\r\n  node: YGNode,\r\n  availableWidth: number,\r\n  availableHeight: number,\r\n  ownerDirection: YGDirection,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n  performLayout: boolean,\r\n  config: YGConfig,\r\n): void {\r\n  YGAssertWithNode(\r\n    node,\r\n    YGFloatIsUndefined(availableWidth) ? widthMeasureMode == YGMeasureMode.Undefined : true,\r\n    'availableWidth is indefinite so widthMeasureMode must be YGMeasureMode.Undefined',\r\n  );\r\n  YGAssertWithNode(\r\n    node,\r\n    YGFloatIsUndefined(availableHeight) ? heightMeasureMode == YGMeasureMode.Undefined : true,\r\n    'availableHeight is indefinite so heightMeasureMode must be YGMeasureMode.Undefined',\r\n  );\r\n\r\n  const direction: YGDirection = node.resolveDirection(ownerDirection);\r\n  node.setLayoutDirection(direction);\r\n\r\n  const flexRowDirection: YGFlexDirection = YGResolveFlexDirection(YGFlexDirection.Row, direction);\r\n  const flexColumnDirection: YGFlexDirection = YGResolveFlexDirection(\r\n    YGFlexDirection.Column,\r\n    direction,\r\n  );\r\n\r\n  node.setLayoutMargin(\r\n    YGUnwrapFloatOptional(node.getLeadingMargin(flexRowDirection, ownerWidth)),\r\n    YGEdge.Start,\r\n  );\r\n  node.setLayoutMargin(\r\n    YGUnwrapFloatOptional(node.getTrailingMargin(flexRowDirection, ownerWidth)),\r\n    YGEdge.End,\r\n  );\r\n  node.setLayoutMargin(\r\n    YGUnwrapFloatOptional(node.getLeadingMargin(flexColumnDirection, ownerWidth)),\r\n    YGEdge.Top,\r\n  );\r\n  node.setLayoutMargin(\r\n    YGUnwrapFloatOptional(node.getTrailingMargin(flexColumnDirection, ownerWidth)),\r\n    YGEdge.Bottom,\r\n  );\r\n\r\n  node.setLayoutBorder(node.getLeadingBorder(flexRowDirection), YGEdge.Start);\r\n  node.setLayoutBorder(node.getTrailingBorder(flexRowDirection), YGEdge.End);\r\n  node.setLayoutBorder(node.getLeadingBorder(flexColumnDirection), YGEdge.Top);\r\n  node.setLayoutBorder(node.getTrailingBorder(flexColumnDirection), YGEdge.Bottom);\r\n\r\n  node.setLayoutPadding(\r\n    YGUnwrapFloatOptional(node.getLeadingPadding(flexRowDirection, ownerWidth)),\r\n    YGEdge.Start,\r\n  );\r\n  node.setLayoutPadding(\r\n    YGUnwrapFloatOptional(node.getTrailingPadding(flexRowDirection, ownerWidth)),\r\n    YGEdge.End,\r\n  );\r\n  node.setLayoutPadding(\r\n    YGUnwrapFloatOptional(node.getLeadingPadding(flexColumnDirection, ownerWidth)),\r\n    YGEdge.Top,\r\n  );\r\n  node.setLayoutPadding(\r\n    YGUnwrapFloatOptional(node.getTrailingPadding(flexColumnDirection, ownerWidth)),\r\n    YGEdge.Bottom,\r\n  );\r\n\r\n  if (node.getMeasure() != null) {\r\n    YGNodeWithMeasureFuncSetMeasuredDimensions(\r\n      node,\r\n      availableWidth,\r\n      availableHeight,\r\n      widthMeasureMode,\r\n      heightMeasureMode,\r\n      ownerWidth,\r\n      ownerHeight,\r\n    );\r\n    return;\r\n  }\r\n\r\n  const childCount: number = YGNodeGetChildCount(node);\r\n  if (childCount == 0) {\r\n    YGNodeEmptyContainerSetMeasuredDimensions(\r\n      node,\r\n      availableWidth,\r\n      availableHeight,\r\n      widthMeasureMode,\r\n      heightMeasureMode,\r\n      ownerWidth,\r\n      ownerHeight,\r\n    );\r\n    return;\r\n  }\r\n  if (\r\n    !performLayout &&\r\n    YGNodeFixedSizeSetMeasuredDimensions(\r\n      node,\r\n      availableWidth,\r\n      availableHeight,\r\n      widthMeasureMode,\r\n      heightMeasureMode,\r\n      ownerWidth,\r\n      ownerHeight,\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  node.cloneChildrenIfNeeded();\r\n  node.setLayoutHadOverflow(false);\r\n  const mainAxis: YGFlexDirection = YGResolveFlexDirection(\r\n    node.getStyle().flexDirection,\r\n    direction,\r\n  );\r\n  const crossAxis: YGFlexDirection = YGFlexDirectionCross(mainAxis, direction);\r\n  const isMainAxisRow: boolean = YGFlexDirectionIsRow(mainAxis);\r\n  const isNodeFlexWrap: boolean = node.getStyle().flexWrap != YGWrap.NoWrap;\r\n\r\n  const mainAxisownerSize: number = isMainAxisRow ? ownerWidth : ownerHeight;\r\n  const crossAxisownerSize: number = isMainAxisRow ? ownerHeight : ownerWidth;\r\n\r\n  const leadingPaddingAndBorderCross: number = YGUnwrapFloatOptional(\r\n    node.getLeadingPaddingAndBorder(crossAxis, ownerWidth),\r\n  );\r\n  const paddingAndBorderAxisMain: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    mainAxis,\r\n    ownerWidth,\r\n  );\r\n  const paddingAndBorderAxisCross: number = YGNodePaddingAndBorderForAxis(\r\n    node,\r\n    crossAxis,\r\n    ownerWidth,\r\n  );\r\n\r\n  let measureModeMainDim: YGMeasureMode = isMainAxisRow ? widthMeasureMode : heightMeasureMode;\r\n  const measureModeCrossDim: YGMeasureMode = isMainAxisRow ? heightMeasureMode : widthMeasureMode;\r\n\r\n  const paddingAndBorderAxisRow: number = isMainAxisRow\r\n    ? paddingAndBorderAxisMain\r\n    : paddingAndBorderAxisCross;\r\n  const paddingAndBorderAxisColumn: number = isMainAxisRow\r\n    ? paddingAndBorderAxisCross\r\n    : paddingAndBorderAxisMain;\r\n\r\n  const marginAxisRow: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n  );\r\n  const marginAxisColumn: number = YGUnwrapFloatOptional(\r\n    node.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n  );\r\n\r\n  const minInnerWidth: number =\r\n    YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().minDimensions[YGDimension.Width], ownerWidth),\r\n    ) - paddingAndBorderAxisRow;\r\n  const maxInnerWidth: number =\r\n    YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().maxDimensions[YGDimension.Width], ownerWidth),\r\n    ) - paddingAndBorderAxisRow;\r\n  const minInnerHeight: number =\r\n    YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().minDimensions[YGDimension.Height], ownerHeight),\r\n    ) - paddingAndBorderAxisColumn;\r\n  const maxInnerHeight: number =\r\n    YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().maxDimensions[YGDimension.Height], ownerHeight),\r\n    ) - paddingAndBorderAxisColumn;\r\n\r\n  const minInnerMainDim: number = isMainAxisRow ? minInnerWidth : minInnerHeight;\r\n  const maxInnerMainDim: number = isMainAxisRow ? maxInnerWidth : maxInnerHeight;\r\n  const availableInnerWidth: number = YGNodeCalculateAvailableInnerDim(\r\n    node,\r\n    YGFlexDirection.Row,\r\n    availableWidth,\r\n    ownerWidth,\r\n  );\r\n  const availableInnerHeight: number = YGNodeCalculateAvailableInnerDim(\r\n    node,\r\n    YGFlexDirection.Column,\r\n    availableHeight,\r\n    ownerHeight,\r\n  );\r\n\r\n  let availableInnerMainDim: number = isMainAxisRow ? availableInnerWidth : availableInnerHeight;\r\n  const availableInnerCrossDim: number = isMainAxisRow ? availableInnerHeight : availableInnerWidth;\r\n\r\n  const totalOuterFlexBasis: {value: number} = {value: 0};\r\n\r\n  YGNodeComputeFlexBasisForChildren(\r\n    node,\r\n    availableInnerWidth,\r\n    availableInnerHeight,\r\n    widthMeasureMode,\r\n    heightMeasureMode,\r\n    direction,\r\n    mainAxis,\r\n    config,\r\n    performLayout,\r\n    totalOuterFlexBasis,\r\n  );\r\n\r\n  const flexBasisOverflows: boolean =\r\n    measureModeMainDim == YGMeasureMode.Undefined\r\n      ? false\r\n      : totalOuterFlexBasis.value > availableInnerMainDim;\r\n  if (isNodeFlexWrap && flexBasisOverflows && measureModeMainDim == YGMeasureMode.AtMost) {\r\n    measureModeMainDim = YGMeasureMode.Exactly;\r\n  }\r\n\r\n  let startOfLineIndex = 0;\r\n  let endOfLineIndex = 0;\r\n  let lineCount = 0;\r\n  let totalLineCrossDim = 0;\r\n  let maxLineMainDim = 0;\r\n\r\n  let collectedFlexItemsValues: YGCollectFlexItemsRowValues;\r\n  for (; endOfLineIndex < childCount; lineCount++, startOfLineIndex = endOfLineIndex) {\r\n    collectedFlexItemsValues = YGCalculateCollectFlexItemsRowValues(\r\n      node,\r\n      ownerDirection,\r\n      mainAxisownerSize,\r\n      availableInnerWidth,\r\n      availableInnerMainDim,\r\n      startOfLineIndex,\r\n      lineCount,\r\n    );\r\n    endOfLineIndex = collectedFlexItemsValues.endOfLineIndex;\r\n    const canSkipFlex: boolean = !performLayout && measureModeCrossDim == YGMeasureMode.Exactly;\r\n    let sizeBasedOnContent = false;\r\n\r\n    if (measureModeMainDim != YGMeasureMode.Exactly) {\r\n      if (\r\n        !YGFloatIsUndefined(minInnerMainDim) &&\r\n        collectedFlexItemsValues.sizeConsumedOnCurrentLine < minInnerMainDim\r\n      ) {\r\n        availableInnerMainDim = minInnerMainDim;\r\n      } else if (\r\n        !YGFloatIsUndefined(maxInnerMainDim) &&\r\n        collectedFlexItemsValues.sizeConsumedOnCurrentLine > maxInnerMainDim\r\n      ) {\r\n        availableInnerMainDim = maxInnerMainDim;\r\n      } else {\r\n        if (\r\n          !node.getConfig().useLegacyStretchBehaviour &&\r\n          ((YGFloatIsUndefined(collectedFlexItemsValues.totalFlexGrowFactors) &&\r\n            collectedFlexItemsValues.totalFlexGrowFactors == 0) ||\r\n            (YGFloatIsUndefined(node.resolveFlexGrow()) && node.resolveFlexGrow() == 0))\r\n        ) {\r\n          availableInnerMainDim = collectedFlexItemsValues.sizeConsumedOnCurrentLine;\r\n        }\r\n\r\n        if (node.getConfig().useLegacyStretchBehaviour) {\r\n          node.setLayoutDidUseLegacyFlag(true);\r\n        }\r\n        sizeBasedOnContent = !node.getConfig().useLegacyStretchBehaviour;\r\n      }\r\n    }\r\n\r\n    if (!sizeBasedOnContent && !YGFloatIsUndefined(availableInnerMainDim)) {\r\n      collectedFlexItemsValues.remainingFreeSpace =\r\n        availableInnerMainDim - collectedFlexItemsValues.sizeConsumedOnCurrentLine;\r\n    } else if (collectedFlexItemsValues.sizeConsumedOnCurrentLine < 0) {\r\n      collectedFlexItemsValues.remainingFreeSpace =\r\n        -collectedFlexItemsValues.sizeConsumedOnCurrentLine;\r\n    }\r\n\r\n    if (!canSkipFlex) {\r\n      YGResolveFlexibleLength(\r\n        node,\r\n        collectedFlexItemsValues,\r\n        mainAxis,\r\n        crossAxis,\r\n        mainAxisownerSize,\r\n        availableInnerMainDim,\r\n        availableInnerCrossDim,\r\n        availableInnerWidth,\r\n        availableInnerHeight,\r\n        flexBasisOverflows,\r\n        measureModeCrossDim,\r\n        performLayout,\r\n        config,\r\n      );\r\n    }\r\n\r\n    node.setLayoutHadOverflow(\r\n      node.getLayout().hadOverflow || collectedFlexItemsValues.remainingFreeSpace < 0,\r\n    );\r\n\r\n    YGJustifyMainAxis(\r\n      node,\r\n      collectedFlexItemsValues,\r\n      startOfLineIndex,\r\n      mainAxis,\r\n      crossAxis,\r\n      measureModeMainDim,\r\n      measureModeCrossDim,\r\n      mainAxisownerSize,\r\n      ownerWidth,\r\n      availableInnerMainDim,\r\n      availableInnerCrossDim,\r\n      availableInnerWidth,\r\n      performLayout,\r\n    );\r\n\r\n    let containerCrossAxis: number = availableInnerCrossDim;\r\n    if (\r\n      measureModeCrossDim == YGMeasureMode.Undefined ||\r\n      measureModeCrossDim == YGMeasureMode.AtMost\r\n    ) {\r\n      containerCrossAxis =\r\n        YGNodeBoundAxis(\r\n          node,\r\n          crossAxis,\r\n          collectedFlexItemsValues.crossDim + paddingAndBorderAxisCross,\r\n          crossAxisownerSize,\r\n          ownerWidth,\r\n        ) - paddingAndBorderAxisCross;\r\n    }\r\n\r\n    if (!isNodeFlexWrap && measureModeCrossDim == YGMeasureMode.Exactly) {\r\n      collectedFlexItemsValues.crossDim = availableInnerCrossDim;\r\n    }\r\n\r\n    collectedFlexItemsValues.crossDim =\r\n      YGNodeBoundAxis(\r\n        node,\r\n        crossAxis,\r\n        collectedFlexItemsValues.crossDim + paddingAndBorderAxisCross,\r\n        crossAxisownerSize,\r\n        ownerWidth,\r\n      ) - paddingAndBorderAxisCross;\r\n\r\n    if (performLayout) {\r\n      for (let i = startOfLineIndex; i < endOfLineIndex; i++) {\r\n        const child: YGNode = node.getChild(i);\r\n        if (child.getStyle().display == YGDisplay.None) {\r\n          continue;\r\n        }\r\n        if (child.getStyle().positionType == YGPositionType.Absolute) {\r\n          const isChildLeadingPosDefined: boolean = child.isLeadingPositionDefined(crossAxis);\r\n          if (isChildLeadingPosDefined) {\r\n            child.setLayoutPosition(\r\n              YGUnwrapFloatOptional(child.getLeadingPosition(crossAxis, availableInnerCrossDim)) +\r\n                node.getLeadingBorder(crossAxis) +\r\n                YGUnwrapFloatOptional(child.getLeadingMargin(crossAxis, availableInnerWidth)),\r\n              pos[crossAxis],\r\n            );\r\n          }\r\n\r\n          if (\r\n            !isChildLeadingPosDefined ||\r\n            YGFloatIsUndefined(child.getLayout().position[pos[crossAxis] as number])\r\n          ) {\r\n            child.setLayoutPosition(\r\n              node.getLeadingBorder(crossAxis) +\r\n                YGUnwrapFloatOptional(child.getLeadingMargin(crossAxis, availableInnerWidth)),\r\n              pos[crossAxis],\r\n            );\r\n          }\r\n        } else {\r\n          let leadingCrossDim: number = leadingPaddingAndBorderCross;\r\n          const alignItem: YGAlign = YGNodeAlignItem(node, child);\r\n          if (\r\n            alignItem == YGAlign.Stretch &&\r\n            child.marginLeadingValue(crossAxis).unit != YGUnit.Auto &&\r\n            child.marginTrailingValue(crossAxis).unit != YGUnit.Auto\r\n          ) {\r\n            if (!YGNodeIsStyleDimDefined(child, crossAxis, availableInnerCrossDim)) {\r\n              let childMainSize: number = child.getLayout().measuredDimensions[dim[mainAxis]];\r\n              let childCrossSize: number = !child.getStyle().aspectRatio.isUndefined()\r\n                ? YGUnwrapFloatOptional(child.getMarginForAxis(crossAxis, availableInnerWidth)) +\r\n                  (isMainAxisRow\r\n                    ? childMainSize / child.getStyle().aspectRatio.getValue()\r\n                    : childMainSize * child.getStyle().aspectRatio.getValue())\r\n                : collectedFlexItemsValues.crossDim;\r\n\r\n              childMainSize += YGUnwrapFloatOptional(\r\n                child.getMarginForAxis(mainAxis, availableInnerWidth),\r\n              );\r\n\r\n              let childMainMeasureMode: YGMeasureMode = YGMeasureMode.Exactly;\r\n              let childCrossMeasureMode: YGMeasureMode = YGMeasureMode.Exactly;\r\n\r\n              const childMainMeasureModeRef = {value: childMainMeasureMode};\r\n              const childMainSizeRef = {value: childMainSize};\r\n              const childCrossMeasureModeRef = {value: childCrossMeasureMode};\r\n              const childCrossSizeRef = {value: childCrossSize};\r\n\r\n              YGConstrainMaxSizeForMode(\r\n                child,\r\n                mainAxis,\r\n                availableInnerMainDim,\r\n                availableInnerWidth,\r\n                childMainMeasureModeRef,\r\n                childMainSizeRef,\r\n              );\r\n              YGConstrainMaxSizeForMode(\r\n                child,\r\n                crossAxis,\r\n                availableInnerCrossDim,\r\n                availableInnerWidth,\r\n                childCrossMeasureModeRef,\r\n                childCrossSizeRef,\r\n              );\r\n\r\n              childMainMeasureMode = childMainMeasureModeRef.value;\r\n              childMainSize = childMainSizeRef.value;\r\n              childCrossMeasureMode = childCrossMeasureModeRef.value;\r\n              childCrossSize = childCrossSizeRef.value;\r\n\r\n              const childWidth: number = isMainAxisRow ? childMainSize : childCrossSize;\r\n              const childHeight: number = !isMainAxisRow ? childMainSize : childCrossSize;\r\n\r\n              const childWidthMeasureMode: YGMeasureMode = YGFloatIsUndefined(childWidth)\r\n                ? YGMeasureMode.Undefined\r\n                : YGMeasureMode.Exactly;\r\n              const childHeightMeasureMode: YGMeasureMode = YGFloatIsUndefined(childHeight)\r\n                ? YGMeasureMode.Undefined\r\n                : YGMeasureMode.Exactly;\r\n\r\n              YGLayoutNodeInternal(\r\n                child,\r\n                childWidth,\r\n                childHeight,\r\n                direction,\r\n                childWidthMeasureMode,\r\n                childHeightMeasureMode,\r\n                availableInnerWidth,\r\n                availableInnerHeight,\r\n                true,\r\n                'stretch',\r\n                config,\r\n              );\r\n            }\r\n          } else {\r\n            const remainingCrossDim: number =\r\n              containerCrossAxis - YGNodeDimWithMargin(child, crossAxis, availableInnerWidth);\r\n\r\n            if (\r\n              child.marginLeadingValue(crossAxis).unit == YGUnit.Auto &&\r\n              child.marginTrailingValue(crossAxis).unit == YGUnit.Auto\r\n            ) {\r\n              leadingCrossDim += YGFloatMax(0.0, remainingCrossDim / 2);\r\n            } else if (child.marginTrailingValue(crossAxis).unit == YGUnit.Auto) {\r\n            } else if (child.marginLeadingValue(crossAxis).unit == YGUnit.Auto) {\r\n              leadingCrossDim += YGFloatMax(0.0, remainingCrossDim);\r\n            } else if (alignItem == YGAlign.FlexStart) {\r\n              // NO=OP\r\n            } else if (alignItem == YGAlign.Center) {\r\n              leadingCrossDim += remainingCrossDim / 2;\r\n            } else {\r\n              leadingCrossDim += remainingCrossDim;\r\n            }\r\n          }\r\n\r\n          child.setLayoutPosition(\r\n            child.getLayout().position[pos[crossAxis] as number] +\r\n              totalLineCrossDim +\r\n              leadingCrossDim,\r\n            pos[crossAxis],\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    totalLineCrossDim += collectedFlexItemsValues.crossDim;\r\n    maxLineMainDim = YGFloatMax(maxLineMainDim, collectedFlexItemsValues.mainDim);\r\n  }\r\n  if (\r\n    performLayout &&\r\n    (lineCount > 1 || YGIsBaselineLayout(node)) &&\r\n    !YGFloatIsUndefined(availableInnerCrossDim)\r\n  ) {\r\n    const remainingAlignContentDim: number = availableInnerCrossDim - totalLineCrossDim;\r\n\r\n    let crossDimLead = 0;\r\n    let currentLead: number = leadingPaddingAndBorderCross;\r\n\r\n    switch (node.getStyle().alignContent) {\r\n    case YGAlign.FlexEnd:\r\n      currentLead += remainingAlignContentDim;\r\n      break;\r\n    case YGAlign.Center:\r\n      currentLead += remainingAlignContentDim / 2;\r\n      break;\r\n    case YGAlign.Stretch:\r\n      if (availableInnerCrossDim > totalLineCrossDim) {\r\n        crossDimLead = remainingAlignContentDim / lineCount;\r\n      }\r\n      break;\r\n    case YGAlign.SpaceAround:\r\n      if (availableInnerCrossDim > totalLineCrossDim) {\r\n        currentLead += remainingAlignContentDim / (2 * lineCount);\r\n        if (lineCount > 1) {\r\n          crossDimLead = remainingAlignContentDim / lineCount;\r\n        }\r\n      } else {\r\n        currentLead += remainingAlignContentDim / 2;\r\n      }\r\n      break;\r\n    case YGAlign.SpaceBetween:\r\n      if (availableInnerCrossDim > totalLineCrossDim && lineCount > 1) {\r\n        crossDimLead = remainingAlignContentDim / (lineCount - 1);\r\n      }\r\n      break;\r\n    case YGAlign.Auto:\r\n    case YGAlign.FlexStart:\r\n    case YGAlign.Baseline:\r\n      break;\r\n    }\r\n\r\n    let endIndex = 0;\r\n    for (let i = 0; i < lineCount; i++) {\r\n      const startIndex: number = endIndex;\r\n      let ii: number;\r\n      let lineHeight = 0;\r\n      let maxAscentForCurrentLine = 0;\r\n      let maxDescentForCurrentLine = 0;\r\n\r\n      for (ii = startIndex; ii < childCount; ii++) {\r\n        const child: YGNode = node.getChild(ii);\r\n        if (child.getStyle().display == YGDisplay.None) {\r\n          continue;\r\n        }\r\n        if (child.getStyle().positionType == YGPositionType.Relative) {\r\n          if (child.getLineIndex() != i) {\r\n            break;\r\n          }\r\n          if (YGNodeIsLayoutDimDefined(child, crossAxis)) {\r\n            lineHeight = YGFloatMax(\r\n              lineHeight,\r\n              child.getLayout().measuredDimensions[dim[crossAxis]] +\r\n                YGUnwrapFloatOptional(child.getMarginForAxis(crossAxis, availableInnerWidth)),\r\n            );\r\n          }\r\n          if (YGNodeAlignItem(node, child) == YGAlign.Baseline) {\r\n            const ascent: number =\r\n              YGBaseline(child) +\r\n              YGUnwrapFloatOptional(\r\n                child.getLeadingMargin(YGFlexDirection.Column, availableInnerWidth),\r\n              );\r\n            const descent: number =\r\n              child.getLayout().measuredDimensions[YGDimension.Height] +\r\n              YGUnwrapFloatOptional(\r\n                child.getMarginForAxis(YGFlexDirection.Column, availableInnerWidth),\r\n              ) -\r\n              ascent;\r\n            maxAscentForCurrentLine = YGFloatMax(maxAscentForCurrentLine, ascent);\r\n            maxDescentForCurrentLine = YGFloatMax(maxDescentForCurrentLine, descent);\r\n            lineHeight = YGFloatMax(lineHeight, maxAscentForCurrentLine + maxDescentForCurrentLine);\r\n          }\r\n        }\r\n      }\r\n      endIndex = ii;\r\n      lineHeight += crossDimLead;\r\n\r\n      if (performLayout) {\r\n        for (ii = startIndex; ii < endIndex; ii++) {\r\n          const child: YGNode = node.getChild(ii);\r\n          if (child.getStyle().display == YGDisplay.None) {\r\n            continue;\r\n          }\r\n          if (child.getStyle().positionType == YGPositionType.Relative) {\r\n            switch (YGNodeAlignItem(node, child)) {\r\n            case YGAlign.FlexStart: {\r\n              child.setLayoutPosition(\r\n                currentLead +\r\n                    YGUnwrapFloatOptional(child.getLeadingMargin(crossAxis, availableInnerWidth)),\r\n                pos[crossAxis],\r\n              );\r\n              break;\r\n            }\r\n            case YGAlign.FlexEnd: {\r\n              child.setLayoutPosition(\r\n                currentLead +\r\n                    lineHeight -\r\n                    YGUnwrapFloatOptional(child.getTrailingMargin(crossAxis, availableInnerWidth)) -\r\n                    child.getLayout().measuredDimensions[dim[crossAxis]],\r\n                pos[crossAxis],\r\n              );\r\n              break;\r\n            }\r\n            case YGAlign.Center: {\r\n              const childHeight: number = child.getLayout().measuredDimensions[dim[crossAxis]];\r\n\r\n              child.setLayoutPosition(\r\n                currentLead + (lineHeight - childHeight) / 2,\r\n                pos[crossAxis],\r\n              );\r\n              break;\r\n            }\r\n            case YGAlign.Stretch: {\r\n              child.setLayoutPosition(\r\n                currentLead +\r\n                    YGUnwrapFloatOptional(child.getLeadingMargin(crossAxis, availableInnerWidth)),\r\n                pos[crossAxis],\r\n              );\r\n\r\n              if (!YGNodeIsStyleDimDefined(child, crossAxis, availableInnerCrossDim)) {\r\n                const childWidth: number = isMainAxisRow\r\n                  ? child.getLayout().measuredDimensions[YGDimension.Width] +\r\n                      YGUnwrapFloatOptional(child.getMarginForAxis(mainAxis, availableInnerWidth))\r\n                  : lineHeight;\r\n\r\n                const childHeight: number = !isMainAxisRow\r\n                  ? child.getLayout().measuredDimensions[YGDimension.Height] +\r\n                      YGUnwrapFloatOptional(child.getMarginForAxis(crossAxis, availableInnerWidth))\r\n                  : lineHeight;\r\n\r\n                if (\r\n                  !(\r\n                    YGFloatsEqual(\r\n                      childWidth,\r\n                      child.getLayout().measuredDimensions[YGDimension.Width],\r\n                    ) &&\r\n                      YGFloatsEqual(\r\n                        childHeight,\r\n                        child.getLayout().measuredDimensions[YGDimension.Height],\r\n                      )\r\n                  )\r\n                ) {\r\n                  YGLayoutNodeInternal(\r\n                    child,\r\n                    childWidth,\r\n                    childHeight,\r\n                    direction,\r\n                    YGMeasureMode.Exactly,\r\n                    YGMeasureMode.Exactly,\r\n                    availableInnerWidth,\r\n                    availableInnerHeight,\r\n                    true,\r\n                    'multiline-stretch',\r\n                    config,\r\n                  );\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case YGAlign.Baseline: {\r\n              child.setLayoutPosition(\r\n                currentLead +\r\n                    maxAscentForCurrentLine -\r\n                    YGBaseline(child) +\r\n                    YGUnwrapFloatOptional(\r\n                      child.getLeadingPosition(YGFlexDirection.Column, availableInnerCrossDim),\r\n                    ),\r\n                YGEdge.Top,\r\n              );\r\n\r\n              break;\r\n            }\r\n            case YGAlign.Auto:\r\n            case YGAlign.SpaceBetween:\r\n            case YGAlign.SpaceAround:\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      currentLead += lineHeight;\r\n    }\r\n  }\r\n\r\n  node.setLayoutMeasuredDimension(\r\n    YGNodeBoundAxis(\r\n      node,\r\n      YGFlexDirection.Row,\r\n      availableWidth - marginAxisRow,\r\n      ownerWidth,\r\n      ownerWidth,\r\n    ),\r\n    YGDimension.Width,\r\n  );\r\n\r\n  node.setLayoutMeasuredDimension(\r\n    YGNodeBoundAxis(\r\n      node,\r\n      YGFlexDirection.Column,\r\n      availableHeight - marginAxisColumn,\r\n      ownerHeight,\r\n      ownerWidth,\r\n    ),\r\n    YGDimension.Height,\r\n  );\r\n\r\n  if (\r\n    measureModeMainDim == YGMeasureMode.Undefined ||\r\n    (node.getStyle().overflow != YGOverflow.Scroll && measureModeMainDim == YGMeasureMode.AtMost)\r\n  ) {\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(node, mainAxis, maxLineMainDim, mainAxisownerSize, ownerWidth),\r\n      dim[mainAxis],\r\n    );\r\n  } else if (\r\n    measureModeMainDim == YGMeasureMode.AtMost &&\r\n    node.getStyle().overflow == YGOverflow.Scroll\r\n  ) {\r\n    node.setLayoutMeasuredDimension(\r\n      YGFloatMax(\r\n        YGFloatMin(\r\n          availableInnerMainDim + paddingAndBorderAxisMain,\r\n          YGUnwrapFloatOptional(\r\n            YGNodeBoundAxisWithinMinAndMax(node, mainAxis, maxLineMainDim, mainAxisownerSize),\r\n          ),\r\n        ),\r\n        paddingAndBorderAxisMain,\r\n      ),\r\n      dim[mainAxis],\r\n    );\r\n  }\r\n\r\n  if (\r\n    measureModeCrossDim == YGMeasureMode.Undefined ||\r\n    (node.getStyle().overflow != YGOverflow.Scroll && measureModeCrossDim == YGMeasureMode.AtMost)\r\n  ) {\r\n    node.setLayoutMeasuredDimension(\r\n      YGNodeBoundAxis(\r\n        node,\r\n        crossAxis,\r\n        totalLineCrossDim + paddingAndBorderAxisCross,\r\n        crossAxisownerSize,\r\n        ownerWidth,\r\n      ),\r\n      dim[crossAxis],\r\n    );\r\n  } else if (\r\n    measureModeCrossDim == YGMeasureMode.AtMost &&\r\n    node.getStyle().overflow == YGOverflow.Scroll\r\n  ) {\r\n    node.setLayoutMeasuredDimension(\r\n      YGFloatMax(\r\n        YGFloatMin(\r\n          availableInnerCrossDim + paddingAndBorderAxisCross,\r\n          YGUnwrapFloatOptional(\r\n            YGNodeBoundAxisWithinMinAndMax(\r\n              node,\r\n              crossAxis,\r\n              totalLineCrossDim + paddingAndBorderAxisCross,\r\n              crossAxisownerSize,\r\n            ),\r\n          ),\r\n        ),\r\n        paddingAndBorderAxisCross,\r\n      ),\r\n      dim[crossAxis],\r\n    );\r\n  }\r\n\r\n  if (performLayout && node.getStyle().flexWrap == YGWrap.WrapReverse) {\r\n    for (let i = 0; i < childCount; i++) {\r\n      const child: YGNode = YGNodeGetChild(node, i);\r\n      if (child.getStyle().positionType == YGPositionType.Relative) {\r\n        child.setLayoutPosition(\r\n          node.getLayout().measuredDimensions[dim[crossAxis]] -\r\n            child.getLayout().position[pos[crossAxis] as number] -\r\n            child.getLayout().measuredDimensions[dim[crossAxis]],\r\n          pos[crossAxis],\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (performLayout) {\r\n    const children: Array<YGNode> = node.getChildren();\r\n    for (let i = 0; i < children.length; ++i) {\r\n      const child: YGNode = children[i];\r\n\r\n      if (child.getStyle().positionType != YGPositionType.Absolute) {\r\n        continue;\r\n      }\r\n\r\n      YGNodeAbsoluteLayoutChild(\r\n        node,\r\n        child,\r\n        availableInnerWidth,\r\n        isMainAxisRow ? measureModeMainDim : measureModeCrossDim,\r\n        availableInnerHeight,\r\n        direction,\r\n        config,\r\n      );\r\n    }\r\n\r\n    const needsMainTrailingPos: boolean =\r\n      mainAxis == YGFlexDirection.RowReverse || mainAxis == YGFlexDirection.ColumnReverse;\r\n    const needsCrossTrailingPos: boolean =\r\n      crossAxis == YGFlexDirection.RowReverse || crossAxis == YGFlexDirection.ColumnReverse;\r\n\r\n    if (needsMainTrailingPos || needsCrossTrailingPos) {\r\n      for (let i = 0; i < childCount; i++) {\r\n        const child: YGNode = node.getChild(i);\r\n        if (child.getStyle().display == YGDisplay.None) {\r\n          continue;\r\n        }\r\n\r\n        if (needsMainTrailingPos) {\r\n          YGNodeSetChildTrailingPosition(node, child, mainAxis);\r\n        }\r\n\r\n        if (needsCrossTrailingPos) {\r\n          YGNodeSetChildTrailingPosition(node, child, crossAxis);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet gDepth = 0;\r\nconst gPrintTree = false;\r\nconst gPrintChanges = false;\r\nconst gPrintSkips = false;\r\nconst spacer = '                                                            ';\r\n\r\nexport function YGSpacer(level: number): string {\r\n  const spacerLen: number = spacer.length;\r\n  if (level > spacerLen) {\r\n    return spacer;\r\n  } else {\r\n    return spacer.substr(spacerLen - level);\r\n  }\r\n}\r\n\r\nexport function YGMeasureModeName(mode: YGMeasureMode, performLayout: boolean): string {\r\n  const kMeasureModeNames: Array<string> = ['UNDEFINED', 'EXACTLY', 'AT_MOST'];\r\n  const kLayoutModeNames: Array<string> = ['LAY_UNDEFINED', 'LAY_EXACTLY', 'LAY_AT_', 'MOST'];\r\n\r\n  if (mode >= YGMeasureModeCount) {\r\n    return '';\r\n  }\r\n\r\n  return performLayout ? kLayoutModeNames[mode] : kMeasureModeNames[mode];\r\n}\r\n\r\nexport function YGMeasureModeSizeIsExactAndMatchesOldMeasuredSize(\r\n  sizeMode: YGMeasureMode,\r\n  size: number,\r\n  lastComputedSize: number,\r\n): boolean {\r\n  return sizeMode == YGMeasureMode.Exactly && YGFloatsEqual(size, lastComputedSize);\r\n}\r\n\r\nexport function YGMeasureModeOldSizeIsUnspecifiedAndStillFits(\r\n  sizeMode: YGMeasureMode,\r\n  size: number,\r\n  lastSizeMode: YGMeasureMode,\r\n  lastComputedSize: number,\r\n) {\r\n  return (\r\n    sizeMode == YGMeasureMode.AtMost &&\r\n    lastSizeMode == YGMeasureMode.Undefined &&\r\n    (size >= lastComputedSize || YGFloatsEqual(size, lastComputedSize))\r\n  );\r\n}\r\n\r\nexport function YGMeasureModeNewMeasureSizeIsStricterAndStillValid(\r\n  sizeMode: YGMeasureMode,\r\n  size: number,\r\n  lastSizeMode: YGMeasureMode,\r\n  lastSize: number,\r\n  lastComputedSize: number,\r\n): boolean {\r\n  return (\r\n    lastSizeMode == YGMeasureMode.AtMost &&\r\n    sizeMode == YGMeasureMode.AtMost &&\r\n    !YGFloatIsUndefined(lastSize) &&\r\n    !YGFloatIsUndefined(size) &&\r\n    !YGFloatIsUndefined(lastComputedSize) &&\r\n    lastSize > size &&\r\n    (lastComputedSize <= size || YGFloatsEqual(size, lastComputedSize))\r\n  );\r\n}\r\n\r\nexport function YGRoundValueToPixelGrid(\r\n  value: number,\r\n  pointScaleFactor: number,\r\n  forceCeil: boolean,\r\n  forceFloor: boolean,\r\n) {\r\n  let scaledValue: number = value * pointScaleFactor;\r\n  const fractial: number = scaledValue % 1.0;\r\n\r\n  if (YGFloatsEqual(fractial, 0)) {\r\n    scaledValue = scaledValue - fractial;\r\n  } else if (YGFloatsEqual(fractial, 1.0)) {\r\n    scaledValue = scaledValue - fractial + 1.0;\r\n  } else if (forceCeil) {\r\n    scaledValue = scaledValue - fractial + 1.0;\r\n  } else if (forceFloor) {\r\n    scaledValue = scaledValue - fractial;\r\n  } else {\r\n    scaledValue =\r\n      scaledValue -\r\n      fractial +\r\n      (!YGFloatIsUndefined(fractial) && (fractial > 0.5 || YGFloatsEqual(fractial, 0.5))\r\n        ? 1.0\r\n        : 0.0);\r\n  }\r\n\r\n  return YGFloatIsUndefined(scaledValue) || YGFloatIsUndefined(pointScaleFactor)\r\n    ? YGUndefined\r\n    : scaledValue / pointScaleFactor;\r\n}\r\n\r\nexport function YGNodeCanUseCachedMeasurement(\r\n  widthMode: YGMeasureMode,\r\n  width: number,\r\n  heightMode: YGMeasureMode,\r\n  height: number,\r\n  lastWidthMode: YGMeasureMode,\r\n  lastWidth: number,\r\n  lastHeightMode: YGMeasureMode,\r\n  lastHeight: number,\r\n  lastComputedWidth: number,\r\n  lastComputedHeight: number,\r\n  marginRow: number,\r\n  marginColumn: number,\r\n  config: YGConfig,\r\n): boolean {\r\n  if (\r\n    (!YGFloatIsUndefined(lastComputedHeight) && lastComputedHeight < 0) ||\r\n    (!YGFloatIsUndefined(lastComputedWidth) && lastComputedWidth < 0)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const useRoundedComparison: boolean = config != null && config.pointScaleFactor != 0;\r\n  const effectiveWidth: number = useRoundedComparison\r\n    ? YGRoundValueToPixelGrid(width, config.pointScaleFactor, false, false)\r\n    : width;\r\n  const effectiveHeight: number = useRoundedComparison\r\n    ? YGRoundValueToPixelGrid(height, config.pointScaleFactor, false, false)\r\n    : height;\r\n  const effectiveLastWidth: number = useRoundedComparison\r\n    ? YGRoundValueToPixelGrid(lastWidth, config.pointScaleFactor, false, false)\r\n    : lastWidth;\r\n  const effectiveLastHeight: number = useRoundedComparison\r\n    ? YGRoundValueToPixelGrid(lastHeight, config.pointScaleFactor, false, false)\r\n    : lastHeight;\r\n\r\n  const hasSameWidthSpec: boolean =\r\n    lastWidthMode == widthMode && YGFloatsEqual(effectiveLastWidth, effectiveWidth);\r\n  const hasSameHeightSpec: boolean =\r\n    lastHeightMode == heightMode && YGFloatsEqual(effectiveLastHeight, effectiveHeight);\r\n\r\n  const widthIsCompatible: boolean =\r\n    hasSameWidthSpec ||\r\n    YGMeasureModeSizeIsExactAndMatchesOldMeasuredSize(\r\n      widthMode,\r\n      width - marginRow,\r\n      lastComputedWidth,\r\n    ) ||\r\n    YGMeasureModeOldSizeIsUnspecifiedAndStillFits(\r\n      widthMode,\r\n      width - marginRow,\r\n      lastWidthMode,\r\n      lastComputedWidth,\r\n    ) ||\r\n    YGMeasureModeNewMeasureSizeIsStricterAndStillValid(\r\n      widthMode,\r\n      width - marginRow,\r\n      lastWidthMode,\r\n      lastWidth,\r\n      lastComputedWidth,\r\n    );\r\n\r\n  const heightIsCompatible: boolean =\r\n    hasSameHeightSpec ||\r\n    YGMeasureModeSizeIsExactAndMatchesOldMeasuredSize(\r\n      heightMode,\r\n      height - marginColumn,\r\n      lastComputedHeight,\r\n    ) ||\r\n    YGMeasureModeOldSizeIsUnspecifiedAndStillFits(\r\n      heightMode,\r\n      height - marginColumn,\r\n      lastHeightMode,\r\n      lastComputedHeight,\r\n    ) ||\r\n    YGMeasureModeNewMeasureSizeIsStricterAndStillValid(\r\n      heightMode,\r\n      height - marginColumn,\r\n      lastHeightMode,\r\n      lastHeight,\r\n      lastComputedHeight,\r\n    );\r\n\r\n  return widthIsCompatible && heightIsCompatible;\r\n}\r\n\r\nexport function YGLayoutNodeInternal(\r\n  node: YGNode,\r\n  availableWidth: number,\r\n  availableHeight: number,\r\n  ownerDirection: YGDirection,\r\n  widthMeasureMode: YGMeasureMode,\r\n  heightMeasureMode: YGMeasureMode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n  performLayout: boolean,\r\n  reason: string,\r\n  config: YGConfig,\r\n) {\r\n  const layout: YGLayout = node.getLayout();\r\n\r\n  gDepth++;\r\n\r\n  const needToVisitNode: boolean =\r\n    (node.isDirty() && layout.generationCount != gCurrentGenerationCount) ||\r\n    layout.lastOwnerDirection != ownerDirection;\r\n\r\n  if (needToVisitNode) {\r\n    layout.nextCachedMeasurementsIndex = 0;\r\n    layout.cachedLayout.widthMeasureMode = YGMeasureModeCount - 1;\r\n    layout.cachedLayout.heightMeasureMode = YGMeasureModeCount - 1;\r\n    layout.cachedLayout.computedWidth = -1;\r\n    layout.cachedLayout.computedHeight = -1;\r\n  }\r\n\r\n  let cachedResults: YGCachedMeasurement = null;\r\n\r\n  if (node.getMeasure() != null) {\r\n    const marginAxisRow: number = YGUnwrapFloatOptional(\r\n      node.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n    );\r\n    const marginAxisColumn: number = YGUnwrapFloatOptional(\r\n      node.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n    );\r\n\r\n    if (\r\n      YGNodeCanUseCachedMeasurement(\r\n        widthMeasureMode,\r\n        availableWidth,\r\n        heightMeasureMode,\r\n        availableHeight,\r\n        layout.cachedLayout.widthMeasureMode,\r\n        layout.cachedLayout.availableWidth,\r\n        layout.cachedLayout.heightMeasureMode,\r\n        layout.cachedLayout.availableHeight,\r\n        layout.cachedLayout.computedWidth,\r\n        layout.cachedLayout.computedHeight,\r\n        marginAxisRow,\r\n        marginAxisColumn,\r\n        config,\r\n      )\r\n    ) {\r\n      cachedResults = layout.cachedLayout;\r\n    } else {\r\n      for (let i = 0; i < layout.nextCachedMeasurementsIndex; i++) {\r\n        if (\r\n          YGNodeCanUseCachedMeasurement(\r\n            widthMeasureMode,\r\n            availableWidth,\r\n            heightMeasureMode,\r\n            availableHeight,\r\n            layout.cachedMeasurements[i].widthMeasureMode,\r\n            layout.cachedMeasurements[i].availableWidth,\r\n            layout.cachedMeasurements[i].heightMeasureMode,\r\n            layout.cachedMeasurements[i].availableHeight,\r\n            layout.cachedMeasurements[i].computedWidth,\r\n            layout.cachedMeasurements[i].computedHeight,\r\n            marginAxisRow,\r\n            marginAxisColumn,\r\n            config,\r\n          )\r\n        ) {\r\n          cachedResults = layout.cachedMeasurements[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } else if (performLayout) {\r\n    if (\r\n      YGFloatsEqual(layout.cachedLayout.availableWidth, availableWidth) &&\r\n      YGFloatsEqual(layout.cachedLayout.availableHeight, availableHeight) &&\r\n      layout.cachedLayout.widthMeasureMode == widthMeasureMode &&\r\n      layout.cachedLayout.heightMeasureMode == heightMeasureMode\r\n    ) {\r\n      cachedResults = layout.cachedLayout;\r\n    }\r\n  } else {\r\n    for (let i = 0; i < layout.nextCachedMeasurementsIndex; i++) {\r\n      if (\r\n        YGFloatsEqual(layout.cachedMeasurements[i].availableWidth, availableWidth) &&\r\n        YGFloatsEqual(layout.cachedMeasurements[i].availableHeight, availableHeight) &&\r\n        layout.cachedMeasurements[i].widthMeasureMode == widthMeasureMode &&\r\n        layout.cachedMeasurements[i].heightMeasureMode == heightMeasureMode\r\n      ) {\r\n        cachedResults = layout.cachedMeasurements[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!needToVisitNode && cachedResults != null) {\r\n    layout.measuredDimensions[YGDimension.Width] = cachedResults.computedWidth;\r\n    layout.measuredDimensions[YGDimension.Height] = cachedResults.computedHeight;\r\n\r\n    if (gPrintChanges && gPrintSkips) {\r\n      YGLog(node, YGLogLevel.Verbose, '%s%d.{[skipped] ', YGSpacer(gDepth), gDepth);\r\n      if (node.getPrintFunc() != null) {\r\n        node.getPrintFunc()(node);\r\n      }\r\n      YGLog(\r\n        node,\r\n        YGLogLevel.Verbose,\r\n        'wm: %s, hm: %s, aw: %f ah: %f => d: (%f, %f) %s\\n',\r\n        YGMeasureModeName(widthMeasureMode, performLayout),\r\n        YGMeasureModeName(heightMeasureMode, performLayout),\r\n        availableWidth,\r\n        availableHeight,\r\n        cachedResults.computedWidth,\r\n        cachedResults.computedHeight,\r\n        reason,\r\n      );\r\n    }\r\n  } else {\r\n    if (gPrintChanges) {\r\n      YGLog(\r\n        node,\r\n        YGLogLevel.Verbose,\r\n        '%s%d.{%s',\r\n        YGSpacer(gDepth),\r\n        gDepth,\r\n        needToVisitNode ? '*' : '',\r\n      );\r\n      if (node.getPrintFunc() != null) {\r\n        node.getPrintFunc()(node);\r\n      }\r\n      YGLog(\r\n        node,\r\n        YGLogLevel.Verbose,\r\n        'wm: %s, hm: %s, aw: %f ah: %f %s\\n',\r\n        YGMeasureModeName(widthMeasureMode, performLayout),\r\n        YGMeasureModeName(heightMeasureMode, performLayout),\r\n        availableWidth,\r\n        availableHeight,\r\n        reason,\r\n      );\r\n    }\r\n\r\n    YGNodelayoutImpl(\r\n      node,\r\n      availableWidth,\r\n      availableHeight,\r\n      ownerDirection,\r\n      widthMeasureMode,\r\n      heightMeasureMode,\r\n      ownerWidth,\r\n      ownerHeight,\r\n      performLayout,\r\n      config,\r\n    );\r\n\r\n    if (gPrintChanges) {\r\n      YGLog(\r\n        node,\r\n        YGLogLevel.Verbose,\r\n        '%s%d.}%s',\r\n        YGSpacer(gDepth),\r\n        gDepth,\r\n        needToVisitNode ? '*' : '',\r\n      );\r\n      if (node.getPrintFunc() != null) {\r\n        node.getPrintFunc()(node);\r\n      }\r\n      YGLog(\r\n        node,\r\n        YGLogLevel.Verbose,\r\n        'wm: %s, hm: %s, d: (%f, %f) %s\\n',\r\n        YGMeasureModeName(widthMeasureMode, performLayout),\r\n        YGMeasureModeName(heightMeasureMode, performLayout),\r\n        layout.measuredDimensions[YGDimension.Width],\r\n        layout.measuredDimensions[YGDimension.Height],\r\n        reason,\r\n      );\r\n    }\r\n\r\n    layout.lastOwnerDirection = ownerDirection;\r\n\r\n    if (cachedResults == null) {\r\n      if (layout.nextCachedMeasurementsIndex == YG_MAX_CACHED_RESULT_COUNT) {\r\n        if (gPrintChanges) {\r\n          YGLog(node, YGLogLevel.Verbose, 'Out of cache entries!\\n');\r\n        }\r\n        layout.nextCachedMeasurementsIndex = 0;\r\n      }\r\n\r\n      let newCacheEntry: YGCachedMeasurement;\r\n      if (performLayout) {\r\n        newCacheEntry = layout.cachedLayout;\r\n      } else {\r\n        newCacheEntry = layout.cachedMeasurements[layout.nextCachedMeasurementsIndex];\r\n        layout.nextCachedMeasurementsIndex++;\r\n      }\r\n\r\n      newCacheEntry.availableWidth = availableWidth;\r\n      newCacheEntry.availableHeight = availableHeight;\r\n      newCacheEntry.widthMeasureMode = widthMeasureMode;\r\n      newCacheEntry.heightMeasureMode = heightMeasureMode;\r\n      newCacheEntry.computedWidth = layout.measuredDimensions[YGDimension.Width];\r\n      newCacheEntry.computedHeight = layout.measuredDimensions[YGDimension.Height];\r\n    }\r\n  }\r\n\r\n  if (performLayout) {\r\n    node.setLayoutDimension(\r\n      node.getLayout().measuredDimensions[YGDimension.Width],\r\n      YGDimension.Width,\r\n    );\r\n    node.setLayoutDimension(\r\n      node.getLayout().measuredDimensions[YGDimension.Height],\r\n      YGDimension.Height,\r\n    );\r\n\r\n    node.setHasNewLayout(true);\r\n    node.setDirty(false);\r\n  }\r\n\r\n  gDepth--;\r\n  layout.generationCount = gCurrentGenerationCount;\r\n  return needToVisitNode || cachedResults == null;\r\n}\r\n\r\nexport function YGConfigSetPointScaleFactor(config: YGConfig, pixelsInPoint: number): void {\r\n  YGAssertWithConfig(config, pixelsInPoint >= 0.0, 'Scale factor should not be less than zero');\r\n  if (pixelsInPoint == 0.0) {\r\n    config.pointScaleFactor = 0.0;\r\n  } else {\r\n    config.pointScaleFactor = pixelsInPoint;\r\n  }\r\n}\r\n\r\nfunction fmodf(x: number, y: number) {\r\n  return x % y;\r\n}\r\n\r\nexport function YGRoundToPixelGrid(\r\n  node: YGNode,\r\n  pointScaleFactor: number,\r\n  absoluteLeft: number,\r\n  absoluteTop: number,\r\n): void {\r\n  if (pointScaleFactor == 0.0) {\r\n    return;\r\n  }\r\n\r\n  const nodeLeft: number = node.getLayout().position[YGEdge.Left];\r\n  const nodeTop: number = node.getLayout().position[YGEdge.Top];\r\n\r\n  const nodeWidth: number = node.getLayout().dimensions[YGDimension.Width];\r\n  const nodeHeight: number = node.getLayout().dimensions[YGDimension.Height];\r\n\r\n  const absoluteNodeLeft: number = absoluteLeft + nodeLeft;\r\n  const absoluteNodeTop: number = absoluteTop + nodeTop;\r\n\r\n  const absoluteNodeRight: number = absoluteNodeLeft + nodeWidth;\r\n  const absoluteNodeBottom: number = absoluteNodeTop + nodeHeight;\r\n\r\n  const textRounding: boolean = node.getNodeType() == YGNodeType.Text;\r\n\r\n  node.setLayoutPosition(\r\n    YGRoundValueToPixelGrid(nodeLeft, pointScaleFactor, false, textRounding),\r\n    YGEdge.Left,\r\n  );\r\n\r\n  node.setLayoutPosition(\r\n    YGRoundValueToPixelGrid(nodeTop, pointScaleFactor, false, textRounding),\r\n    YGEdge.Top,\r\n  );\r\n\r\n  const hasFractionalWidth: boolean =\r\n    !YGFloatsEqual(fmodf(nodeWidth * pointScaleFactor, 1.0), 0) &&\r\n    !YGFloatsEqual(fmodf(nodeWidth * pointScaleFactor, 1.0), 1.0);\r\n  const hasFractionalHeight: boolean =\r\n    !YGFloatsEqual(fmodf(nodeHeight * pointScaleFactor, 1.0), 0) &&\r\n    !YGFloatsEqual(fmodf(nodeHeight * pointScaleFactor, 1.0), 1.0);\r\n\r\n  node.setLayoutDimension(\r\n    YGRoundValueToPixelGrid(\r\n      absoluteNodeRight,\r\n      pointScaleFactor,\r\n      textRounding && hasFractionalWidth,\r\n      textRounding && !hasFractionalWidth,\r\n    ) - YGRoundValueToPixelGrid(absoluteNodeLeft, pointScaleFactor, false, textRounding),\r\n    YGDimension.Width,\r\n  );\r\n\r\n  node.setLayoutDimension(\r\n    YGRoundValueToPixelGrid(\r\n      absoluteNodeBottom,\r\n      pointScaleFactor,\r\n      textRounding && hasFractionalHeight,\r\n      textRounding && !hasFractionalHeight,\r\n    ) - YGRoundValueToPixelGrid(absoluteNodeTop, pointScaleFactor, false, textRounding),\r\n    YGDimension.Height,\r\n  );\r\n\r\n  const childCount: number = YGNodeGetChildCount(node);\r\n  for (let i = 0; i < childCount; i++) {\r\n    YGRoundToPixelGrid(\r\n      YGNodeGetChild(node, i),\r\n      pointScaleFactor,\r\n      absoluteNodeLeft,\r\n      absoluteNodeTop,\r\n    );\r\n  }\r\n}\r\n\r\nexport function YGNodeCalculateLayout(\r\n  node: YGNode,\r\n  ownerWidth: number,\r\n  ownerHeight: number,\r\n  ownerDirection: YGDirection,\r\n): void {\r\n  gCurrentGenerationCount++;\r\n  node.resolveDimension();\r\n\r\n  let width: number = YGUndefined;\r\n  let widthMeasureMode: YGMeasureMode = YGMeasureMode.Undefined;\r\n\r\n  if (YGNodeIsStyleDimDefined(node, YGFlexDirection.Row, ownerWidth)) {\r\n    width = YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getResolvedDimension(dim[YGFlexDirection.Row]), ownerWidth).add(\r\n        node.getMarginForAxis(YGFlexDirection.Row, ownerWidth),\r\n      ),\r\n    );\r\n    widthMeasureMode = YGMeasureMode.Exactly;\r\n  } else if (\r\n    !YGResolveValue(node.getStyle().maxDimensions[YGDimension.Width], ownerWidth).isUndefined()\r\n  ) {\r\n    width = YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().maxDimensions[YGDimension.Width], ownerWidth),\r\n    );\r\n    widthMeasureMode = YGMeasureMode.AtMost;\r\n  } else {\r\n    width = ownerWidth;\r\n    widthMeasureMode = YGFloatIsUndefined(width) ? YGMeasureMode.Undefined : YGMeasureMode.Exactly;\r\n  }\r\n\r\n  let height: number = YGUndefined;\r\n  let heightMeasureMode: YGMeasureMode = YGMeasureMode.Undefined;\r\n  if (YGNodeIsStyleDimDefined(node, YGFlexDirection.Column, ownerHeight)) {\r\n    height = YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getResolvedDimension(dim[YGFlexDirection.Column]), ownerHeight).add(\r\n        node.getMarginForAxis(YGFlexDirection.Column, ownerWidth),\r\n      ),\r\n    );\r\n    heightMeasureMode = YGMeasureMode.Exactly;\r\n  } else if (\r\n    !YGResolveValue(node.getStyle().maxDimensions[YGDimension.Height], ownerHeight).isUndefined()\r\n  ) {\r\n    height = YGUnwrapFloatOptional(\r\n      YGResolveValue(node.getStyle().maxDimensions[YGDimension.Height], ownerHeight),\r\n    );\r\n    heightMeasureMode = YGMeasureMode.AtMost;\r\n  } else {\r\n    height = ownerHeight;\r\n    heightMeasureMode = YGFloatIsUndefined(height)\r\n      ? YGMeasureMode.Undefined\r\n      : YGMeasureMode.Exactly;\r\n  }\r\n  if (\r\n    YGLayoutNodeInternal(\r\n      node,\r\n      width,\r\n      height,\r\n      ownerDirection,\r\n      widthMeasureMode,\r\n      heightMeasureMode,\r\n      ownerWidth,\r\n      ownerHeight,\r\n      true,\r\n      'initial',\r\n      node.getConfig(),\r\n    )\r\n  ) {\r\n    node.setPosition(node.getLayout().direction, ownerWidth, ownerHeight, ownerWidth);\r\n    YGRoundToPixelGrid(node, node.getConfig().pointScaleFactor, 0.0, 0.0);\r\n\r\n    if (gPrintTree) {\r\n      YGNodePrint(node, YGPrintOptions.Layout | YGPrintOptions.Children | YGPrintOptions.Style);\r\n    }\r\n  }\r\n\r\n  if (node.getConfig().shouldDiffLayoutWithoutLegacyStretchBehaviour && node.didUseLegacyFlag()) {\r\n    console.log('legacy config');\r\n    const originalNode: YGNode = YGNodeDeepClone(node);\r\n    originalNode.resolveDimension();\r\n\r\n    originalNode.markDirtyAndPropogateDownwards();\r\n    gCurrentGenerationCount++;\r\n\r\n    originalNode.setAndPropogateUseLegacyFlag(false);\r\n    if (\r\n      YGLayoutNodeInternal(\r\n        originalNode,\r\n        width,\r\n        height,\r\n        ownerDirection,\r\n        widthMeasureMode,\r\n        heightMeasureMode,\r\n        ownerWidth,\r\n        ownerHeight,\r\n        true,\r\n        'initial',\r\n        originalNode.getConfig(),\r\n      )\r\n    ) {\r\n      originalNode.setPosition(\r\n        originalNode.getLayout().direction,\r\n        ownerWidth,\r\n        ownerHeight,\r\n        ownerWidth,\r\n      );\r\n      YGRoundToPixelGrid(originalNode, originalNode.getConfig().pointScaleFactor, 0.0, 0.0);\r\n\r\n      node.setLayoutDoesLegacyFlagAffectsLayout(!originalNode.isLayoutTreeEqualToNode(node));\r\n\r\n      if (gPrintTree) {\r\n        YGNodePrint(\r\n          originalNode,\r\n          YGPrintOptions.Layout | YGPrintOptions.Children | YGPrintOptions.Style,\r\n        );\r\n      }\r\n    }\r\n\r\n    YGConfigFreeRecursive(originalNode);\r\n    YGNodeFreeRecursive(originalNode);\r\n  }\r\n}\r\n\r\nexport function YGConfigSetLogger(config: YGConfig, logger: YGLogger): void {\r\n  if (logger != null) {\r\n    config.logger = logger;\r\n  } else {\r\n    config.logger = YGDefaultLog;\r\n  }\r\n}\r\n\r\nexport function YGConfigSetShouldDiffLayoutWithoutLegacyStretchBehaviour(\r\n  config: YGConfig,\r\n  shouldDiffLayout: boolean,\r\n): void {\r\n  config.shouldDiffLayoutWithoutLegacyStretchBehaviour = shouldDiffLayout;\r\n}\r\n\r\nexport function YGVLog(\r\n  config: YGConfig,\r\n  node: YGNode,\r\n  level: YGLogLevel,\r\n  format: string,\r\n  ...args: any[]\r\n) {\r\n  const logConfig: YGConfig = config != null ? config : YGConfigGetDefault();\r\n  logConfig.logger(logConfig, node, level, format, args);\r\n\r\n  if (level == YGLogLevel.Fatal) {\r\n    throw new Error('Abort Yoga');\r\n  }\r\n}\r\n\r\nexport function YGLogWithConfig(\r\n  config: YGConfig,\r\n  level: YGLogLevel,\r\n  format: string,\r\n  ...args: any[]\r\n): void {\r\n  YGVLog(config, null, level, format, args);\r\n}\r\n\r\nexport function YGLog(node: YGNode, level: YGLogLevel, format: string, ...args: any[]): void {\r\n  YGVLog(node == null ? null : node.getConfig(), node, level, format, args);\r\n}\r\n\r\nexport function YGAssert(condition: boolean, message: string) {\r\n  if (!condition) {\r\n    YGLog(null, YGLogLevel.Fatal, '%s\\n', message);\r\n    //console.assert(condition, message);\r\n  }\r\n}\r\n\r\nexport function YGAssertWithNode(node: YGNode, condition: boolean, message: string): void {\r\n  if (!condition) {\r\n    YGLog(node, YGLogLevel.Fatal, '%s\\n', message);\r\n    //console.log(node);\r\n    //console.assert(condition, message);\r\n  }\r\n}\r\n\r\nexport function YGAssertWithConfig(config: YGConfig, condition: boolean, message: string) {\r\n  if (!condition) {\r\n    YGLogWithConfig(config, YGLogLevel.Fatal, '%s\\n', message);\r\n    //console.log(config);\r\n    //console.assert(condition, message);\r\n  }\r\n}\r\n\r\nexport function YGConfigSetExperimentalFeatureEnabled(\r\n  config: YGConfig,\r\n  feature: YGExperimentalFeature,\r\n  enabled: boolean,\r\n): void {\r\n  config.experimentalFeatures[feature] = enabled;\r\n}\r\n\r\nexport function YGConfigIsExperimentalFeatureEnabled(\r\n  config: YGConfig,\r\n  feature: YGExperimentalFeature,\r\n) {\r\n  return config.experimentalFeatures[feature];\r\n}\r\n\r\nexport function YGConfigSetUseWebDefaults(config: YGConfig, enabled: boolean): void {\r\n  config.useWebDefaults = enabled;\r\n}\r\n\r\nexport function YGConfigSetUseLegacyStretchBehaviour(\r\n  config: YGConfig,\r\n  useLegacyStretchBehaviour: boolean,\r\n): void {\r\n  config.useLegacyStretchBehaviour = useLegacyStretchBehaviour;\r\n}\r\n\r\nexport function YGConfigGetUseWebDefaults(config: YGConfig): boolean {\r\n  return config.useWebDefaults;\r\n}\r\n\r\nexport function YGConfigSetContext(config: YGConfig, context: any): void {\r\n  config.context = context;\r\n}\r\n\r\nexport function YGConfigGetContext(config: YGConfig): any {\r\n  return config.context;\r\n}\r\n\r\nexport function YGConfigSetCloneNodeFunc(config: YGConfig, callback: YGCloneNodeFunc): void {\r\n  config.cloneNodeCallback = callback;\r\n}\r\n\r\nexport function YGTraverseChildrenPreOrder(\r\n  children: Array<YGNode>,\r\n  f: (node: YGNode) => void,\r\n): void {\r\n  for (let i = 0; i < children.length; ++i) {\r\n    const node: YGNode = children[i];\r\n    f(node);\r\n    YGTraverseChildrenPreOrder(node.getChildren(), f);\r\n  }\r\n}\r\n\r\nexport function YGTraversePreOrder(node: YGNode, f: (node: YGNode) => void): void {\r\n  if (!node) {\r\n    return;\r\n  }\r\n  f(node);\r\n  YGTraverseChildrenPreOrder(node.getChildren(), f);\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;MAuDa,MAAM,CAAA;AACV,IAAA,KAAK,CAAS;AACd,IAAA,MAAM,CAAS;AACvB,CAAA;AAEM,MAAM,WAAW,GAAW,UAAU;AAChC,MAAA,gBAAgB,GAAkB,YAAA;IAC7C,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AACpD,EAAE;AACW,MAAA,WAAW,GAAkB,YAAA;IACxC,OAAO,IAAI,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/C,EAAE;AACW,MAAA,WAAW,GAAkB,YAAA;IACxC,OAAO,IAAI,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AACtC,EAAE;AA2BF,SAAS,cAAc,CAAC,MAAc,EAAE,IAAW,EAAA;IACjD,IAAI,GAAG,GAAW,MAAM,CAAC;IAEzB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACpC,KAAA;AAED,IAAA,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,YAAY,CACnB,MAAgB,EAChB,IAAY,EACZ,KAAiB,EACjB,MAAc,EACd,GAAG,IAAW,EAAA;AAEd,IAAA,QAAQ,KAAK;QACb,KAAK,UAAU,CAAC,KAAK,CAAC;QACtB,KAAK,UAAU,CAAC,KAAK;YACnB,OAAO,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACrD,KAAK,UAAU,CAAC,IAAI,CAAC;QACrB,KAAK,UAAU,CAAC,IAAI,CAAC;QACrB,KAAK,UAAU,CAAC,KAAK,CAAC;QACtB,KAAK,UAAU,CAAC,OAAO,CAAC;AACxB,QAAA;YACE,OAAO,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;AAClD,KAAA;AACH,CAAC;AAEK,SAAU,kBAAkB,CAAC,KAAa,EAAA;IAC9C,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;AACvC,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AAEf,CAAC;SAEe,mBAAmB,CACjC,KAAqB,EACrB,IAAY,EACZ,YAAqB,EAAA;IAErB,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE;AACxC,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC;AACpB,KAAA;AAED,IAAA,IACE,CAAC,IAAI,IAAI,MAAM,CAAC,GAAG,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM;QAC5C,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EAC/C;AACA,QAAA,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC/B,KAAA;IAED,IACE,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,GAAG;QAC1F,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EACjD;AACA,QAAA,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACjC,KAAA;AAED,IAAA,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE;AAC9C,QAAA,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1B,KAAA;IAED,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,GAAG,EAAE;QAC9C,OAAO,gBAAgB,EAAE,CAAC;AAC3B,KAAA;AAED,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC;AAEK,SAAU,gBAAgB,CAAC,IAAY,EAAA;AAC3C,IAAA,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;AAC3B,CAAC;AAEe,SAAA,gBAAgB,CAAC,IAAY,EAAE,OAAY,EAAA;AACzD,IAAA,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAMe,SAAA,oBAAoB,CAAC,IAAY,EAAE,WAA0B,EAAA;AAC3E,IAAA,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACnC,CAAC;AA0CK,SAAU,aAAa,CAAC,IAAY,EAAA;AACxC,IAAA,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;AACxB,CAAC;AAaK,SAAU,mBAAmB,CAAC,MAAgB,EAAA;AAClD,IAAA,MAAM,IAAI,GAAW,IAAI,MAAM,EAAE,CAAC;IAGlC,IAAI,MAAM,CAAC,cAAc,EAAE;AACzB,QAAA,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AAChD,QAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5C,KAAA;AAED,IAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACvB,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;SAEe,kBAAkB,GAAA;IAChC,OAAO,WAAW,EAAE,CAAC;AACvB,CAAC;SAEe,SAAS,GAAA;AACvB,IAAA,OAAO,mBAAmB,CAAC,kBAAkB,EAAE,CAAC,CAAC;AACnD,CAAC;AAEK,SAAU,WAAW,CAAC,OAAe,EAAA;AACzC,IAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,IAAA,MAAM,IAAI,GAAW,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAEzC,IAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACpB,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAEK,SAAU,aAAa,CAAC,SAAmB,EAAA;IAC/C,MAAM,MAAM,GAAa,IAAI,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAExD,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAEK,SAAU,eAAe,CAAC,OAAe,EAAA;AAC7C,IAAA,MAAM,IAAI,GAAW,WAAW,CAAC,OAAO,CAAC,CAAC;AAC1C,IAAA,MAAM,GAAG,GAAkB,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC;IAEnE,IAAI,SAAS,GAAW,IAAI,CAAC;AAC7B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACrD,MAAM,IAAI,GAAW,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzC,QAAA,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;AAClC,QAAA,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACzB,QAAA,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACrB,KAAA;AAED,IAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAEtB,IAAA,IAAI,OAAO,CAAC,SAAS,EAAE,IAAI,IAAI,EAAE;QAC/B,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACpD,KAAA;AAED,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAEK,SAAU,UAAU,CAAC,IAAY,EAAA;AACrC,IAAA,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;IAEtC,IAAI,KAAK,IAAI,IAAI,EAAE;AACjB,QAAA,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACxB,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACrB,KAAA;AAED,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,KAAK,GAAW,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC9C,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtB,KAAA;IAED,IAAI,CAAC,aAAa,EAAE,CAAC;AAEvB,CAAC;AAEK,SAAU,qBAAqB,CAAC,IAAY,EAAA;AAChD,IAAA,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,IAAI,EAAE;AAE5B,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACtB,KAAA;AAED,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,EAAE,EAAE,CAAC,EAAE;QAChD,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,KAAA;AACH,CAAC;AAEK,SAAU,mBAAmB,CAAC,IAAY,EAAA;AAC9C,IAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACpC,MAAM,KAAK,GAAW,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC9C,QAAA,IAAI,KAAK,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE;YAC5B,MAAM;AACP,SAAA;AAED,QAAA,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/B,mBAAmB,CAAC,KAAK,CAAC,CAAC;AAC5B,KAAA;IACD,UAAU,CAAC,IAAI,CAAC,CAAC;AACnB,CAAC;AAEK,SAAU,WAAW,CAAC,IAAY,EAAA;AACtC,IAAA,gBAAgB,CACd,IAAI,EACJ,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAC9B,uDAAuD,CACxD,CAAC;AACF,IAAA,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE,+CAA+C,CAAC,CAAC;IAEjG,IAAI,CAAC,aAAa,EAAE,CAAC;AACrB,IAAA,MAAM,MAAM,GAAa,IAAI,CAAC,SAAS,EAAE,CAAC;AAE1C,IAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC;IAE5B,IAAI,MAAM,CAAC,cAAc,EAAE;AACzB,QAAA,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AAChD,QAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5C,KAAA;AAED,IAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACzB,CAAC;SAUe,WAAW,GAAA;AACzB,IAAA,MAAM,MAAM,GAAa,IAAI,QAAQ,CAAC,YAAY,CAAC,CAAC;AAEpD,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAEK,SAAU,YAAY,CAAC,MAAgB,EAAA;AAE7C,CAAC;SAMe,iBAAiB,CAAC,IAAY,EAAE,KAAa,EAAE,KAAa,EAAA;AAC1E,IAAA,gBAAgB,CACd,IAAI,EACJ,KAAK,CAAC,QAAQ,EAAE,IAAI,IAAI,EACxB,sDAAsD,CACvD,CAAC;AACF,IAAA,gBAAgB,CACd,IAAI,EACJ,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,EACzB,sEAAsE,CACvE,CAAC;IACF,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACpC,IAAA,MAAM,KAAK,GAAW,KAAK,CAAC,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;AACrD,IAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC/B,CAAC;AAae,SAAA,iBAAiB,CAAC,KAAa,EAAE,aAAqB,EAAA;AACpE,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAEtD,IAAI,UAAU,IAAI,CAAC,EAAE;QACnB,OAAO;AACR,KAAA;IAED,MAAM,UAAU,GAAW,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACpD,IAAA,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,KAAK,EAAE;AAClC,QAAA,IAAI,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE;AACpC,YAAA,aAAa,CAAC,SAAS,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC;AACxC,YAAA,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC7B,KAAK,CAAC,qBAAqB,EAAE,CAAC;AAC/B,SAAA;QACD,OAAO;AACR,KAAA;IAED,MAAM,iBAAiB,GAAoB,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC;IAC/E,IAAI,eAAe,GAAG,CAAC,CAAC;IAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,QAAQ,GAAW,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,aAAa,IAAI,QAAQ,EAAE;YAC7B,KAAK,CAAC,qBAAqB,EAAE,CAAC;YAC9B,SAAS;AACV,SAAA;QAED,IAAI,QAAQ,GAAW,IAAI,CAAC;AAC5B,QAAA,IAAI,iBAAiB,EAAE;YACrB,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;AAChE,SAAA;QAED,IAAI,QAAQ,IAAI,IAAI,EAAE;AACpB,YAAA,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;AAClC,SAAA;AAED,QAAA,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;AACnD,QAAA,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAEzB,QAAA,eAAe,EAAE,CAAC;AACnB,KAAA;IAED,OAAO,eAAe,GAAG,UAAU,EAAE;AACnC,QAAA,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;AACxC,QAAA,eAAe,EAAE,CAAC;AACnB,KAAA;AACH,CAAC;AAuEe,SAAA,cAAc,CAAC,IAAY,EAAE,KAAa,EAAA;AACxD,IAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACpC,IAAA,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE;AAC3B,QAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxB,KAAA;AACD,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAEK,SAAU,mBAAmB,CAAC,IAAY,EAAA;AAC9C,IAAA,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACjC,CAAC;AAMK,SAAU,eAAe,CAAC,IAAY,EAAA;AAC1C,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACzB,CAAC;AAEK,SAAU,eAAe,CAAC,IAAY,EAAA;AAC1C,IAAA,gBAAgB,CACd,IAAI,EACJ,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,EACzB,wFAAwF,CACzF,CAAC;IACF,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC/B,CAAC;AAEe,SAAA,eAAe,CAAC,OAAe,EAAE,OAAe,EAAA;AAC9D,IAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,EAAE;QACnD,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,OAAO,CAAC,qBAAqB,EAAE,CAAC;AACjC,KAAA;AACH,CAAC;AAEK,SAAU,sBAAsB,CAAC,IAAY,EAAA;IACjD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE;AAC3C,UAAE,gBAAgB;UAChB,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;AAC1C,CAAC;AAEK,SAAU,wBAAwB,CAAC,IAAY,EAAA;IACnD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE;AAC7C,UAAE,IAAI,CAAC,SAAS,EAAE,CAAC,cAAc;AAC/B,cAAE,qBAAqB;AACvB,cAAE,kBAAkB;UACpB,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC5C,CAAC;AAiBe,SAAA,2BAA2B,CAAC,IAAY,EAAE,aAA8B,EAAA;IACtF,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,IAAI,aAAa,EAAE;AAClD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,aAAa,GAAG,aAAa,CAAC;AACpC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,2BAA2B,CAAC,IAAY,EAAA;AACtD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC;AACvC,CAAC;AAEe,SAAA,4BAA4B,CAAC,IAAY,EAAE,cAAyB,EAAA;IAClF,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,IAAI,cAAc,EAAE;AACpD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,cAAc,GAAG,cAAc,CAAC;AACtC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,4BAA4B,CAAC,IAAY,EAAA;AACvD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;AACxC,CAAC;AAEe,SAAA,0BAA0B,CAAC,IAAY,EAAE,YAAqB,EAAA;IAC5E,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,YAAY,EAAE;AAChD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,YAAY,GAAG,YAAY,CAAC;AAClC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,0BAA0B,CAAC,IAAY,EAAA;AACrD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;AACtC,CAAC;AAEe,SAAA,wBAAwB,CAAC,IAAY,EAAE,UAAmB,EAAA;IACxE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,IAAI,UAAU,EAAE;AAC5C,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;AAC9B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,wBAAwB,CAAC,IAAY,EAAA;AACnD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC;AACpC,CAAC;AAEe,SAAA,uBAAuB,CAAC,IAAY,EAAE,SAAkB,EAAA;IACtE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,IAAI,SAAS,EAAE;AAC1C,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;AAC5B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,uBAAuB,CAAC,IAAY,EAAA;AAClD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AACnC,CAAC;AAEe,SAAA,0BAA0B,CAAC,IAAY,EAAE,YAA4B,EAAA;IACnF,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,YAAY,EAAE;AAChD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,YAAY,GAAG,YAAY,CAAC;AAClC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,0BAA0B,CAAC,IAAY,EAAA;AACrD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC;AACtC,CAAC;AAEe,SAAA,sBAAsB,CAAC,IAAY,EAAE,QAAgB,EAAA;IACnE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,QAAQ,EAAE;AACxC,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC1B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,sBAAsB,CAAC,IAAY,EAAA;AACjD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;AAClC,CAAC;AAEe,SAAA,sBAAsB,CAAC,IAAY,EAAE,QAAoB,EAAA;IACvE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,QAAQ,EAAE;AACxC,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC1B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,sBAAsB,CAAC,IAAY,EAAA;AACjD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;AAClC,CAAC;AAEe,SAAA,qBAAqB,CAAC,IAAY,EAAE,OAAkB,EAAA;IACpE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,OAAO,EAAE;AACtC,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;AACxB,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,qBAAqB,CAAC,IAAY,EAAA;AAChD,IAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC;AACjC,CAAC;SAEe,sBAAsB,CAAC,IAAY,EAAE,IAAY,EAAE,QAAgB,EAAA;IACjF,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC/D,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACtF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACjD;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC7B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;SAEe,6BAA6B,CAAC,IAAY,EAAE,IAAY,EAAE,QAAgB,EAAA;IACxF,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CACjE,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACtF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACjD;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC7B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,sBAAsB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC/D,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtD,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;SAEe,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAE,MAAc,EAAA;IAC7E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,MAAM,CAAC,EACvB,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC7D,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACpF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAC/C;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;SAEe,2BAA2B,CAAC,IAAY,EAAE,IAAY,EAAE,MAAc,EAAA;IACpF,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,MAAM,CAAC,EACvB,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAC/D,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACpF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAC/C;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC7D,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpD,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;SAEe,qBAAqB,CAAC,IAAY,EAAE,IAAY,EAAE,OAAe,EAAA;IAC/E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,OAAO,CAAC,EACxB,kBAAkB,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC9D,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACrF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAChD;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC5B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;SAEe,4BAA4B,CAAC,IAAY,EAAE,IAAY,EAAE,OAAe,EAAA;IACtF,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,OAAO,CAAC,EACxB,kBAAkB,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAChE,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACrF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAChD;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC5B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,qBAAqB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC9D,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACrD,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAEe,SAAA,wBAAwB,CAAC,IAAY,EAAE,IAAY,EAAA;AACjE,IAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACpD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;QAC7B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACtC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AACe,SAAA,mBAAmB,CAAC,IAAY,EAAE,KAAa,EAAA;IAC7D,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,KAAK,CAAC,EACtB,kBAAkB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC5D,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACjE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAChE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AAC5C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,0BAA0B,CAAC,IAAY,EAAE,KAAa,EAAA;AACpE,IAAA,IACE,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,eAAe,CAAC,KAAK,CAAC;AAC7E,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,EACpE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;AACnE,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,kBAAkB,CAAC,KAAK,CAAC;cAChE,MAAM,CAAC,IAAI;AACb,cAAE,MAAM,CAAC,OAAO,CAAC;AACnB,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,uBAAuB,CAAC,IAAY,EAAA;AAClD,IAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACrE,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;AAC9C,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACvD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,mBAAmB,CAAC,IAAY,EAAA;AAC9C,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACrE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACe,SAAA,oBAAoB,CAAC,IAAY,EAAE,MAAc,EAAA;IAC/D,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,MAAM,CAAC,EACvB,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC7D,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AAClE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACjE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AAC7C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,2BAA2B,CAAC,IAAY,EAAE,MAAc,EAAA;AACtE,IAAA,IACE,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,eAAe,CAAC,MAAM,CAAC;AAC/E,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,EACrE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;AACrE,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,kBAAkB,CAAC,MAAM,CAAC;cAClE,MAAM,CAAC,IAAI;AACb,cAAE,MAAM,CAAC,OAAO,CAAC;AACnB,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,wBAAwB,CAAC,IAAY,EAAA;AACnD,IAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACtE,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;AAC/C,QAAA,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACxD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,oBAAoB,CAAC,IAAY,EAAA;AAC/C,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACtE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACe,SAAA,sBAAsB,CAAC,IAAY,EAAE,QAAgB,EAAA;IACnE,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC/D,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACpE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACnE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,6BAA6B,CAAC,IAAY,EAAE,QAAgB,EAAA;IAC1E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CACjE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACpE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACnE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,sBAAsB,CAAC,IAAY,EAAA;AACjD,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACe,SAAA,uBAAuB,CAAC,IAAY,EAAE,SAAiB,EAAA;IACrE,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,SAAS,CAAC,EAC1B,kBAAkB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAChE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACrE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACpE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AAChD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,8BAA8B,CAAC,IAAY,EAAE,SAAiB,EAAA;IAC5E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,SAAS,CAAC,EAC1B,kBAAkB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAClE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACrE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACpE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AAChD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,uBAAuB,CAAC,IAAY,EAAA;AAClD,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACzE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACe,SAAA,sBAAsB,CAAC,IAAY,EAAE,QAAgB,EAAA;IACnE,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC/D,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACpE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACnE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,6BAA6B,CAAC,IAAY,EAAE,QAAgB,EAAA;IAC1E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,QAAQ,CAAC,EACzB,kBAAkB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CACjE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACpE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACnE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,sBAAsB,CAAC,IAAY,EAAA;AACjD,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACe,SAAA,uBAAuB,CAAC,IAAY,EAAE,SAAiB,EAAA;IACrE,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,SAAS,CAAC,EAC1B,kBAAkB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAChE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACrE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACpE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AAChD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,8BAA8B,CAAC,IAAY,EAAE,SAAiB,EAAA;IAC5E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,SAAS,CAAC,EAC1B,kBAAkB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAClE,CAAC;AAEF,IAAA,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;AACrE,QAAA,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAChC,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EACpE;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AAChD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,uBAAuB,CAAC,IAAY,EAAA;AAClD,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACzE,IAAA,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/D,QAAA,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC;AAC3B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AACK,SAAU,mBAAmB,CAAC,IAAY,EAAA;IAC9C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChD,CAAC;AACK,SAAU,kBAAkB,CAAC,IAAY,EAAA;IAC7C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/C,CAAC;AACK,SAAU,oBAAoB,CAAC,IAAY,EAAA;IAC/C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACjD,CAAC;AACK,SAAU,qBAAqB,CAAC,IAAY,EAAA;IAChD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAClD,CAAC;AACK,SAAU,oBAAoB,CAAC,IAAY,EAAA;IAC/C,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC;AACK,SAAU,qBAAqB,CAAC,IAAY,EAAA;IAChD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACzD,CAAC;AAOe,SAAA,qBAAqB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC9D,gBAAgB,CACd,IAAI,EACJ,IAAI,IAAI,MAAM,CAAC,GAAG,EAClB,uDAAuD,CACxD,CAAC;AAEF,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;QACvB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAA;AACF,KAAA;AAED,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;QACxB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5C,SAAA;AACF,KAAA;IAED,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAc,CAAC,CAAC;AACjD,CAAC;AACe,SAAA,qBAAqB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC9D,gBAAgB,CACd,IAAI,EACJ,IAAI,IAAI,MAAM,CAAC,GAAG,EAClB,uDAAuD,CACxD,CAAC;AAEF,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;QACvB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAA;AACF,KAAA;AAED,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;QACxB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5C,SAAA;AACF,KAAA;IAED,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAc,CAAC,CAAC;AACjD,CAAC;AACe,SAAA,sBAAsB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC/D,gBAAgB,CACd,IAAI,EACJ,IAAI,IAAI,MAAM,CAAC,GAAG,EAClB,uDAAuD,CACxD,CAAC;AAEF,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;QACvB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/C,SAAA;AACF,KAAA;AAED,IAAA,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;QACxB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,IAAI,WAAW,CAAC,GAAG,EAAE;YACjD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/C,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7C,SAAA;AACF,KAAA;IAED,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,IAAc,CAAC,CAAC;AAClD,CAAC;AAIe,SAAA,kBAAkB,CAAC,IAAY,EAAE,IAAY,EAAA;IAC3D,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AAC1C,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE;AAC5B,YAAA,KAAK,CAAC,IAAI,GAAG,IAAI,eAAe,EAAE,CAAC;AACpC,SAAA;AAAM,aAAA;YACL,KAAK,CAAC,IAAI,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;AACxC,SAAA;AACD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAMe,SAAA,sBAAsB,CAAC,IAAY,EAAE,QAAgB,EAAA;IACnE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;AAClD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,IAAI,kBAAkB,CAAC,QAAQ,CAAC,EAAE;AAChC,YAAA,KAAK,CAAC,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;AACxC,SAAA;AAAM,aAAA;YACL,KAAK,CAAC,QAAQ,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;AAChD,SAAA;AACD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,wBAAwB,CAAC,IAAY,EAAE,UAAkB,EAAA;IACvE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;AACtD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAAE;AAClC,YAAA,KAAK,CAAC,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;AAC1C,SAAA;AAAM,aAAA;YACL,KAAK,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC;AACpD,SAAA;AACD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,uBAAuB,CAAC,IAAY,EAAA;IAClD,MAAM,SAAS,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AACrD,IAAA,IAAI,SAAS,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACvE,QAAA,SAAS,CAAC,KAAK,GAAG,WAAW,CAAC;AAC/B,KAAA;AACD,IAAA,OAAO,SAAS,CAAC;AACnB,CAAC;AAEe,SAAA,uBAAuB,CAAC,IAAY,EAAE,SAAiB,EAAA;IACrE,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,SAAS,CAAC,EAC1B,kBAAkB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAChE,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;QACjF,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAC5C;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;AACxB,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,8BAA8B,CAAC,IAAY,EAAE,gBAAwB,EAAA;IACnF,IACE,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,KAAK,IAAI,gBAAgB;QACnD,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,EAChD;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAC1D,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC;AAC3F,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEK,SAAU,2BAA2B,CAAC,IAAY,EAAA;AACtD,IAAA,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACjD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;QAC1B,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACnC,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;SAEe,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAE,MAAc,EAAA;IAC7E,MAAM,KAAK,GAAY,IAAI,OAAO,CAChC,eAAe,CAAC,MAAM,CAAC,EACvB,kBAAkB,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAC7D,CAAC;IAEF,IACE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACpF,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAC/C;AACA,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,QAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAEe,SAAA,oBAAoB,CAAC,IAAY,EAAE,IAAY,EAAA;AAC7D,IAAA,IACE,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AACrD,QAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAChD;AACA,QAAA,OAAO,WAAW,CAAC;AACpB,KAAA;IAED,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;AAC5C,CAAC;AAEK,SAAU,yBAAyB,CAAC,IAAY,EAAA;IACpD,MAAM,EAAE,GAAoB,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC;AACxD,IAAA,OAAO,EAAE,CAAC,WAAW,EAAE,GAAG,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;AACxD,CAAC;AAEe,SAAA,yBAAyB,CAAC,IAAY,EAAE,WAAmB,EAAA;IACzE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;AACxD,QAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,KAAK,CAAC,WAAW,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;AACrD,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC9B,KAAA;AACH,CAAC;AAMD,IAAI,uBAAuB,GAAG,CAAC,CAAC;SAWhB,6BAA6B,CAC3C,IAAY,EACZ,IAAqB,EACrB,SAAiB,EAAA;IAEjB,OAAO,qBAAqB,CAC1B,IAAI;AACD,SAAA,0BAA0B,CAAC,IAAI,EAAE,SAAS,CAAC;SAC3C,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAC1D,CAAC;AACJ,CAAC;AAEe,SAAA,eAAe,CAAC,IAAY,EAAE,KAAa,EAAA;IACzD,MAAM,KAAK,GACT,KAAK,CAAC,QAAQ,EAAE,CAAC,SAAS,IAAI,OAAO,CAAC,IAAI;AACxC,UAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU;AAC5B,UAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AACjC,IAAA,IAAI,KAAK,IAAI,OAAO,CAAC,QAAQ,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAE;QACvF,OAAO,OAAO,CAAC,SAAS,CAAC;AAC1B,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAEK,SAAU,UAAU,CAAC,IAAY,EAAA;AACrC,IAAA,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,IAAI,EAAE;AAC9B,QAAA,MAAM,QAAQ,GAAW,IAAI,CAAC,WAAW,EAAE,CACzC,IAAI,EACJ,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,EACtD,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CACxD,CAAC;QACF,gBAAgB,CACd,IAAI,EACJ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAC7B,mDAAmD,CACpD,CAAC;AACF,QAAA,OAAO,QAAQ,CAAC;AACjB,KAAA;IAED,IAAI,aAAa,GAAW,IAAI,CAAC;AACjC,IAAA,MAAM,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,KAAK,GAAW,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC9C,QAAA,IAAI,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE;YAC5B,MAAM;AACP,SAAA;QAED,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;YAC5D,SAAS;AACV,SAAA;QAED,IAAI,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpD,aAAa,GAAG,KAAK,CAAC;YACtB,MAAM;AACP,SAAA;QAED,IAAI,aAAa,IAAI,IAAI,EAAE;YACzB,aAAa,GAAG,KAAK,CAAC;AACvB,SAAA;AACF,KAAA;IAED,IAAI,aAAa,IAAI,IAAI,EAAE;QACzB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAChE,KAAA;AAED,IAAA,MAAM,QAAQ,GAAW,UAAU,CAAC,aAAa,CAAC,CAAC;AACnD,IAAA,OAAO,QAAQ,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACnE,CAAC;AAEK,SAAU,kBAAkB,CAAC,IAAY,EAAA;IAC7C,IAAI,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAE;AAC1D,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;IAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,IAAI,OAAO,CAAC,QAAQ,EAAE;AAClD,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,KAAK,GAAW,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC9C,IACE,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ;YACxD,KAAK,CAAC,QAAQ,EAAE,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,EAC9C;AACA,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AACF,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;SAEe,mBAAmB,CAAC,IAAY,EAAE,IAAqB,EAAE,SAAiB,EAAA;AACxF,IAAA,QACE,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,qBAAqB,CACnB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CACpF,EACD;AACJ,CAAC;SAEe,uBAAuB,CACrC,IAAY,EACZ,IAAqB,EACrB,SAAiB,EAAA;AAEjB,IAAA,MAAM,WAAW,GAAY,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC5F,IAAA,OAAO,EACL,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI;AACxD,QAAA,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAC7D,SAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,KAAK;AACxD,YAAA,CAAC,WAAW;AACZ,YAAA,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;AACnD,SAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO;AAC1D,YAAA,CAAC,WAAW;aACX,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,CACvF,CAAC;AACJ,CAAC;AAEe,SAAA,wBAAwB,CAAC,IAAY,EAAE,IAAqB,EAAA;AAC1E,IAAA,MAAM,KAAK,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC;AACpD,CAAC;AAEK,SAAU,8BAA8B,CAC5C,IAAY,EACZ,IAAqB,EACrB,KAAa,EACb,QAAgB,EAAA;AAEhB,IAAA,IAAI,GAAoB,CAAC;AACzB,IAAA,IAAI,GAAoB,CAAC;AAEzB,IAAA,IAAI,uBAAuB,CAAC,IAAI,CAAC,EAAE;AACjC,QAAA,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClF,QAAA,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;AACnF,KAAA;AAAM,SAAA,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE;AACrC,QAAA,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;AACjF,QAAA,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;AAClF,KAAA;AAED,IAAA,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE;AACvE,QAAA,OAAO,GAAG,CAAC;AACZ,KAAA;AAED,IAAA,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE;AACvE,QAAA,OAAO,GAAG,CAAC;AACZ,KAAA;AAED,IAAA,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC;AAEK,SAAU,eAAe,CAC7B,IAAY,EACZ,IAAqB,EACrB,KAAa,EACb,QAAgB,EAChB,SAAiB,EAAA;IAEjB,OAAO,UAAU,CACf,qBAAqB,CAAC,8BAA8B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,EAClF,6BAA6B,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CACrD,CAAC;AACJ,CAAC;SAEe,8BAA8B,CAAC,IAAY,EAAE,KAAa,EAAE,IAAqB,EAAA;AAC/F,IAAA,MAAM,IAAI,GAAW,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACrE,IAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI;AACJ,QAAA,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAW,CAAC,EACjD,QAAQ,CAAC,IAAI,CAAC,CACf,CAAC;AACJ,CAAC;AAEe,SAAA,yBAAyB,CACvC,IAAY,EACZ,IAAqB,EACrB,aAAqB,EACrB,UAAkB,EAClB,IAA4B,EAC5B,IAAqB,EAAA;AAErB,IAAA,MAAM,OAAO,GAAoB,cAAc,CAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EACxC,aAAa,CACd,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IAE/C,QAAQ,IAAI,CAAC,KAAK;QAClB,KAAK,aAAa,CAAC,OAAO,CAAC;QAC3B,KAAK,aAAa,CAAC,MAAM;AACvB,YAAA,IAAI,CAAC,KAAK;gBACN,OAAO,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC/F,MAAM;QACR,KAAK,aAAa,CAAC,SAAS;AAC1B,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE;AAC1B,gBAAA,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC;AAClC,gBAAA,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;AACjC,aAAA;YACD,MAAM;AACP,KAAA;AACH,CAAC;AAEK,SAAU,8BAA8B,CAC5C,IAAY,EACZ,KAAa,EACb,KAAa,EACb,SAAwB,EACxB,MAAc,EACd,UAAkB,EAClB,WAAmB,EACnB,UAAyB,EACzB,SAAsB,EACtB,MAAgB,EAAA;AAEhB,IAAA,MAAM,QAAQ,GAAoB,sBAAsB,CACtD,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,EAC7B,SAAS,CACV,CAAC;AACF,IAAA,MAAM,aAAa,GAAY,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC9D,MAAM,YAAY,GAAW,aAAa,GAAG,KAAK,GAAG,MAAM,CAAC;IAC5D,MAAM,iBAAiB,GAAW,aAAa,GAAG,UAAU,GAAG,WAAW,CAAC;AAE3E,IAAA,IAAI,UAAkB,CAAC;AACvB,IAAA,IAAI,WAAmB,CAAC;AACxB,IAAA,IAAI,qBAAoC,CAAC;AACzC,IAAA,IAAI,sBAAqC,CAAC;IAE1C,MAAM,iBAAiB,GAAoB,cAAc,CACvD,KAAK,CAAC,mBAAmB,EAAE,EAC3B,iBAAiB,CAClB,CAAC;AACF,IAAA,MAAM,oBAAoB,GAAY,uBAAuB,CAC3D,KAAK,EACL,eAAe,CAAC,GAAG,EACnB,UAAU,CACX,CAAC;AACF,IAAA,MAAM,uBAAuB,GAAY,uBAAuB,CAC9D,KAAK,EACL,eAAe,CAAC,MAAM,EACtB,WAAW,CACZ,CAAC;IAEF,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE;QACzE,IACE,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,WAAW,EAAE;aAChD,oCAAoC,CACnC,KAAK,CAAC,SAAS,EAAE,EACjB,qBAAqB,CAAC,YAAY,CACnC;gBACC,KAAK,CAAC,SAAS,EAAE,CAAC,2BAA2B,IAAI,uBAAuB,CAAC,EAC3E;AACA,YAAA,MAAM,gBAAgB,GAAoB,IAAI,eAAe,CAC3D,6BAA6B,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAC3D,CAAC;YACF,KAAK,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC,CAAC;AAC3F,SAAA;AACF,KAAA;SAAM,IAAI,aAAa,IAAI,oBAAoB,EAAE;AAChD,QAAA,MAAM,gBAAgB,GAAoB,IAAI,eAAe,CAC3D,6BAA6B,CAAC,KAAK,EAAE,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACtE,CAAC;QACF,KAAK,CAAC,0BAA0B,CAC9B,kBAAkB,CAChB,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,EACzE,gBAAgB,CACjB,CACF,CAAC;AACH,KAAA;AAAM,SAAA,IAAI,CAAC,aAAa,IAAI,uBAAuB,EAAE;AACpD,QAAA,MAAM,gBAAgB,GAAoB,IAAI,eAAe,CAC3D,6BAA6B,CAAC,KAAK,EAAE,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CACzE,CAAC;QACF,KAAK,CAAC,0BAA0B,CAC9B,kBAAkB,CAChB,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,EAC3E,gBAAgB,CACjB,CACF,CAAC;AACH,KAAA;AAAM,SAAA;QACL,UAAU,GAAG,WAAW,CAAC;QACzB,WAAW,GAAG,WAAW,CAAC;AAC1B,QAAA,qBAAqB,GAAG,aAAa,CAAC,SAAS,CAAC;AAChD,QAAA,sBAAsB,GAAG,aAAa,CAAC,SAAS,CAAC;AAEjD,QAAA,MAAM,SAAS,GAAW,qBAAqB,CAC7C,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACxD,CAAC;AACF,QAAA,MAAM,YAAY,GAAW,qBAAqB,CAChD,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC3D,CAAC;AAEF,QAAA,IAAI,oBAAoB,EAAE;YACxB,UAAU;AACR,gBAAA,qBAAqB,CACnB,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAC1E,GAAG,SAAS,CAAC;AAChB,YAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC/C,SAAA;AACD,QAAA,IAAI,uBAAuB,EAAE;YAC3B,WAAW;AACT,gBAAA,qBAAqB,CACnB,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAC5E,GAAG,YAAY,CAAC;AACnB,YAAA,sBAAsB,GAAG,aAAa,CAAC,OAAO,CAAC;AAChD,SAAA;AACD,QAAA,IACE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM;YAChE,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,EAC7C;YACA,IAAI,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChE,UAAU,GAAG,KAAK,CAAC;AACnB,gBAAA,qBAAqB,GAAG,aAAa,CAAC,MAAM,CAAC;AAC9C,aAAA;AACF,SAAA;AAED,QAAA,IACE,CAAC,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM;YAC/D,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,EAC7C;YACA,IAAI,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;gBAClE,WAAW,GAAG,MAAM,CAAC;AACrB,gBAAA,sBAAsB,GAAG,aAAa,CAAC,MAAM,CAAC;AAC/C,aAAA;AACF,SAAA;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;YAC/C,IAAI,CAAC,aAAa,IAAI,qBAAqB,IAAI,aAAa,CAAC,OAAO,EAAE;gBACpE,WAAW;AACT,oBAAA,YAAY,GAAG,CAAC,UAAU,GAAG,SAAS,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACpF,gBAAA,sBAAsB,GAAG,aAAa,CAAC,OAAO,CAAC;AAChD,aAAA;AAAM,iBAAA,IAAI,aAAa,IAAI,sBAAsB,IAAI,aAAa,CAAC,OAAO,EAAE;gBAC3E,UAAU;AACR,oBAAA,SAAS,GAAG,CAAC,WAAW,GAAG,YAAY,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACrF,gBAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC/C,aAAA;AACF,SAAA;AAED,QAAA,MAAM,aAAa,GAAY,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,aAAa,CAAC,OAAO,CAAC;QAChG,MAAM,iBAAiB,GACrB,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO;AAC/C,YAAA,qBAAqB,IAAI,aAAa,CAAC,OAAO,CAAC;QACjD,IAAI,CAAC,aAAa,IAAI,CAAC,oBAAoB,IAAI,aAAa,IAAI,iBAAiB,EAAE;YACjF,UAAU,GAAG,KAAK,CAAC;AACnB,YAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AAC/C,gBAAA,WAAW,GAAG,CAAC,UAAU,GAAG,SAAS,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACjF,gBAAA,sBAAsB,GAAG,aAAa,CAAC,OAAO,CAAC;AAChD,aAAA;AACF,SAAA;AAED,QAAA,MAAM,cAAc,GAClB,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,UAAU,IAAI,aAAa,CAAC,OAAO,CAAC;QACrE,MAAM,kBAAkB,GACtB,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO;AAC/C,YAAA,sBAAsB,IAAI,aAAa,CAAC,OAAO,CAAC;QAElD,IAAI,aAAa,IAAI,CAAC,uBAAuB,IAAI,cAAc,IAAI,kBAAkB,EAAE;YACrF,WAAW,GAAG,MAAM,CAAC;AACrB,YAAA,sBAAsB,GAAG,aAAa,CAAC,OAAO,CAAC;YAE/C,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AAC/C,gBAAA,UAAU,GAAG,CAAC,WAAW,GAAG,YAAY,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACpF,gBAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC/C,aAAA;AACF,SAAA;AAED,QAAA,MAAM,wBAAwB,GAAG,EAAC,KAAK,EAAE,qBAAqB,EAAC,CAAC;AAChE,QAAA,MAAM,aAAa,GAAG,EAAC,KAAK,EAAE,UAAU,EAAC,CAAC;AAC1C,QAAA,MAAM,yBAAyB,GAAG,EAAC,KAAK,EAAE,sBAAsB,EAAC,CAAC;AAClE,QAAA,MAAM,cAAc,GAAG,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC;AAE5C,QAAA,yBAAyB,CACvB,KAAK,EACL,eAAe,CAAC,GAAG,EACnB,UAAU,EACV,UAAU,EACV,wBAAwB,EACxB,aAAa,CACd,CAAC;AACF,QAAA,yBAAyB,CACvB,KAAK,EACL,eAAe,CAAC,MAAM,EACtB,WAAW,EACX,UAAU,EACV,yBAAyB,EACzB,cAAc,CACf,CAAC;AAEF,QAAA,oBAAoB,CAClB,KAAK,EACL,aAAa,CAAC,KAAK,EACnB,cAAc,CAAC,KAAK,EACpB,SAAS,EACT,wBAAwB,CAAC,KAAK,EAC9B,yBAAyB,CAAC,KAAK,EAC/B,UAAU,EACV,WAAW,EACX,KAAK,EACL,SAAS,EACT,MAAM,CACP,CAAC;AAEF,QAAA,KAAK,CAAC,0BAA0B,CAC9B,IAAI,eAAe,CACjB,UAAU,CACR,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EACnD,6BAA6B,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAC3D,CACF,CACF,CAAC;AACH,KAAA;AACD,IAAA,KAAK,CAAC,oCAAoC,CAAC,uBAAuB,CAAC,CAAC;AACtE,CAAC;AAEe,SAAA,yBAAyB,CACvC,IAAY,EACZ,KAAa,EACb,KAAa,EACb,SAAwB,EACxB,MAAc,EACd,SAAsB,EACtB,MAAgB,EAAA;AAEhB,IAAA,MAAM,QAAQ,GAAoB,sBAAsB,CACtD,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,EAC7B,SAAS,CACV,CAAC;IACF,MAAM,SAAS,GAAoB,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC7E,IAAA,MAAM,aAAa,GAAY,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAE9D,IAAI,UAAU,GAAW,WAAW,CAAC;IACrC,IAAI,WAAW,GAAW,WAAW,CAAC;AACtC,IAAA,IAAI,qBAAqB,GAAkB,aAAa,CAAC,SAAS,CAAC;AACnE,IAAA,IAAI,sBAAsB,GAAkB,aAAa,CAAC,SAAS,CAAC;AAEpE,IAAA,MAAM,SAAS,GAAW,qBAAqB,CAC7C,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CACnD,CAAC;AACF,IAAA,MAAM,YAAY,GAAW,qBAAqB,CAChD,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CACtD,CAAC;IAEF,IAAI,uBAAuB,CAAC,KAAK,EAAE,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;QAC9D,UAAU;AACR,YAAA,qBAAqB,CAAC,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AAC3F,gBAAA,SAAS,CAAC;AACb,KAAA;AAAM,SAAA;AACL,QAAA,IACE,KAAK,CAAC,wBAAwB,CAAC,eAAe,CAAC,GAAG,CAAC;AACnD,YAAA,KAAK,CAAC,oBAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,EAC/C;YACA,UAAU;gBACR,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC;AACtD,qBAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AAC1F,oBAAA,qBAAqB,CACnB,KAAK;AACF,yBAAA,kBAAkB,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC;AAC9C,yBAAA,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAC9D,CAAC;AACJ,YAAA,UAAU,GAAG,eAAe,CAAC,KAAK,EAAE,eAAe,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AACpF,SAAA;AACF,KAAA;IAED,IAAI,uBAAuB,CAAC,KAAK,EAAE,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QAClE,WAAW;AACT,YAAA,qBAAqB,CACnB,cAAc,CAAC,KAAK,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CACvE,GAAG,YAAY,CAAC;AACpB,KAAA;AAAM,SAAA;AACL,QAAA,IACE,KAAK,CAAC,wBAAwB,CAAC,eAAe,CAAC,MAAM,CAAC;AACtD,YAAA,KAAK,CAAC,oBAAoB,CAAC,eAAe,CAAC,MAAM,CAAC,EAClD;YACA,WAAW;gBACT,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC;AACvD,qBAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC;AAC5C,wBAAA,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AACjD,oBAAA,qBAAqB,CACnB,KAAK;AACF,yBAAA,kBAAkB,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC;AAClD,yBAAA,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAClE,CAAC;AACJ,YAAA,WAAW,GAAG,eAAe,CAAC,KAAK,EAAE,eAAe,CAAC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC1F,SAAA;AACF,KAAA;IAED,IACE,kBAAkB,CAAC,UAAU,CAAC;AAC5B,UAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC;AAClC,UAAE,kBAAkB,CAAC,WAAW,CAAC,EACnC;QAEA,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AAC/C,YAAA,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAAE;gBAClC,UAAU;AACR,oBAAA,SAAS,GAAG,CAAC,WAAW,GAAG,YAAY,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACtF,aAAA;AAAM,iBAAA,IAAI,kBAAkB,CAAC,WAAW,CAAC,EAAE;gBAC1C,WAAW;AACT,oBAAA,YAAY,GAAG,CAAC,UAAU,GAAG,SAAS,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AACrF,aAAA;AACF,SAAA;AACF,KAAA;IAED,IAAI,kBAAkB,CAAC,UAAU,CAAC,IAAI,kBAAkB,CAAC,WAAW,CAAC,EAAE;AACrE,QAAA,qBAAqB,GAAG,kBAAkB,CAAC,UAAU,CAAC;cAClD,aAAa,CAAC,SAAS;AACzB,cAAE,aAAa,CAAC,OAAO,CAAC;AAC1B,QAAA,sBAAsB,GAAG,kBAAkB,CAAC,WAAW,CAAC;cACpD,aAAa,CAAC,SAAS;AACzB,cAAE,aAAa,CAAC,OAAO,CAAC;AAE1B,QAAA,IACE,CAAC,aAAa;YACd,kBAAkB,CAAC,UAAU,CAAC;YAC9B,SAAS,IAAI,aAAa,CAAC,SAAS;YACpC,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAC1B,KAAK,GAAG,CAAC,EACT;YACA,UAAU,GAAG,KAAK,CAAC;AACnB,YAAA,qBAAqB,GAAG,aAAa,CAAC,MAAM,CAAC;AAC9C,SAAA;QAED,oBAAoB,CAClB,KAAK,EACL,UAAU,EACV,WAAW,EACX,SAAS,EACT,qBAAqB,EACrB,sBAAsB,EACtB,UAAU,EACV,WAAW,EACX,KAAK,EACL,aAAa,EACb,MAAM,CACP,CAAC;QAEF,UAAU;YACR,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC;AACvD,gBAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5E,WAAW;YACT,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC;AACxD,gBAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AAChF,KAAA;IAED,oBAAoB,CAClB,KAAK,EACL,UAAU,EACV,WAAW,EACX,SAAS,EACT,aAAa,CAAC,OAAO,EACrB,aAAa,CAAC,OAAO,EACrB,UAAU,EACV,WAAW,EACX,IAAI,EACJ,YAAY,EACZ,MAAM,CACP,CAAC;AAEF,IAAA,IAAI,KAAK,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE;AACrF,QAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChD,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,YAAA,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;YAChC,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC/D,qBAAqB,CAAC,KAAK,CAAC,mBAAmB,CAAC,QAAQ,EAAE,aAAa,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,EAC5F,OAAO,CAAC,QAAQ,CAAC,CAClB,CAAC;AACH,KAAA;AAAM,SAAA,IACL,CAAC,KAAK,CAAC,wBAAwB,CAAC,QAAQ,CAAC;QACzC,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,IAAI,SAAS,CAAC,MAAM,EAClD;AACA,QAAA,KAAK,CAAC,iBAAiB,CACrB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjD,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,YAAA,GAAG,EACL,OAAO,CAAC,QAAQ,CAAC,CAClB,CAAC;AACH,KAAA;AAAM,SAAA,IACL,CAAC,KAAK,CAAC,wBAAwB,CAAC,QAAQ,CAAC;QACzC,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,IAAI,SAAS,CAAC,OAAO,EACnD;AACA,QAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAChD,YAAA,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EACrD,OAAO,CAAC,QAAQ,CAAC,CAClB,CAAC;AACH,KAAA;AAED,IAAA,IAAI,KAAK,CAAC,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC,EAAE;AACvF,QAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACjD,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACpD,YAAA,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;YACjC,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAChE,qBAAqB,CAAC,KAAK,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,EAC7F,OAAO,CAAC,SAAS,CAAC,CACnB,CAAC;AACH,KAAA;AAAM,SAAA,IACL,CAAC,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC;QAC1C,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,EAC9C;AACA,QAAA,KAAK,CAAC,iBAAiB,CACrB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAClD,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACpD,YAAA,GAAG,EACL,OAAO,CAAC,SAAS,CAAC,CACnB,CAAC;AACH,KAAA;AAAM,SAAA,IACL,CAAC,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC;SACzC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO;AAC9C,cAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC;AACnD,cAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,EACnD;AAEA,QAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACjD,YAAA,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EACtD,OAAO,CAAC,SAAS,CAAC,CACnB,CAAC;AACH,KAAA;AACH,CAAC;AAEe,SAAA,0CAA0C,CACxD,IAAY,EACZ,cAAsB,EACtB,eAAuB,EACvB,gBAA+B,EAC/B,iBAAgC,EAChC,UAAkB,EAClB,WAAmB,EAAA;AAEnB,IAAA,gBAAgB,CACd,IAAI,EACJ,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,EACzB,+CAA+C,CAChD,CAAC;AAEF,IAAA,MAAM,uBAAuB,GAAW,6BAA6B,CACnE,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,cAAc,CACf,CAAC;AACF,IAAA,MAAM,0BAA0B,GAAW,6BAA6B,CACtE,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,cAAc,CACf,CAAC;AACF,IAAA,MAAM,aAAa,GAAW,qBAAqB,CACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,cAAc,CAAC,CAC3D,CAAC;AACF,IAAA,MAAM,gBAAgB,GAAW,qBAAqB,CACpD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,cAAc,CAAC,CAC9D,CAAC;AACF,IAAA,MAAM,UAAU,GAAW,kBAAkB,CAAC,cAAc,CAAC;AAC3D,UAAE,cAAc;UACd,UAAU,CAAC,CAAC,EAAE,cAAc,GAAG,aAAa,GAAG,uBAAuB,CAAC,CAAC;AAC5E,IAAA,MAAM,WAAW,GAAW,kBAAkB,CAAC,eAAe,CAAC;AAC7D,UAAE,eAAe;UACf,UAAU,CAAC,CAAC,EAAE,eAAe,GAAG,gBAAgB,GAAG,0BAA0B,CAAC,CAAC;IAEnF,IAAI,gBAAgB,IAAI,aAAa,CAAC,OAAO,IAAI,iBAAiB,IAAI,aAAa,CAAC,OAAO,EAAE;QAC3F,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,cAAc,GAAG,aAAa,EAC9B,UAAU,EACV,UAAU,CACX,EACD,WAAW,CAAC,KAAK,CAClB,CAAC;QAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,eAAe,GAAG,gBAAgB,EAClC,WAAW,EACX,UAAU,CACX,EACD,WAAW,CAAC,MAAM,CACnB,CAAC;AACH,KAAA;AAAM,SAAA;AACL,QAAA,MAAM,YAAY,GAAW,IAAI,CAAC,UAAU,EAAE,CAC5C,IAAI,EACJ,UAAU,EACV,gBAAgB,EAChB,WAAW,EACX,iBAAiB,CAClB,CAAC;QAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,gBAAgB,IAAI,aAAa,CAAC,SAAS,IAAI,gBAAgB,IAAI,aAAa,CAAC,MAAM;AACrF,cAAE,YAAY,CAAC,KAAK,GAAG,uBAAuB;AAC9C,cAAE,cAAc,GAAG,aAAa,EAClC,UAAU,EACV,UAAU,CACX,EACD,WAAW,CAAC,KAAK,CAClB,CAAC;QAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,iBAAiB,IAAI,aAAa,CAAC,SAAS,IAAI,iBAAiB,IAAI,aAAa,CAAC,MAAM;AACvF,cAAE,YAAY,CAAC,MAAM,GAAG,0BAA0B;AAClD,cAAE,eAAe,GAAG,gBAAgB,EACtC,WAAW,EACX,UAAU,CACX,EACD,WAAW,CAAC,MAAM,CACnB,CAAC;AACH,KAAA;AACH,CAAC;AAEe,SAAA,yCAAyC,CACvD,IAAY,EACZ,cAAsB,EACtB,eAAuB,EACvB,gBAA+B,EAC/B,iBAAgC,EAChC,UAAkB,EAClB,WAAmB,EAAA;AAEnB,IAAA,MAAM,uBAAuB,GAAW,6BAA6B,CACnE,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,UAAU,CACX,CAAC;AACF,IAAA,MAAM,0BAA0B,GAAW,6BAA6B,CACtE,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,UAAU,CACX,CAAC;AACF,IAAA,MAAM,aAAa,GAAW,qBAAqB,CACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACvD,CAAC;AACF,IAAA,MAAM,gBAAgB,GAAW,qBAAqB,CACpD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC1D,CAAC;IAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,gBAAgB,IAAI,aAAa,CAAC,SAAS,IAAI,gBAAgB,IAAI,aAAa,CAAC,MAAM;AACrF,UAAE,uBAAuB;AACzB,UAAE,cAAc,GAAG,aAAa,EAClC,UAAU,EACV,UAAU,CACX,EACD,WAAW,CAAC,KAAK,CAClB,CAAC;IAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,iBAAiB,IAAI,aAAa,CAAC,SAAS,IAAI,iBAAiB,IAAI,aAAa,CAAC,MAAM;AACvF,UAAE,0BAA0B;AAC5B,UAAE,eAAe,GAAG,gBAAgB,EACtC,WAAW,EACX,UAAU,CACX,EACD,WAAW,CAAC,MAAM,CACnB,CAAC;AACJ,CAAC;AAEe,SAAA,oCAAoC,CAClD,IAAY,EACZ,cAAsB,EACtB,eAAuB,EACvB,gBAA+B,EAC/B,iBAAgC,EAChC,UAAkB,EAClB,WAAmB,EAAA;AAEnB,IAAA,IACE,CAAC,CAAC,kBAAkB,CAAC,cAAc,CAAC;QAClC,gBAAgB,IAAI,aAAa,CAAC,MAAM;QACxC,cAAc,IAAI,CAAC;AACrB,SAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC;YACnC,iBAAiB,IAAI,aAAa,CAAC,MAAM;YACzC,eAAe,IAAI,CAAC,CAAC;AACvB,SAAC,gBAAgB,IAAI,aAAa,CAAC,OAAO,IAAI,iBAAiB,IAAI,aAAa,CAAC,OAAO,CAAC,EACzF;AACA,QAAA,MAAM,gBAAgB,GAAW,qBAAqB,CACpD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC1D,CAAC;AACF,QAAA,MAAM,aAAa,GAAW,qBAAqB,CACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACvD,CAAC;AAEF,QAAA,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,kBAAkB,CAAC,cAAc,CAAC;aAC/B,gBAAgB,IAAI,aAAa,CAAC,MAAM,IAAI,cAAc,GAAG,CAAC,CAAC;AAChE,cAAE,CAAC;AACH,cAAE,cAAc,GAAG,aAAa,EAClC,UAAU,EACV,UAAU,CACX,EACD,WAAW,CAAC,KAAK,CAClB,CAAC;AAEF,QAAA,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,kBAAkB,CAAC,eAAe,CAAC;aAChC,iBAAiB,IAAI,aAAa,CAAC,MAAM,IAAI,eAAe,GAAG,CAAC,CAAC;AAClE,cAAE,CAAC;AACH,cAAE,eAAe,GAAG,gBAAgB,EACtC,WAAW,EACX,UAAU,CACX,EACD,WAAW,CAAC,MAAM,CACnB,CAAC;AACF,QAAA,OAAO,IAAI,CAAC;AACb,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf,CAAC;AAEK,SAAU,yBAAyB,CAAC,IAAY,EAAA;AACpD,IAAA,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,CAAC;AACzB,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAE7B,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,yBAAyB,CAAC,KAAK,CAAC,CAAC;AAClC,KAAA;AACH,CAAC;AAEK,SAAU,gCAAgC,CAC9C,IAAY,EACZ,IAAqB,EACrB,YAAoB,EACpB,QAAgB,EAAA;AAEhB,IAAA,MAAM,SAAS,GAAoB,oBAAoB,CAAC,IAAI,CAAC;UACzD,eAAe,CAAC,GAAG;AACrB,UAAE,eAAe,CAAC,MAAM,CAAC;AAC3B,IAAA,MAAM,SAAS,GAAgB,oBAAoB,CAAC,IAAI,CAAC;UACrD,WAAW,CAAC,KAAK;AACnB,UAAE,WAAW,CAAC,MAAM,CAAC;AACvB,IAAA,MAAM,MAAM,GAAW,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IACzF,MAAM,gBAAgB,GAAW,6BAA6B,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAE1F,IAAA,IAAI,iBAAiB,GAAW,YAAY,GAAG,MAAM,GAAG,gBAAgB,CAAC;AACzE,IAAA,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,EAAE;AAC1C,QAAA,MAAM,oBAAoB,GAAoB,cAAc,CAC1D,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EACxC,QAAQ,CACT,CAAC;AACF,QAAA,MAAM,WAAW,GAAW,oBAAoB,CAAC,WAAW,EAAE;AAC5D,cAAE,GAAG;AACL,cAAE,oBAAoB,CAAC,QAAQ,EAAE,GAAG,gBAAgB,CAAC;AAEvD,QAAA,MAAM,oBAAoB,GAAoB,cAAc,CAC1D,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EACxC,QAAQ,CACT,CAAC;AAEF,QAAA,MAAM,WAAW,GAAW,oBAAoB,CAAC,WAAW,EAAE;cAC1D,MAAM,CAAC,SAAS;AAClB,cAAE,oBAAoB,CAAC,QAAQ,EAAE,GAAG,gBAAgB,CAAC;AACvD,QAAA,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,iBAAiB,EAAE,WAAW,CAAC,EAAE,WAAW,CAAC,CAAC;AACzF,KAAA;AAED,IAAA,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAEK,SAAU,iCAAiC,CAC/C,IAAY,EACZ,mBAA2B,EAC3B,oBAA4B,EAC5B,gBAA+B,EAC/B,iBAAgC,EAChC,SAAsB,EACtB,QAAyB,EACzB,MAAgB,EAChB,aAAsB,EACtB,sBAAuC,EAAA;IAEvC,IAAI,eAAe,GAAW,IAAI,CAAC;AACnC,IAAA,MAAM,QAAQ,GAAkB,IAAI,CAAC,WAAW,EAAE,CAAC;AACnD,IAAA,MAAM,kBAAkB,GAAkB,oBAAoB,CAAC,QAAQ,CAAC;AACtE,UAAE,gBAAgB;UAChB,iBAAiB,CAAC;AAEtB,IAAA,IAAI,kBAAkB,IAAI,aAAa,CAAC,OAAO,EAAE;AAC/C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACxC,YAAA,MAAM,KAAK,GAAW,QAAQ,CAAC,CAAC,CAAC,CAAC;AAClC,YAAA,IAAI,KAAK,CAAC,cAAc,EAAE,EAAE;gBAC1B,IACE,eAAe,IAAI,IAAI;AACvB,oBAAA,aAAa,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,GAAG,CAAC;oBAC3C,aAAa,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,GAAG,CAAC,EAC7C;oBACA,eAAe,GAAG,IAAI,CAAC;oBACvB,MAAM;AACP,iBAAA;AAAM,qBAAA;oBACL,eAAe,GAAG,KAAK,CAAC;AACzB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AAED,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACxC,QAAA,MAAM,KAAK,GAAW,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClC,KAAK,CAAC,gBAAgB,EAAE,CAAC;QACzB,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;YAC9C,yBAAyB,CAAC,KAAK,CAAC,CAAC;AACjC,YAAA,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC5B,YAAA,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACtB,SAAS;AACV,SAAA;AACD,QAAA,IAAI,aAAa,EAAE;YACjB,MAAM,cAAc,GAAgB,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;AACtE,YAAA,MAAM,OAAO,GAAW,oBAAoB,CAAC,QAAQ,CAAC;AACpD,kBAAE,mBAAmB;kBACnB,oBAAoB,CAAC;AACzB,YAAA,MAAM,QAAQ,GAAW,oBAAoB,CAAC,QAAQ,CAAC;AACrD,kBAAE,oBAAoB;kBACpB,mBAAmB,CAAC;YACxB,KAAK,CAAC,WAAW,CAAC,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;AAC3E,SAAA;QAED,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;YAC5D,SAAS;AACV,SAAA;QACD,IAAI,KAAK,IAAI,eAAe,EAAE;AAC5B,YAAA,KAAK,CAAC,oCAAoC,CAAC,uBAAuB,CAAC,CAAC;YACpE,KAAK,CAAC,0BAA0B,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,SAAA;AAAM,aAAA;YACL,8BAA8B,CAC5B,IAAI,EACJ,KAAK,EACL,mBAAmB,EACnB,gBAAgB,EAChB,oBAAoB,EACpB,mBAAmB,EACnB,oBAAoB,EACpB,iBAAiB,EACjB,SAAS,EACT,MAAM,CACP,CAAC;AACH,SAAA;AAED,QAAA,sBAAsB,CAAC,KAAK,IAAI,qBAAqB,CACnD,KAAK;AACF,aAAA,SAAS,EAAE;AACX,aAAA,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC,CAChF,CAAC;AACH,KAAA;AACH,CAAC;AAEe,SAAA,oCAAoC,CAClD,IAAY,EACZ,cAA2B,EAC3B,iBAAyB,EACzB,mBAA2B,EAC3B,qBAA6B,EAC7B,gBAAwB,EACxB,SAAiB,EAAA;AAEjB,IAAA,MAAM,sBAAsB,GAAgC,IAAI,2BAA2B,EAAE,CAAC;IAG9F,IAAI,+CAA+C,GAAG,CAAC,CAAC;AACxD,IAAA,MAAM,QAAQ,GAAoB,sBAAsB,CACtD,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,EAC7B,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CACtC,CAAC;AACF,IAAA,MAAM,cAAc,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC;IAC1E,IAAI,cAAc,GAAG,gBAAgB,CAAC;IACtC,OAAO,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,EAAE,cAAc,EAAE,EAAE;QACjE,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACpD,IACE,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI;YAC1C,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EACxD;YACA,SAAS;AACV,SAAA;AACD,QAAA,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAE9B,QAAA,MAAM,mBAAmB,GAAW,qBAAqB,CACvD,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CACtD,CAAC;QAEF,MAAM,iCAAiC,GAAW,qBAAqB,CACrE,8BAA8B,CAC5B,KAAK,EACL,QAAQ,EACR,qBAAqB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,EAC1D,iBAAiB,CAClB,CACF,CAAC;AAEF,QAAA,IACE,+CAA+C;YAC7C,iCAAiC;YACjC,mBAAmB;YACnB,qBAAqB;YACvB,cAAc;AACd,YAAA,sBAAsB,CAAC,WAAW,GAAG,CAAC,EACtC;YACA,MAAM;AACP,SAAA;QAED,+CAA+C;YAC7C,iCAAiC,GAAG,mBAAmB,CAAC;AAC1D,QAAA,sBAAsB,CAAC,yBAAyB;YAC9C,iCAAiC,GAAG,mBAAmB,CAAC;QAC1D,sBAAsB,CAAC,WAAW,EAAE,CAAC;AAErC,QAAA,IAAI,KAAK,CAAC,cAAc,EAAE,EAAE;AAC1B,YAAA,sBAAsB,CAAC,oBAAoB,IAAI,KAAK,CAAC,eAAe,EAAE,CAAC;AACvE,YAAA,sBAAsB,CAAC,4BAA4B;AACjD,gBAAA,CAAC,KAAK,CAAC,iBAAiB,EAAE,GAAG,qBAAqB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,CAAC;AAC3F,SAAA;AAED,QAAA,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrD,KAAA;AAED,IAAA,IACE,sBAAsB,CAAC,oBAAoB,GAAG,CAAC;AAC/C,QAAA,sBAAsB,CAAC,oBAAoB,GAAG,CAAC,EAC/C;AACA,QAAA,sBAAsB,CAAC,oBAAoB,GAAG,CAAC,CAAC;AACjD,KAAA;AAED,IAAA,IACE,sBAAsB,CAAC,4BAA4B,GAAG,CAAC;AACvD,QAAA,sBAAsB,CAAC,4BAA4B,GAAG,CAAC,EACvD;AACA,QAAA,sBAAsB,CAAC,4BAA4B,GAAG,CAAC,CAAC;AACzD,KAAA;AAED,IAAA,sBAAsB,CAAC,cAAc,GAAG,cAAc,CAAC;AACvD,IAAA,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAEK,SAAU,+BAA+B,CAC7C,wBAAqD,EACrD,IAAY,EACZ,QAAyB,EACzB,SAA0B,EAC1B,iBAAyB,EACzB,qBAA6B,EAC7B,sBAA8B,EAC9B,mBAA2B,EAC3B,oBAA4B,EAC5B,kBAA2B,EAC3B,mBAAkC,EAClC,aAAsB,EACtB,MAAgB,EAAA;IAEhB,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,sBAAsB,GAAG,CAAC,CAAC;IAC/B,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,cAAc,GAAG,CAAC,CAAC;AACvB,IAAA,MAAM,aAAa,GAAY,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC9D,IAAA,MAAM,cAAc,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC;AAE1E,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACzE,MAAM,oBAAoB,GAAW,wBAAwB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAClF,cAAc,GAAG,qBAAqB,CACpC,8BAA8B,CAC5B,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,EACzE,iBAAiB,CAClB,CACF,CAAC;QACF,IAAI,eAAe,GAAW,cAAc,CAAC;AAE7C,QAAA,IACE,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC;AAChE,YAAA,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,EAC/C;YACA,sBAAsB,GAAG,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,GAAG,cAAc,CAAC;YAEpF,IAAI,sBAAsB,IAAI,CAAC,EAAE;AAC/B,gBAAA,IAAI,SAAiB,CAAC;AAEtB,gBAAA,IACE,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,4BAA4B,CAAC;AAC1E,oBAAA,wBAAwB,CAAC,4BAA4B,IAAI,CAAC,EAC1D;AACA,oBAAA,SAAS,GAAG,cAAc,GAAG,sBAAsB,CAAC;AACrD,iBAAA;AAAM,qBAAA;oBACL,SAAS;wBACP,cAAc;4BACd,CAAC,wBAAwB,CAAC,kBAAkB;gCAC1C,wBAAwB,CAAC,4BAA4B;AACrD,gCAAA,sBAAsB,CAAC;AAC5B,iBAAA;AAED,gBAAA,eAAe,GAAG,eAAe,CAC/B,oBAAoB,EACpB,QAAQ,EACR,SAAS,EACT,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AACH,aAAA;AACF,SAAA;AAAM,aAAA,IACL,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC;AAChE,YAAA,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,EAC/C;AACA,YAAA,cAAc,GAAG,oBAAoB,CAAC,eAAe,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,cAAc,IAAI,CAAC,EAAE;AAC9D,gBAAA,eAAe,GAAG,eAAe,CAC/B,oBAAoB,EACpB,QAAQ,EACR,cAAc;oBACZ,CAAC,wBAAwB,CAAC,kBAAkB;wBAC1C,wBAAwB,CAAC,oBAAoB;AAC7C,wBAAA,cAAc,EAClB,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AACH,aAAA;AACF,SAAA;AAED,QAAA,cAAc,IAAI,eAAe,GAAG,cAAc,CAAC;AAEnD,QAAA,MAAM,UAAU,GAAW,qBAAqB,CAC9C,oBAAoB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CACrE,CAAC;AACF,QAAA,MAAM,WAAW,GAAW,qBAAqB,CAC/C,oBAAoB,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CACtE,CAAC;AAEF,QAAA,IAAI,cAAsB,CAAC;AAC3B,QAAA,IAAI,aAAa,GAAW,eAAe,GAAG,UAAU,CAAC;AACzD,QAAA,IAAI,qBAAoC,CAAC;AACzC,QAAA,IAAI,oBAAoB,GAAkB,aAAa,CAAC,OAAO,CAAC;QAEhE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AAC9D,YAAA,cAAc,GAAG,aAAa;AAC5B,kBAAE,CAAC,aAAa,GAAG,UAAU,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE;AACvF,kBAAE,CAAC,aAAa,GAAG,UAAU,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC1F,YAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;YAE9C,cAAc,IAAI,WAAW,CAAC;AAC/B,SAAA;AAAM,aAAA,IACL,CAAC,kBAAkB,CAAC,sBAAsB,CAAC;AAC3C,YAAA,CAAC,uBAAuB,CAAC,oBAAoB,EAAE,SAAS,EAAE,sBAAsB,CAAC;YACjF,mBAAmB,IAAI,aAAa,CAAC,OAAO;AAC5C,YAAA,EAAE,cAAc,IAAI,kBAAkB,CAAC;YACvC,eAAe,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,OAAO,CAAC,OAAO;YAC9D,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI;YACtE,oBAAoB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EACvE;YACA,cAAc,GAAG,sBAAsB,CAAC;AACxC,YAAA,qBAAqB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC/C,SAAA;aAAM,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,EAAE,SAAS,EAAE,sBAAsB,CAAC,EAAE;YAC5F,cAAc,GAAG,sBAAsB,CAAC;AACxC,YAAA,qBAAqB,GAAG,kBAAkB,CAAC,cAAc,CAAC;kBACtD,aAAa,CAAC,SAAS;AACzB,kBAAE,aAAa,CAAC,MAAM,CAAC;AAC1B,SAAA;AAAM,aAAA;YACL,cAAc;AACZ,gBAAA,qBAAqB,CACnB,cAAc,CACZ,oBAAoB,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EACzD,sBAAsB,CACvB,CACF,GAAG,WAAW,CAAC;AAClB,YAAA,MAAM,4BAA4B,GAChC,oBAAoB,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO;AAChF,gBAAA,mBAAmB,IAAI,aAAa,CAAC,OAAO,CAAC;YAC/C,qBAAqB;AACnB,gBAAA,kBAAkB,CAAC,cAAc,CAAC,IAAI,4BAA4B;sBAC9D,aAAa,CAAC,SAAS;AACzB,sBAAE,aAAa,CAAC,OAAO,CAAC;AAC7B,SAAA;AAED,QAAA,MAAM,uBAAuB,GAAG,EAAC,KAAK,EAAE,oBAAoB,EAAC,CAAC;AAC9D,QAAA,MAAM,gBAAgB,GAAG,EAAC,KAAK,EAAE,aAAa,EAAC,CAAC;AAChD,QAAA,MAAM,wBAAwB,GAAG,EAAC,KAAK,EAAE,qBAAqB,EAAC,CAAC;AAChE,QAAA,MAAM,iBAAiB,GAAG,EAAC,KAAK,EAAE,cAAc,EAAC,CAAC;AAElD,QAAA,yBAAyB,CACvB,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB,uBAAuB,EACvB,gBAAgB,CACjB,CAAC;AAEF,QAAA,yBAAyB,CACvB,oBAAoB,EACpB,SAAS,EACT,sBAAsB,EACtB,mBAAmB,EACnB,wBAAwB,EACxB,iBAAiB,CAClB,CAAC;AAEF,QAAA,oBAAoB,GAAG,uBAAuB,CAAC,KAAK,CAAC;AACrD,QAAA,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC;AACvC,QAAA,qBAAqB,GAAG,wBAAwB,CAAC,KAAK,CAAC;AACvD,QAAA,cAAc,GAAG,iBAAiB,CAAC,KAAK,CAAC;QAEzC,MAAM,qBAAqB,GACzB,CAAC,uBAAuB,CAAC,oBAAoB,EAAE,SAAS,EAAE,sBAAsB,CAAC;YACjF,eAAe,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,OAAO,CAAC,OAAO;YAC9D,oBAAoB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI;YACtE,oBAAoB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC;QAE1E,MAAM,UAAU,GAAW,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;AAC1E,QAAA,MAAM,WAAW,GAAW,CAAC,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;QAE5E,MAAM,qBAAqB,GAAkB,aAAa;AACxD,cAAE,oBAAoB;cACpB,qBAAqB,CAAC;QAC1B,MAAM,sBAAsB,GAAkB,CAAC,aAAa;AAC1D,cAAE,oBAAoB;cACpB,qBAAqB,CAAC;AAE1B,QAAA,oBAAoB,CAClB,oBAAoB,EACpB,UAAU,EACV,WAAW,EACX,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,EAC1B,qBAAqB,EACrB,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,aAAa,IAAI,CAAC,qBAAqB,EACvC,MAAM,EACN,MAAM,CACP,CAAC;AAEF,QAAA,IAAI,CAAC,oBAAoB,CACvB,IAAI,CAAC,SAAS,EAAE,CAAC,WAAW,IAAI,oBAAoB,CAAC,SAAS,EAAE,CAAC,WAAW,CAC7E,CAAC;AACH,KAAA;AAED,IAAA,OAAO,cAAc,CAAC;AACxB,CAAC;AAEK,SAAU,8BAA8B,CAC5C,wBAAqD,EACrD,QAAyB,EACzB,iBAAyB,EACzB,qBAA6B,EAC7B,mBAA2B,EAAA;IAE3B,IAAI,sBAAsB,GAAG,CAAC,CAAC;IAC/B,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACzE,MAAM,oBAAoB,GAAW,wBAAwB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAClF,MAAM,cAAc,GAAW,qBAAqB,CAClD,8BAA8B,CAC5B,oBAAoB,EACpB,QAAQ,EACR,qBAAqB,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,iBAAiB,CAAC,EACzE,iBAAiB,CAClB,CACF,CAAC;AAEF,QAAA,IAAI,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,EAAE;YACnD,sBAAsB,GAAG,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,GAAG,cAAc,CAAC;YACpF,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,IAAI,sBAAsB,IAAI,CAAC,EAAE;gBAC9E,YAAY;oBACV,cAAc;wBACd,CAAC,wBAAwB,CAAC,kBAAkB;4BAC1C,wBAAwB,CAAC,4BAA4B;AACrD,4BAAA,sBAAsB,CAAC;AAC3B,gBAAA,aAAa,GAAG,eAAe,CAC7B,oBAAoB,EACpB,QAAQ,EACR,YAAY,EACZ,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AACF,gBAAA,IACE,CAAC,kBAAkB,CAAC,YAAY,CAAC;oBACjC,CAAC,kBAAkB,CAAC,aAAa,CAAC;oBAClC,YAAY,IAAI,aAAa,EAC7B;AACA,oBAAA,cAAc,IAAI,aAAa,GAAG,cAAc,CAAC;AACjD,oBAAA,wBAAwB,CAAC,4BAA4B,IAAI,sBAAsB,CAAC;AACjF,iBAAA;AACF,aAAA;AACF,SAAA;AAAM,aAAA,IACL,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,kBAAkB,CAAC;AAChE,YAAA,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,EAC/C;AACA,YAAA,cAAc,GAAG,oBAAoB,CAAC,eAAe,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,cAAc,IAAI,CAAC,EAAE;gBAC9D,YAAY;oBACV,cAAc;wBACd,CAAC,wBAAwB,CAAC,kBAAkB;4BAC1C,wBAAwB,CAAC,oBAAoB;AAC7C,4BAAA,cAAc,CAAC;AACnB,gBAAA,aAAa,GAAG,eAAe,CAC7B,oBAAoB,EACpB,QAAQ,EACR,YAAY,EACZ,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AAEF,gBAAA,IACE,CAAC,kBAAkB,CAAC,YAAY,CAAC;oBACjC,CAAC,kBAAkB,CAAC,aAAa,CAAC;oBAClC,YAAY,IAAI,aAAa,EAC7B;AACA,oBAAA,cAAc,IAAI,aAAa,GAAG,cAAc,CAAC;AACjD,oBAAA,wBAAwB,CAAC,oBAAoB,IAAI,cAAc,CAAC;AACjE,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,wBAAwB,CAAC,kBAAkB,IAAI,cAAc,CAAC;AAChE,CAAC;AAEK,SAAU,uBAAuB,CACrC,IAAY,EACZ,wBAAqD,EACrD,QAAyB,EACzB,SAA0B,EAC1B,iBAAyB,EACzB,qBAA6B,EAC7B,sBAA8B,EAC9B,mBAA2B,EAC3B,oBAA4B,EAC5B,kBAA2B,EAC3B,mBAAkC,EAClC,aAAsB,EACtB,MAAgB,EAAA;AAEhB,IAAA,MAAM,iBAAiB,GAAW,wBAAwB,CAAC,kBAAkB,CAAC;IAE9E,8BAA8B,CAC5B,wBAAwB,EACxB,QAAQ,EACR,iBAAiB,EACjB,qBAAqB,EACrB,mBAAmB,CACpB,CAAC;AAEF,IAAA,MAAM,oBAAoB,GAAW,+BAA+B,CAClE,wBAAwB,EACxB,IAAI,EACJ,QAAQ,EACR,SAAS,EACT,iBAAiB,EACjB,qBAAqB,EACrB,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,kBAAkB,EAClB,mBAAmB,EACnB,aAAa,EACb,MAAM,CACP,CAAC;AAEF,IAAA,wBAAwB,CAAC,kBAAkB,GAAG,iBAAiB,GAAG,oBAAoB,CAAC;AACzF,CAAC;AAEK,SAAU,iBAAiB,CAC/B,IAAY,EACZ,wBAAqD,EACrD,gBAAwB,EACxB,QAAyB,EACzB,SAA0B,EAC1B,kBAAiC,EACjC,mBAAkC,EAClC,iBAAyB,EACzB,UAAkB,EAClB,qBAA6B,EAC7B,sBAA8B,EAC9B,mBAA2B,EAC3B,aAAsB,EAAA;AAEtB,IAAA,MAAM,KAAK,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvC,IAAA,IACE,kBAAkB,IAAI,aAAa,CAAC,MAAM;AAC1C,QAAA,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,EAC/C;AACA,QAAA,IACE,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS;AAC3D,YAAA,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,WAAW,EAAE,EACpF;YACA,wBAAwB,CAAC,kBAAkB,GAAG,UAAU,CACtD,CAAC,EACD,qBAAqB,CACnB,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,iBAAiB,CAAC,CACtE;AACC,iBAAC,qBAAqB,GAAG,wBAAwB,CAAC,kBAAkB,CAAC,CACxE,CAAC;AACH,SAAA;AAAM,aAAA;AACL,YAAA,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACjD,SAAA;AACF,KAAA;IAED,IAAI,gCAAgC,GAAG,CAAC,CAAC;AACzC,IAAA,KAAK,IAAI,CAAC,GAAW,gBAAgB,EAAE,CAAC,GAAG,wBAAwB,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE;QACvF,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;AAC5D,YAAA,IAAI,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC1D,gBAAA,gCAAgC,EAAE,CAAC;AACpC,aAAA;AACD,YAAA,IAAI,KAAK,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC3D,gBAAA,gCAAgC,EAAE,CAAC;AACpC,aAAA;AACF,SAAA;AACF,KAAA;IACD,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,MAAM,cAAc,GAAc,IAAI,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;IAEjE,IAAI,gCAAgC,IAAI,CAAC,EAAE;AACzC,QAAA,QAAQ,cAAc;YACtB,KAAK,SAAS,CAAC,MAAM;AACnB,gBAAA,cAAc,GAAG,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,CAAC;gBACjE,MAAM;YACR,KAAK,SAAS,CAAC,OAAO;AACpB,gBAAA,cAAc,GAAG,wBAAwB,CAAC,kBAAkB,CAAC;gBAC7D,MAAM;YACR,KAAK,SAAS,CAAC,YAAY;AACzB,gBAAA,IAAI,wBAAwB,CAAC,WAAW,GAAG,CAAC,EAAE;oBAC5C,cAAc;AACV,wBAAA,UAAU,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,CAAC,CAAC;AAC1D,6BAAC,wBAAwB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AAChD,iBAAA;AAAM,qBAAA;oBACL,cAAc,GAAG,CAAC,CAAC;AACpB,iBAAA;gBACD,MAAM;YACR,KAAK,SAAS,CAAC,WAAW;gBACxB,cAAc;oBACV,wBAAwB,CAAC,kBAAkB,IAAI,wBAAwB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;gBAC7F,cAAc,GAAG,cAAc,CAAC;gBAChC,MAAM;YACR,KAAK,SAAS,CAAC,WAAW;gBACxB,cAAc;AACV,oBAAA,wBAAwB,CAAC,kBAAkB,GAAG,wBAAwB,CAAC,WAAW,CAAC;AACvF,gBAAA,cAAc,GAAG,cAAc,GAAG,CAAC,CAAC;gBACpC,MAAM;YACR,KAAK,SAAS,CAAC,SAAS;gBACtB,MAAM;AACP,SAAA;AACF,KAAA;AAED,IAAA,MAAM,2BAA2B,GAAW,qBAAqB,CAC/D,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,UAAU,CAAC,CACtD,CAAC;AACF,IAAA,wBAAwB,CAAC,OAAO,GAAG,2BAA2B,GAAG,cAAc,CAAC;AAChF,IAAA,wBAAwB,CAAC,QAAQ,GAAG,CAAC,CAAC;AAEtC,IAAA,KAAK,IAAI,CAAC,GAAW,gBAAgB,EAAE,CAAC,GAAG,wBAAwB,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE;QACvF,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,QAAA,MAAM,UAAU,GAAY,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC7C,QAAA,MAAM,WAAW,GAAa,KAAK,CAAC,SAAS,EAAE,CAAC;AAChD,QAAA,IAAI,UAAU,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;YACxC,SAAS;AACV,SAAA;AACD,QAAA,IACE,UAAU,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ;AAClD,YAAA,KAAK,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EACxC;AACA,YAAA,IAAI,aAAa,EAAE;AACjB,gBAAA,KAAK,CAAC,iBAAiB,CACrB,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;AAC9E,oBAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;AAC/B,oBAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC,EAC9E,GAAG,CAAC,QAAQ,CAAC,CACd,CAAC;AACH,aAAA;AACF,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,UAAU,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;AACtD,gBAAA,IAAI,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC1D,oBAAA,wBAAwB,CAAC,OAAO;AAC9B,wBAAA,wBAAwB,CAAC,kBAAkB,GAAG,gCAAgC,CAAC;AAClF,iBAAA;AAED,gBAAA,IAAI,aAAa,EAAE;oBACjB,KAAK,CAAC,iBAAiB,CACrB,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAW,CAAC,GAAG,wBAAwB,CAAC,OAAO,EAChF,GAAG,CAAC,QAAQ,CAAC,CACd,CAAC;AACH,iBAAA;AAED,gBAAA,IAAI,KAAK,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAC3D,oBAAA,wBAAwB,CAAC,OAAO;AAC9B,wBAAA,wBAAwB,CAAC,kBAAkB,GAAG,gCAAgC,CAAC;AAClF,iBAAA;gBACD,MAAM,WAAW,GAAY,CAAC,aAAa,IAAI,mBAAmB,IAAI,aAAa,CAAC,OAAO,CAAC;AAC5F,gBAAA,IAAI,WAAW,EAAE;AACf,oBAAA,wBAAwB,CAAC,OAAO;wBAC9B,cAAc;4BACd,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;AAC5E,4BAAA,qBAAqB,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;AACvD,oBAAA,wBAAwB,CAAC,QAAQ,GAAG,sBAAsB,CAAC;AAC5D,iBAAA;AAAM,qBAAA;AACL,oBAAA,wBAAwB,CAAC,OAAO;wBAC9B,cAAc,GAAG,mBAAmB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;AAC7E,oBAAA,wBAAwB,CAAC,QAAQ,GAAG,UAAU,CAC5C,wBAAwB,CAAC,QAAQ,EACjC,mBAAmB,CAAC,KAAK,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAC3D,CAAC;AACH,iBAAA;AACF,aAAA;AAAM,iBAAA,IAAI,aAAa,EAAE;gBACxB,KAAK,CAAC,iBAAiB,CACrB,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAW,CAAC;AAC3C,oBAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;AAC/B,oBAAA,cAAc,EAChB,GAAG,CAAC,QAAQ,CAAC,CACd,CAAC;AACH,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,wBAAwB,CAAC,OAAO,IAAI,qBAAqB,CACvD,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE,UAAU,CAAC,CACvD,CAAC;AACJ,CAAC;AAEK,SAAU,gBAAgB,CAC9B,IAAY,EACZ,cAAsB,EACtB,eAAuB,EACvB,cAA2B,EAC3B,gBAA+B,EAC/B,iBAAgC,EAChC,UAAkB,EAClB,WAAmB,EACnB,aAAsB,EACtB,MAAgB,EAAA;IAEhB,gBAAgB,CACd,IAAI,EACJ,kBAAkB,CAAC,cAAc,CAAC,GAAG,gBAAgB,IAAI,aAAa,CAAC,SAAS,GAAG,IAAI,EACvF,kFAAkF,CACnF,CAAC;IACF,gBAAgB,CACd,IAAI,EACJ,kBAAkB,CAAC,eAAe,CAAC,GAAG,iBAAiB,IAAI,aAAa,CAAC,SAAS,GAAG,IAAI,EACzF,oFAAoF,CACrF,CAAC;IAEF,MAAM,SAAS,GAAgB,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;AACrE,IAAA,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAEnC,MAAM,gBAAgB,GAAoB,sBAAsB,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACjG,MAAM,mBAAmB,GAAoB,sBAAsB,CACjE,eAAe,CAAC,MAAM,EACtB,SAAS,CACV,CAAC;AAEF,IAAA,IAAI,CAAC,eAAe,CAClB,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,EAC1E,MAAM,CAAC,KAAK,CACb,CAAC;AACF,IAAA,IAAI,CAAC,eAAe,CAClB,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,EAC3E,MAAM,CAAC,GAAG,CACX,CAAC;AACF,IAAA,IAAI,CAAC,eAAe,CAClB,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,EAC7E,MAAM,CAAC,GAAG,CACX,CAAC;AACF,IAAA,IAAI,CAAC,eAAe,CAClB,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,EAC9E,MAAM,CAAC,MAAM,CACd,CAAC;AAEF,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5E,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3E,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7E,IAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;AAEjF,IAAA,IAAI,CAAC,gBAAgB,CACnB,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,EAC3E,MAAM,CAAC,KAAK,CACb,CAAC;AACF,IAAA,IAAI,CAAC,gBAAgB,CACnB,qBAAqB,CAAC,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,EAC5E,MAAM,CAAC,GAAG,CACX,CAAC;AACF,IAAA,IAAI,CAAC,gBAAgB,CACnB,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,EAC9E,MAAM,CAAC,GAAG,CACX,CAAC;AACF,IAAA,IAAI,CAAC,gBAAgB,CACnB,qBAAqB,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,EAC/E,MAAM,CAAC,MAAM,CACd,CAAC;AAEF,IAAA,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,EAAE;AAC7B,QAAA,0CAA0C,CACxC,IAAI,EACJ,cAAc,EACd,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,CACZ,CAAC;QACF,OAAO;AACR,KAAA;AAED,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACrD,IAAI,UAAU,IAAI,CAAC,EAAE;AACnB,QAAA,yCAAyC,CACvC,IAAI,EACJ,cAAc,EACd,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,CACZ,CAAC;QACF,OAAO;AACR,KAAA;AACD,IAAA,IACE,CAAC,aAAa;AACd,QAAA,oCAAoC,CAClC,IAAI,EACJ,cAAc,EACd,eAAe,EACf,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,CACZ,EACD;QACA,OAAO;AACR,KAAA;IAED,IAAI,CAAC,qBAAqB,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACjC,IAAA,MAAM,QAAQ,GAAoB,sBAAsB,CACtD,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,EAC7B,SAAS,CACV,CAAC;IACF,MAAM,SAAS,GAAoB,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC7E,IAAA,MAAM,aAAa,GAAY,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC9D,IAAA,MAAM,cAAc,GAAY,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC;IAE1E,MAAM,iBAAiB,GAAW,aAAa,GAAG,UAAU,GAAG,WAAW,CAAC;IAC3E,MAAM,kBAAkB,GAAW,aAAa,GAAG,WAAW,GAAG,UAAU,CAAC;AAE5E,IAAA,MAAM,4BAA4B,GAAW,qBAAqB,CAChE,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,UAAU,CAAC,CACvD,CAAC;IACF,MAAM,wBAAwB,GAAW,6BAA6B,CACpE,IAAI,EACJ,QAAQ,EACR,UAAU,CACX,CAAC;IACF,MAAM,yBAAyB,GAAW,6BAA6B,CACrE,IAAI,EACJ,SAAS,EACT,UAAU,CACX,CAAC;IAEF,IAAI,kBAAkB,GAAkB,aAAa,GAAG,gBAAgB,GAAG,iBAAiB,CAAC;IAC7F,MAAM,mBAAmB,GAAkB,aAAa,GAAG,iBAAiB,GAAG,gBAAgB,CAAC;IAEhG,MAAM,uBAAuB,GAAW,aAAa;AACnD,UAAE,wBAAwB;UACxB,yBAAyB,CAAC;IAC9B,MAAM,0BAA0B,GAAW,aAAa;AACtD,UAAE,yBAAyB;UACzB,wBAAwB,CAAC;AAE7B,IAAA,MAAM,aAAa,GAAW,qBAAqB,CACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACvD,CAAC;AACF,IAAA,MAAM,gBAAgB,GAAW,qBAAqB,CACpD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC1D,CAAC;IAEF,MAAM,aAAa,GACjB,qBAAqB,CACnB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAC7E,GAAG,uBAAuB,CAAC;IAC9B,MAAM,aAAa,GACjB,qBAAqB,CACnB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAC7E,GAAG,uBAAuB,CAAC;IAC9B,MAAM,cAAc,GAClB,qBAAqB,CACnB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAC/E,GAAG,0BAA0B,CAAC;IACjC,MAAM,cAAc,GAClB,qBAAqB,CACnB,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAC/E,GAAG,0BAA0B,CAAC;IAEjC,MAAM,eAAe,GAAW,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;IAC/E,MAAM,eAAe,GAAW,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;AAC/E,IAAA,MAAM,mBAAmB,GAAW,gCAAgC,CAClE,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,cAAc,EACd,UAAU,CACX,CAAC;AACF,IAAA,MAAM,oBAAoB,GAAW,gCAAgC,CACnE,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,eAAe,EACf,WAAW,CACZ,CAAC;IAEF,IAAI,qBAAqB,GAAW,aAAa,GAAG,mBAAmB,GAAG,oBAAoB,CAAC;IAC/F,MAAM,sBAAsB,GAAW,aAAa,GAAG,oBAAoB,GAAG,mBAAmB,CAAC;AAElG,IAAA,MAAM,mBAAmB,GAAoB,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC;IAExD,iCAAiC,CAC/B,IAAI,EACJ,mBAAmB,EACnB,oBAAoB,EACpB,gBAAgB,EAChB,iBAAiB,EACjB,SAAS,EACT,QAAQ,EACR,MAAM,EACN,aAAa,EACb,mBAAmB,CACpB,CAAC;AAEF,IAAA,MAAM,kBAAkB,GACtB,kBAAkB,IAAI,aAAa,CAAC,SAAS;AAC3C,UAAE,KAAK;AACP,UAAE,mBAAmB,CAAC,KAAK,GAAG,qBAAqB,CAAC;IACxD,IAAI,cAAc,IAAI,kBAAkB,IAAI,kBAAkB,IAAI,aAAa,CAAC,MAAM,EAAE;AACtF,QAAA,kBAAkB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC5C,KAAA;IAED,IAAI,gBAAgB,GAAG,CAAC,CAAC;IACzB,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB,IAAA,IAAI,wBAAqD,CAAC;IAC1D,OAAO,cAAc,GAAG,UAAU,EAAE,SAAS,EAAE,EAAE,gBAAgB,GAAG,cAAc,EAAE;AAClF,QAAA,wBAAwB,GAAG,oCAAoC,CAC7D,IAAI,EACJ,cAAc,EACd,iBAAiB,EACjB,mBAAmB,EACnB,qBAAqB,EACrB,gBAAgB,EAChB,SAAS,CACV,CAAC;AACF,QAAA,cAAc,GAAG,wBAAwB,CAAC,cAAc,CAAC;QACzD,MAAM,WAAW,GAAY,CAAC,aAAa,IAAI,mBAAmB,IAAI,aAAa,CAAC,OAAO,CAAC;QAC5F,IAAI,kBAAkB,GAAG,KAAK,CAAC;AAE/B,QAAA,IAAI,kBAAkB,IAAI,aAAa,CAAC,OAAO,EAAE;AAC/C,YAAA,IACE,CAAC,kBAAkB,CAAC,eAAe,CAAC;AACpC,gBAAA,wBAAwB,CAAC,yBAAyB,GAAG,eAAe,EACpE;gBACA,qBAAqB,GAAG,eAAe,CAAC;AACzC,aAAA;AAAM,iBAAA,IACL,CAAC,kBAAkB,CAAC,eAAe,CAAC;AACpC,gBAAA,wBAAwB,CAAC,yBAAyB,GAAG,eAAe,EACpE;gBACA,qBAAqB,GAAG,eAAe,CAAC;AACzC,aAAA;AAAM,iBAAA;AACL,gBAAA,IACE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,yBAAyB;AAC3C,qBAAC,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,oBAAoB,CAAC;AACjE,wBAAA,wBAAwB,CAAC,oBAAoB,IAAI,CAAC;AAClD,yBAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC,EAC9E;AACA,oBAAA,qBAAqB,GAAG,wBAAwB,CAAC,yBAAyB,CAAC;AAC5E,iBAAA;AAED,gBAAA,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,yBAAyB,EAAE;AAC9C,oBAAA,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;AACtC,iBAAA;gBACD,kBAAkB,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,yBAAyB,CAAC;AAClE,aAAA;AACF,SAAA;QAED,IAAI,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,EAAE;AACrE,YAAA,wBAAwB,CAAC,kBAAkB;AACzC,gBAAA,qBAAqB,GAAG,wBAAwB,CAAC,yBAAyB,CAAC;AAC9E,SAAA;AAAM,aAAA,IAAI,wBAAwB,CAAC,yBAAyB,GAAG,CAAC,EAAE;AACjE,YAAA,wBAAwB,CAAC,kBAAkB;gBACzC,CAAC,wBAAwB,CAAC,yBAAyB,CAAC;AACvD,SAAA;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,uBAAuB,CACrB,IAAI,EACJ,wBAAwB,EACxB,QAAQ,EACR,SAAS,EACT,iBAAiB,EACjB,qBAAqB,EACrB,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,kBAAkB,EAClB,mBAAmB,EACnB,aAAa,EACb,MAAM,CACP,CAAC;AACH,SAAA;AAED,QAAA,IAAI,CAAC,oBAAoB,CACvB,IAAI,CAAC,SAAS,EAAE,CAAC,WAAW,IAAI,wBAAwB,CAAC,kBAAkB,GAAG,CAAC,CAChF,CAAC;QAEF,iBAAiB,CACf,IAAI,EACJ,wBAAwB,EACxB,gBAAgB,EAChB,QAAQ,EACR,SAAS,EACT,kBAAkB,EAClB,mBAAmB,EACnB,iBAAiB,EACjB,UAAU,EACV,qBAAqB,EACrB,sBAAsB,EACtB,mBAAmB,EACnB,aAAa,CACd,CAAC;QAEF,IAAI,kBAAkB,GAAW,sBAAsB,CAAC;AACxD,QAAA,IACE,mBAAmB,IAAI,aAAa,CAAC,SAAS;AAC9C,YAAA,mBAAmB,IAAI,aAAa,CAAC,MAAM,EAC3C;YACA,kBAAkB;AAChB,gBAAA,eAAe,CACb,IAAI,EACJ,SAAS,EACT,wBAAwB,CAAC,QAAQ,GAAG,yBAAyB,EAC7D,kBAAkB,EAClB,UAAU,CACX,GAAG,yBAAyB,CAAC;AACjC,SAAA;QAED,IAAI,CAAC,cAAc,IAAI,mBAAmB,IAAI,aAAa,CAAC,OAAO,EAAE;AACnE,YAAA,wBAAwB,CAAC,QAAQ,GAAG,sBAAsB,CAAC;AAC5D,SAAA;AAED,QAAA,wBAAwB,CAAC,QAAQ;AAC/B,YAAA,eAAe,CACb,IAAI,EACJ,SAAS,EACT,wBAAwB,CAAC,QAAQ,GAAG,yBAAyB,EAC7D,kBAAkB,EAClB,UAAU,CACX,GAAG,yBAAyB,CAAC;AAEhC,QAAA,IAAI,aAAa,EAAE;YACjB,KAAK,IAAI,CAAC,GAAG,gBAAgB,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;gBACtD,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;oBAC9C,SAAS;AACV,iBAAA;gBACD,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;oBAC5D,MAAM,wBAAwB,GAAY,KAAK,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;AACpF,oBAAA,IAAI,wBAAwB,EAAE;AAC5B,wBAAA,KAAK,CAAC,iBAAiB,CACrB,qBAAqB,CAAC,KAAK,CAAC,kBAAkB,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;AAChF,4BAAA,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;AAChC,4BAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,EAC/E,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,qBAAA;AAED,oBAAA,IACE,CAAC,wBAAwB;AACzB,wBAAA,kBAAkB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAW,CAAC,CAAC,EACxE;wBACA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;AAC9B,4BAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,EAC/E,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,qBAAA;AACF,iBAAA;AAAM,qBAAA;oBACL,IAAI,eAAe,GAAW,4BAA4B,CAAC;oBAC3D,MAAM,SAAS,GAAY,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxD,oBAAA,IACE,SAAS,IAAI,OAAO,CAAC,OAAO;wBAC5B,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI;wBACvD,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EACxD;wBACA,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,SAAS,EAAE,sBAAsB,CAAC,EAAE;AACtE,4BAAA,IAAI,aAAa,GAAW,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAChF,IAAI,cAAc,GAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE;kCACpE,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;AAC7E,qCAAC,aAAa;0CACV,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE;AACzD,0CAAE,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;AAC9D,kCAAE,wBAAwB,CAAC,QAAQ,CAAC;AAEtC,4BAAA,aAAa,IAAI,qBAAqB,CACpC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CACtD,CAAC;AAEF,4BAAA,IAAI,oBAAoB,GAAkB,aAAa,CAAC,OAAO,CAAC;AAChE,4BAAA,IAAI,qBAAqB,GAAkB,aAAa,CAAC,OAAO,CAAC;AAEjE,4BAAA,MAAM,uBAAuB,GAAG,EAAC,KAAK,EAAE,oBAAoB,EAAC,CAAC;AAC9D,4BAAA,MAAM,gBAAgB,GAAG,EAAC,KAAK,EAAE,aAAa,EAAC,CAAC;AAChD,4BAAA,MAAM,wBAAwB,GAAG,EAAC,KAAK,EAAE,qBAAqB,EAAC,CAAC;AAChE,4BAAA,MAAM,iBAAiB,GAAG,EAAC,KAAK,EAAE,cAAc,EAAC,CAAC;AAElD,4BAAA,yBAAyB,CACvB,KAAK,EACL,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB,uBAAuB,EACvB,gBAAgB,CACjB,CAAC;AACF,4BAAA,yBAAyB,CACvB,KAAK,EACL,SAAS,EACT,sBAAsB,EACtB,mBAAmB,EACnB,wBAAwB,EACxB,iBAAiB,CAClB,CAAC;AAEF,4BAAA,oBAAoB,GAAG,uBAAuB,CAAC,KAAK,CAAC;AACrD,4BAAA,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC;AACvC,4BAAA,qBAAqB,GAAG,wBAAwB,CAAC,KAAK,CAAC;AACvD,4BAAA,cAAc,GAAG,iBAAiB,CAAC,KAAK,CAAC;4BAEzC,MAAM,UAAU,GAAW,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;AAC1E,4BAAA,MAAM,WAAW,GAAW,CAAC,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC;AAE5E,4BAAA,MAAM,qBAAqB,GAAkB,kBAAkB,CAAC,UAAU,CAAC;kCACvE,aAAa,CAAC,SAAS;AACzB,kCAAE,aAAa,CAAC,OAAO,CAAC;AAC1B,4BAAA,MAAM,sBAAsB,GAAkB,kBAAkB,CAAC,WAAW,CAAC;kCACzE,aAAa,CAAC,SAAS;AACzB,kCAAE,aAAa,CAAC,OAAO,CAAC;4BAE1B,oBAAoB,CAClB,KAAK,EACL,UAAU,EACV,WAAW,EACX,SAAS,EACT,qBAAqB,EACrB,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,IAAI,EACJ,SAAS,EACT,MAAM,CACP,CAAC;AACH,yBAAA;AACF,qBAAA;AAAM,yBAAA;AACL,wBAAA,MAAM,iBAAiB,GACrB,kBAAkB,GAAG,mBAAmB,CAAC,KAAK,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;wBAElF,IACE,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI;4BACvD,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EACxD;4BACA,eAAe,IAAI,UAAU,CAAC,GAAG,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAC3D,yBAAA;AAAM,6BAAA,IAAI,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,CACpE;AAAM,6BAAA,IAAI,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AAClE,4BAAA,eAAe,IAAI,UAAU,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AACvD,yBAAA;AAAM,6BAAA,IAAI,SAAS,IAAI,OAAO,CAAC,SAAS,EAAE,CAE1C;AAAM,6BAAA,IAAI,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;AACtC,4BAAA,eAAe,IAAI,iBAAiB,GAAG,CAAC,CAAC;AAC1C,yBAAA;AAAM,6BAAA;4BACL,eAAe,IAAI,iBAAiB,CAAC;AACtC,yBAAA;AACF,qBAAA;AAED,oBAAA,KAAK,CAAC,iBAAiB,CACrB,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAW,CAAC;wBAClD,iBAAiB;AACjB,wBAAA,eAAe,EACjB,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,iBAAA;AACF,aAAA;AACF,SAAA;AAED,QAAA,iBAAiB,IAAI,wBAAwB,CAAC,QAAQ,CAAC;QACvD,cAAc,GAAG,UAAU,CAAC,cAAc,EAAE,wBAAwB,CAAC,OAAO,CAAC,CAAC;AAC/E,KAAA;AACD,IAAA,IACE,aAAa;SACZ,SAAS,GAAG,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC3C,QAAA,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,EAC3C;AACA,QAAA,MAAM,wBAAwB,GAAW,sBAAsB,GAAG,iBAAiB,CAAC;QAEpF,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,WAAW,GAAW,4BAA4B,CAAC;AAEvD,QAAA,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC,YAAY;YACpC,KAAK,OAAO,CAAC,OAAO;gBAClB,WAAW,IAAI,wBAAwB,CAAC;gBACxC,MAAM;YACR,KAAK,OAAO,CAAC,MAAM;AACjB,gBAAA,WAAW,IAAI,wBAAwB,GAAG,CAAC,CAAC;gBAC5C,MAAM;YACR,KAAK,OAAO,CAAC,OAAO;gBAClB,IAAI,sBAAsB,GAAG,iBAAiB,EAAE;AAC9C,oBAAA,YAAY,GAAG,wBAAwB,GAAG,SAAS,CAAC;AACrD,iBAAA;gBACD,MAAM;YACR,KAAK,OAAO,CAAC,WAAW;gBACtB,IAAI,sBAAsB,GAAG,iBAAiB,EAAE;oBAC9C,WAAW,IAAI,wBAAwB,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;oBAC1D,IAAI,SAAS,GAAG,CAAC,EAAE;AACjB,wBAAA,YAAY,GAAG,wBAAwB,GAAG,SAAS,CAAC;AACrD,qBAAA;AACF,iBAAA;AAAM,qBAAA;AACL,oBAAA,WAAW,IAAI,wBAAwB,GAAG,CAAC,CAAC;AAC7C,iBAAA;gBACD,MAAM;YACR,KAAK,OAAO,CAAC,YAAY;AACvB,gBAAA,IAAI,sBAAsB,GAAG,iBAAiB,IAAI,SAAS,GAAG,CAAC,EAAE;oBAC/D,YAAY,GAAG,wBAAwB,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;AAC3D,iBAAA;gBACD,MAAM;YACR,KAAK,OAAO,CAAC,IAAI,CAAC;YAClB,KAAK,OAAO,CAAC,SAAS,CAAC;YACvB,KAAK,OAAO,CAAC,QAAQ;gBACnB,MAAM;AACP,SAAA;QAED,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,UAAU,GAAW,QAAQ,CAAC;AACpC,YAAA,IAAI,EAAU,CAAC;YACf,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,uBAAuB,GAAG,CAAC,CAAC;YAChC,IAAI,wBAAwB,GAAG,CAAC,CAAC;YAEjC,KAAK,EAAE,GAAG,UAAU,EAAE,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE,EAAE;gBAC3C,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACxC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;oBAC9C,SAAS;AACV,iBAAA;gBACD,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;AAC5D,oBAAA,IAAI,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;wBAC7B,MAAM;AACP,qBAAA;AACD,oBAAA,IAAI,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;AAC9C,wBAAA,UAAU,GAAG,UAAU,CACrB,UAAU,EACV,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;4BAClD,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,CAChF,CAAC;AACH,qBAAA;oBACD,IAAI,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;AACpD,wBAAA,MAAM,MAAM,GACV,UAAU,CAAC,KAAK,CAAC;AACjB,4BAAA,qBAAqB,CACnB,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,mBAAmB,CAAC,CACpE,CAAC;AACJ,wBAAA,MAAM,OAAO,GACX,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC;4BACxD,qBAAqB,CACnB,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,mBAAmB,CAAC,CACpE;AACD,4BAAA,MAAM,CAAC;AACT,wBAAA,uBAAuB,GAAG,UAAU,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;AACtE,wBAAA,wBAAwB,GAAG,UAAU,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;wBACzE,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,uBAAuB,GAAG,wBAAwB,CAAC,CAAC;AACzF,qBAAA;AACF,iBAAA;AACF,aAAA;YACD,QAAQ,GAAG,EAAE,CAAC;YACd,UAAU,IAAI,YAAY,CAAC;AAE3B,YAAA,IAAI,aAAa,EAAE;gBACjB,KAAK,EAAE,GAAG,UAAU,EAAE,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE,EAAE;oBACzC,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACxC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;wBAC9C,SAAS;AACV,qBAAA;oBACD,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;AAC5D,wBAAA,QAAQ,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC;AACpC,4BAAA,KAAK,OAAO,CAAC,SAAS,EAAE;gCACtB,KAAK,CAAC,iBAAiB,CACrB,WAAW;AACP,oCAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,EACjF,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;gCACF,MAAM;AACP,6BAAA;AACD,4BAAA,KAAK,OAAO,CAAC,OAAO,EAAE;gCACpB,KAAK,CAAC,iBAAiB,CACrB,WAAW;oCACP,UAAU;oCACV,qBAAqB,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;AAC9E,oCAAA,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EACxD,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;gCACF,MAAM;AACP,6BAAA;AACD,4BAAA,KAAK,OAAO,CAAC,MAAM,EAAE;AACnB,gCAAA,MAAM,WAAW,GAAW,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;AAEjF,gCAAA,KAAK,CAAC,iBAAiB,CACrB,WAAW,GAAG,CAAC,UAAU,GAAG,WAAW,IAAI,CAAC,EAC5C,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;gCACF,MAAM;AACP,6BAAA;AACD,4BAAA,KAAK,OAAO,CAAC,OAAO,EAAE;gCACpB,KAAK,CAAC,iBAAiB,CACrB,WAAW;AACP,oCAAA,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,EACjF,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;gCAEF,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,SAAS,EAAE,sBAAsB,CAAC,EAAE;oCACtE,MAAM,UAAU,GAAW,aAAa;0CACpC,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC;4CACrD,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;0CAC9E,UAAU,CAAC;oCAEf,MAAM,WAAW,GAAW,CAAC,aAAa;0CACtC,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC;4CACtD,qBAAqB,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;0CAC/E,UAAU,CAAC;AAEf,oCAAA,IACE,EACE,aAAa,CACX,UAAU,EACV,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CACxD;AACC,wCAAA,aAAa,CACX,WAAW,EACX,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CACzD,CACJ,EACD;wCACA,oBAAoB,CAClB,KAAK,EACL,UAAU,EACV,WAAW,EACX,SAAS,EACT,aAAa,CAAC,OAAO,EACrB,aAAa,CAAC,OAAO,EACrB,mBAAmB,EACnB,oBAAoB,EACpB,IAAI,EACJ,mBAAmB,EACnB,MAAM,CACP,CAAC;AACH,qCAAA;AACF,iCAAA;gCACD,MAAM;AACP,6BAAA;AACD,4BAAA,KAAK,OAAO,CAAC,QAAQ,EAAE;gCACrB,KAAK,CAAC,iBAAiB,CACrB,WAAW;oCACP,uBAAuB;oCACvB,UAAU,CAAC,KAAK,CAAC;AACjB,oCAAA,qBAAqB,CACnB,KAAK,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,EAAE,sBAAsB,CAAC,CACzE,EACL,MAAM,CAAC,GAAG,CACX,CAAC;gCAEF,MAAM;AACP,6BAAA;4BACD,KAAK,OAAO,CAAC,IAAI,CAAC;4BAClB,KAAK,OAAO,CAAC,YAAY,CAAC;4BAC1B,KAAK,OAAO,CAAC,WAAW;gCACtB,MAAM;AACP,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;YAED,WAAW,IAAI,UAAU,CAAC;AAC3B,SAAA;AACF,KAAA;IAED,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,GAAG,EACnB,cAAc,GAAG,aAAa,EAC9B,UAAU,EACV,UAAU,CACX,EACD,WAAW,CAAC,KAAK,CAClB,CAAC;IAEF,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,eAAe,CAAC,MAAM,EACtB,eAAe,GAAG,gBAAgB,EAClC,WAAW,EACX,UAAU,CACX,EACD,WAAW,CAAC,MAAM,CACnB,CAAC;AAEF,IAAA,IACE,kBAAkB,IAAI,aAAa,CAAC,SAAS;AAC7C,SAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,IAAI,kBAAkB,IAAI,aAAa,CAAC,MAAM,CAAC,EAC7F;QACA,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,iBAAiB,EAAE,UAAU,CAAC,EAC9E,GAAG,CAAC,QAAQ,CAAC,CACd,CAAC;AACH,KAAA;AAAM,SAAA,IACL,kBAAkB,IAAI,aAAa,CAAC,MAAM;QAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,EAC7C;AACA,QAAA,IAAI,CAAC,0BAA0B,CAC7B,UAAU,CACR,UAAU,CACR,qBAAqB,GAAG,wBAAwB,EAChD,qBAAqB,CACnB,8BAA8B,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAClF,CACF,EACD,wBAAwB,CACzB,EACD,GAAG,CAAC,QAAQ,CAAC,CACd,CAAC;AACH,KAAA;AAED,IAAA,IACE,mBAAmB,IAAI,aAAa,CAAC,SAAS;AAC9C,SAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,IAAI,mBAAmB,IAAI,aAAa,CAAC,MAAM,CAAC,EAC9F;QACA,IAAI,CAAC,0BAA0B,CAC7B,eAAe,CACb,IAAI,EACJ,SAAS,EACT,iBAAiB,GAAG,yBAAyB,EAC7C,kBAAkB,EAClB,UAAU,CACX,EACD,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,KAAA;AAAM,SAAA,IACL,mBAAmB,IAAI,aAAa,CAAC,MAAM;QAC3C,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,MAAM,EAC7C;AACA,QAAA,IAAI,CAAC,0BAA0B,CAC7B,UAAU,CACR,UAAU,CACR,sBAAsB,GAAG,yBAAyB,EAClD,qBAAqB,CACnB,8BAA8B,CAC5B,IAAI,EACJ,SAAS,EACT,iBAAiB,GAAG,yBAAyB,EAC7C,kBAAkB,CACnB,CACF,CACF,EACD,yBAAyB,CAC1B,EACD,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,KAAA;AAED,IAAA,IAAI,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,IAAI,MAAM,CAAC,WAAW,EAAE;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,KAAK,GAAW,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC9C,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;AAC5D,gBAAA,KAAK,CAAC,iBAAiB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBACjD,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAW,CAAC;AACpD,oBAAA,KAAK,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EACtD,GAAG,CAAC,SAAS,CAAC,CACf,CAAC;AACH,aAAA;AACF,SAAA;AACF,KAAA;AAED,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,MAAM,QAAQ,GAAkB,IAAI,CAAC,WAAW,EAAE,CAAC;AACnD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACxC,YAAA,MAAM,KAAK,GAAW,QAAQ,CAAC,CAAC,CAAC,CAAC;YAElC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,YAAY,IAAI,cAAc,CAAC,QAAQ,EAAE;gBAC5D,SAAS;AACV,aAAA;YAED,yBAAyB,CACvB,IAAI,EACJ,KAAK,EACL,mBAAmB,EACnB,aAAa,GAAG,kBAAkB,GAAG,mBAAmB,EACxD,oBAAoB,EACpB,SAAS,EACT,MAAM,CACP,CAAC;AACH,SAAA;AAED,QAAA,MAAM,oBAAoB,GACxB,QAAQ,IAAI,eAAe,CAAC,UAAU,IAAI,QAAQ,IAAI,eAAe,CAAC,aAAa,CAAC;AACtF,QAAA,MAAM,qBAAqB,GACzB,SAAS,IAAI,eAAe,CAAC,UAAU,IAAI,SAAS,IAAI,eAAe,CAAC,aAAa,CAAC;QAExF,IAAI,oBAAoB,IAAI,qBAAqB,EAAE;YACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;gBACnC,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE;oBAC9C,SAAS;AACV,iBAAA;AAED,gBAAA,IAAI,oBAAoB,EAAE;AACxB,oBAAA,8BAA8B,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AACvD,iBAAA;AAED,gBAAA,IAAI,qBAAqB,EAAE;AACzB,oBAAA,8BAA8B,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AACxD,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AACH,CAAC;SA4Be,iDAAiD,CAC/D,QAAuB,EACvB,IAAY,EACZ,gBAAwB,EAAA;AAExB,IAAA,OAAO,QAAQ,IAAI,aAAa,CAAC,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACpF,CAAC;AAEK,SAAU,6CAA6C,CAC3D,QAAuB,EACvB,IAAY,EACZ,YAA2B,EAC3B,gBAAwB,EAAA;AAExB,IAAA,QACE,QAAQ,IAAI,aAAa,CAAC,MAAM;QAChC,YAAY,IAAI,aAAa,CAAC,SAAS;AACvC,SAAC,IAAI,IAAI,gBAAgB,IAAI,aAAa,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,EACnE;AACJ,CAAC;AAEK,SAAU,kDAAkD,CAChE,QAAuB,EACvB,IAAY,EACZ,YAA2B,EAC3B,QAAgB,EAChB,gBAAwB,EAAA;AAExB,IAAA,QACE,YAAY,IAAI,aAAa,CAAC,MAAM;QACpC,QAAQ,IAAI,aAAa,CAAC,MAAM;QAChC,CAAC,kBAAkB,CAAC,QAAQ,CAAC;QAC7B,CAAC,kBAAkB,CAAC,IAAI,CAAC;QACzB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;AACrC,QAAA,QAAQ,GAAG,IAAI;AACf,SAAC,gBAAgB,IAAI,IAAI,IAAI,aAAa,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,EACnE;AACJ,CAAC;AAEK,SAAU,uBAAuB,CACrC,KAAa,EACb,gBAAwB,EACxB,SAAkB,EAClB,UAAmB,EAAA;AAEnB,IAAA,IAAI,WAAW,GAAW,KAAK,GAAG,gBAAgB,CAAC;AACnD,IAAA,MAAM,QAAQ,GAAW,WAAW,GAAG,GAAG,CAAC;AAE3C,IAAA,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AAC9B,QAAA,WAAW,GAAG,WAAW,GAAG,QAAQ,CAAC;AACtC,KAAA;AAAM,SAAA,IAAI,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;AACvC,QAAA,WAAW,GAAG,WAAW,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC5C,KAAA;AAAM,SAAA,IAAI,SAAS,EAAE;AACpB,QAAA,WAAW,GAAG,WAAW,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC5C,KAAA;AAAM,SAAA,IAAI,UAAU,EAAE;AACrB,QAAA,WAAW,GAAG,WAAW,GAAG,QAAQ,CAAC;AACtC,KAAA;AAAM,SAAA;QACL,WAAW;YACT,WAAW;gBACX,QAAQ;AACR,iBAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,QAAQ,GAAG,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAChF,sBAAE,GAAG;sBACH,GAAG,CAAC,CAAC;AACZ,KAAA;IAED,OAAO,kBAAkB,CAAC,WAAW,CAAC,IAAI,kBAAkB,CAAC,gBAAgB,CAAC;AAC5E,UAAE,WAAW;AACb,UAAE,WAAW,GAAG,gBAAgB,CAAC;AACrC,CAAC;AAEK,SAAU,6BAA6B,CAC3C,SAAwB,EACxB,KAAa,EACb,UAAyB,EACzB,MAAc,EACd,aAA4B,EAC5B,SAAiB,EACjB,cAA6B,EAC7B,UAAkB,EAClB,iBAAyB,EACzB,kBAA0B,EAC1B,SAAiB,EACjB,YAAoB,EACpB,MAAgB,EAAA;IAEhB,IACE,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,kBAAkB,GAAG,CAAC;SACjE,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,GAAG,CAAC,CAAC,EACjE;AACA,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;IAED,MAAM,oBAAoB,GAAY,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAC;IACrF,MAAM,cAAc,GAAW,oBAAoB;AACjD,UAAE,uBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC,gBAAgB,EAAE,KAAK,EAAE,KAAK,CAAC;UACrE,KAAK,CAAC;IACV,MAAM,eAAe,GAAW,oBAAoB;AAClD,UAAE,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,KAAK,EAAE,KAAK,CAAC;UACtE,MAAM,CAAC;IACX,MAAM,kBAAkB,GAAW,oBAAoB;AACrD,UAAE,uBAAuB,CAAC,SAAS,EAAE,MAAM,CAAC,gBAAgB,EAAE,KAAK,EAAE,KAAK,CAAC;UACzE,SAAS,CAAC;IACd,MAAM,mBAAmB,GAAW,oBAAoB;AACtD,UAAE,uBAAuB,CAAC,UAAU,EAAE,MAAM,CAAC,gBAAgB,EAAE,KAAK,EAAE,KAAK,CAAC;UAC1E,UAAU,CAAC;AAEf,IAAA,MAAM,gBAAgB,GACpB,aAAa,IAAI,SAAS,IAAI,aAAa,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;AAClF,IAAA,MAAM,iBAAiB,GACrB,cAAc,IAAI,UAAU,IAAI,aAAa,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;IAEtF,MAAM,iBAAiB,GACrB,gBAAgB;QAChB,iDAAiD,CAC/C,SAAS,EACT,KAAK,GAAG,SAAS,EACjB,iBAAiB,CAClB;QACD,6CAA6C,CAC3C,SAAS,EACT,KAAK,GAAG,SAAS,EACjB,aAAa,EACb,iBAAiB,CAClB;AACD,QAAA,kDAAkD,CAChD,SAAS,EACT,KAAK,GAAG,SAAS,EACjB,aAAa,EACb,SAAS,EACT,iBAAiB,CAClB,CAAC;IAEJ,MAAM,kBAAkB,GACtB,iBAAiB;QACjB,iDAAiD,CAC/C,UAAU,EACV,MAAM,GAAG,YAAY,EACrB,kBAAkB,CACnB;QACD,6CAA6C,CAC3C,UAAU,EACV,MAAM,GAAG,YAAY,EACrB,cAAc,EACd,kBAAkB,CACnB;AACD,QAAA,kDAAkD,CAChD,UAAU,EACV,MAAM,GAAG,YAAY,EACrB,cAAc,EACd,UAAU,EACV,kBAAkB,CACnB,CAAC;IAEJ,OAAO,iBAAiB,IAAI,kBAAkB,CAAC;AACjD,CAAC;AAEK,SAAU,oBAAoB,CAClC,IAAY,EACZ,cAAsB,EACtB,eAAuB,EACvB,cAA2B,EAC3B,gBAA+B,EAC/B,iBAAgC,EAChC,UAAkB,EAClB,WAAmB,EACnB,aAAsB,EACtB,MAAc,EACd,MAAgB,EAAA;AAEhB,IAAA,MAAM,MAAM,GAAa,IAAI,CAAC,SAAS,EAAE,CAAC;AAI1C,IAAA,MAAM,eAAe,GACnB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,MAAM,CAAC,eAAe,IAAI,uBAAuB;AACpE,QAAA,MAAM,CAAC,kBAAkB,IAAI,cAAc,CAAC;AAE9C,IAAA,IAAI,eAAe,EAAE;AACnB,QAAA,MAAM,CAAC,2BAA2B,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,YAAY,CAAC,gBAAgB,GAAG,kBAAkB,GAAG,CAAC,CAAC;QAC9D,MAAM,CAAC,YAAY,CAAC,iBAAiB,GAAG,kBAAkB,GAAG,CAAC,CAAC;AAC/D,QAAA,MAAM,CAAC,YAAY,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;AACvC,QAAA,MAAM,CAAC,YAAY,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;AACzC,KAAA;IAED,IAAI,aAAa,GAAwB,IAAI,CAAC;AAE9C,IAAA,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,EAAE;AAC7B,QAAA,MAAM,aAAa,GAAW,qBAAqB,CACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACvD,CAAC;AACF,QAAA,MAAM,gBAAgB,GAAW,qBAAqB,CACpD,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC1D,CAAC;QAEF,IACE,6BAA6B,CAC3B,gBAAgB,EAChB,cAAc,EACd,iBAAiB,EACjB,eAAe,EACf,MAAM,CAAC,YAAY,CAAC,gBAAgB,EACpC,MAAM,CAAC,YAAY,CAAC,cAAc,EAClC,MAAM,CAAC,YAAY,CAAC,iBAAiB,EACrC,MAAM,CAAC,YAAY,CAAC,eAAe,EACnC,MAAM,CAAC,YAAY,CAAC,aAAa,EACjC,MAAM,CAAC,YAAY,CAAC,cAAc,EAClC,aAAa,EACb,gBAAgB,EAChB,MAAM,CACP,EACD;AACA,YAAA,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;AACrC,SAAA;AAAM,aAAA;AACL,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,2BAA2B,EAAE,CAAC,EAAE,EAAE;AAC3D,gBAAA,IACE,6BAA6B,CAC3B,gBAAgB,EAChB,cAAc,EACd,iBAAiB,EACjB,eAAe,EACf,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,gBAAgB,EAC7C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,EAC3C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAC9C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,eAAe,EAC5C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,aAAa,EAC1C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,EAC3C,aAAa,EACb,gBAAgB,EAChB,MAAM,CACP,EACD;AACA,oBAAA,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;oBAC7C,MAAM;AACP,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AAAM,SAAA,IAAI,aAAa,EAAE;QACxB,IACE,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,EAAE,cAAc,CAAC;YACjE,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,eAAe,EAAE,eAAe,CAAC;AACnE,YAAA,MAAM,CAAC,YAAY,CAAC,gBAAgB,IAAI,gBAAgB;AACxD,YAAA,MAAM,CAAC,YAAY,CAAC,iBAAiB,IAAI,iBAAiB,EAC1D;AACA,YAAA,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;AACrC,SAAA;AACF,KAAA;AAAM,SAAA;AACL,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,2BAA2B,EAAE,CAAC,EAAE,EAAE;AAC3D,YAAA,IACE,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC;gBAC1E,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,eAAe,CAAC;gBAC5E,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,gBAAgB,IAAI,gBAAgB;gBACjE,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,iBAAiB,IAAI,iBAAiB,EACnE;AACA,gBAAA,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM;AACP,aAAA;AACF,SAAA;AACF,KAAA;AAED,IAAA,IAAI,CAAC,eAAe,IAAI,aAAa,IAAI,IAAI,EAAE;QAC7C,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,aAAa,CAAC;QAC3E,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC;AAoB9E,KAAA;AAAM,SAAA;QAyBL,gBAAgB,CACd,IAAI,EACJ,cAAc,EACd,eAAe,EACf,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,EACX,aAAa,EACb,MAAM,CACP,CAAC;AA0BF,QAAA,MAAM,CAAC,kBAAkB,GAAG,cAAc,CAAC;QAE3C,IAAI,aAAa,IAAI,IAAI,EAAE;AACzB,YAAA,IAAI,MAAM,CAAC,2BAA2B,IAAI,0BAA0B,EAAE;AAIpE,gBAAA,MAAM,CAAC,2BAA2B,GAAG,CAAC,CAAC;AACxC,aAAA;AAED,YAAA,IAAI,aAAkC,CAAC;AACvC,YAAA,IAAI,aAAa,EAAE;AACjB,gBAAA,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;AACrC,aAAA;AAAM,iBAAA;gBACL,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC;gBAC9E,MAAM,CAAC,2BAA2B,EAAE,CAAC;AACtC,aAAA;AAED,YAAA,aAAa,CAAC,cAAc,GAAG,cAAc,CAAC;AAC9C,YAAA,aAAa,CAAC,eAAe,GAAG,eAAe,CAAC;AAChD,YAAA,aAAa,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AAClD,YAAA,aAAa,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;YACpD,aAAa,CAAC,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC3E,aAAa,CAAC,cAAc,GAAG,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC9E,SAAA;AACF,KAAA;AAED,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,IAAI,CAAC,kBAAkB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,EACtD,WAAW,CAAC,KAAK,CAClB,CAAC;AACF,QAAA,IAAI,CAAC,kBAAkB,CACrB,IAAI,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,EACvD,WAAW,CAAC,MAAM,CACnB,CAAC;AAEF,QAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC3B,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACtB,KAAA;AAGD,IAAA,MAAM,CAAC,eAAe,GAAG,uBAAuB,CAAC;AACjD,IAAA,OAAO,eAAe,IAAI,aAAa,IAAI,IAAI,CAAC;AAClD,CAAC;AAEe,SAAA,2BAA2B,CAAC,MAAgB,EAAE,aAAqB,EAAA;IACjF,kBAAkB,CAAC,MAAM,EAAE,aAAa,IAAI,GAAG,EAAE,2CAA2C,CAAC,CAAC;IAC9F,IAAI,aAAa,IAAI,GAAG,EAAE;AACxB,QAAA,MAAM,CAAC,gBAAgB,GAAG,GAAG,CAAC;AAC/B,KAAA;AAAM,SAAA;AACL,QAAA,MAAM,CAAC,gBAAgB,GAAG,aAAa,CAAC;AACzC,KAAA;AACH,CAAC;AAED,SAAS,KAAK,CAAC,CAAS,EAAE,CAAS,EAAA;IACjC,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAEK,SAAU,kBAAkB,CAChC,IAAY,EACZ,gBAAwB,EACxB,YAAoB,EACpB,WAAmB,EAAA;IAEnB,IAAI,gBAAgB,IAAI,GAAG,EAAE;QAC3B,OAAO;AACR,KAAA;AAED,IAAA,MAAM,QAAQ,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChE,IAAA,MAAM,OAAO,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAE9D,IAAA,MAAM,SAAS,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACzE,IAAA,MAAM,UAAU,GAAW,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAE3E,IAAA,MAAM,gBAAgB,GAAW,YAAY,GAAG,QAAQ,CAAC;AACzD,IAAA,MAAM,eAAe,GAAW,WAAW,GAAG,OAAO,CAAC;AAEtD,IAAA,MAAM,iBAAiB,GAAW,gBAAgB,GAAG,SAAS,CAAC;AAC/D,IAAA,MAAM,kBAAkB,GAAW,eAAe,GAAG,UAAU,CAAC;IAEhE,MAAM,YAAY,GAAY,IAAI,CAAC,WAAW,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC;AAEpE,IAAA,IAAI,CAAC,iBAAiB,CACpB,uBAAuB,CAAC,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,YAAY,CAAC,EACxE,MAAM,CAAC,IAAI,CACZ,CAAC;AAEF,IAAA,IAAI,CAAC,iBAAiB,CACpB,uBAAuB,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,YAAY,CAAC,EACvE,MAAM,CAAC,GAAG,CACX,CAAC;AAEF,IAAA,MAAM,kBAAkB,GACtB,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,gBAAgB,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;AAC3D,QAAA,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,gBAAgB,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAChE,IAAA,MAAM,mBAAmB,GACvB,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,gBAAgB,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;AAC5D,QAAA,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,gBAAgB,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAEjE,IAAA,IAAI,CAAC,kBAAkB,CACrB,uBAAuB,CACrB,iBAAiB,EACjB,gBAAgB,EAChB,YAAY,IAAI,kBAAkB,EAClC,YAAY,IAAI,CAAC,kBAAkB,CACpC,GAAG,uBAAuB,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,KAAK,EAAE,YAAY,CAAC,EACpF,WAAW,CAAC,KAAK,CAClB,CAAC;AAEF,IAAA,IAAI,CAAC,kBAAkB,CACrB,uBAAuB,CACrB,kBAAkB,EAClB,gBAAgB,EAChB,YAAY,IAAI,mBAAmB,EACnC,YAAY,IAAI,CAAC,mBAAmB,CACrC,GAAG,uBAAuB,CAAC,eAAe,EAAE,gBAAgB,EAAE,KAAK,EAAE,YAAY,CAAC,EACnF,WAAW,CAAC,MAAM,CACnB,CAAC;AAEF,IAAA,MAAM,UAAU,GAAW,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;AACnC,QAAA,kBAAkB,CAChB,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,EACvB,gBAAgB,EAChB,gBAAgB,EAChB,eAAe,CAChB,CAAC;AACH,KAAA;AACH,CAAC;AAEK,SAAU,qBAAqB,CACnC,IAAY,EACZ,UAAkB,EAClB,WAAmB,EACnB,cAA2B,EAAA;AAE3B,IAAA,uBAAuB,EAAE,CAAC;IAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAExB,IAAI,KAAK,GAAW,WAAW,CAAC;AAChC,IAAA,IAAI,gBAAgB,GAAkB,aAAa,CAAC,SAAS,CAAC;IAE9D,IAAI,uBAAuB,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE;AAClE,QAAA,KAAK,GAAG,qBAAqB,CAC3B,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,CACjF,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,CACvD,CACF,CAAC;AACF,QAAA,gBAAgB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC1C,KAAA;SAAM,IACL,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC,WAAW,EAAE,EAC3F;QACA,KAAK,GAAG,qBAAqB,CAC3B,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAC7E,CAAC;AACF,QAAA,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC;AACzC,KAAA;AAAM,SAAA;QACL,KAAK,GAAG,UAAU,CAAC;AACnB,QAAA,gBAAgB,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,OAAO,CAAC;AAChG,KAAA;IAED,IAAI,MAAM,GAAW,WAAW,CAAC;AACjC,IAAA,IAAI,iBAAiB,GAAkB,aAAa,CAAC,SAAS,CAAC;IAC/D,IAAI,uBAAuB,CAAC,IAAI,EAAE,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,EAAE;AACtE,QAAA,MAAM,GAAG,qBAAqB,CAC5B,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,CACrF,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAC1D,CACF,CAAC;AACF,QAAA,iBAAiB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC3C,KAAA;SAAM,IACL,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC,WAAW,EAAE,EAC7F;QACA,MAAM,GAAG,qBAAqB,CAC5B,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAC/E,CAAC;AACF,QAAA,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAAC;AAC1C,KAAA;AAAM,SAAA;QACL,MAAM,GAAG,WAAW,CAAC;AACrB,QAAA,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,CAAC;cAC1C,aAAa,CAAC,SAAS;AACzB,cAAE,aAAa,CAAC,OAAO,CAAC;AAC3B,KAAA;IACD,IACE,oBAAoB,CAClB,IAAI,EACJ,KAAK,EACL,MAAM,EACN,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,EACX,IAAI,EACJ,SAAS,EACT,IAAI,CAAC,SAAS,EAAE,CACjB,EACD;AACA,QAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AAClF,QAAA,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAKvE,KAAA;IAED,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,6CAA6C,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;AAC7F,QAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC7B,QAAA,MAAM,YAAY,GAAW,eAAe,CAAC,IAAI,CAAC,CAAC;QACnD,YAAY,CAAC,gBAAgB,EAAE,CAAC;QAEhC,YAAY,CAAC,8BAA8B,EAAE,CAAC;AAC9C,QAAA,uBAAuB,EAAE,CAAC;AAE1B,QAAA,YAAY,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;QACjD,IACE,oBAAoB,CAClB,YAAY,EACZ,KAAK,EACL,MAAM,EACN,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,UAAU,EACV,WAAW,EACX,IAAI,EACJ,SAAS,EACT,YAAY,CAAC,SAAS,EAAE,CACzB,EACD;AACA,YAAA,YAAY,CAAC,WAAW,CACtB,YAAY,CAAC,SAAS,EAAE,CAAC,SAAS,EAClC,UAAU,EACV,WAAW,EACX,UAAU,CACX,CAAC;AACF,YAAA,kBAAkB,CAAC,YAAY,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAEtF,IAAI,CAAC,oCAAoC,CAAC,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;AAQxF,SAAA;QAED,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACpC,mBAAmB,CAAC,YAAY,CAAC,CAAC;AACnC,KAAA;AACH,CAAC;AAiBe,SAAA,MAAM,CACpB,MAAgB,EAChB,IAAY,EACZ,KAAiB,EACjB,MAAc,EACd,GAAG,IAAW,EAAA;AAEd,IAAA,MAAM,SAAS,GAAa,MAAM,IAAI,IAAI,GAAG,MAAM,GAAG,kBAAkB,EAAE,CAAC;AAC3E,IAAA,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AAEvD,IAAA,IAAI,KAAK,IAAI,UAAU,CAAC,KAAK,EAAE;AAC7B,QAAA,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;AAC/B,KAAA;AACH,CAAC;AAEK,SAAU,eAAe,CAC7B,MAAgB,EAChB,KAAiB,EACjB,MAAc,EACd,GAAG,IAAW,EAAA;IAEd,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AAC5C,CAAC;AAEK,SAAU,KAAK,CAAC,IAAY,EAAE,KAAiB,EAAE,MAAc,EAAE,GAAG,IAAW,EAAA;IACnF,MAAM,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AAC5E,CAAC;SASe,gBAAgB,CAAC,IAAY,EAAE,SAAkB,EAAE,OAAe,EAAA;IAChF,IAAI,CAAC,SAAS,EAAE;QACd,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAGhD,KAAA;AACH,CAAC;SAEe,kBAAkB,CAAC,MAAgB,EAAE,SAAkB,EAAE,OAAe,EAAA;IACtF,IAAI,CAAC,SAAS,EAAE;QACd,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAG5D,KAAA;AACH,CAAC;SAEe,qCAAqC,CACnD,MAAgB,EAChB,OAA8B,EAC9B,OAAgB,EAAA;AAEhB,IAAA,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AACjD,CAAC;AAEe,SAAA,oCAAoC,CAClD,MAAgB,EAChB,OAA8B,EAAA;AAE9B,IAAA,OAAO,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAC9C;;;;"}