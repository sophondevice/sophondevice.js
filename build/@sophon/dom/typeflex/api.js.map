{"version":3,"file":"api.js","sources":["../../../../libs/dom/src/typeflex/api.ts"],"sourcesContent":["import {\r\n  YGAlign,\r\n  YGDimension,\r\n  YGDirection,\r\n  YGDisplay,\r\n  YGEdge,\r\n  YGExperimentalFeature,\r\n  YGFlexDirection,\r\n  YGJustify,\r\n  YGLogLevel,\r\n  YGMeasureMode,\r\n  YGNodeType,\r\n  YGOverflow,\r\n  YGPositionType,\r\n  YGUnit,\r\n  YGWrap,\r\n} from './enums';\r\n\r\nimport {\r\n  YGNodeCalculateLayout,\r\n  YGNodeCopyStyle,\r\n  YGNodeFree,\r\n  YGNodeFreeRecursive,\r\n  YGNodeStyleGetAlignContent,\r\n  YGNodeStyleGetAlignItems,\r\n  YGNodeStyleGetAlignSelf,\r\n  YGNodeStyleGetAspectRatio,\r\n  YGNodeStyleGetBorder,\r\n  YGNodeGetChild,\r\n  YGNodeGetChildCount,\r\n  YGNodeLayoutGetBorder,\r\n  YGNodeLayoutGetBottom,\r\n  YGNodeLayoutGetHeight,\r\n  YGNodeLayoutGetLeft,\r\n  YGNodeLayoutGetRight,\r\n  YGNodeLayoutGetTop,\r\n  YGNodeLayoutGetWidth,\r\n  YGNodeLayoutGetMargin,\r\n  YGNodeLayoutGetPadding,\r\n  YGNodeStyleGetDisplay,\r\n  YGNodeStyleGetFlexBasis,\r\n  YGNodeStyleGetFlexDirection,\r\n  YGNodeStyleGetFlexGrow,\r\n  YGNodeStyleGetFlexShrink,\r\n  YGNodeStyleGetFlexWrap,\r\n  YGNodeStyleGetHeight,\r\n  YGNodeStyleGetJustifyContent,\r\n  YGNodeStyleGetMargin,\r\n  YGNodeStyleGetMaxHeight,\r\n  YGNodeStyleGetMaxWidth,\r\n  YGNodeStyleGetMinHeight,\r\n  YGNodeStyleGetMinWidth,\r\n  YGNodeStyleGetOverflow,\r\n  YGNodeStyleGetPadding,\r\n  YGNodeGetParent,\r\n  YGNodeStyleGetPositionType,\r\n  YGNodeStyleGetWidth,\r\n  YGNodeInsertChild,\r\n  YGNodeIsDirty,\r\n  YGNodeMarkDirty,\r\n  YGNodeRemoveChild,\r\n  YGNodeReset,\r\n  YGNodeStyleSetAlignContent,\r\n  YGNodeStyleSetAlignItems,\r\n  YGNodeStyleSetAlignSelf,\r\n  YGNodeStyleSetAspectRatio,\r\n  YGNodeStyleSetBorder,\r\n  YGNodeStyleSetDisplay,\r\n  YGNodeStyleSetFlex,\r\n  YGNodeStyleSetFlexBasis,\r\n  YGNodeStyleSetFlexBasisAuto,\r\n  YGNodeStyleSetFlexBasisPercent,\r\n  YGNodeStyleSetFlexDirection,\r\n  YGNodeStyleSetFlexGrow,\r\n  YGNodeStyleSetFlexShrink,\r\n  YGNodeStyleSetFlexWrap,\r\n  YGNodeStyleSetHeight,\r\n  YGNodeStyleSetHeightAuto,\r\n  YGNodeStyleSetHeightPercent,\r\n  YGNodeStyleSetJustifyContent,\r\n  YGNodeStyleSetMargin,\r\n  YGNodeStyleSetMarginAuto,\r\n  YGNodeStyleSetMarginPercent,\r\n  YGNodeStyleSetMaxHeight,\r\n  YGNodeStyleSetMaxHeightPercent,\r\n  YGNodeStyleSetMaxWidth,\r\n  YGNodeStyleSetMaxWidthPercent,\r\n  YGNodeSetMeasureFunc,\r\n  YGNodeStyleSetMinHeight,\r\n  YGNodeStyleSetMinHeightPercent,\r\n  YGNodeStyleSetMinWidth,\r\n  YGNodeStyleSetMinWidthPercent,\r\n  YGNodeStyleSetOverflow,\r\n  YGNodeStyleSetPadding,\r\n  YGNodeStyleSetPaddingPercent,\r\n  YGNodeStyleSetPositionType,\r\n  YGNodeStyleSetPositionPercent,\r\n  YGNodeStyleSetWidth,\r\n  YGNodeStyleSetWidthAuto,\r\n  YGNodeStyleSetWidthPercent,\r\n  YGNodeGetContext,\r\n  YGNodeSetContext,\r\n  YGConfigFree,\r\n  YGConfigSetExperimentalFeatureEnabled,\r\n  YGConfigSetPointScaleFactor,\r\n  YGConfigIsExperimentalFeatureEnabled,\r\n  YGNodeStyleGetPosition,\r\n  YGConfigNew,\r\n  YGNodeNewWithConfig,\r\n  YGNodeNew,\r\n  YGNodeStyleSetPosition,\r\n  YGNodeGetInstanceCount,\r\n} from './yoga';\r\n\r\nimport {YGNode} from './ygnode';\r\nimport {YGValue} from './ygvalue';\r\nimport {YGConfig} from './ygconfig';\r\nimport {YGFloatSanitize} from './utils';\r\n\r\nexport const ALIGN_AUTO = YGAlign.Auto;\r\nexport const ALIGN_FLEX_START = YGAlign.FlexStart;\r\nexport const ALIGN_CENTER = YGAlign.Center;\r\nexport const ALIGN_FLEX_END = YGAlign.FlexEnd;\r\nexport const ALIGN_STRETCH = YGAlign.Stretch;\r\nexport const ALIGN_BASELINE = YGAlign.Baseline;\r\nexport const ALIGN_SPACE_BETWEEN = YGAlign.SpaceBetween;\r\nexport const ALIGN_SPACE_AROUND = YGAlign.SpaceAround;\r\nexport const DIMENSION_WIDTH = YGDimension.Width;\r\nexport const DIMENSION_HEIGHT = YGDimension.Height;\r\nexport const DIRECTION_INHERIT = YGDirection.Inherit;\r\nexport const DIRECTION_LTR = YGDirection.LTR;\r\nexport const DIRECTION_RTL = YGDirection.RTL;\r\nexport const DISPLAY_FLEX = YGDisplay.Flex;\r\nexport const DISPLAY_NONE = YGDisplay.None;\r\nexport const EDGE_LEFT = YGEdge.Left;\r\nexport const EDGE_TOP = YGEdge.Top;\r\nexport const EDGE_RIGHT = YGEdge.Right;\r\nexport const EDGE_BOTTOM = YGEdge.Bottom;\r\nexport const EDGE_START = YGEdge.Start;\r\nexport const EDGE_END = YGEdge.End;\r\nexport const EDGE_HORIZONTAL = YGEdge.Horizontal;\r\nexport const EDGE_VERTICAL = YGEdge.Vertical;\r\nexport const EDGE_ALL = YGEdge.All;\r\nexport const EXPERIMENTALFEATURE_WEBFLEXBASIS = YGExperimentalFeature.WebFlexBasis;\r\nexport const FLEX_DIRECTION_COLUMN = YGFlexDirection.Column;\r\nexport const FLEX_DIRECTION_COLUMN_REVERSE = YGFlexDirection.ColumnReverse;\r\nexport const FLEX_DIRECTION_ROW = YGFlexDirection.Row;\r\nexport const FLEX_DIRECTION_ROW_REVERSE = YGFlexDirection.RowReverse;\r\nexport const JUSTIFY_FLEX_START = YGJustify.FlexStart;\r\nexport const JUSTIFY_CENTER = YGJustify.Center;\r\nexport const JUSTIFY_FLEX_END = YGJustify.FlexEnd;\r\nexport const JUSTIFY_SPACE_BETWEEN = YGJustify.SpaceBetween;\r\nexport const JUSTIFY_SPACE_AROUND = YGJustify.SpaceAround;\r\nexport const JUSTIFY_SPACE_EVENLY = YGJustify.SpaceEvenly;\r\nexport const LOGLEVEL_ERROR = YGLogLevel.Error;\r\nexport const LOGLEVEL_WARN = YGLogLevel.Warn;\r\nexport const LOGLEVEL_INFO = YGLogLevel.Info;\r\nexport const LOGLEVEL_DEBUG = YGLogLevel.Debug;\r\nexport const LOGLEVEL_VERBOSE = YGLogLevel.Verbose;\r\nexport const LOGLEVEL_FATAL = YGLogLevel.Fatal;\r\nexport const MEASURE_MODE_UNDEFINED = YGMeasureMode.Undefined;\r\nexport const MEASURE_MODE_EXACTLY = YGMeasureMode.Exactly;\r\nexport const MEASURE_MODE_AT_MOST = YGMeasureMode.AtMost;\r\nexport const NODE_TYPE_DEFAULT = YGNodeType.Default;\r\nexport const NODE_TYPE_TEXT = YGNodeType.Text;\r\nexport const OVERFLOW_VISIBLE = YGOverflow.Visible;\r\nexport const OVERFLOW_HIDDEN = YGOverflow.Hidden;\r\nexport const OVERFLOW_SCROLL = YGOverflow.Scroll;\r\nexport const POSITION_TYPE_RELATIVE = YGPositionType.Relative;\r\nexport const POSITION_TYPE_ABSOLUTE = YGPositionType.Absolute;\r\nexport const UNIT_UNDEFINED = YGUnit.Undefined;\r\nexport const UNIT_POINT = YGUnit.Point;\r\nexport const UNIT_PERCENT = YGUnit.Percent;\r\nexport const UNIT_AUTO = YGUnit.Auto;\r\nexport const WRAP_NO_WRAP = YGWrap.NoWrap;\r\nexport const WRAP_WRAP = YGWrap.Wrap;\r\nexport const WRAP_WRAP_REVERSE = YGWrap.WrapReverse;\r\nexport const UNDEFINED: number = undefined;\r\n\r\nexport class Layout {\r\n  public left: number;\r\n  public right: number;\r\n  public bottom: number;\r\n  public top: number;\r\n  public width: number;\r\n  public height: number;\r\n}\r\n\r\nexport class Size {\r\n  public width: number;\r\n  public height: number;\r\n\r\n  constructor(width?: number, height?: number) {\r\n    if (width) {\r\n      this.width = width;\r\n      this.height = height;\r\n    } else {\r\n      this.width = 0;\r\n      this.height = 0;\r\n    }\r\n  }\r\n\r\n  static fromJS(obj: {width: number; height: number}) {\r\n    return new Size(obj.width, obj.height);\r\n  }\r\n}\r\n\r\nexport class Value {\r\n  public unit: number;\r\n  public value: number;\r\n\r\n  constructor(unit?: number, value?: number) {\r\n    if (unit) {\r\n      this.unit = unit;\r\n      this.value = value;\r\n    } else {\r\n      this.unit = YGUnit.Undefined;\r\n      this.value = 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport class Config {\r\n  public config: YGConfig;\r\n\r\n  static create(): Config {\r\n    return new Config();\r\n  }\r\n\r\n  constructor() {\r\n    this.config = YGConfigNew();\r\n  }\r\n\r\n  free() {\r\n    YGConfigFree(this.config);\r\n  }\r\n\r\n  setExperimentalFeatureEnabled(feature: number, enabled: boolean): void {\r\n    YGConfigSetExperimentalFeatureEnabled(this.config, feature, enabled);\r\n  }\r\n\r\n  setPointScaleFactor(pixelsInPoint: number) {\r\n    YGConfigSetPointScaleFactor(this.config, pixelsInPoint);\r\n  }\r\n\r\n  isExperimentalFeatureEnabled(feature: number) {\r\n    YGConfigIsExperimentalFeatureEnabled(this.config, feature);\r\n  }\r\n}\r\n\r\nfunction fromYGNode(node: YGNode): Node {\r\n  return YGNodeGetContext(node) as Node;\r\n}\r\n\r\nfunction fromYGValue(val: YGValue): Value {\r\n  return new Value(val.unit, val.value);\r\n}\r\n\r\nexport class Node {\r\n  public node: YGNode;\r\n\r\n  static create(config?: Config) {\r\n    if (config) {\r\n      return new Node(config);\r\n    } else {\r\n      return new Node();\r\n    }\r\n  }\r\n\r\n  static createDefault() {\r\n    return new Node(undefined);\r\n  }\r\n\r\n  static createWithConfig(config: Config) {\r\n    return new Node(config);\r\n  }\r\n\r\n  constructor(config?: Config) {\r\n    if (!config) {\r\n      this.node = YGNodeNew();\r\n    } else {\r\n      this.node = YGNodeNewWithConfig(config.config);\r\n    }\r\n\r\n    YGNodeSetContext(this.node, this);\r\n  }\r\n\r\n  calculateLayout(width?: number, height?: number, direction?: YGDirection): void {\r\n    YGNodeCalculateLayout(this.node, width, height, direction);\r\n  }\r\n\r\n  copyStyle(node: YGNode): void {\r\n    YGNodeCopyStyle(this.node, node);\r\n  }\r\n\r\n  free(): void {\r\n    YGNodeFree(this.node);\r\n  }\r\n\r\n  freeRecursive(): void {\r\n    YGNodeFreeRecursive(this.node);\r\n  }\r\n\r\n  getAlignContent(): YGAlign {\r\n    return YGNodeStyleGetAlignContent(this.node);\r\n  }\r\n\r\n  getAlignItems(): YGAlign {\r\n    return YGNodeStyleGetAlignItems(this.node);\r\n  }\r\n\r\n  getAlignSelf(): YGAlign {\r\n    return YGNodeStyleGetAlignSelf(this.node);\r\n  }\r\n\r\n  getAspectRatio(): number {\r\n    return YGNodeStyleGetAspectRatio(this.node);\r\n  }\r\n\r\n  getBorder(edge: YGEdge): number {\r\n    return YGNodeStyleGetBorder(this.node, edge);\r\n  }\r\n\r\n  getChild(index: number): Node {\r\n    return fromYGNode(YGNodeGetChild(this.node, index));\r\n  }\r\n\r\n  getChildCount(): number {\r\n    return YGNodeGetChildCount(this.node);\r\n  }\r\n\r\n  getComputedBorder(edge: YGEdge): number {\r\n    return YGNodeLayoutGetBorder(this.node, edge);\r\n  }\r\n\r\n  getComputedBottom(): number {\r\n    return YGNodeLayoutGetBottom(this.node);\r\n  }\r\n\r\n  getComputedHeight(): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetHeight(this.node));\r\n  }\r\n\r\n  getComputedLayout(): Layout {\r\n    const layout: Layout = new Layout();\r\n    layout.left = YGNodeLayoutGetLeft(this.node);\r\n    layout.right = YGNodeLayoutGetRight(this.node);\r\n    layout.top = YGNodeLayoutGetTop(this.node);\r\n    layout.bottom = YGNodeLayoutGetBottom(this.node);\r\n    layout.width = YGNodeLayoutGetWidth(this.node);\r\n    layout.height = YGNodeLayoutGetHeight(this.node);\r\n    return layout;\r\n  }\r\n\r\n  getComputedLeft(): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetLeft(this.node));\r\n  }\r\n\r\n  getComputedMargin(edge: YGEdge): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetMargin(this.node, edge));\r\n  }\r\n\r\n  getComputedPadding(edge: YGEdge): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetPadding(this.node, edge));\r\n  }\r\n\r\n  getComputedRight(): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetRight(this.node));\r\n  }\r\n\r\n  getComputedTop(): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetTop(this.node));\r\n  }\r\n\r\n  getComputedWidth(): number {\r\n    return YGFloatSanitize(YGNodeLayoutGetWidth(this.node));\r\n  }\r\n\r\n  getDisplay(): YGDisplay {\r\n    return YGNodeStyleGetDisplay(this.node);\r\n  }\r\n\r\n  getFlexBasis(): Value {\r\n    return fromYGValue(YGNodeStyleGetFlexBasis(this.node));\r\n  }\r\n\r\n  getFlexDirection(): YGFlexDirection {\r\n    return YGNodeStyleGetFlexDirection(this.node);\r\n  }\r\n\r\n  getFlexGrow(): number {\r\n    return YGNodeStyleGetFlexGrow(this.node);\r\n  }\r\n\r\n  getFlexShrink(): number {\r\n    return YGNodeStyleGetFlexShrink(this.node);\r\n  }\r\n\r\n  getFlexWrap(): YGWrap {\r\n    return YGNodeStyleGetFlexWrap(this.node);\r\n  }\r\n\r\n  getHeight(): Value {\r\n    return fromYGValue(YGNodeStyleGetHeight(this.node));\r\n  }\r\n\r\n  getJustifyContent(): YGJustify {\r\n    return YGNodeStyleGetJustifyContent(this.node);\r\n  }\r\n\r\n  getMargin(edge: YGEdge): Value {\r\n    return fromYGValue(YGNodeStyleGetMargin(this.node, edge));\r\n  }\r\n\r\n  getMaxHeight(): Value {\r\n    return fromYGValue(YGNodeStyleGetMaxHeight(this.node));\r\n  }\r\n\r\n  getMaxWidth(): Value {\r\n    return fromYGValue(YGNodeStyleGetMaxWidth(this.node));\r\n  }\r\n\r\n  getMinHeight(): Value {\r\n    return fromYGValue(YGNodeStyleGetMinHeight(this.node));\r\n  }\r\n\r\n  getMinWidth(): Value {\r\n    return fromYGValue(YGNodeStyleGetMinWidth(this.node));\r\n  }\r\n\r\n  getOverflow(): YGOverflow {\r\n    return YGNodeStyleGetOverflow(this.node);\r\n  }\r\n\r\n  getPadding(edge: YGEdge): Value {\r\n    return fromYGValue(YGNodeStyleGetPadding(this.node, edge));\r\n  }\r\n\r\n  getParent(): Node {\r\n    const parent: YGNode = YGNodeGetParent(this.node);\r\n    if (!parent) {\r\n      return undefined;\r\n    }\r\n\r\n    return fromYGNode(parent);\r\n  }\r\n\r\n  getPosition(edge: YGEdge): Value {\r\n    return fromYGValue(YGNodeStyleGetPosition(this.node, edge));\r\n  }\r\n\r\n  getPositionType(): YGPositionType {\r\n    return YGNodeStyleGetPositionType(this.node);\r\n  }\r\n\r\n  getWidth(): Value {\r\n    return fromYGValue(YGNodeStyleGetWidth(this.node));\r\n  }\r\n\r\n  insertChild(child: Node, index: number): void {\r\n    YGNodeInsertChild(this.node, child.node, index);\r\n  }\r\n\r\n  isDirty(): boolean {\r\n    return YGNodeIsDirty(this.node);\r\n  }\r\n\r\n  markDirty(): void {\r\n    YGNodeMarkDirty(this.node);\r\n  }\r\n\r\n  removeChild(child: Node): void {\r\n    YGNodeRemoveChild(this.node, child.node);\r\n  }\r\n\r\n  reset(): void {\r\n    // m_measureFunc.reset(nullptr);\r\n    YGNodeReset(this.node);\r\n  }\r\n\r\n  setAlignContent(alignContent: YGAlign): void {\r\n    YGNodeStyleSetAlignContent(this.node, alignContent);\r\n  }\r\n\r\n  setAlignItems(alignItems: YGAlign): void {\r\n    YGNodeStyleSetAlignItems(this.node, alignItems);\r\n  }\r\n\r\n  setAlignSelf(alignSelf: YGAlign): void {\r\n    YGNodeStyleSetAlignSelf(this.node, alignSelf);\r\n  }\r\n\r\n  setAspectRatio(aspectRatio: number): void {\r\n    YGNodeStyleSetAspectRatio(this.node, aspectRatio);\r\n  }\r\n\r\n  setBorder(edge: YGEdge, borderWidth: number): void {\r\n    YGNodeStyleSetBorder(this.node, edge, borderWidth);\r\n  }\r\n\r\n  setDisplay(display: YGDisplay): void {\r\n    YGNodeStyleSetDisplay(this.node, display);\r\n  }\r\n\r\n  setFlex(flex: number): void {\r\n    YGNodeStyleSetFlex(this.node, flex);\r\n  }\r\n\r\n  setFlexBasis(flexBasis: number | string): void {\r\n    if (typeof flexBasis === 'string') {\r\n      if (flexBasis === 'auto') {\r\n        this.setFlexBasisAuto();\r\n      } else if (flexBasis[flexBasis.length - 1] === '%') {\r\n        this.setFlexBasisPercent(parseFloat(flexBasis));\r\n      } else {\r\n        // modified: no throw\r\n        // removed -- throw new Error('Invalid input type');\r\n        return;\r\n      }\r\n    } else if (typeof flexBasis === 'number') {\r\n      YGNodeStyleSetFlexBasis(this.node, flexBasis);\r\n    }\r\n  }\r\n\r\n  setFlexBasisAuto(): void {\r\n    YGNodeStyleSetFlexBasisAuto(this.node);\r\n  }\r\n\r\n  setFlexBasisPercent(flexBasis: number): void {\r\n    YGNodeStyleSetFlexBasisPercent(this.node, flexBasis);\r\n  }\r\n\r\n  setFlexDirection(flexDirection: YGFlexDirection): void {\r\n    YGNodeStyleSetFlexDirection(this.node, flexDirection);\r\n  }\r\n\r\n  setFlexGrow(flexGrow: number): void {\r\n    YGNodeStyleSetFlexGrow(this.node, flexGrow);\r\n  }\r\n\r\n  setFlexShrink(flexShrink: number): void {\r\n    YGNodeStyleSetFlexShrink(this.node, flexShrink);\r\n  }\r\n\r\n  setFlexWrap(flexWrap: YGWrap): void {\r\n    YGNodeStyleSetFlexWrap(this.node, flexWrap);\r\n  }\r\n\r\n  setHeight(height: number | string): void {\r\n    if (typeof height === 'string') {\r\n      if (height === 'auto') {\r\n        this.setHeightAuto();\r\n      } else if (height[height.length - 1] === '%') {\r\n        this.setHeightPercent(parseFloat(height));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetHeight(this.node, height as number);\r\n    }\r\n  }\r\n\r\n  setHeightAuto(): void {\r\n    YGNodeStyleSetHeightAuto(this.node);\r\n  }\r\n\r\n  setHeightPercent(height: number): void {\r\n    YGNodeStyleSetHeightPercent(this.node, height);\r\n  }\r\n\r\n  setJustifyContent(justifyContent: YGJustify): void {\r\n    YGNodeStyleSetJustifyContent(this.node, justifyContent);\r\n  }\r\n\r\n  setMargin(edge: YGEdge, margin: number | string): void {\r\n    if (typeof margin === 'string') {\r\n      if (margin === 'auto') {\r\n        this.setMarginAuto(edge);\r\n      } else if (margin[margin.length - 1] === '%') {\r\n        this.setMarginPercent(edge, parseFloat(margin));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetMargin(this.node, edge, margin);\r\n    }\r\n  }\r\n\r\n  setMarginAuto(edge: YGEdge): void {\r\n    YGNodeStyleSetMarginAuto(this.node, edge);\r\n  }\r\n\r\n  setMarginPercent(edge: YGEdge, margin: number): void {\r\n    YGNodeStyleSetMarginPercent(this.node, edge, margin);\r\n  }\r\n\r\n  setMaxHeight(maxHeight: number | string): void {\r\n    if (typeof maxHeight === 'string') {\r\n      if (maxHeight[maxHeight.length - 1] === '%') {\r\n        this.setMaxHeightPercent(parseFloat(maxHeight));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetMaxHeight(this.node, maxHeight as number);\r\n    }\r\n  }\r\n\r\n  setMaxHeightPercent(maxHeight: number): void {\r\n    YGNodeStyleSetMaxHeightPercent(this.node, maxHeight);\r\n  }\r\n\r\n  setMaxWidth(maxWidth: number | string): void {\r\n    if (typeof maxWidth === 'string') {\r\n      if (maxWidth[maxWidth.length - 1] === '%') {\r\n        this.setMaxWidthPercent(parseFloat(maxWidth));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetMaxWidth(this.node, maxWidth as number);\r\n    }\r\n  }\r\n\r\n  setMaxWidthPercent(maxWidth: number): void {\r\n    YGNodeStyleSetMaxWidthPercent(this.node, maxWidth);\r\n  }\r\n\r\n  setMeasureFunc(measureFunc: any): void {\r\n    if (measureFunc == null) {\r\n      this.unsetMeasureFunc();\r\n    } else {\r\n      YGNodeSetMeasureFunc(this.node, measureFunc);\r\n    }\r\n  }\r\n\r\n  unsetMeasureFunc() {\r\n    YGNodeSetMeasureFunc(this.node, null);\r\n  }\r\n\r\n  setMinHeight(minHeight: number | string): void {\r\n    if (typeof minHeight === 'string') {\r\n      if (minHeight[minHeight.length - 1] === '%') {\r\n        this.setMinHeightPercent(parseFloat(minHeight));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetMinHeight(this.node, minHeight as number);\r\n    }\r\n  }\r\n\r\n  setMinHeightPercent(minHeight: number): void {\r\n    YGNodeStyleSetMinHeightPercent(this.node, minHeight);\r\n  }\r\n\r\n  setMinWidth(minWidth: number | string): void {\r\n    if (typeof minWidth === 'string') {\r\n      if (minWidth[minWidth.length - 1] === '%') {\r\n        this.setMinWidthPercent(parseFloat(minWidth));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetMinWidth(this.node, minWidth as number);\r\n    }\r\n  }\r\n\r\n  setMinWidthPercent(minWidth: number): void {\r\n    YGNodeStyleSetMinWidthPercent(this.node, minWidth);\r\n  }\r\n\r\n  setOverflow(overflow: YGOverflow): void {\r\n    YGNodeStyleSetOverflow(this.node, overflow);\r\n  }\r\n\r\n  setPadding(edge: YGEdge, padding: number | string): void {\r\n    if (typeof padding === 'string') {\r\n      if (padding[padding.length - 1] === '%') {\r\n        this.setPaddingPercent(edge, parseFloat(padding));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetPadding(this.node, edge, padding as number);\r\n    }\r\n  }\r\n\r\n  setPaddingPercent(edge: YGEdge, padding: number): void {\r\n    YGNodeStyleSetPaddingPercent(this.node, edge, padding);\r\n  }\r\n\r\n  setPosition(edge: YGEdge, position: number | string): void {\r\n    if (typeof position === 'string') {\r\n      if (position[position.length - 1] === '%') {\r\n        this.setPositionPercent(edge, parseFloat(position));\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetPosition(this.node, edge, position as number);\r\n    }\r\n  }\r\n\r\n  setPositionPercent(edge: YGEdge, position: number): void {\r\n    YGNodeStyleSetPositionPercent(this.node, edge, position);\r\n  }\r\n\r\n  setPositionType(positionType: YGPositionType): void {\r\n    YGNodeStyleSetPositionType(this.node, positionType);\r\n  }\r\n\r\n  setWidth(width: number | string): void {\r\n    if (typeof width === 'string') {\r\n      if (width[width.length - 1] === '%') {\r\n        this.setWidthPercent(parseFloat(width));\r\n      } else if (width === 'auto') {\r\n        this.setWidthAuto();\r\n      } else {\r\n        throw new Error('Invalid input type.');\r\n      }\r\n    } else {\r\n      YGNodeStyleSetWidth(this.node, width as number);\r\n    }\r\n  }\r\n\r\n  setWidthAuto(): void {\r\n    YGNodeStyleSetWidthAuto(this.node);\r\n  }\r\n\r\n  setWidthPercent(width: number): void {\r\n    YGNodeStyleSetWidthPercent(this.node, width);\r\n  }\r\n\r\n  unsetMeasureFun(): void {\r\n    YGNodeSetMeasureFunc(this.node, undefined);\r\n  }\r\n}\r\n\r\nexport function getInstanceCount(): number {\r\n  return YGNodeGetInstanceCount();\r\n}\r\n"],"names":[],"mappings":"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"}