{"version":3,"file":"maxrects-bin.js","sources":["../../../../libs/dom/src/maxrects-packer/maxrects-bin.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {EDGE_MAX_VALUE, PACKING_LOGIC, IOption} from './maxrects-packer';\nimport {Rectangle, IRectangle} from './geom/Rectangle';\nimport {Bin} from './abstract-bin';\n\nexport class MaxRectsBin<T extends IRectangle = Rectangle> extends Bin<T> {\n  public freeRects: Rectangle[] = [];\n  public rects: T[] = [];\n  private verticalExpand = false;\n  private stage: Rectangle;\n  private border: number;\n\n  constructor(\n    public maxWidth: number = EDGE_MAX_VALUE,\n    public maxHeight: number = EDGE_MAX_VALUE,\n    public padding: number = 0,\n    public options: IOption = {\n      smart: true,\n      pot: true,\n      square: true,\n      allowRotation: false,\n      tag: false,\n      border: 0,\n      logic: PACKING_LOGIC.MAX_EDGE,\n    },\n  ) {\n    super();\n    this.width = this.options.smart ? 0 : maxWidth;\n    this.height = this.options.smart ? 0 : maxHeight;\n    this.border = this.options.border ? this.options.border : 0;\n    this.freeRects.push(\n      new Rectangle(\n        this.maxWidth + this.padding - this.border * 2,\n        this.maxHeight + this.padding - this.border * 2,\n        this.border,\n        this.border,\n      ),\n    );\n    this.stage = new Rectangle(this.width, this.height);\n  }\n\n  public add(rect: T): T | undefined;\n  public add(width: number, height: number, data: any): T | undefined;\n  public add(...args: any[]): any {\n    let data: any;\n    let rect: IRectangle;\n    if (args.length === 1) {\n      if (typeof args[0] !== 'object') throw new Error('MacrectsBin.add(): Wrong parameters');\n      rect = args[0] as T;\n      // Check if rect.tag match bin.tag, if bin.tag not defined, it will accept any rect\n      const tag = rect.data && rect.data.tag ? rect.data.tag : rect.tag ? rect.tag : undefined;\n      if (this.options.tag && this.tag !== tag) return undefined;\n    } else {\n      data = args.length > 2 ? args[2] : null;\n      // Check if data.tag match bin.tag, if bin.tag not defined, it will accept any rect\n      if (this.options.tag) {\n        if (data && this.tag !== data.tag) return undefined;\n        if (!data && this.tag) return undefined;\n      }\n      rect = new Rectangle(args[0], args[1]);\n      rect.data = data;\n      rect.setDirty(false);\n    }\n\n    const result = this.place(rect);\n    if (result) this.rects.push(result);\n    return result;\n  }\n\n  public repack(): T[] | undefined {\n    const unpacked: T[] = [];\n    this.reset();\n    // re-sort rects from big to small\n    this.rects.sort((a, b) => {\n      const result = Math.max(b.width, b.height) - Math.max(a.width, a.height);\n      if (result === 0 && a.hash && b.hash) {\n        return a.hash > b.hash ? -1 : 1;\n      } else return result;\n    });\n    for (const rect of this.rects) {\n      if (!this.place(rect)) {\n        unpacked.push(rect);\n      }\n    }\n    for (const rect of unpacked) this.rects.splice(this.rects.indexOf(rect), 1);\n    return unpacked.length > 0 ? unpacked : undefined;\n  }\n\n  public reset(deepReset = false, resetOption = false): void {\n    if (deepReset) {\n      if (this.data) delete this.data;\n      if (this.tag) delete this.tag;\n      this.rects = [];\n      if (resetOption) {\n        this.options = {\n          smart: true,\n          pot: true,\n          square: true,\n          allowRotation: false,\n          tag: false,\n          border: 0,\n        };\n      }\n    }\n    this.width = this.options.smart ? 0 : this.maxWidth;\n    this.height = this.options.smart ? 0 : this.maxHeight;\n    this.border = this.options.border ? this.options.border : 0;\n    this.freeRects = [\n      new Rectangle(\n        this.maxWidth + this.padding - this.border * 2,\n        this.maxHeight + this.padding - this.border * 2,\n        this.border,\n        this.border,\n      ),\n    ];\n    this.stage = new Rectangle(this.width, this.height);\n    this._dirty = 0;\n  }\n\n  private place(rect: IRectangle): T | undefined {\n    // recheck if tag matched\n    const tag = rect.data && rect.data.tag ? rect.data.tag : rect.tag ? rect.tag : undefined;\n    if (this.options.tag && this.tag !== tag) return undefined;\n\n    let allowRotation: boolean | undefined;\n    // getter/setter do not support hasOwnProperty()\n    if (Object.prototype.hasOwnProperty.call(rect, '_allowRotation') && rect.allowRotation !== undefined) {\n      allowRotation = rect.allowRotation; // Per Rectangle allowRotation override packer settings\n    } else {\n      allowRotation = this.options.allowRotation;\n    }\n    const node = this.findNode(rect.width + this.padding, rect.height + this.padding, allowRotation);\n\n    if (node) {\n      this.updateBinSize(node);\n      let numRectToProcess = this.freeRects.length;\n      let i = 0;\n      while (i < numRectToProcess) {\n        if (this.splitNode(this.freeRects[i], node)) {\n          this.freeRects.splice(i, 1);\n          numRectToProcess--;\n          i--;\n        }\n        i++;\n      }\n      this.pruneFreeList();\n      this.verticalExpand = this.width > this.height ? true : false;\n      rect.x = node.x;\n      rect.y = node.y;\n      if (rect.rot === undefined) rect.rot = false;\n      rect.rot = node.rot ? !rect.rot : rect.rot;\n      this._dirty++;\n      return rect as T;\n    } else if (!this.verticalExpand) {\n      if (\n        this.updateBinSize(\n          new Rectangle(\n            rect.width + this.padding,\n            rect.height + this.padding,\n            this.width + this.padding - this.border,\n            this.border,\n          ),\n        ) ||\n        this.updateBinSize(\n          new Rectangle(\n            rect.width + this.padding,\n            rect.height + this.padding,\n            this.border,\n            this.height + this.padding - this.border,\n          ),\n        )\n      ) {\n        return this.place(rect);\n      }\n    } else {\n      if (\n        this.updateBinSize(\n          new Rectangle(\n            rect.width + this.padding,\n            rect.height + this.padding,\n            this.border,\n            this.height + this.padding - this.border,\n          ),\n        ) ||\n        this.updateBinSize(\n          new Rectangle(\n            rect.width + this.padding,\n            rect.height + this.padding,\n            this.width + this.padding - this.border,\n            this.border,\n          ),\n        )\n      ) {\n        return this.place(rect);\n      }\n    }\n    return undefined;\n  }\n\n  private findNode(width: number, height: number, allowRotation?: boolean): Rectangle | undefined {\n    let score: number = Number.MAX_VALUE;\n    let areaFit: number;\n    let r: Rectangle;\n    let bestNode: Rectangle | undefined;\n    for (const i in this.freeRects) {\n      r = this.freeRects[i];\n      if (r.width >= width && r.height >= height) {\n        areaFit =\n          this.options.logic === PACKING_LOGIC.MAX_AREA\n            ? r.width * r.height - width * height\n            : Math.min(r.width - width, r.height - height);\n        if (areaFit < score) {\n          bestNode = new Rectangle(width, height, r.x, r.y);\n          score = areaFit;\n        }\n      }\n\n      if (!allowRotation) continue;\n\n      // Continue to test 90-degree rotated rectangle\n      if (r.width >= height && r.height >= width) {\n        areaFit =\n          this.options.logic === PACKING_LOGIC.MAX_AREA\n            ? r.width * r.height - height * width\n            : Math.min(r.height - width, r.width - height);\n        if (areaFit < score) {\n          bestNode = new Rectangle(height, width, r.x, r.y, true); // Rotated node\n          score = areaFit;\n        }\n      }\n    }\n    return bestNode;\n  }\n\n  private splitNode(freeRect: IRectangle, usedNode: IRectangle): boolean {\n    // Test if usedNode intersect with freeRect\n    if (!freeRect.collide(usedNode)) return false;\n\n    // Do vertical split\n    if (usedNode.x < freeRect.x + freeRect.width && usedNode.x + usedNode.width > freeRect.x) {\n      // New node at the top side of the used node\n      if (usedNode.y > freeRect.y && usedNode.y < freeRect.y + freeRect.height) {\n        const newNode: Rectangle = new Rectangle(\n          freeRect.width,\n          usedNode.y - freeRect.y,\n          freeRect.x,\n          freeRect.y,\n        );\n        this.freeRects.push(newNode);\n      }\n      // New node at the bottom side of the used node\n      if (usedNode.y + usedNode.height < freeRect.y + freeRect.height) {\n        const newNode = new Rectangle(\n          freeRect.width,\n          freeRect.y + freeRect.height - (usedNode.y + usedNode.height),\n          freeRect.x,\n          usedNode.y + usedNode.height,\n        );\n        this.freeRects.push(newNode);\n      }\n    }\n\n    // Do Horizontal split\n    if (usedNode.y < freeRect.y + freeRect.height && usedNode.y + usedNode.height > freeRect.y) {\n      // New node at the left side of the used node.\n      if (usedNode.x > freeRect.x && usedNode.x < freeRect.x + freeRect.width) {\n        const newNode = new Rectangle(\n          usedNode.x - freeRect.x,\n          freeRect.height,\n          freeRect.x,\n          freeRect.y,\n        );\n        this.freeRects.push(newNode);\n      }\n      // New node at the right side of the used node.\n      if (usedNode.x + usedNode.width < freeRect.x + freeRect.width) {\n        const newNode = new Rectangle(\n          freeRect.x + freeRect.width - (usedNode.x + usedNode.width),\n          freeRect.height,\n          usedNode.x + usedNode.width,\n          freeRect.y,\n        );\n        this.freeRects.push(newNode);\n      }\n    }\n    return true;\n  }\n\n  private pruneFreeList() {\n    // Go through each pair of freeRects and remove any rects that is redundant\n    let i = 0;\n    let j = 0;\n    let len: number = this.freeRects.length;\n    while (i < len) {\n      j = i + 1;\n      const tmpRect1 = this.freeRects[i];\n      while (j < len) {\n        const tmpRect2 = this.freeRects[j];\n        if (tmpRect2.contain(tmpRect1)) {\n          this.freeRects.splice(i, 1);\n          i--;\n          len--;\n          break;\n        }\n        if (tmpRect1.contain(tmpRect2)) {\n          this.freeRects.splice(j, 1);\n          j--;\n          len--;\n        }\n        j++;\n      }\n      i++;\n    }\n  }\n\n  private updateBinSize(node: IRectangle): boolean {\n    if (!this.options.smart) return false;\n    if (this.stage.contain(node)) return false;\n    let tmpWidth: number = Math.max(this.width, node.x + node.width - this.padding + this.border);\n    let tmpHeight: number = Math.max(\n      this.height,\n      node.y + node.height - this.padding + this.border,\n    );\n    if (this.options.allowRotation) {\n      // do extra test on rotated node whether it's a better choice\n      const rotWidth: number = Math.max(\n        this.width,\n        node.x + node.height - this.padding + this.border,\n      );\n      const rotHeight: number = Math.max(\n        this.height,\n        node.y + node.width - this.padding + this.border,\n      );\n      if (rotWidth * rotHeight < tmpWidth * tmpHeight) {\n        tmpWidth = rotWidth;\n        tmpHeight = rotHeight;\n      }\n    }\n    if (this.options.pot) {\n      tmpWidth = Math.pow(2, Math.ceil(Math.log(tmpWidth) * Math.LOG2E));\n      tmpHeight = Math.pow(2, Math.ceil(Math.log(tmpHeight) * Math.LOG2E));\n    }\n    if (this.options.square) {\n      tmpWidth = tmpHeight = Math.max(tmpWidth, tmpHeight);\n    }\n    if (tmpWidth > this.maxWidth + this.padding || tmpHeight > this.maxHeight + this.padding) {\n      return false;\n    }\n    this.expandFreeRects(tmpWidth + this.padding, tmpHeight + this.padding);\n    this.width = this.stage.width = tmpWidth;\n    this.height = this.stage.height = tmpHeight;\n    return true;\n  }\n\n  private expandFreeRects(width: number, height: number) {\n    this.freeRects.forEach((freeRect) => {\n      if (freeRect.x + freeRect.width >= Math.min(this.width + this.padding - this.border, width)) {\n        freeRect.width = width - freeRect.x - this.border;\n      }\n      if (\n        freeRect.y + freeRect.height >=\n        Math.min(this.height + this.padding - this.border, height)\n      ) {\n        freeRect.height = height - freeRect.y - this.border;\n      }\n    }, this);\n    this.freeRects.push(\n      new Rectangle(\n        width - this.width - this.padding,\n        height - this.border * 2,\n        this.width + this.padding - this.border,\n        this.border,\n      ),\n    );\n    this.freeRects.push(\n      new Rectangle(\n        width - this.border * 2,\n        height - this.height - this.padding,\n        this.border,\n        this.height + this.padding - this.border,\n      ),\n    );\n    this.freeRects = this.freeRects.filter((freeRect) => {\n      return !(\n        freeRect.width <= 0 ||\n        freeRect.height <= 0 ||\n        freeRect.x < this.border ||\n        freeRect.y < this.border\n      );\n    });\n    this.pruneFreeList();\n  }\n}\n"],"names":[],"mappings":"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"}