{"version":3,"file":"glyph_manager.js","sources":["../../../libs/dom/src/glyph_manager.ts"],"sourcesContent":["import { Font, FontCanvas } from './font';\nimport { GUIRenderer } from './renderer';\nimport { RColor } from './types';\nimport { AtlasManager } from './atlas_manager';\nimport type { Texture2D } from '@sophon/device';\n\nexport interface IGlyphInfo {\n  atlasIndex: number;\n  width: number;\n  height: number;\n  uMin: number;\n  vMin: number;\n  uMax: number;\n  vMax: number;\n}\n\nexport class GlyphManager extends AtlasManager {\n  constructor(\n    renderer: GUIRenderer,\n    cacheWidth?: number,\n    cacheHeight?: number,\n    cachePadding?: number,\n  ) {\n    super(renderer, Math.max(cacheWidth || 0, 0), cacheHeight, cachePadding, true);\n    this._atlasRestoreHandler = async tex => {\n      if (this._atlasList.length > 0) {\n        this.clear();\n      }\n    };\n  }\n  getGlyphTexture(index: number): Texture2D {\n    return this.getAtlasTexture(index);\n  }\n  getGlyphInfo(char: string, font: Font, color: RColor): IGlyphInfo {\n    if (!char || !font || !color) {\n      return null;\n    }\n    let glyphInfo = this.getAtlasInfo(this._hash(char, font, color));\n    if (!glyphInfo) {\n      glyphInfo = this._cacheGlyph(char, font, color);\n      glyphInfo.width = Math.round(glyphInfo.width * (font.maxHeight / font.maxHeightScaled));\n      glyphInfo.height = font.maxHeight;\n    }\n    return glyphInfo;\n  }\n  measureStringWidth(str: string, charMargin: number, font: Font) {\n    let w = 0;\n    for (const ch of str) {\n      w += charMargin + this.getCharWidth(ch, font);\n    }\n    return w;\n  }\n  clipStringToWidth(str: string, width: number, charMargin: number, start: number, font: Font) {\n    let sum = 0;\n    let i = start;\n    for (; i < str.length; i++) {\n      sum += charMargin + this.getCharWidth(str[i], font);\n      if (sum > width) {\n        break;\n      }\n    }\n    return i - start;\n  }\n  /** @internal */\n  private _normalizeColor(color: RColor): string {\n    const r = `0${(Math.round(color.r * 255) & 0xff).toString(16)}`.slice(-2);\n    const g = `0${(Math.round(color.g * 255) & 0xff).toString(16)}`.slice(-2);\n    const b = `0${(Math.round(color.b * 255) & 0xff).toString(16)}`.slice(-2);\n    return `#${r}${g}${b}`;\n  }\n  /** @internal */\n  private _hash(char: string, font: Font, color: RColor) {\n    const clr = this._renderer.supportColorComposition() ? '' : `@${this._normalizeColor(color)}`;\n    return `${font.family}@${font.size}${clr}&${char}`;\n  }\n  /** @internal */\n  private _cacheGlyph(char: string, font: Font, color: RColor): IGlyphInfo {\n    const bitmap = this._getGlyphBitmap(char, font, color) as ImageData;\n    return this.pushBitmap(this._hash(char, font, color), bitmap);\n  }\n  getCharWidth(char: string, font: Font): number {\n    if (!font) {\n      return 0;\n    }\n    FontCanvas.font = font.fontNameScaled;\n    const metric = FontCanvas.context.measureText(char);\n    let w = metric.width;\n    if (w === 0) {\n      return 0;\n    }\n    if (typeof metric.actualBoundingBoxRight === 'number') {\n      w = Math.floor(Math.max(w, metric.actualBoundingBoxRight) + 0.8);\n    }\n    w = Math.round(w * (font.maxHeight / font.maxHeightScaled))\n    return w;\n  }\n  /** @internal */\n  private _getGlyphBitmap(\n    char: string,\n    font: Font,\n    color: RColor,\n  ): ImageData | { x: number; y: number; w: number; h: number } {\n    if (!font) {\n      return null;\n    }\n    FontCanvas.font = font.fontNameScaled;\n    const metric = FontCanvas.context.measureText(char);\n    let w = metric.width;\n    if (w === 0) {\n      return null;\n    }\n    if (typeof metric.actualBoundingBoxRight === 'number') {\n      w = Math.floor(Math.max(w, metric.actualBoundingBoxRight) + 0.8);\n    }\n    const h = font.maxHeightScaled;\n    FontCanvas.context.fillStyle = this._renderer.supportColorComposition()\n      ? '#fff'\n      : this._normalizeColor(color);\n    FontCanvas.context.clearRect(0, 0, w + 2, h);\n    FontCanvas.context.fillText(char, 0, -font.topScaled);\n    return FontCanvas.context.getImageData(0, 0, w, h);\n  }\n}\n"],"names":[],"mappings":"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"}