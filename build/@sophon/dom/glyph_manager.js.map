{"version":3,"file":"glyph_manager.js","sources":["../../../libs/dom/src/glyph_manager.ts"],"sourcesContent":["import { Font, FontCanvas } from './font';\r\nimport { GUIRenderer } from './renderer';\r\nimport { RColor } from './types';\r\nimport { AtlasManager } from './atlas_manager';\r\nimport type { Texture2D } from '@sophon/device';\r\n\r\nexport interface IGlyphInfo {\r\n  atlasIndex: number;\r\n  width: number;\r\n  height: number;\r\n  uMin: number;\r\n  vMin: number;\r\n  uMax: number;\r\n  vMax: number;\r\n}\r\n\r\nexport class GlyphManager extends AtlasManager {\r\n  constructor(\r\n    renderer: GUIRenderer,\r\n    cacheWidth?: number,\r\n    cacheHeight?: number,\r\n    cachePadding?: number,\r\n  ) {\r\n    super(renderer, Math.max(cacheWidth || 0, 0), cacheHeight, cachePadding, true);\r\n    this._atlasRestoreHandler = async tex => {\r\n      if (this._atlasList.length > 0) {\r\n        this.clear();\r\n      }\r\n    };\r\n  }\r\n  getGlyphTexture(index: number): Texture2D {\r\n    return this.getAtlasTexture(index);\r\n  }\r\n  getGlyphInfo(char: string, font: Font, color: RColor): IGlyphInfo {\r\n    if (!char || !font || !color) {\r\n      return null;\r\n    }\r\n    let glyphInfo = this.getAtlasInfo(this._hash(char, font, color));\r\n    if (!glyphInfo) {\r\n      glyphInfo = this._cacheGlyph(char, font, color);\r\n      glyphInfo.width = Math.round(glyphInfo.width * (font.maxHeight / font.maxHeightScaled));\r\n      glyphInfo.height = font.maxHeight;\r\n    }\r\n    return glyphInfo;\r\n  }\r\n  measureStringWidth(str: string, charMargin: number, font: Font) {\r\n    let w = 0;\r\n    for (const ch of str) {\r\n      w += charMargin + this.getCharWidth(ch, font);\r\n    }\r\n    return w;\r\n  }\r\n  clipStringToWidth(str: string, width: number, charMargin: number, start: number, font: Font) {\r\n    let sum = 0;\r\n    let i = start;\r\n    for (; i < str.length; i++) {\r\n      sum += charMargin + this.getCharWidth(str[i], font);\r\n      if (sum > width) {\r\n        break;\r\n      }\r\n    }\r\n    return i - start;\r\n  }\r\n  /** @internal */\r\n  private _normalizeColor(color: RColor): string {\r\n    const r = `0${(Math.round(color.r * 255) & 0xff).toString(16)}`.slice(-2);\r\n    const g = `0${(Math.round(color.g * 255) & 0xff).toString(16)}`.slice(-2);\r\n    const b = `0${(Math.round(color.b * 255) & 0xff).toString(16)}`.slice(-2);\r\n    return `#${r}${g}${b}`;\r\n  }\r\n  /** @internal */\r\n  private _hash(char: string, font: Font, color: RColor) {\r\n    const clr = this._renderer.supportColorComposition() ? '' : `@${this._normalizeColor(color)}`;\r\n    return `${font.family}@${font.size}${clr}&${char}`;\r\n  }\r\n  /** @internal */\r\n  private _cacheGlyph(char: string, font: Font, color: RColor): IGlyphInfo {\r\n    const bitmap = this._getGlyphBitmap(char, font, color) as ImageData;\r\n    return this.pushBitmap(this._hash(char, font, color), bitmap);\r\n  }\r\n  getCharWidth(char: string, font: Font): number {\r\n    if (!font) {\r\n      return 0;\r\n    }\r\n    FontCanvas.font = font.fontNameScaled;\r\n    const metric = FontCanvas.context.measureText(char);\r\n    let w = metric.width;\r\n    if (w === 0) {\r\n      return 0;\r\n    }\r\n    if (typeof metric.actualBoundingBoxRight === 'number') {\r\n      w = Math.floor(Math.max(w, metric.actualBoundingBoxRight) + 0.8);\r\n    }\r\n    w = Math.round(w * (font.maxHeight / font.maxHeightScaled))\r\n    return w;\r\n  }\r\n  /** @internal */\r\n  private _getGlyphBitmap(\r\n    char: string,\r\n    font: Font,\r\n    color: RColor,\r\n  ): ImageData | { x: number; y: number; w: number; h: number } {\r\n    if (!font) {\r\n      return null;\r\n    }\r\n    FontCanvas.font = font.fontNameScaled;\r\n    const metric = FontCanvas.context.measureText(char);\r\n    let w = metric.width;\r\n    if (w === 0) {\r\n      return null;\r\n    }\r\n    if (typeof metric.actualBoundingBoxRight === 'number') {\r\n      w = Math.floor(Math.max(w, metric.actualBoundingBoxRight) + 0.8);\r\n    }\r\n    const h = font.maxHeightScaled;\r\n    FontCanvas.context.fillStyle = this._renderer.supportColorComposition()\r\n      ? '#fff'\r\n      : this._normalizeColor(color);\r\n    FontCanvas.context.clearRect(0, 0, w + 2, h);\r\n    FontCanvas.context.fillText(char, 0, -font.topScaled);\r\n    return FontCanvas.context.getImageData(0, 0, w, h);\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}