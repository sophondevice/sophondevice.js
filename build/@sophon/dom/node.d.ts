import { REventTarget, REventListener, REventHandlerOptions } from '@sophon/base';
import { RCoord } from './types';
import { RPrimitiveBatchList } from './primitive';
import { RNodeList } from './nodelist';
import { UIRect } from './layout';
import { ElementStyle } from './style';
import { RMouseEvent } from './events';
import { NodeType } from './values';
import type { RElement } from './element';
import type { RDocument } from './document';
import type { GUIRenderer } from './renderer';
import type { GUI } from './gui';
export interface RNode extends REventTarget {
    addEventListener(type: 'mousedown' | 'mouseup' | 'mousemove' | 'mouseclick' | 'mousedblclick', listener: REventListener<RMouseEvent>, options?: REventHandlerOptions): void;
    addEventListener(type: string, listener: REventListener, options?: REventHandlerOptions): void;
}
export interface INodeVisitor {
    beginTraverseNode(w: RNode): any;
    endTraverseNode(w: RNode): any;
    visitNode(w: RNode): void;
}
export declare class RNode extends REventTarget {
    static readonly UNKNOWN_NODE = NodeType.UNKNOWN_NODE;
    static readonly ELEMENT_NODE = NodeType.ELEMENT_NODE;
    static readonly TEXT_NODE = NodeType.TEXT_NODE;
    static readonly DOCUMENT_NODE = NodeType.DOCUMENT_NODE;
    get gui(): GUI;
    get nodeType(): number;
    get nodeName(): string;
    get nodeValue(): string;
    get ownerDocument(): RDocument;
    get isConnected(): boolean;
    get parentNode(): RNode;
    get parentElement(): RElement;
    get childNodes(): RNodeList;
    get style(): ElementStyle;
    get textContent(): string;
    set textContent(text: string);
    get batchList(): RPrimitiveBatchList;
    get customDraw(): boolean;
    set customDraw(val: boolean);
    isElement(): this is RElement;
    isDocument(): this is RDocument;
    normalize(): void;
    get scrollX(): number;
    set scrollX(val: number);
    setScrollX(val: number): void;
    get scrollY(): number;
    set scrollY(val: number);
    setScrollY(val: number): void;
    setScroll(x: number, y: number): void;
    getRect(): UIRect;
    getClippedRect(): UIRect;
    getClientRect(): UIRect;
    getBorderRect(): UIRect;
    get nextSibling(): RNode;
    get previousSibling(): RNode;
    cloneNode(deep: boolean): RNode;
    getRootNode(): RNode;
    appendChild(child: RNode): RNode;
    insertBefore(newElement: RNode, referenceElement: RNode): RNode;
    removeChild(child: RNode): RNode;
    replaceChild(newChild: RNode, oldChild: RNode): RNode;
    get firstChild(): RNode;
    get lastChild(): RNode;
    contains(child: RNode): boolean;
    hasChildNodes(): boolean;
    setCapture(): void;
    releaseCapture(): void;
    traverse(v: INodeVisitor, inverse?: boolean, render?: boolean): void;
    checkContents(): void;
    draw(renderer: GUIRenderer): void;
    toAbsolute(v?: RCoord): RCoord;
}
