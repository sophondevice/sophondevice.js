{"version":3,"file":"primitive.js","sources":["../../../libs/dom/src/primitive.ts"],"sourcesContent":["import { UIRect } from './layout';\nimport { RColor } from './types';\nimport type { Texture2D } from '@sophon/device';\n\nexport abstract class RPrimitive {\n  abstract forEach(callback: (x: number, y: number, u: number, v: number) => void, thisArg?: unknown);\n  abstract clipToRect(x: number, y: number, w: number, h: number): RPrimitive;\n  abstract clone(): RPrimitive;\n}\n\ntype Vertex = { x: number; y: number; u?: number; v?: number };\nexport class RPolygonPrimitive extends RPrimitive {\n  /** @internal */\n  private _vertices: Vertex[];\n  constructor(vertices?: Vertex[]) {\n    super();\n    this._vertices = vertices || [];\n  }\n  get vertices() {\n    return this._vertices;\n  }\n  set vertices(v) {\n    this._vertices = v || [];\n  }\n  clone(): RPrimitive {\n    const copy = new RPolygonPrimitive();\n    copy._vertices = this._vertices.map((v) => {\n      return { ...v };\n    });\n    return copy;\n  }\n  forEach(callback: (x: number, y: number, u: number, v: number) => void, thisArg?: unknown) {\n    const indices: number[] = [];\n    if (this._vertices.length > 2) {\n      const numQuads = Math.ceil((this._vertices.length - 2) / 2);\n      for (let i = 0; i < numQuads; i++) {\n        indices.push(0);\n        indices.push(i * 2 + 1);\n        indices.push(i * 2 + 2);\n        indices.push(Math.min(this._vertices.length - 1, i * 2 + 3));\n      }\n    }\n    for (const i of indices) {\n      const v = this._vertices[i];\n      callback.call(thisArg, v.x, v.y, v.u || 0, v.v || 0);\n    }\n  }\n  clipToRect(x: number, y: number, w: number, h: number): RPrimitive {\n    if (this._vertices.length < 3) {\n      return null;\n    }\n    // use Sutherland Hodgeman algorithm\n    const pingpong: Vertex[][] = [[], []];\n    let current = 0;\n    pingpong[current] = [...this._vertices];\n    const classify: ((v: Vertex) => boolean)[] = [\n      (v: Vertex): boolean => v.x >= x, // left\n      (v: Vertex): boolean => v.x <= x + w, // right\n      (v: Vertex): boolean => v.y >= y, // top\n      (v: Vertex): boolean => v.y <= y + h, // bottom\n    ];\n    const intersect: ((v1: Vertex, v2: Vertex) => Vertex)[] = [\n      (v1: Vertex, v2: Vertex): Vertex =>\n        this._interpolateVertex(v1, v2, (x - v1.x) / (v2.x - v1.x)), // left\n      (v1: Vertex, v2: Vertex): Vertex =>\n        this._interpolateVertex(v1, v2, (x + w - v1.x) / (v2.x - v1.x)), // right\n      (v1: Vertex, v2: Vertex): Vertex =>\n        this._interpolateVertex(v1, v2, (y - v1.y) / (v2.y - v1.y)), // top\n      (v1: Vertex, v2: Vertex): Vertex =>\n        this._interpolateVertex(v1, v2, (y + h - v1.y) / (v2.y - v1.y)), // bottom\n    ];\n    for (let pass = 0; pass < 4; pass++) {\n      const fnClassify = classify[pass];\n      const fnIntersect = intersect[pass];\n      const src = pingpong[current];\n      const dest = pingpong[1 - current];\n      dest.length = 0;\n      for (let i = 0; i < src.length; i++) {\n        const j = (i + 1) % src.length;\n        const firstIn = fnClassify(src[i]);\n        const secondIn = fnClassify(src[j]);\n        if (firstIn) {\n          if (secondIn) {\n            dest.push(src[j]);\n          } else {\n            dest.push(fnIntersect(src[i], src[j]));\n          }\n        } else if (secondIn) {\n          dest.push(fnIntersect(src[i], src[j]), src[j]);\n        }\n      }\n      current = 1 - current;\n    }\n    if (pingpong[current].length === 0) {\n      return null;\n    }\n    const ret = new RPolygonPrimitive();\n    ret.vertices = pingpong[current];\n    return ret;\n  }\n  /** @internal */\n  private _interpolateVertex(v1: Vertex, v2: Vertex, factor: number): Vertex {\n    const s1 = v1.u || 0;\n    const t1 = v1.v || 0;\n    const s2 = v2.u || 0;\n    const t2 = v2.v || 0;\n    return {\n      x: Math.round(v1.x + (v2.x - v1.x) * factor),\n      y: Math.round(v1.y + (v2.y - v1.y) * factor),\n      u: s1 + (s2 - s1) * factor,\n      v: t1 + (t2 - t1) * factor,\n    };\n  }\n}\n\nexport class RRectPrimitive extends RPrimitive {\n  /** @internal */\n  private _x1: number;\n  /** @internal */\n  private _y1: number;\n  /** @internal */\n  private _x2: number;\n  /** @internal */\n  private _y2: number;\n  /** @internal */\n  private _u1: number;\n  /** @internal */\n  private _v1: number;\n  /** @internal */\n  private _u2: number;\n  /** @internal */\n  private _v2: number;\n  constructor(\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    uMin: number,\n    vMin: number,\n    uMax: number,\n    vMax: number,\n  ) {\n    super();\n    this._x1 = x;\n    this._y1 = y;\n    this._x2 = x + w;\n    this._y2 = y + h;\n    this._u1 = uMin;\n    this._v1 = vMin;\n    this._u2 = uMax;\n    this._v2 = vMax;\n  }\n  clone(): RPrimitive {\n    return new RRectPrimitive(\n      this._x1,\n      this._y1,\n      this._x2 - this._x1,\n      this._y2 - this._y1,\n      this._u1,\n      this._v1,\n      this._u2,\n      this._v2,\n    );\n  }\n  forEach(callback: (x: number, y: number, u: number, v: number) => void, thisArg?: unknown) {\n    const x = [this._x1, this._x2, this._x2, this._x1];\n    const y = [this._y1, this._y1, this._y2, this._y2];\n    const u = [this._u1, this._u2, this._u2, this._u1];\n    const v = [this._v1, this._v1, this._v2, this._v2];\n    for (let i = 0; i < 4; i++) {\n      callback.call(thisArg, x[i], y[i], u[i], v[i]);\n    }\n  }\n  clipToRect(x: number, y: number, w: number, h: number): RPrimitive {\n    const x1 = Math.max(x, this._x1);\n    const y1 = Math.max(y, this._y1);\n    const x2 = Math.min(x + w, this._x2);\n    const y2 = Math.min(y + h, this._y2);\n    if (x1 >= x2 || y1 >= y2) {\n      return null;\n    }\n    const du = this._u2 - this._u1;\n    const dv = this._v2 - this._v1;\n    const dw = this._x2 - this._x1;\n    const dh = this._y2 - this._y1;\n    const u1 = this._u1 + (du * (x1 - this._x1)) / dw;\n    const v1 = this._v1 + (dv * (y1 - this._y1)) / dh;\n    const u2 = this._u2 - (du * (this._x2 - x2)) / dw;\n    const v2 = this._v2 - (dv * (this._y2 - y2)) / dh;\n\n    return new RRectPrimitive(x1, y1, x2 - x1, y2 - y1, u1, v1, u2, v2);\n  }\n}\n\nexport class RPrimitiveBatchList {\n  /** @internal */\n  private _batchList: { batch: RPrimitiveBatch; vertices: Float32Array }[];\n  /** @internal */\n  private _absoluteX: number;\n  /** @internal */\n  private _absoluteY: number;\n  /** @internal */\n  private _needUpdate: boolean;\n  constructor(x: number, y: number) {\n    this._absoluteX = x;\n    this._absoluteY = y;\n    this._batchList = [];\n    this._needUpdate = false;\n  }\n  get length(): number {\n    return this._batchList.length;\n  }\n  get x(): number {\n    return this._absoluteX;\n  }\n  set x(val: number) {\n    if (this._absoluteX !== val) {\n      this._absoluteX = val;\n      this._needUpdate = true;\n    }\n  }\n  get y(): number {\n    return this._absoluteY;\n  }\n  set y(val: number) {\n    if (this._absoluteY !== val) {\n      this._absoluteY = val;\n      this._needUpdate = true;\n    }\n  }\n  clear() {\n    this._batchList = [];\n    this._needUpdate = false;\n  }\n  clone(transformOptions?: {\n    textureTransformFunc?: (t: Texture2D) => Texture2D;\n    colorTransformFunc?: (c: RColor) => RColor;\n  }): RPrimitiveBatchList {\n    const copy = new RPrimitiveBatchList(this._absoluteX, this._absoluteY);\n    copy._batchList = this._batchList.map((bv) => {\n      return { batch: bv.batch.clone(transformOptions), vertices: null };\n    });\n    copy._needUpdate = true;\n    return copy;\n  }\n  getBatch(index: number): RPrimitiveBatch {\n    return this._batchList[index]?.batch || null;\n  }\n  getVertices(index: number): Float32Array {\n    if (this._needUpdate) {\n      this._needUpdate = false;\n      this._updateVertices();\n    }\n    return this._batchList[index]?.vertices || null;\n  }\n  addBatch(batch: RPrimitiveBatch) {\n    if (batch) {\n      const lastBatch = this._batchList[this._batchList.length - 1].batch || null;\n      if (\n        !lastBatch ||\n        lastBatch.texture !== batch.texture ||\n        lastBatch.color.r !== batch.color.r ||\n        lastBatch.color.g !== batch.color.g ||\n        lastBatch.color.b !== batch.color.b ||\n        lastBatch.color.a !== batch.color.a\n      ) {\n        this._batchList.push({ batch: batch, vertices: null });\n      } else {\n        for (let i = 0; i < batch.length; i++) {\n          lastBatch.addPrimitive(batch.getPrimitive(i));\n        }\n      }\n      this._needUpdate = true;\n    }\n  }\n  addPrimitive(prim: RPrimitive, clipper: UIRect, tex?: Texture2D, color?: RColor) {\n    if (prim && clipper) {\n      tex = tex || null;\n      color = color || { r: 1, g: 1, b: 1, a: 1 };\n      if (color.a > 0) {\n        let lastBatch = this._batchList[this._batchList.length - 1]?.batch || null;\n        if (\n          !lastBatch ||\n          lastBatch.texture !== tex ||\n          lastBatch.color.r !== color.r ||\n          lastBatch.color.g !== color.g ||\n          lastBatch.color.b !== color.b ||\n          lastBatch.color.a !== color.a ||\n          !lastBatch.isSameClipper(clipper)\n        ) {\n          lastBatch = new RPrimitiveBatch(clipper);\n          lastBatch.texture = tex;\n          lastBatch.color = color;\n          this._batchList.push({ batch: lastBatch, vertices: null });\n        }\n        lastBatch.addPrimitive(prim);\n        this._needUpdate = true;\n      }\n    }\n  }\n  /** @internal */\n  private _updateVertices() {\n    for (const batch of this._batchList) {\n      const verts: number[] = [];\n      for (let prim = 0; prim < batch.batch.length; prim++) {\n        const primitive = batch.batch.getPrimitive(prim);\n        const color = batch.batch.color;\n        primitive.forEach((x, y, u, v) => {\n          verts.push(\n            x + this._absoluteX,\n            y + this._absoluteY,\n            -50,\n            color.r,\n            color.g,\n            color.b,\n            color.a,\n            u,\n            v,\n          );\n        });\n      }\n      batch.vertices = new Float32Array(verts);\n    }\n  }\n}\n\nexport class RPrimitiveBatch {\n  /** @internal */\n  private _clippedRect: UIRect;\n  /** @internal */\n  private _tex: Texture2D;\n  /** @internal */\n  private _color: RColor;\n  /** @internal */\n  private _primitives: RPrimitive[];\n  constructor(clipper: UIRect) {\n    if (!clipper) {\n      throw new Error('Failed to construct RPrimitiveBatch: clipper must not be null');\n    }\n    this._clippedRect = clipper;\n    this._tex = null;\n    this._color = { r: 1, g: 1, b: 1, a: 1 };\n    this._primitives = [];\n  }\n  get texture(): Texture2D {\n    return this._tex;\n  }\n  set texture(tex: Texture2D) {\n    this._tex = tex;\n  }\n  get color(): RColor {\n    return this._color;\n  }\n  set color(clr: RColor) {\n    clr = clr || { r: 1, g: 1, b: 1, a: 1 };\n    this._color.r = clr.r;\n    this._color.g = clr.g;\n    this._color.b = clr.b;\n    this._color.a = clr.a;\n  }\n  get length(): number {\n    return this._primitives.length;\n  }\n  clone(transformOptions?: {\n    textureTransformFunc?: (t: Texture2D) => Texture2D;\n    colorTransformFunc?: (c: RColor) => RColor;\n  }): RPrimitiveBatch {\n    const copy = new RPrimitiveBatch({ ...this._clippedRect });\n    copy._tex = transformOptions?.textureTransformFunc\n      ? transformOptions.textureTransformFunc(this._tex)\n      : this._tex;\n    copy._color = transformOptions?.colorTransformFunc\n      ? transformOptions.colorTransformFunc(this._color)\n      : { ...this._color };\n    copy._primitives = this._primitives.map((prim) => prim.clone());\n    return copy;\n  }\n  getPrimitive(index: number): RPrimitive {\n    return this._primitives[index] || null;\n  }\n  addPrimitive(prim: RPrimitive) {\n    if (prim && this._primitives.indexOf(prim) < 0) {\n      if (this._clippedRect) {\n        prim = prim.clipToRect(\n          this._clippedRect.x,\n          this._clippedRect.y,\n          this._clippedRect.width,\n          this._clippedRect.height,\n        );\n      }\n      if (prim) {\n        this._primitives.push(prim);\n      }\n    }\n  }\n  setClipper(rect: UIRect) {\n    this._clippedRect = rect ? { ...rect } : null;\n  }\n  isSameClipper(rc: UIRect) {\n    return (\n      rc.x !== this._clippedRect.x ||\n      rc.y !== this._clippedRect.y ||\n      rc.width !== this._clippedRect.width ||\n      rc.height !== this._clippedRect.height\n    );\n  }\n  clear() {\n    this._primitives.length = 0;\n  }\n}\n"],"names":[],"mappings":"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"}